{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stemmer","stopWordFilter","trimmer"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"<code>chickenstats</code>","text":"<p>Welcome to the technical documentation &amp; reference materials for chickenstats, an open-source Python package for scraping &amp; analyzing sports data.</p> <p></p> <p>With just a few lines of code:</p> <ul> <li>Scrape &amp; manipulate data from various NHL endpoints, leveraging  chicken_nhl, which includes an open-source xG model for shot quality metrics</li> <li>Augment play-by-play data &amp; generate custom aggregations from raw csv files downloaded from Evolving-Hockey (subscription required) with  evolving_hockey</li> </ul> <p>Here you can find detailed guides &amp; explanations for most features. The package is under active development - download the latest version (1.8.0) for the most up-to-date features &amp; be sure to consult the correct documentation .</p>"},{"location":"#installation","title":"Installation","text":"<p><code>chickenstats</code> requires Python 3.10 or greater &amp; runs on the latest stable versions of Linux, macOS, &amp; Windows operating systems.(1) You can install it through PyPi:</p> <ol> <li>Best practice is to develop in an isolated virtual environment (conda or otherwise), but who's a chicken to judge?</li> </ol> <pre><code>pip install chickenstats\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p><code>chickenstats</code> is structured as two underlying modules, each used with different data sources: <code>chickenstats.chicken_nhl</code> and <code>chickenstats.evolving_hockey</code>.(1)</p> <ol> <li>The package is under active development - features will be added or modified over time, but this structure will be consistent </li> </ol> chicken_nhl evolving_hockey <p> chicken_nhl</p> <p><code>chickenstats.chicken_nhl</code> allows you to scrape play-by-play data and aggregate individual, line, and team statistics, with an open-source xG model included out-of-the-box.</p> <p>After importing the module, scrape the schedule for game IDs, then play-by-play data for your team of choice:</p> <pre><code>from chickenstats.chicken_nhl import Season, Scraper\n\nseason = Season(2024)\n\nschedule = season.schedule(\"NSH\") # (1)!\ngame_ids = schedule.loc[schedule.game_state == \"OFF\"].game_id.tolist() # (2)!\n\nscraper = Scraper(game_ids)\n\nplay_by_play = scraper.play_by_play # (3)!\n</code></pre> <ol> <li>Replace Nashville with the three-letter code of the team of your choice. Leaving it blank will scrape everyone's schedule for that year</li> <li>Other game states include LIVE and FUT</li> <li>Scrapes one game every three seconds</li> </ol> Info <p>If you have already scraped or aggregated data, you'll notice slightly different behaviors than the simple guide below. <code>chickenstats.chicken_nhl</code> stores all data already scraped or aggregated, so it can be quickly provided when the relevant attribute is called (e.g., if you have already called <code>Scraper.play_by_play</code> and you have not added any new game IDs to the Scraper object, calling <code>Scraper.play_by_play</code> will return the dataframe, without having to re-scrape the data). </p> <p>You can reset attributes with a matching <code>prep_</code> method (e.g., <code>Scraper.stats</code> can be reset with <code>Scraper.prep_stats()</code>). See  Design for more on this dynamic</p> <p>You can then aggregate the play-by-play data for individual and on-ice statistics with one line of code:</p> <pre><code>stats = scraper.stats # (1)!\n</code></pre> <ol> <li>This runs <code>scraper.prep_stats()</code> behind the scenes, if you have not already done so. By default aggregates to stats game level, but does not include teammates, opposition, or score state in the aggregation fields.</li> </ol> <p>It's very easy to introduce additional detail to the aggregations, including for teammates on-ice:</p> <pre><code>scraper.prep_stats(teammates=True) # (1)!\nstats = scraper.stats\n</code></pre> <ol> <li>The Scraper object saves the prior aggregation to the <code>scraper.stats</code> attribute, so it needs to be reset. Then the attribute can be re-called</li> </ol> <p>There is similar functionality for line and team stats:</p> <pre><code>scraper.prep_lines(position=\"f\") # (1)!\nforward_lines = scraper.lines\n\nteam_stats = scraper.team_stats # (2)!\n</code></pre> <ol> <li>This step isn't strictly necessary for forwards - they're the default line aggregation. Provide \"d\" instead of \"f\" for defensive line stats</li> <li>Similar to <code>scraper.stats</code>, runs <code>scraper.prep_team_stats()</code> in the background</li> </ol> <p>For additional information on usage and functionality, consult the relevant  User guide</p> <p> evolving_hockey</p> <p>The <code>chickenstats.evolving_hockey</code> module manipulates raw csv files downloaded from Evolving-Hockey.(1) Using their original shifts &amp; play-by-play data, users can add additional information &amp; aggregate for individual &amp; on-ice statistics, including high-danger shooting events, xG &amp; adjusted xG, faceoffs, &amp; changes.</p> <ol> <li>An Evolving-Hockey subscription is required to make full use of the <code>chickenstats.evolving_hockey</code> module.     If you don't have a subscription, you can sign up for one here</li> </ol> <p>First, prep a play-by-play dataframe using the raw play-by-play and shifts CSV files:</p> <pre><code>import pandas as pd\nfrom chickenstats.evolving_hockey import prep_pbp, prep_stats, prep_lines\n\nraw_shifts = pd.read_csv('./raw_shifts.csv') # (1)!\nraw_pbp = pd.read_csv('./raw_pbp.csv') # (2)!\n\nplay_by_play = prep_pbp(raw_pbp, raw_shifts) # (3)!\n</code></pre> <ol> <li>Download raw shifts data from here</li> <li>Download raw play-by-play data from here</li> <li>This returns a dataframe with a bunch more columns, essentially</li> </ol> <p>You can use the play_by_play dataframe in various aggregations. This will return individual game statistics, including on-ice (e.g., GF, xGF) &amp; usage (i.e., zone starts), accounting for teammates &amp; opposition on-ice:</p> <pre><code>individual_game = prep_stats(play_by_play, level='game', teammates=True, opposition=True)\n</code></pre> <p>This will return game statistics for forward-line combinations, accounting for opponents on-ice:</p> <pre><code>forward_lines = prep_lines(play_by_play, level='game', position='f', opposition=True)\n</code></pre> <p>For additional information on usage and functionality, consult the relevant  User guide</p> Help <p>If you need help with any aspect of <code>chickenstats</code>, from installation to usage, please don't hesitate to reach out. You can find me on :material-bluesky: Bluesky at @chickenandstats.com or  email me at chicken@chickenandstats.com.</p> <p>For more information on known issues or the longer-term development roadmap, see  Contribute</p>"},{"location":"#navigation","title":"Navigation","text":"Tip <p>Navigate the site using the header, side-bar, or search tool. Mobile users can tap  (upper-left) to bring up the menu, then  to see a linked table of contents for the current page, or  to navigate the menu back towards the home page. </p> <ul> <li> <p> User guide &amp; tutorials</p> <p>Learn more from module-specific user guides, as well as hands-on tutorials &amp; examples.</p> <p> User Guide</p> </li> <li> <p> Reference materials</p> <p>Consult the Reference section for in-depth explanations  &amp; debugging assistance.</p> <p> Reference</p> </li> <li> <p> xG model</p> <p>Learn about the open-source expected goals (xG) model included with <code>chickenstats</code>.</p> <p> xG model</p> </li> <li> <p> Blog</p> <p>Read the latest analyses leveraging the library, as well as about the newest features &amp; releases.</p> <p> Blog</p> </li> <li> <p> Design</p> <p>Read more about <code>chickenstats</code> module design and [un]expected behaviors.</p> <p> Design</p> </li> <li> <p> Contribute</p> <p>Read about known issues, future development roadmap, and/or how to contribute. </p> <p> Contribute</p> </li> </ul>"},{"location":"#help","title":"Help","text":"<p>If you need help with any aspect of <code>chickenstats</code>, from installation to usage, please don't hesitate to reach out! You can find me on :material-bluesky: Bluesky at @chickenandstats.com or   email me at chicken@chickenandstats.com.</p> <p>Please report any bugs or issues via the <code>chickenstats</code> issues page, where you can also post feature requests. Before doing so, please check the roadmap, there might already be plans to include your request.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p><code>chickenstats</code> wouldn't be possible without the support &amp; efforts of countless others. I am obviously extremely grateful, even if there are too many of you to thank individually. However, this chicken will do his best.</p> <p>First &amp; foremost is my wife - the lovely Mrs. Chicken has been patient, understanding, &amp; supportive throughout the countless hours of development, sometimes to her detriment.</p> <p>Sincere apologies to the friends &amp; family that have put up with me since my entry into Python, programming, &amp; data analysis in January 2021. Thank you for being excited for me &amp; with me throughout all of this, especially when you've had to fake it...</p> <p>Thank you to the hockey analytics community on (the artist formerly known as) Twitter. You're producing &amp; reacting to cutting-edge statistical analyses, while providing a supportive, welcoming environment for newcomers. Thank y'all for everything that you do. This is by no means exhaustive, but there are a few people worth calling out specifically:</p> <ul> <li>Josh &amp; Luke Younggren (@EvolvingWild)</li> <li>Bryan Bastin (@BryanBastin)</li> <li>Max Tixador (@woumaxx)</li> <li>Micah Blake McCurdy (@IneffectiveMath)</li> <li>Prashanth Iyer (@iyer_prashanth)</li> <li>The Bucketless (@the_bucketless)</li> <li>Shayna Goldman (@hayyyshayyy)</li> <li>Dom Luszczyszyn (@domluszczyszyn)</li> </ul> <p>I'm also grateful to the thriving community of Python educators &amp; open-source contributors on Twitter. Thank y'all for your knowledge &amp; practical advice. Matt Harrison (@mharrison) deserves a special mention for his books on Pandas and XGBoost, both of which are available at his online store. Again, not exhaustive, but others worth thanking individually:</p> <ul> <li>Will McGugan (@willmcgugan)</li> <li>Rodrigo Gir\u00e3o Serr\u00e3o (@mathsppblog)</li> <li>Mike Driscoll (@driscollis)</li> <li>Trey Hunner (@treyhunner)</li> <li>Pawel Jastrzebski (@pawjast)</li> </ul> <p>Finally, this library depends on a host of other open-source packages. <code>chickenstats</code> is possible because of the efforts of thousands of individuals, represented below:</p> <ul> <li> <p>Pandas</p> <p></p> </li> <li> <p>scikit-learn</p> <p></p> </li> <li> <p>matplotlib</p> <p></p> </li> <li> <p>Rich</p> <p></p> </li> <li> <p>Pydantic</p> <p></p> </li> <li> <p>Pandera</p> <p></p> </li> <li> <p>XGBoost</p> <p></p> </li> <li> <p>Mkdocs</p> <p></p> </li> <li> <p>Material for MkDocs</p> <p></p> </li> <li> <p>mlflow</p> <p></p> </li> <li> <p>Optuna</p> <p></p> </li> <li> <p>Black</p> <p></p> </li> <li> <p>Ruff + uv</p> <p></p> </li> <li> <p>Jupyter</p> <p></p> </li> <li> <p>Pytest</p> <p></p> </li> <li> <p>Tox</p> <p></p> </li> <li> <p>Caddy</p> <p></p> </li> <li> <p>Yellowbrick</p> <p></p> </li> <li> <p>Shap</p> <p></p> </li> <li> <p>Seaborn</p> <p></p> </li> <li> <p>hockey-rink</p> <p></p> </li> </ul>"},{"location":"blog/","title":"Blog","text":"<p>Landing page, blog coming soon</p>"},{"location":"blog/author/chicken/","title":"Chicken","text":"<p>Test landing page for chicken</p>"},{"location":"blog/category/hockey/","title":"Hockey","text":"<p>Test landing page for hockey</p>"},{"location":"blog/category/xg/","title":"xG model","text":"<p>Test landing page for xG model</p>"},{"location":"blog/2024/05/hello-world/","title":"Hello, world!","text":"","tags":["hockey","chickenstats"]},{"location":"blog/2024/05/hello-world/#intro","title":"Intro","text":"<p>This is my first blog post on a website documenting a Python scraper that I built!</p> <p>More text here</p>","tags":["hockey","chickenstats"]},{"location":"blog/2024/05/hello-world/#other-section","title":"Other section","text":"","tags":["hockey","chickenstats"]},{"location":"blog/2024/05/xG-model/","title":"xG model","text":"","tags":["hockey","chickenstats","xG model"]},{"location":"blog/2024/05/xG-model/#intro","title":"Intro","text":"<p>This is my first blog post on a website documenting a Python scraper that I built!</p> <p>More text here</p>","tags":["hockey","chickenstats","xG model"]},{"location":"blog/2024/05/xG-model/#other-section","title":"Other section","text":"","tags":["hockey","chickenstats","xG model"]},{"location":"contribute/contribute/","title":"Contribute","text":"<p>I appreciate any and all input or support. Feel free to contribute with bug reports or feature requests at the GitHub issues page. For anything longer term, I've set out my development plans at the  Roadmap. </p> <p><code>chickenstats</code> is designed to be as modular and user-friendly as possible.  The  Design page outlines how the different pieces fit together, as well as the basic rules for accessing raw data.</p> <p>You can also find reference materials for non-public class methods available from objects in <code>chickenstats.chicken_nhl.scrape</code>. Nested functions for munging raw data from evolving-hockey.com can be found within <code>chickenstats.evolving_hockey.base</code> and <code>chickenstats.evolving_hockey.stats</code>.</p> <p>For contributing to the xG model, or for questions about the underlying research &amp; data, please see  xG Model.</p>"},{"location":"contribute/contribute/#development","title":"Development","text":"<ul> <li> <p> Roadmap</p> <p>See more information about future development of <code>chickenstats</code></p> <p> Read more</p> </li> <li> <p> Known Issues</p> <p>See known bugs &amp; issues before reporting any new ones</p> <p> Read more</p> </li> </ul>"},{"location":"contribute/contribute/#under-the-hood","title":"Under the hood","text":"<ul> <li> <p> <code>chickenstats</code> design</p> <p>Start here to understand more about the general design of <code>chickenstats</code></p> <p> Read more</p> </li> <li> <p> <code>chicken_nhl</code></p> <p>See non-public methods and properties for <code>chickenstats.chicken_nhl</code></p> <p> Read more</p> </li> <li> <p> <code>evolving_hockey</code></p> <p>See nested functions for <code>chickenstats.evolving_hockey</code></p> <p> Read more</p> </li> </ul>"},{"location":"contribute/contribute/#bugs-feature-requests","title":"Bugs &amp; feature requests","text":"<p>Please report any bugs or issues via the <code>chickenstats</code> issues page, where you can also post feature requests. Before doing so, please check the roadmap, there might already be plans to include your request. </p>"},{"location":"contribute/contribute/#contact-information","title":"Contact information","text":"<p>Have something to say? You can find me on  Bluesky at @chickenandstats.com or   email me at chicken@chickenandstats.com.</p>"},{"location":"contribute/known_issues/","title":"Known Issues","text":"<p>Known issues either cannot be addressed, already have been addressed, or are on the roadmap to be addressed. </p> <p>See  Contribute for the future development roadmap and more information on how to contribute.</p>"},{"location":"contribute/known_issues/#issues-that-cant-be-addressed","title":"Issues that can't be addressed","text":""},{"location":"contribute/known_issues/#api-events-feed","title":"API events feed","text":""},{"location":"contribute/known_issues/#2021020562","title":"2021020562","text":"<p>CHL at 2898 game seconds is not in the API events feed</p>"},{"location":"contribute/known_issues/#2021020767","title":"2021020767","text":"<p>CHL at 3598 game seconds is not in the API events feed</p>"},{"location":"contribute/known_issues/#2021020882","title":"2021020882","text":"<p>SHOT at 249, 1785, &amp; 1786 game seconds are not in the API events feed</p>"},{"location":"contribute/known_issues/#2021020894","title":"2021020894","text":"<p>SHOT by Boldy at 3507 game seconds is not in the API events feed</p>"},{"location":"contribute/known_issues/#issues-already-addressed","title":"Issues already addressed","text":""},{"location":"contribute/known_issues/#api-events-feed_1","title":"API events feed","text":""},{"location":"contribute/known_issues/#2010021176","title":"2010021176","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 213, player ID: 8467396)</p>"},{"location":"contribute/known_issues/#2011020069","title":"2011020069","text":"<p>Changed the first event player in the API events feed (event_idx: 660, player ID: 8473473)</p>"},{"location":"contribute/known_issues/#2012020095","title":"2012020095","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 139, player ID: 8468483)</p>"},{"location":"contribute/known_issues/#2012020341","title":"2012020341","text":"<p>Added BENCH as player for bench minor penalty to the API events feed (event_idx: 656)</p>"},{"location":"contribute/known_issues/#2012020627","title":"2012020627","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 621, player ID: 8462129)</p>"},{"location":"contribute/known_issues/#2012020660","title":"2012020660","text":"<p>Added BENCH as player for bench minor penalty to the API events feed (event_idx: 377)</p>"},{"location":"contribute/known_issues/#2012020671","title":"2012020671","text":"<p>Changed the player who served penalty in the API events feed (event_idx: 680, player ID: 8470192)</p>"},{"location":"contribute/known_issues/#2012030224","title":"2012030224","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 594, player ID: 8475184)</p>"},{"location":"contribute/known_issues/#2013020305","title":"2013020305","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 392, player ID: 8475184)</p>"},{"location":"contribute/known_issues/#2013030142","title":"2013030142","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 727, player ID: 8470601)</p>"},{"location":"contribute/known_issues/#2013030155","title":"2013030155","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 309, player ID: 8476463)</p>"},{"location":"contribute/known_issues/#2013020445","title":"2013020445","text":"<p>Swapped first and second players the API events feed (event_idx: 617)</p>"},{"location":"contribute/known_issues/#2014020120","title":"2014020120","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 661, player ID: 8476854)</p> <p>Added new player who took penalty, marked original player as one who served the penalty in the API events feed (event_idx: 720, player ID: 8473492)</p>"},{"location":"contribute/known_issues/#2014020356","title":"2014020356","text":"<p>Changed length of time elapsed for two events in the API events feed:</p> <ul> <li>(event_idx: 599, period_seconds: 970, game_seconds: 3370)</li> <li>(event_idx: 603, period_seconds: 1002, game_seconds: 3402)</li> </ul>"},{"location":"contribute/known_issues/#2014020417","title":"2014020417","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 280, player ID: 8468501)</p>"},{"location":"contribute/known_issues/#2014020506","title":"2014020506","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 377, player ID: 8468208) Added penalty drawn player as the third event player to the API events feed (event_idx: 584, player ID: 8474613)</p>"},{"location":"contribute/known_issues/#2014020939","title":"2014020939","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 287, player ID: 8475218)</p>"},{"location":"contribute/known_issues/#2014020945","title":"2014020945","text":"<p>Changed length of time elapsed for an event in the API events feed (event_idx: 585, period_seconds: 1069, game_seconds: 3469)</p>"},{"location":"contribute/known_issues/#2014021127","title":"2014021127","text":"<p>Changed length of time elapsed for three events in the API events feed:</p> <ul> <li>(event_idx: 754, period_seconds: 1124, game_seconds: 3524)</li> <li>(event_idx: 756, period_seconds: 1125, game_seconds: 3525)</li> <li>(event_idx: 755, period_seconds: 1127, game_seconds: 3527)</li> </ul>"},{"location":"contribute/known_issues/#2014021128","title":"2014021128","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 280, player ID: 8471426)</p>"},{"location":"contribute/known_issues/#2014021203","title":"2014021203","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 344, player ID: 8466378)</p>"},{"location":"contribute/known_issues/#2014030311","title":"2014030311","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 346, player ID: 8474613)</p>"},{"location":"contribute/known_issues/#2014030315","title":"2014030315","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 69, player ID: 8474151)</p>"},{"location":"contribute/known_issues/#2015020193","title":"2015020193","text":"<p>Changed the first event player in the API events feed (event_idx: 389, player ID: 8475760)</p>"},{"location":"contribute/known_issues/#2015020401","title":"2015020401","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 167, player ID: 8470854)</p>"},{"location":"contribute/known_issues/#2015020839","title":"2015020839","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 417, player ID: 8476393)</p>"},{"location":"contribute/known_issues/#2015020917","title":"2015020917","text":"<p>Removed the third event player from the API events feed (event_idx: 162)</p>"},{"location":"contribute/known_issues/#2015021092","title":"2015021092","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 199, player ID: 8474884)</p>"},{"location":"contribute/known_issues/#2016020049","title":"2016020049","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 347, player ID: 8475692)</p>"},{"location":"contribute/known_issues/#2016020177","title":"2016020177","text":"<p>Changed length of time elapsed for an event in the API events feed (event_idx: 494, period_seconds: 360, game_seconds: 2760)</p>"},{"location":"contribute/known_issues/#2016020256","title":"2016020256","text":"<p>Removed the third event player from the API events feed (event_idx: 210)</p>"},{"location":"contribute/known_issues/#2016020326","title":"2016020326","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 175, player ID: 8475855)</p>"},{"location":"contribute/known_issues/#2016020433","title":"2016020433","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 366, player ID: 8471686) Removed the third event player from the API events feed (event_idx: 364)</p>"},{"location":"contribute/known_issues/#2016020519","title":"2016020519","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 335, player ID: 8471676)</p>"},{"location":"contribute/known_issues/#2016020625","title":"2016020625","text":"<p>Moved penalty player to served by, made BENCH as penalty player in the API events feed (event_idx: 630)</p>"},{"location":"contribute/known_issues/#2016020883","title":"2016020883","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 385, player ID: 8469521)</p>"},{"location":"contribute/known_issues/#2016020963","title":"2016020963","text":"<p>Changed length of time elapsed for an event in the API events feed (event_idx: 44, period_seconds: 40, game_seconds: 40)</p>"},{"location":"contribute/known_issues/#2016021111","title":"2016021111","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 183, player ID: 8473504)</p>"},{"location":"contribute/known_issues/#2016021165","title":"2016021165","text":"<p>Swapped first and second players in the API events feed (event_idx: 85)</p>"},{"location":"contribute/known_issues/#2016030216","title":"2016030216","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 567, player ID: 8474151)</p>"},{"location":"contribute/known_issues/#2017020033","title":"2017020033","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 390, player ID: 8477964) Added penalty drawn player as the third event player to the API events feed (event_idx: 585, player ID: 8476892)</p>"},{"location":"contribute/known_issues/#2017020096","title":"2017020096","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 727, player ID: 8474066)</p>"},{"location":"contribute/known_issues/#2017020209","title":"2017020209","text":"<p>Added BENCH as first player for bench minor in the API events feed (event_idx: 245)</p>"},{"location":"contribute/known_issues/#2017020233","title":"2017020233","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 375, player ID: 8470638)</p>"},{"location":"contribute/known_issues/#2017020548","title":"2017020548","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 726, player ID: 8468493)</p>"},{"location":"contribute/known_issues/#2017020601","title":"2017020601","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 319, player ID: 8473449)</p>"},{"location":"contribute/known_issues/#2017020615","title":"2017020615","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 626, player ID: 8473546)</p>"},{"location":"contribute/known_issues/#2017020796","title":"2017020796","text":"<p>Moved penalty player to served by, made BENCH as penalty player in the API events feed (event_idx: 687)</p>"},{"location":"contribute/known_issues/#2017020835","title":"2017020835","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 560, player ID: 8477215)</p>"},{"location":"contribute/known_issues/#2017020836","title":"2017020836","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 273, player ID: 8476346)</p>"},{"location":"contribute/known_issues/#2017021136","title":"2017021136","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 193, player ID: 8479206) Added penalty drawn player as the third event player to the API events feed (event_idx: 262, player ID: 8475314)</p>"},{"location":"contribute/known_issues/#2017021161","title":"2017021161","text":"<p>Moved penalty player to served by, made BENCH as penalty player in the API events feed (event_idx: 590)</p>"},{"location":"contribute/known_issues/#2018020006","title":"2018020006","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 683, player ID: 8475793)</p>"},{"location":"contribute/known_issues/#2018020009","title":"2018020009","text":"<p>Moved penalty player to served by, made BENCH as penalty player in the API events feed (event_idx: 421)</p>"},{"location":"contribute/known_issues/#2018020049","title":"2018020049","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 155, player ID: 8479353)</p>"},{"location":"contribute/known_issues/#2018020115","title":"2018020115","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 248, player ID: 8475692)</p>"},{"location":"contribute/known_issues/#2018020122","title":"2018020122","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 235, player ID: 8477996)</p>"},{"location":"contribute/known_issues/#2018020153","title":"2018020153","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 212, player ID: 8478458)</p>"},{"location":"contribute/known_issues/#2018020211","title":"2018020211","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 661, player ID: 8471217)</p>"},{"location":"contribute/known_issues/#2018020309","title":"2018020309","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 76, player ID: 8476918)</p>"},{"location":"contribute/known_issues/#2018020363","title":"2018020363","text":"<p>Moved penalty player to served by, made BENCH as penalty player in the API events feed (event_idx: 299)</p>"},{"location":"contribute/known_issues/#2018020519","title":"2018020519","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 417, player ID: 8477941)</p>"},{"location":"contribute/known_issues/#2018020561","title":"2018020561","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 500, player ID: 8474190)</p>"},{"location":"contribute/known_issues/#2018020752","title":"2018020752","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 41, player ID: 8476917)</p>"},{"location":"contribute/known_issues/#2018020794","title":"2018020794","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 182, player ID: 8470187)</p>"},{"location":"contribute/known_issues/#2018020795","title":"2018020795","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 354, player ID: 8476918)</p>"},{"location":"contribute/known_issues/#2018020841","title":"2018020841","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 227, player ID: 8476455)</p>"},{"location":"contribute/known_issues/#2018020969","title":"2018020969","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 575, player ID: 8474150)</p>"},{"location":"contribute/known_issues/#2018021087","title":"2018021087","text":"<p>Moved penalty player to served by, made BENCH as penalty player in the API events feed (event_idx: 550)</p>"},{"location":"contribute/known_issues/#2018021124","title":"2018021124","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 237, player ID: 8479353)</p>"},{"location":"contribute/known_issues/#2018021171","title":"2018021171","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 551, player ID: 8471887)</p>"},{"location":"contribute/known_issues/#2019020006","title":"2019020006","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 288, player ID: 8478550)</p>"},{"location":"contribute/known_issues/#2019020136","title":"2019020136","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 424, player ID: 8478550)</p>"},{"location":"contribute/known_issues/#2019020147","title":"2019020147","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 28, player ID: 8478550)</p>"},{"location":"contribute/known_issues/#2019020179","title":"2019020179","text":"<p>Moved penalty player to served by, made BENCH as penalty player in the API events feed (event_idx: 573)</p>"},{"location":"contribute/known_issues/#2019020239","title":"2019020239","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 543, player ID: 8478463)</p>"},{"location":"contribute/known_issues/#2019020316","title":"2019020316","text":"<p>Moved penalty player to served by, made BENCH as penalty player in the API events feed (event_idx: 428)</p>"},{"location":"contribute/known_issues/#2019020682","title":"2019020682","text":"<p>Added penalty drawn player as the third event player to the API events feed (event_idx: 382, player ID: 8478550)</p>"},{"location":"contribute/known_issues/#2020020456","title":"2020020456","text":"<p>Changed length of time elapsed for an event in the API events feed (event_idx: 360, period_seconds: 1068, game_seconds: 2268)</p>"},{"location":"contribute/known_issues/#2020020846","title":"2020020846","text":"<p>Changed second players for five events:</p> <ul> <li>(event_idx: 407, player 2 ID: 8475799)</li> <li>(event_idx: 409, player 2 ID: 8479987)</li> <li>(event_idx: 411, player 2 ID: 8479987)</li> <li>(event_idx: 413, player 2 ID: 8475790)</li> <li>(event_idx: 415, player 2 ID: 8476988)</li> </ul>"},{"location":"contribute/known_issues/#2020020860","title":"2020020860","text":"<p>Changed length of time elapsed for an event in the API events feed (event_idx: 705, period_seconds: 270, game_seconds: 3870)</p>"},{"location":"contribute/known_issues/#2021020482","title":"2021020482","text":"<p>Changed the first event player in the API events feed (event_idx: 250, player ID: 8477465)</p>"},{"location":"contribute/known_issues/#html-events-feed","title":"HTML events feed","text":""},{"location":"contribute/known_issues/#2011020069_1","title":"2011020069","text":"<p>Replaced \"BOS #\" with \"BOS #17 LUCIC \" in the event description in the HTML events feed (event_idx: 312)</p>"},{"location":"contribute/known_issues/#2011020553","title":"2011020553","text":"<p>Changed the event description to \"FLA #21 BARCH (10 MIN)\" in the HTML events feed (event_idx: 294)</p>"},{"location":"contribute/known_issues/#2012020660_1","title":"2012020660","text":"<p>Changed the event description to \"NJD BENCH PS-HOOKING ON BREAKAWAY(0 MIN) NJD SERVED BY: #2 ZIDLICKY DRAWN BY: FLA #42 HOWDEN\" in the HTML events feed (event_idx: 150)</p>"},{"location":"contribute/known_issues/#2012020018","title":"2012020018","text":"<p>Replaced bad jersey and number combinations in the HTML events feed (replacements = {\"EDM #9\": \"VAN #9\", \"VAN #93\": \"EDM #93\", \"VAN #94\": \"EDM #94\"})</p>"},{"location":"contribute/known_issues/#2013020083","title":"2013020083","text":"<p>Changed event time from \"-16:0-120:00\" to \"5:000:00\" in the HTML events feed </p>"},{"location":"contribute/known_issues/#2013020274","title":"2013020274","text":"<p>Changed event time from \"-16:0-120:00\" to \"5:000:00\" in the HTML events feed </p>"},{"location":"contribute/known_issues/#2013020644","title":"2013020644","text":"<p>Changed event time from \"-16:0-120:00\" to \"5:000:00\" in the HTML events feed </p>"},{"location":"contribute/known_issues/#2013020971","title":"2013020971","text":"<p>Changed first event time to \"0:0020:00\" in the HTML events feed (event_idx: 1)</p>"},{"location":"contribute/known_issues/#2014020120_1","title":"2014020120","text":"<p>Changed the event description to \"SJS TEAM PLAYER LEAVES BENCH - BENCH(2 MIN), OFF. ZONE SJS SERVED BY: #20 SCOTT DRAWN BY: ANA #47 LINDHOLM\" in the HTML events feed (event_idx: 341)</p>"},{"location":"contribute/known_issues/#2014020600","title":"2014020600","text":"<p>Changed the event description to \"CAR # BLOCKED BY BUF #6 WEBER, WRIST, DEF. ZONE\" in the HTML events feed (event_idx: 328)</p>"},{"location":"contribute/known_issues/#2014020672","title":"2014020672","text":"<p>Changed the event description to \"NYR #22 HIT PIT #16 SUTTER, DEF. ZONE\" in the HTML events feed (event_idx: 297)</p>"},{"location":"contribute/known_issues/#2014021118","title":"2014021118","text":"<p>Changed event time from \"-16:0-120:00\" to \"5:000:00\" in the HTML events feed</p>"},{"location":"contribute/known_issues/#2015020193_1","title":"2015020193","text":"<p>Changed the event description to \"FLA #27 BJUGSTAD, WRIST, OFF. ZONE, 16 FT.\" in the HTML events feed (event_idx: 196)</p>"},{"location":"contribute/known_issues/#2015020904","title":"2015020904","text":"<p>Changed event time from \"-16:0-120:00\" to \"5:000:00\" in the HTML events feed</p>"},{"location":"contribute/known_issues/#2015020917_1","title":"2015020917","text":"<p>Changed the event description to \"WSH #43 WILSON TRIPPING(2 MIN) OFF. ZONE DRAWN BY: MIN #46 SPURGEON\" in the HTML events feed (event_idx: 76)</p>"},{"location":"contribute/known_issues/#2016020256_1","title":"2016020256","text":"<p>Changed the event description to \"WSH #14 WILLIAMS ROUGHING(2 MIN) NEU. ZONE DRAWN BY: DET #21 TATAR\" in the HTML events feed (event_idx: 117)</p>"},{"location":"contribute/known_issues/#2016020625_1","title":"2016020625","text":"<p>Changed the event description to \"PIT HEAD COACH GAME MISCONDUCT(0 MIN) PIT SERVED BY: #61 OLEKSY, NEU. ZONE\" in the HTML events feed (event_idx: 311)</p>"},{"location":"contribute/known_issues/#2016021070","title":"2016021070","text":"<p>Changed the event description to \"TOR # HIT BOS # , DEF. ZONE\" in the HTML events feed (event_idx: 206)</p>"},{"location":"contribute/known_issues/#2016021127","title":"2016021127","text":"<p>Replaced \"BOS #55 ACCIARI ( MIN), DEF. ZONE\" with \"BOS #55 ACCIARI MISCONDUCT (10 MIN), DEF. ZONE\" in the event description in the HTML events feed</p>"},{"location":"contribute/known_issues/#2017020463","title":"2017020463","text":"<p>Changed event time from \"-16:0-120:00\" to \"2:022:58\" in the HTML events feed</p>"},{"location":"contribute/known_issues/#2017020796_1","title":"2017020796","text":"<p>Changed the event description to \"DET HEAD COACH GAME MISCONDUCT(0 MIN) DET SERVED BY: #3 JENSEN, NEU. ZONE\" in the HTML events feed (event_idx: 338)</p>"},{"location":"contribute/known_issues/#2017021161_1","title":"2017021161","text":"<p>Changed the event description to \"NSH HEAD COACH GAME MISCONDUCT(0 MIN) NSH SERVED BY: #2 BITETTO, NEU. ZONE\" in the HTML events feed (event_idx: 253)</p>"},{"location":"contribute/known_issues/#2018020009_1","title":"2018020009","text":"<p>Changed the event description to \"CHI TEAM FACE-OFF VIOLATION(2 MIN) CHI SERVED BY: #12 DEBRINCAT\" in the HTML events feed (event_idx: 231)</p>"},{"location":"contribute/known_issues/#2018020363_1","title":"2018020363","text":"<p>Changed the event description to \"NJD TEAM TOO MANY MEN/ICE(2 MIN) NJD SERVED BY: #44 WOOD, OFF. ZONE\" in the HTML events feed (event_idx: 156)</p>"},{"location":"contribute/known_issues/#2018020989","title":"2018020989","text":"<p>Changed event time from \"-16:0-120:00\" to \"5:000:00\" in the HTML events feed</p>"},{"location":"contribute/known_issues/#2018021087_1","title":"2018021087","text":"<p>Changed the event description to \"TBL TEAM DELAY OF GAME(2 MIN) TBL SERVED BY: #10 MILLER, DEF. ZONE\" in the HTML events feed (event_idx: 289)</p>"},{"location":"contribute/known_issues/#2018021133","title":"2018021133","text":"<p>Replaced \"WSH TAKEAWAY - #71 CIRELLI\" with \"TBL TAKEAWAY - #71 CIRELLI\" in the event description in the HTML events feed</p>"},{"location":"contribute/known_issues/#2019020179_1","title":"2019020179","text":"<p>Changed the event description to \"SJS HEAD COACH GAME MISCONDUCT (0 MIN), SERVED BY: #65 KARLSSON, DEF. ZONE\" in the HTML events feed (event_idx: 259)</p>"},{"location":"contribute/known_issues/#2019020316_1","title":"2019020316","text":"<p>Changed the event description to \"ANA #6 GUDBRANSON ROUGHING(2 MIN) SERVED BY: #24 ROWNEY, DEF. ZONE DRAWN BY: WSH #21 HATHAWAY\" in the HTML events feed (event_idx: 212)</p>"},{"location":"contribute/known_issues/#2021020224","title":"2021020224","text":"<p>Replaced \" - MTL #60 BELZILE VS BOS #92 NOSEK\" with \"MTL WON NEU. ZONE - MTL #60 BELZILE VS BOS #92 NOSEK\" in the event description in the HTML events feed</p>"},{"location":"contribute/known_issues/#2023020838","title":"2023020838","text":"<p>Changed the event description to \"FLA #17 RODRIGUES HIGH-STICKING(2 MIN), NEU. ZONE DRAWN BY: BUF #72 THOMPSON\" in the HTML events feed (event_idx: 216)</p>"},{"location":"contribute/known_issues/#2023021279","title":"2023021279","text":"<p>Changed the event description to \"PIT #10 O'CONNOR SLASHING(2 MIN), DEF. ZONE DRAWN BY: BOS #63 MARCHAND\" in the HTML events feed (event_idx: 264)</p>"},{"location":"contribute/known_issues/#html-rosters-feed","title":"HTML rosters feed","text":""},{"location":"contribute/known_issues/#2019020665","title":"2019020665","text":"<p>Marked \"ROSS JOHNSTON\", \"SEBASTIAN AHO\", \"CONNOR CARRICK\", \"JESPER BRATT\", and \"JACK HUGHES\" as scratches in the HTML roster feed</p>"},{"location":"contribute/roadmap/","title":"Roadmap","text":"<p><code>chickenstats</code> is an imperfect library with big ambitions and is actively seeking contributions in various ways. Below are what I think are both the most interesting and would advance the library furthest. </p>"},{"location":"contribute/roadmap/#research-and-analytics","title":"Research and analytics","text":"<p>\"Priority 1A\" for the <code>chickenstats</code> library is to improve the existing and introduce additional  statistics and evaluation tools - this was the original goal of the entire project.</p> <p>The below are just an initial starting point - please feel free to leverage the library for whatever research you find most interesting. </p> <ul> <li> Regularized Adjusted Plus-Minus (RAPM) / Adjusted Plus-Minus (APM)</li> <li> Goals Above Replacement (GAR) / xG Above Replacement (xGAR)</li> <li> Wins Above Replacement (WAR)</li> </ul>"},{"location":"contribute/roadmap/#asynchronous-scraping","title":"Asynchronous scraping","text":"<p>Re-writing the library to leverage aiohttp is \"Priority 1B\" for two reasons:</p> <ol> <li>asynchronous scraping would speed up the <code>Scraper</code> object substantially </li> <li>The library is fairly extensible (I hope, that was the intention),  so could be adapted fairly quickly</li> </ol>"},{"location":"contribute/roadmap/#speed-improvements","title":"Speed improvements","text":"<p>The <code>chickenstats.chicken_nhl.play_by_play</code> property scrapes data from seven endpoints before consolidating into a final play-by-play dataframe, as illustrated by the diagram below. </p> <p>Just asynchronous scraping, without any asynchronous (or multithreaded) processing should reduce the time  to scrape data significantly. My ambitious goal for v2.0 is to reduce the play-by-play scraping time to ~1 second per game vs. the current 2-4 seconds per game.</p> <pre><code>graph LR\n  subgraph \"raw data\"\n    html_events_raw(html events endpoint)\n    html_rosters_raw(html rosters endpoint)\n    html_home_shifts_raw(html home shifts endpoint)\n    html_away_shifts_raw(html away shifts endpoint)\n    api_rosters_raw(api rosters endpoint)\n    api_events_raw(api events endpoint)\n    game_info_raw(api game info endpoint)\n  end\n  subgraph \"initial processing\"\n    html_rosters(html rosters df)\n    html_events(html events df)\n    api_rosters(api rosters df)\n    api_events(api events df)\n    shifts(shifts df)\n    changes(changes df)\n    rosters(rosters df)\n  end\n  subgraph \"final dataframe\"\n    play_by_play(combined play-by-play df)\n  end\n\n  html_events_raw(html events endpoint) --&gt; html_events(html events df);\n  html_home_shifts_raw --&gt; shifts(shifts df);\n  html_away_shifts_raw --&gt; shifts(shifts df);\n  shifts --&gt; changes(changes df);\n  html_rosters_raw --&gt; html_rosters(html rosters df)\n  html_rosters --&gt; rosters(rosters df);\n  changes --&gt; play_by_play(combined play-by-play df);\n  rosters --&gt; changes(changes df);\n  rosters --&gt; play_by_play;\n  html_rosters --&gt; html_events;\n  html_events --&gt; play_by_play;\n  api_events_raw(api events endpoint) --&gt; api_events(api events df);\n  game_info_raw(api game info endpoint) --&gt; api_events;\n  api_events --&gt; play_by_play(combined play-by-play);\n  api_rosters_raw(api rosters endpoint) --&gt; api_rosters(api rosters df);\n  api_rosters --&gt; rosters;\n  api_rosters --&gt; api_events;</code></pre>"},{"location":"contribute/roadmap/#library-extensibility","title":"Library extensibility","text":"<p>The good news is that the library was designed with asynchronous scraping and multithreaded processing in-mind -  each data source (e.g., API events) has a <code>_scrape</code> and <code>_munge</code> method, before being returned as either a list or Pandas dataframe. The below code snippet is taken from the <code>Game</code> object's <code>play_by_play</code> property and demonstrates this point:</p> <pre><code>@property\ndef play_by_play(self) -&gt; list:\n    \"\"\"Docstring omitted for brevity.\"\"\"\n    if self._play_by_play is None: # (1)!\n        if self._rosters is None:\n            if self._api_rosters is None:\n                self._munge_api_rosters() # (2)!\n\n            if self._html_rosters is None:\n                self._scrape_html_rosters() # (3)!\n                self._munge_html_rosters()\n\n            self._combine_rosters() # (4)!\n\n        if self._changes is None:\n            self._scrape_shifts()\n            self._munge_shifts()\n\n            self._munge_changes()\n\n        if self._html_events is None: # (5)!\n            self._scrape_html_events()\n            self._munge_html_events()\n\n        if self._api_events is None:\n            self._munge_api_events()\n\n        self._combine_events() # (6)!\n        self._munge_play_by_play() # (7)!\n        self._prep_xg() # (8)!\n\n    return self._play_by_play # (9)!\n</code></pre> <ol> <li>The property first checks if the data have already been scraped - this step is repeated for all underlying data sources</li> <li>The API events and API rosters are scraped when immediately, which is why there are no <code>_scrape_api_events()</code> or <code>_scrape_api_rosters()</code> methods as part of the <code>Game</code> object</li> <li>The <code>_scrape_html_rosters()</code> and <code>_munge_html_rosters()</code> are completely separate methods - the scraped data are  stored as the <code>_html_events</code> attribute, which is then fed into the processing method</li> <li>This method combines the API and HTML rosters into one combined dataset</li> <li>The order of operations matters here - the HTML events dataset requires the rosters and changes to be scraped and processed</li> <li>All datasets are combined into the play-by-play dataset here</li> <li>The initial combined play-by-play data are then processed</li> <li>xG values are generated, then appended to the play-by-play dataframe</li> <li>The method eventually returns the fully processed play-by-play data as a list</li> </ol> <p>Because all scraping and processing functions are separate, it should be straightforward to leverage either aiohttp, async, or multiprocessing with minimal changes to the underlying library. However, this chicken has no experience with any of those tools and is happy to take feedback if the level of effort required is greater than anticipated </p>"},{"location":"contribute/roadmap/#refactoring-for-speed-reliability","title":"Refactoring for speed / reliability","text":"<ul> <li> Generally clean up chicken's gross (self-taught) code</li> <li> Reduce the number of loops across all functions<ul> <li> Play-by-play functions are especially egregious here - the method loops through every player   in the roster once and every event multiple times</li> </ul> </li> </ul>"},{"location":"contribute/backend/chicken_nhl/","title":"<code>chicken_nhl.scrape</code>","text":"<p>Reference materials for the non-public elements of <code>chickenstats.chicken_nhl.scrape</code>. These methods and properties can be used for debugging, or for implementing new features.</p> <p>For more information about how to contribute, report bugs, or request new features, see  Contribute</p>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Scraper","title":"Scraper","text":"<p>Class instance for scraping play-by-play and other data for NHL games.</p> <p>Parameters:</p> Name Type Description Default <code>game_ids</code> <code>list[str | float | int] | Series | str | float | int</code> <p>List of 10-digit game identifier, e.g., <code>[2023020001, 2023020002, 2023020003]</code></p> required <code>disable_progress_bar</code> <code>bool</code> <p>If true, disables the progress bar</p> <code>False</code> <p>Attributes:</p> Name Type Description <code>game_ids</code> <code>list</code> <p>Game IDs that the Scraper will access, e.g., <code>[2023020001, 2023020002, 2023020003]</code></p> <p>Examples:</p> <p>First, instantiate the Scraper object</p> <pre><code>&gt;&gt;&gt; game_ids = list(range(2023020001, 2023020011))\n&gt;&gt;&gt; scraper = Scraper(game_ids)\n</code></pre> <p>Scrape play-by-play information</p> <pre><code>&gt;&gt;&gt; pbp = scraper.play_by_play\n</code></pre> <p>The object stores information from each component of the play-by-play data</p> <pre><code>&gt;&gt;&gt; shifts = scraper.shifts\n&gt;&gt;&gt; rosters = scraper.rosters\n&gt;&gt;&gt; changes = scraper.changes\n</code></pre> <p>Access data from API or HTML endpoints, or both</p> <pre><code>&gt;&gt;&gt; api_events = scraper.api_events\n&gt;&gt;&gt; api_rosters = scraper.api_rosters\n&gt;&gt;&gt; html_events = scraper.html_events\n&gt;&gt;&gt; html_rosters = scraper.html_rosters\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>class Scraper:\n    \"\"\"Class instance for scraping play-by-play and other data for NHL games.\n\n    Parameters:\n        game_ids (list[str | float | int] | pd.Series | str | float | int):\n            List of 10-digit game identifier, e.g., `[2023020001, 2023020002, 2023020003]`\n        disable_progress_bar (bool):\n            If true, disables the progress bar\n\n    Attributes:\n        game_ids (list):\n            Game IDs that the Scraper will access, e.g., `[2023020001, 2023020002, 2023020003]`\n\n    Examples:\n        First, instantiate the Scraper object\n        &gt;&gt;&gt; game_ids = list(range(2023020001, 2023020011))\n        &gt;&gt;&gt; scraper = Scraper(game_ids)\n\n        Scrape play-by-play information\n        &gt;&gt;&gt; pbp = scraper.play_by_play\n\n        The object stores information from each component of the play-by-play data\n        &gt;&gt;&gt; shifts = scraper.shifts\n        &gt;&gt;&gt; rosters = scraper.rosters\n        &gt;&gt;&gt; changes = scraper.changes\n\n        Access data from API or HTML endpoints, or both\n        &gt;&gt;&gt; api_events = scraper.api_events\n        &gt;&gt;&gt; api_rosters = scraper.api_rosters\n        &gt;&gt;&gt; html_events = scraper.html_events\n        &gt;&gt;&gt; html_rosters = scraper.html_rosters\n\n    \"\"\"\n\n    def __init__(\n        self, game_ids: list[str | float | int] | pd.Series | str | float | int, disable_progress_bar: bool = False\n    ):\n        \"\"\"Instantiates a Scraper object for a given game ID or list / list-like object of game IDs.\"\"\"\n        game_ids = convert_to_list(game_ids, \"game ID\")\n\n        self.disable_progress_bar = False\n\n        if disable_progress_bar:\n            self.disable_progress_bar = True\n\n        self.game_ids: list = game_ids\n        self._scraped_games: list = []\n        self._bad_games: list = []\n\n        self._requests_session = ChickenSession()\n\n        self._api_events: list = []\n        self._scraped_api_events: list = []\n\n        self._api_rosters: list = []\n        self._scraped_api_rosters: list = []\n\n        self._changes: list = []\n        self._scraped_changes: list = []\n\n        self._html_events: list = []\n        self._scraped_html_events: list = []\n\n        self._html_rosters: list = []\n        self._scraped_html_rosters: list = []\n\n        self._rosters: list = []\n        self._scraped_rosters: list = []\n\n        self._shifts: list = []\n        self._scraped_shifts: list = []\n\n        self._play_by_play: list = []\n        self._play_by_play_ext: list = []\n        self._scraped_play_by_play: list = []\n\n        self._ind_stats: pd.DataFrame = pd.DataFrame()\n        self._oi_stats: pd.DataFrame = pd.DataFrame()\n        self._zones: pd.DataFrame = pd.DataFrame()\n        self._stats: pd.DataFrame = pd.DataFrame()\n        self._stats_levels: dict = {\"level\": None, \"score\": None, \"teammates\": None, \"opposition\": None}\n\n        self._lines: pd.DataFrame = pd.DataFrame()\n        self._lines_levels: dict = {\n            \"position\": None,\n            \"level\": None,\n            \"score\": None,\n            \"teammates\": None,\n            \"opposition\": None,\n        }\n\n        self._team_stats: pd.DataFrame = pd.DataFrame()\n        self._team_stats_levels: dict = {\"level\": None, \"score\": None, \"strengths\": None, \"opposition\": None}\n\n    def _scrape(\n        self,\n        scrape_type: Literal[\n            \"api_events\", \"api_rosters\", \"changes\", \"html_events\", \"html_rosters\", \"play_by_play\", \"shifts\", \"rosters\"\n        ],\n    ) -&gt; None:\n        \"\"\"Method for scraping any data. Iterates through a list of game IDs using Game objects.\n\n        For more information and usage, see https://chickenstats.com/latest/contribute/contribute/.\n\n        Examples:\n            First, instantiate the Scraper object\n            &gt;&gt;&gt; game_ids = list(range(2023020001, 2023020011))\n            &gt;&gt;&gt; scraper = Scraper(game_ids)\n\n            Before scraping the data, any of the storage objects are None\n            &gt;&gt;&gt; scraper._shifts  # Returns None\n            &gt;&gt;&gt; scraper._play_by_play  # Also returns None\n\n            You can use the `_scrape` method to get any data\n            &gt;&gt;&gt; scraper._scrape(\"html_events\")\n            &gt;&gt;&gt; scraper._html_events  # Returns data as a list\n            &gt;&gt;&gt; scraper.html_events  # Returns data as a Pandas DataFrame\n        \"\"\"\n        pbar_stubs = {\n            \"api_events\": \"API events\",\n            \"api_rosters\": \"API rosters\",\n            \"changes\": \"changes\",\n            \"html_events\": \"HTML events\",\n            \"html_rosters\": \"HTML rosters\",\n            \"play_by_play\": \"play-by-play data\",\n            \"shifts\": \"shifts\",\n            \"rosters\": \"rosters\",\n        }\n\n        if scrape_type == \"api_events\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_api_events]\n\n        if scrape_type == \"api_rosters\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_api_rosters]\n\n        if scrape_type == \"changes\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_changes]\n\n        if scrape_type == \"html_events\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_html_events]\n\n        if scrape_type == \"html_rosters\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_html_rosters]\n\n        if scrape_type == \"play_by_play\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_play_by_play]\n\n        if scrape_type == \"shifts\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_rosters]\n\n        if scrape_type == \"rosters\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_rosters]\n\n        with self._requests_session as s:\n            with ChickenProgress(disable=self.disable_progress_bar) as progress:\n                pbar_stub = pbar_stubs[scrape_type]\n\n                pbar_message = f\"Downloading {pbar_stub} for {game_ids[0]}...\"\n\n                game_task = progress.add_task(pbar_message, total=len(game_ids))\n\n                for idx, game_id in enumerate(game_ids):\n                    game = Game(game_id, s)\n\n                    if scrape_type == \"api_events\":\n                        if game_id in self._scraped_api_events:  # Not covered by tests\n                            continue\n\n                        else:\n                            if game_id in self._scraped_api_rosters:  # Not covered by tests\n                                game._api_rosters = [x for x in self._api_rosters if x[\"game_id\"] == game_id]\n\n                            else:\n                                self._api_rosters.extend(game.api_rosters)\n                                self._scraped_api_rosters.append(game_id)\n\n                            self._api_events.extend(game.api_events)\n                            self._scraped_api_events.append(game_id)\n\n                    if scrape_type == \"api_rosters\":\n                        if game_id in self._scraped_api_rosters:  # Not covered by tests\n                            continue\n\n                        else:\n                            self._api_rosters.extend(game.api_rosters)\n                            self._scraped_api_rosters.append(game_id)\n\n                    if scrape_type == \"changes\":\n                        if game_id in self._scraped_changes:  # Not covered by tests\n                            continue\n\n                        else:\n                            if game_id in self._scraped_rosters:  # Not covered by tests\n                                game._rosters = [x for x in self._rosters if x[\"game_id\"] == game_id]\n\n                            else:\n                                if game_id in self._scraped_html_rosters:\n                                    game._html_rosters = [x for x in self._html_rosters if x[\"game_id\"] == game_id]\n\n                                else:\n                                    self._html_rosters.extend(game.html_rosters)\n                                    self._scraped_html_rosters.append(game_id)\n\n                                if game_id in self._scraped_api_rosters:\n                                    game._api_rosters = [x for x in self._api_rosters if x[\"game_id\"] == game_id]\n\n                                else:\n                                    self._api_rosters.extend(game.api_rosters)\n                                    self._scraped_api_rosters.append(game_id)\n\n                                self._rosters.extend(game.rosters)\n                                self._scraped_rosters.append(game_id)\n\n                            if game_id in self._scraped_shifts:  # Not covered by tests\n                                game._shifts = [x for x in self._shifts if x[\"game_id\"] == game_id]\n\n                            else:\n                                self._shifts.extend(game.shifts)\n                                self._scraped_shifts.append(game_id)\n\n                            self._changes.extend(game.changes)\n                            self._scraped_changes.append(game_id)\n\n                    if scrape_type == \"html_events\":\n                        if game_id in self._scraped_html_events:  # Not covered by tests\n                            continue\n\n                        else:\n                            if game_id in self._scraped_html_rosters:  # Not covered by tests\n                                game._html_rosters = [x for x in self._html_rosters if x[\"game_id\"] == game_id]\n\n                            else:\n                                self._html_rosters.extend(game.html_rosters)\n                                self._scraped_html_rosters.append(game_id)\n\n                            self._html_events.extend(game.html_events)\n                            self._scraped_html_events.append(game_id)\n\n                    if scrape_type == \"html_rosters\":\n                        if game_id in self._scraped_html_rosters:  # Not covered by tests\n                            continue\n\n                        else:\n                            self._html_rosters.extend(game.html_rosters)\n                            self._scraped_html_rosters.append(game_id)\n\n                    if scrape_type == \"play_by_play\":\n                        if game_id in self._scraped_play_by_play:  # Not covered by tests\n                            continue\n\n                        else:\n                            if game_id in self._scraped_rosters:  # Not covered by tests\n                                game._rosters = [x for x in self._rosters if x[\"game_id\"] == game_id]\n\n                            else:\n                                if game_id in self._scraped_html_rosters:  # Not covered by tests\n                                    game._html_rosters = [x for x in self._html_rosters if x[\"game_id\"] == game_id]\n\n                                else:\n                                    self._html_rosters.extend(game.html_rosters)\n                                    self._scraped_html_rosters.append(game_id)\n\n                                if game_id in self._scraped_api_rosters:  # Not covered by tests\n                                    game._api_rosters = [x for x in self._api_rosters if x[\"game_id\"] == game_id]\n\n                                else:\n                                    self._api_rosters.extend(game.api_rosters)\n                                    self._scraped_api_rosters.append(game_id)\n\n                                self._rosters.extend(game.rosters)\n                                self._scraped_rosters.append(game_id)\n\n                            if game_id in self._scraped_changes:  # Not covered by tests\n                                game._changes = [x for x in self._changes if x[\"game_id\"] == game_id]\n\n                            else:\n                                if game_id in self._scraped_shifts:  # Not covered by tests\n                                    game._shifts = [x for x in self._shifts if x[\"game_id\"] == game_id]\n\n                                else:\n                                    self._shifts.extend(game.shifts)\n                                    self._scraped_shifts.append(game_id)\n\n                                self._changes.extend(game.changes)\n                                self._scraped_changes.append(game_id)\n\n                            if game_id in self._scraped_html_events:  # Not covered by tests\n                                game._html_events = [x for x in self._html_events if x[\"game_id\"] == game_id]\n\n                            else:\n                                self._html_events.extend(game.html_events)\n                                self._scraped_html_events.append(game_id)\n\n                            if game_id in self._scraped_api_events:  # Not covered by tests\n                                game._api_events = [x for x in self._api_events if x[\"game_id\"] == game_id]\n\n                            else:\n                                self._api_events.extend(game.api_events)\n                                self._scraped_api_events.append(game_id)\n\n                            self._play_by_play.extend(game.play_by_play)\n                            self._play_by_play_ext.extend(game.play_by_play_ext)\n                            self._scraped_play_by_play.append(game_id)\n\n                    if scrape_type == \"rosters\":\n                        if game_id in self._scraped_rosters:  # Not covered by tests\n                            continue\n\n                        else:\n                            if game_id in self._scraped_html_rosters:  # Not covered by tests\n                                game._html_rosters = [x for x in self._html_rosters if x[\"game_id\"] == game_id]\n\n                            else:\n                                self._html_rosters.extend(game.html_rosters)\n                                self._scraped_html_rosters.append(game_id)\n\n                            if game_id in self._scraped_api_rosters:  # Not covered by tests\n                                game._api_rosters = [x for x in self._api_rosters if x[\"game_id\"] == game_id]\n\n                            else:\n                                self._api_rosters.extend(game.api_rosters)\n                                self._scraped_api_rosters.append(game_id)\n\n                            self._rosters.extend(game.rosters)\n                            self._scraped_rosters.append(game_id)\n\n                    if scrape_type == \"shifts\":\n                        if game_id in self._scraped_shifts:  # Not covered by tests\n                            continue\n\n                        else:\n                            if game_id in self._scraped_rosters:\n                                game._rosters = [x for x in self._rosters if x[\"game_id\"] == game_id]\n\n                            else:\n                                if game_id in self._scraped_html_rosters:  # Not covered by tests\n                                    game._html_rosters = [x for x in self._html_rosters if x[\"game_id\"] == game_id]\n                                else:\n                                    self._html_rosters.extend(game.html_rosters)\n                                    self._scraped_html_rosters.append(game_id)\n\n                                if game_id in self._scraped_api_rosters:  # Not covered by tests\n                                    game._api_rosters = [x for x in self._api_rosters if x[\"game_id\"] == game_id]\n                                else:\n                                    self._api_rosters.extend(game.api_rosters)\n                                    self._scraped_api_rosters.append(game_id)\n\n                                self._rosters.extend(game.rosters)\n                                self._scraped_rosters.append(game_id)\n\n                            self._shifts.extend(game.shifts)\n                            self._scraped_shifts.append(game_id)\n\n                    if game_id != self.game_ids[-1]:\n                        pbar_message = f\"Downloading {pbar_stub} for {self.game_ids[idx + 1]}...\"\n\n                    else:\n                        pbar_message = f\"Finished downloading {pbar_stub}\"\n\n                    progress.update(game_task, description=pbar_message, advance=1, refresh=True)\n\n    def add_games(self, game_ids: list[int | str | float] | int) -&gt; None:\n        \"\"\"Method to add games to the Scraper.\n\n        Parameters:\n            game_ids (list or int or float or str):\n                List-like object of or single 10-digit game identifier, e.g., 2023020001\n\n        Examples:\n            Instantiate Scraper\n            &gt;&gt;&gt; game_ids = list(range(2023020001, 2023020011))\n            &gt;&gt;&gt; scraper = Scraper(game_ids)\n\n            Scrape something\n            &gt;&gt;&gt; scraper.play_by_play\n\n            Add games\n            &gt;&gt;&gt; scraper.add_games(2023020011)\n\n            Scrape some more\n            &gt;&gt;&gt; scraper.play_by_play\n\n\n        \"\"\"\n        if isinstance(game_ids, str | int):  # Not covered by tests\n            game_ids = [game_ids]\n\n        game_ids = [int(x) for x in game_ids if x not in self.game_ids]  # Not covered by tests\n\n        self.game_ids.extend(game_ids)  # Not covered by tests\n\n    @property\n    def api_events(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas DataFrame of events scraped from API endpoint.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_idx (int):\n                Index ID for event, e.g., 689\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            event_code (str):\n                Code to indicate type of event that occured, e.g., 505\n            description (str | None):\n                Description of the event, e.g., None\n            coords_x (int):\n                x-coordinates where the event occurred, e.g, -96\n            coords_y (int):\n                y-coordinates where the event occurred, e.g., 11\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., D\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_1_type (str):\n                Type of player, e.g., GOAL SCORER\n            player_1_api_id (int):\n                NHL API ID for player_1, e.g., 8471469\n            player_1_team_jersey (str):\n                Combination of team and jersey used for player identification purposes, e.g, NSH35\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_2_type (str | None):\n                Type of player, e.g., None\n            player_2_api_id (str | None):\n                NHL API ID for player_2, e.g., None\n            player_2_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            player_3_type (str | None):\n                Type of player, e.g., None\n            player_3_api_id (str | None):\n                NHL API ID for player_3, e.g., None\n            player_3_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            strength (int):\n                Code to indication strength state, e.g., 1560\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            miss_reason (str | None):\n                Reason shot missed, e.g., None\n            opp_goalie (str | None):\n                Opposing goalie, e.g., None\n            opp_goalie_eh_id (str | None):\n                Evolving Hockey ID for opposing goalie, e.g., None\n            opp_goalie_api_id (str | None):\n                NHL API ID for opposing goalie, e.g., None\n            opp_goalie_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            event_team_id (int):\n                NHL ID for the event team, e.g., 18\n            stoppage_reason (str | None):\n                Reason the play was stopped, e.g., None\n            stoppage_reason_secondary (str | None):\n                Secondary reason play was stopped, e.g., None\n            penalty_type (str | None):\n                Type of penalty taken, e.g., None\n            penalty_reason (str | None):\n                Reason for the penalty, e.g., None\n            penalty_duration (int | None):\n                Duration of the penalty, e.g., None\n            home_team_defending_side (str):\n                Side of the ice the home team is defending, e.g., right\n            version (int):\n                Increases with simultaneous events, used for combining events in the scraper, e.g., 1\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.api_events\n\n        \"\"\"\n        if not self._api_events:\n            self._scrape(\"api_events\")\n\n        return pd.DataFrame(self._api_events)\n\n    @property\n    def api_rosters(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of players scraped from API endpoint.\n\n        Returns:\n            Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            api_id (str):\n                NHL API ID for the player, e.g., 8476887\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            position (str):\n                Player's position, e.g., L\n            first_name (str):\n                Player's first name, e.g., FILIP\n            last_name (str):\n                Player's last name, e.g., FORSBERG\n            headshot_url (str):\n                URL to retreive player's headshot\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.api_rosters\n        \"\"\"\n        if not self._api_rosters:\n            self._scrape(\"api_rosters\")\n\n        return pd.DataFrame(self._api_rosters)\n\n    @property\n    def changes(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of changes scraped from HTML shifts &amp; roster endpoints.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., CHANGE\n            event_type (str):\n                Type of change that occurred, e.g., AWAY CHANGE\n            description (str | None):\n                Description of the event, e.g.,\n                PLAYERS ON: MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n                / PLAYERS OFF: YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            change_on_count (int):\n                Number of players on, e.g., 4\n            change_off_count (int):\n                Number of players off, e.g., 4\n            change_on (str):\n                Names of players on, e.g., MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n            change_on_jersey (str):\n                Combination of jerseys and numbers for the players on, e.g., NSH14, NSH19, NSH64, NSH95\n            change_on_eh_id (str):\n                Evolving Hockey IDs of the players on, e.g.,\n                MATTIAS.EKHOLM, CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE\n            change_on_positions (str):\n                Positions of the players on, e.g., D, C, C, C\n            change_off (str):\n                Names of players off, e.g., YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            change_off_jersey (str):\n                Combination of jerseys and numbers for the players off, e.g., NSH7, NSH9, NSH33, NSH92\n            change_off_eh_id (str):\n                Evolving Hockey IDs of the players off, e.g.,\n                YANNICK.WEBER, FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN\n            change_off_positions (str):\n                Positions of the players off, e.g., D, L, L, C\n            change_on_forwards_count (int):\n                Number of forwards on, e.g.,\n            change_off_forwards_count (int):\n                Number of forwards off, e.g., 3\n            change_on_forwards (str):\n                Names of forwards on, e.g., CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n            change_on_forwards_jersey (str):\n                Combination of jerseys and numbers for the forwards on, e.g., NSH19, NSH64, NSH95\n            change_on_forwards_eh_id (str):\n                Evolving Hockey IDs of the forwards on, e.g.,\n                CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE\n            change_off_forwards (str):\n                Names of forwards off, e.g., FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            change_off_forwards_jersey (str):\n                Combination of jerseys and numbers for the forwards off, e.g., NSH9, NSH33, NSH92\n            change_off_forwards_eh_id (str):\n                Evolving Hockey IDs of the forwards off, e.g.,\n                FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN\n            change_on_defense_count (int):\n                Number of defense on, e.g., 1\n            change_off_defense_count (int):\n                Number of defense off, e.g., 1\n            change_on_defense (str):\n                Names of defense on, e.g., MATTIAS EKHOLM\n            change_on_defense_jersey (str):\n                Combination of jerseys and numbers for the defense on, e.g., NSH14\n            change_on_defense_eh_id (str):\n                Evolving Hockey IDs of the defense on, e.g., MATTIAS.EKHOLM\n            change_off_defense (str):\n                Names of defense off, e.g., YANNICK WEBER\n            change_off_defense_jersey (str):\n                Combination of jerseys and numbers for the defense off, e.g., NSH7\n            change_off_defebse_eh_id (str):\n                Evolving Hockey IDs of the defebse off, e.g., YANNICK.WEBER\n            change_on_goalie_count (int):\n                Number of goalies on, e.g., 0\n            change_off_goalie_count (int):\n                Number of goalies off, e.g., 0\n            change_on_goalies (str):\n                Names of goalies on, e.g., None\n            change_on_goalies_jersey (str):\n                Combination of jerseys and numbers for the goalies on, e.g., None\n            change_on_goalies_eh_id (str):\n                Evolving Hockey IDs of the goalies on, e.g., None\n            change_off_goalies (str):\n                Names of goalies off, e.g., None\n            change_off_goalies_jersey (str):\n                Combination of jerseys and numbers for the goalies off, e.g., None\n            change_off_goalies_eh_id (str):\n                Evolving Hockey IDs of the goalies off, e.g., None\n            is_home (int):\n                Dummy indicator whether change team is home, e.g., 0\n            is_away (int):\n                Dummy indicator whether change team is away, e.g., 1\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.changes\n        \"\"\"\n        # TODO: Add API ID columns to documentation\n\n        if not self._changes:\n            self._scrape(\"changes\")\n\n        return pd.DataFrame(self._changes)\n\n    @property\n    def html_events(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of events scraped from HTML endpoint.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_idx (int):\n                Index ID for event, e.g., 331\n            period (int):\n                Period number of the event, e.g., 3\n            period_time (str):\n                Time elapsed in the period, e.g., 19:38\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            description (str | None):\n                Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., DEF\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            penalty_length (str | None):\n                Duration of the penalty, e.g., None\n            penalty (str | None):\n                Reason for the penalty, e.g., None\n            strength (str | None):\n                Code to indication strength state, e.g., EV\n            away_skaters (str):\n                Away skaters on-ice, e.g., 13C, 19C, 64C, 14D, 59D, 35G\n            home_skaters (str):\n                Home skaters on-ice, e.g., 19C, 77C, 12R, 88R, 2D, 56D\n            version (int):\n                Increases with simultaneous events, used for combining events in the scraper, e.g., 1\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.html_events\n\n        \"\"\"\n        if not self._html_events:\n            self._scrape(\"html_events\")\n\n        return pd.DataFrame(self._html_events)\n\n    @property\n    def html_rosters(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of players scraped from HTML endpoint.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            jersey (int):\n                Player's jersey number, e.g., 9\n            position (str):\n                Player's position, e.g., L\n            starter (int):\n                Whether the player started the game, e.g., 0\n            status (str):\n                Whether player is active or scratched, e.g., ACTIVE\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.html_rosters\n\n        \"\"\"\n        if not self._html_rosters:\n            self._scrape(\"html_rosters\")\n\n        return pd.DataFrame(self._html_rosters)\n\n    @property\n    def play_by_play(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of play-by-play data.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            game_date (str):\n                Date game was played, e.g., 2020-01-09\n            event_idx (int):\n                Index ID for event, e.g., 667\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            strength_state (str):\n                Strength state, e.g., 5vE\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., CHI\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            description (str | None):\n                Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., DEF\n            coords_x (int):\n                x-coordinates where the event occurred, e.g, -96\n            coords_y (int):\n                y-coordinates where the event occurred, e.g., 11\n            danger (int):\n                Whether shot event occurred from danger area, e.g., 0\n            high_danger (int):\n                Whether shot event occurred from high-danger area, e.g., 0\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_eh_id_api (str):\n                Evolving Hockey ID for player_1 from the api_events (for debugging), e.g., PEKKA.RINNE\n            player_1_api_id (int):\n                NHL API ID for player_1, e.g., 8471469\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_1_type (str):\n                Type of player, e.g., GOAL SCORER\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_eh_id_api (str | None):\n                Evolving Hockey ID for player_2 from the api_events (for debugging), e.g., None\n            player_2_api_id (int | None):\n                NHL API ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_2_type (str | None):\n                Type of player, e.g., None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_eh_id_api (str | None):\n                Evolving Hockey ID for player_3 from the api_events (for debugging), e.g., None\n            player_3_api_id (int | None):\n                NHL API ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            player_3_type (str | None):\n                Type of player, e.g., None\n            score_state (str):\n                Score of the game from event team's perspective, e.g., 4v2\n            score_diff (int):\n                Score differential from event team's perspective, e.g., 2\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            event_length (int):\n                Time elapsed since previous event, e.g., 5\n            event_distance (float | None):\n                Calculated distance of event from goal, e.g, 185.32673849177834\n            pbp_distance (int):\n                Distance of event from goal from description, e.g., 185\n            event_angle (float | None):\n                Angle of event towards goal, e.g., 57.52880770915151\n            penalty (str | None):\n                Name of penalty, e.g., None\n            penalty_length (int | None):\n                Duration of penalty, e.g., None\n            home_score (int):\n                Home team's score, e.g., 2\n            home_score_diff (int):\n                Home team's score differential, e.g., -2\n            away_score (int):\n                Away team's score, e.g., 4\n            away_score_diff (int):\n                Away team's score differential, e.g., 2\n            is_home (int):\n                Whether event team is home, e.g., 0\n            is_away (int):\n                Whether event is away, e.g., 1\n            home_team (str):\n                Home team, e.g., CHI\n            away_team (str):\n                Away team, e.g., NSH\n            home_skaters (int):\n                Number of home team skaters on-ice (excl. goalies), e.g., 6\n            away_skaters (int):\n                Number of away team skaters on-ice (excl. goalies), e.g., 5\n            home_on (list | str | None):\n                Name of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            home_on_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_on_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            home_on_positions (list | str | None):\n                Positions of home team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            away_on (list | str | None):\n                Name of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            away_on_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            away_on_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            away_on_positions (list | str | None):\n                Positions of away team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            event_team_skaters (int | None):\n                Number of event team skaters on-ice (excl. goalies), e.g., 5\n            teammates (list | str | None):\n                Name of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            teammates_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            teammates_api_id (list | str | None = None):\n                NHL API IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            teammates_positions (list | str | None):\n                Positions of event team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            own_goalie (list | str | None):\n                Name of the event team's goalie, e.g., PEKKA RINNE\n            own_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the event team's goalie, e.g., PEKKA.RINNE\n            own_goalie_api_id (list | str | None):\n                NHL API ID of the event team's goalie, e.g., 8471469\n            forwards (list | str | None):\n                Name of event team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            forwards_api_id (list | str | None):\n                NHL API IDs of event team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            defense (list | str | None):\n                Name of event team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            defense_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            defense_api_id (list | str | None):\n                NHL API IDs of event team's skaters on-ice, e.g., 8475218, 8474600\n            opp_strength_state (str | None):\n                Strength state from opposing team's perspective, e.g., Ev5\n            opp_score_state (str | None):\n                Score state from opposing team's perspective, e.g., 2v4\n            opp_score_diff (int | None):\n                Score differential from opposing team's perspective, e.g., -2\n            opp_team_skaters (int | None):\n                Number of opposing team skaters on-ice (excl. goalies), e.g., 6\n            opp_team_on (list | str | None):\n                Name of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_team_on_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_team_on_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            opp_team_on_positions (list | str | None):\n                Positions of opposing team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            opp_goalie (list | str | None):\n                Name of the opposing team's goalie, e.g., None\n            opp_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the opposing team's goalie, e.g., None\n            opp_goalie_api_id (list | str | None):\n                NHL API ID of the opposing team's goalie, e.g., None\n            opp_forwards (list | str | None):\n                Name of opposing team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            opp_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            opp_forwards_api_id (list | str | None):\n                NHL API IDs of opposing team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            opp_defense (list | str | None):\n                Name of opposing team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_defense_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice, e.g., 8470281, 8476979\n            home_forwards (list | str | None):\n                Name of home team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            home_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            home_forwards_api_id (list | str | None = None):\n                NHL API IDs of home team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            home_defense (list | str | None):\n                Name of home team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            home_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_defense_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice, e.g., 8470281, 8476979\n            home_goalie (list | str | None):\n                Name of the home team's goalie, e.g., None\n            home_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the home team's goalie, e.g., None\n            home_goalie_api_id (list | str | None):\n                NHL API ID of the home team's goalie, e.g., None\n            away_forwards (list | str | None):\n                Name of away team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            away_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            away_forwards_api_id (list | str | None):\n                NHL API IDs of away team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            away_defense (list | str | None):\n                Name of away team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            away_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            away_defense_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice, e.g., 8475218, 8474600\n            away_goalie (list | str | None):\n                Name of the away team's goalie, e.g., PEKKA RINNE\n            away_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the away team's goalie, e.g., PEKKA.RINNE\n            away_goalie_api_id (list | str | None):\n                NHL API ID of the away team's goalie, e.g., 8471469\n            change_on_count (int | None):\n                Number of players on, e.g., None\n            change_off_count (int | None):\n                Number of players off, e.g., None\n            change_on (list | str | None):\n                Names of the players on, e.g., None\n            change_on_eh_id (list | str | None):\n                Evolving Hockey IDs of the players on, e.g., None\n            change_on_positions (list | str | None):\n                Postions of the players on, e.g., None\n            change_off (list | str | None):\n                Names of the players off, e.g., None\n            change_off_eh_id (list | str | None):\n                Evolving Hockey IDs of the players off, e.g., None\n            change_off_positions (list | str | None):\n                Positions of the players off, e.g., None\n            change_on_forwards_count (int | None):\n                Number of forwards changing on, e.g., None\n            change_off_forwards_count (int | None):\n                Number of forwards off, e.g., None\n            change_on_forwards (list | str | None):\n                Names of the forwards on, e.g., None\n            change_on_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards on, e.g., None\n            change_off_forwards (list | str | None):\n                Names of the forwards off, e.g., None\n            change_off_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards off, e.g., None\n            change_on_defense_count (int | None):\n                Number of defense on, e.g., None\n            change_off_defense_count (int | None):\n                Number of defense off, e.g., None\n            change_on_defense (list | str | None):\n                Names of the defense on, e.g., None\n            change_on_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense on, e.g., None\n            change_off_defense (list | str | None):\n                Names of the defense off, e.g., None\n            change_off_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense off, e.g., None\n            change_on_goalie_count (int | None):\n                Number of goalies on, e.g., None\n            change_off_goalie_count (int | None):\n                Number of goalies off, e.g., None\n            change_on_goalie (list | str | None):\n                Name of goalie on, e.g., None\n            change_on_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie on, e.g., None\n            change_off_goalie (list | str | None):\n                Name of the goalie off, e.g., None\n            change_off_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie off, e.g., None\n            goal (int):\n                Dummy indicator whether event is a goal, e.g., 1\n            shot (int):\n                Dummy indicator whether event is a shot, e.g., 1\n            miss (int):\n                Dummy indicator whether event is a miss, e.g., 0\n            fenwick (int):\n                Dummy indicator whether event is a fenwick event, e.g., 1\n            corsi (int):\n                Dummy indicator whether event is a corsi event, e.g., 1\n            block (int):\n                Dummy indicator whether event is a block, e.g., 0\n            hit (int):\n                Dummy indicator whether event is a hit, e.g., 0\n            give (int):\n                Dummy indicator whether event is a give, e.g., 0\n            take (int):\n                Dummy indicator whether event is a take, e.g., 0\n            fac (int):\n                Dummy indicator whether event is a faceoff, e.g., 0\n            penl (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            change (int):\n                Dummy indicator whether event is a change, e.g., 0\n            stop (int):\n                Dummy indicator whether event is a stop, e.g., 0\n            chl (int):\n                Dummy indicator whether event is a challenge, e.g., 0\n            ozf (int):\n                Dummy indicator whether event is a offensive zone faceoff, e.g., 0\n            nzf (int):\n                Dummy indicator whether event is a neutral zone faceoff, e.g., 0\n            dzf (int):\n                Dummy indicator whether event is a defensive zone faceoff, e.g., 0\n            ozc (int):\n                Dummy indicator whether event is a offensive zone change, e.g., 0\n            nzc (int):\n                Dummy indicator whether event is a neutral zone change, e.g., 0\n            dzc (int):\n                Dummy indicator whether event is a defensive zone change, e.g., 0\n            otf (int):\n                Dummy indicator whether event is an on-the-fly change, e.g., 0\n            pen0 (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            pen2 (int):\n                Dummy indicator whether event is a minor penalty, e.g., 0\n            pen4 (int):\n                Dummy indicator whether event is a double minor penalty, e.g., 0\n            pen5 (int):\n                Dummy indicator whether event is a major penalty, e.g., 0\n            pen10 (int):\n                Dummy indicator whether event is a game misconduct penalty, e.g., 0\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.play_by_play\n\n        \"\"\"\n        # TODO: Add change on / change off API ID columns to documentation\n\n        if self.game_ids != self._scraped_play_by_play:\n            self._scrape(\"play_by_play\")\n\n        return pd.DataFrame(self._play_by_play)\n\n    @property\n    def play_by_play_ext(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of play-by-play data.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            game_date (str):\n                Date game was played, e.g., 2020-01-09\n            event_idx (int):\n                Index ID for event, e.g., 667\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            strength_state (str):\n                Strength state, e.g., 5vE\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., CHI\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            description (str | None):\n                Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., DEF\n            coords_x (int):\n                x-coordinates where the event occurred, e.g, -96\n            coords_y (int):\n                y-coordinates where the event occurred, e.g., 11\n            danger (int):\n                Whether shot event occurred from danger area, e.g., 0\n            high_danger (int):\n                Whether shot event occurred from high-danger area, e.g., 0\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_eh_id_api (str):\n                Evolving Hockey ID for player_1 from the api_events (for debugging), e.g., PEKKA.RINNE\n            player_1_api_id (int):\n                NHL API ID for player_1, e.g., 8471469\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_1_type (str):\n                Type of player, e.g., GOAL SCORER\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_eh_id_api (str | None):\n                Evolving Hockey ID for player_2 from the api_events (for debugging), e.g., None\n            player_2_api_id (int | None):\n                NHL API ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_2_type (str | None):\n                Type of player, e.g., None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_eh_id_api (str | None):\n                Evolving Hockey ID for player_3 from the api_events (for debugging), e.g., None\n            player_3_api_id (int | None):\n                NHL API ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            player_3_type (str | None):\n                Type of player, e.g., None\n            score_state (str):\n                Score of the game from event team's perspective, e.g., 4v2\n            score_diff (int):\n                Score differential from event team's perspective, e.g., 2\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            event_length (int):\n                Time elapsed since previous event, e.g., 5\n            event_distance (float | None):\n                Calculated distance of event from goal, e.g, 185.32673849177834\n            pbp_distance (int):\n                Distance of event from goal from description, e.g., 185\n            event_angle (float | None):\n                Angle of event towards goal, e.g., 57.52880770915151\n            penalty (str | None):\n                Name of penalty, e.g., None\n            penalty_length (int | None):\n                Duration of penalty, e.g., None\n            home_score (int):\n                Home team's score, e.g., 2\n            home_score_diff (int):\n                Home team's score differential, e.g., -2\n            away_score (int):\n                Away team's score, e.g., 4\n            away_score_diff (int):\n                Away team's score differential, e.g., 2\n            is_home (int):\n                Whether event team is home, e.g., 0\n            is_away (int):\n                Whether event is away, e.g., 1\n            home_team (str):\n                Home team, e.g., CHI\n            away_team (str):\n                Away team, e.g., NSH\n            home_skaters (int):\n                Number of home team skaters on-ice (excl. goalies), e.g., 6\n            away_skaters (int):\n                Number of away team skaters on-ice (excl. goalies), e.g., 5\n            home_on (list | str | None):\n                Name of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            home_on_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_on_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            home_on_positions (list | str | None):\n                Positions of home team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            away_on (list | str | None):\n                Name of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            away_on_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            away_on_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            away_on_positions (list | str | None):\n                Positions of away team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            event_team_skaters (int | None):\n                Number of event team skaters on-ice (excl. goalies), e.g., 5\n            teammates (list | str | None):\n                Name of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            teammates_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            teammates_api_id (list | str | None = None):\n                NHL API IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            teammates_positions (list | str | None):\n                Positions of event team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            own_goalie (list | str | None):\n                Name of the event team's goalie, e.g., PEKKA RINNE\n            own_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the event team's goalie, e.g., PEKKA.RINNE\n            own_goalie_api_id (list | str | None):\n                NHL API ID of the event team's goalie, e.g., 8471469\n            forwards (list | str | None):\n                Name of event team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            forwards_api_id (list | str | None):\n                NHL API IDs of event team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            defense (list | str | None):\n                Name of event team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            defense_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            defense_api_id (list | str | None):\n                NHL API IDs of event team's skaters on-ice, e.g., 8475218, 8474600\n            opp_strength_state (str | None):\n                Strength state from opposing team's perspective, e.g., Ev5\n            opp_score_state (str | None):\n                Score state from opposing team's perspective, e.g., 2v4\n            opp_score_diff (int | None):\n                Score differential from opposing team's perspective, e.g., -2\n            opp_team_skaters (int | None):\n                Number of opposing team skaters on-ice (excl. goalies), e.g., 6\n            opp_team_on (list | str | None):\n                Name of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_team_on_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_team_on_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            opp_team_on_positions (list | str | None):\n                Positions of opposing team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            opp_goalie (list | str | None):\n                Name of the opposing team's goalie, e.g., None\n            opp_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the opposing team's goalie, e.g., None\n            opp_goalie_api_id (list | str | None):\n                NHL API ID of the opposing team's goalie, e.g., None\n            opp_forwards (list | str | None):\n                Name of opposing team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            opp_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            opp_forwards_api_id (list | str | None):\n                NHL API IDs of opposing team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            opp_defense (list | str | None):\n                Name of opposing team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_defense_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice, e.g., 8470281, 8476979\n            home_forwards (list | str | None):\n                Name of home team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            home_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            home_forwards_api_id (list | str | None = None):\n                NHL API IDs of home team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            home_defense (list | str | None):\n                Name of home team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            home_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_defense_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice, e.g., 8470281, 8476979\n            home_goalie (list | str | None):\n                Name of the home team's goalie, e.g., None\n            home_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the home team's goalie, e.g., None\n            home_goalie_api_id (list | str | None):\n                NHL API ID of the home team's goalie, e.g., None\n            away_forwards (list | str | None):\n                Name of away team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            away_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            away_forwards_api_id (list | str | None):\n                NHL API IDs of away team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            away_defense (list | str | None):\n                Name of away team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            away_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            away_defense_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice, e.g., 8475218, 8474600\n            away_goalie (list | str | None):\n                Name of the away team's goalie, e.g., PEKKA RINNE\n            away_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the away team's goalie, e.g., PEKKA.RINNE\n            away_goalie_api_id (list | str | None):\n                NHL API ID of the away team's goalie, e.g., 8471469\n            change_on_count (int | None):\n                Number of players on, e.g., None\n            change_off_count (int | None):\n                Number of players off, e.g., None\n            change_on (list | str | None):\n                Names of the players on, e.g., None\n            change_on_eh_id (list | str | None):\n                Evolving Hockey IDs of the players on, e.g., None\n            change_on_positions (list | str | None):\n                Postions of the players on, e.g., None\n            change_off (list | str | None):\n                Names of the players off, e.g., None\n            change_off_eh_id (list | str | None):\n                Evolving Hockey IDs of the players off, e.g., None\n            change_off_positions (list | str | None):\n                Positions of the players off, e.g., None\n            change_on_forwards_count (int | None):\n                Number of forwards changing on, e.g., None\n            change_off_forwards_count (int | None):\n                Number of forwards off, e.g., None\n            change_on_forwards (list | str | None):\n                Names of the forwards on, e.g., None\n            change_on_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards on, e.g., None\n            change_off_forwards (list | str | None):\n                Names of the forwards off, e.g., None\n            change_off_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards off, e.g., None\n            change_on_defense_count (int | None):\n                Number of defense on, e.g., None\n            change_off_defense_count (int | None):\n                Number of defense off, e.g., None\n            change_on_defense (list | str | None):\n                Names of the defense on, e.g., None\n            change_on_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense on, e.g., None\n            change_off_defense (list | str | None):\n                Names of the defense off, e.g., None\n            change_off_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense off, e.g., None\n            change_on_goalie_count (int | None):\n                Number of goalies on, e.g., None\n            change_off_goalie_count (int | None):\n                Number of goalies off, e.g., None\n            change_on_goalie (list | str | None):\n                Name of goalie on, e.g., None\n            change_on_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie on, e.g., None\n            change_off_goalie (list | str | None):\n                Name of the goalie off, e.g., None\n            change_off_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie off, e.g., None\n            goal (int):\n                Dummy indicator whether event is a goal, e.g., 1\n            shot (int):\n                Dummy indicator whether event is a shot, e.g., 1\n            miss (int):\n                Dummy indicator whether event is a miss, e.g., 0\n            fenwick (int):\n                Dummy indicator whether event is a fenwick event, e.g., 1\n            corsi (int):\n                Dummy indicator whether event is a corsi event, e.g., 1\n            block (int):\n                Dummy indicator whether event is a block, e.g., 0\n            hit (int):\n                Dummy indicator whether event is a hit, e.g., 0\n            give (int):\n                Dummy indicator whether event is a give, e.g., 0\n            take (int):\n                Dummy indicator whether event is a take, e.g., 0\n            fac (int):\n                Dummy indicator whether event is a faceoff, e.g., 0\n            penl (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            change (int):\n                Dummy indicator whether event is a change, e.g., 0\n            stop (int):\n                Dummy indicator whether event is a stop, e.g., 0\n            chl (int):\n                Dummy indicator whether event is a challenge, e.g., 0\n            ozf (int):\n                Dummy indicator whether event is a offensive zone faceoff, e.g., 0\n            nzf (int):\n                Dummy indicator whether event is a neutral zone faceoff, e.g., 0\n            dzf (int):\n                Dummy indicator whether event is a defensive zone faceoff, e.g., 0\n            ozc (int):\n                Dummy indicator whether event is a offensive zone change, e.g., 0\n            nzc (int):\n                Dummy indicator whether event is a neutral zone change, e.g., 0\n            dzc (int):\n                Dummy indicator whether event is a defensive zone change, e.g., 0\n            otf (int):\n                Dummy indicator whether event is an on-the-fly change, e.g., 0\n            pen0 (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            pen2 (int):\n                Dummy indicator whether event is a minor penalty, e.g., 0\n            pen4 (int):\n                Dummy indicator whether event is a double minor penalty, e.g., 0\n            pen5 (int):\n                Dummy indicator whether event is a major penalty, e.g., 0\n            pen10 (int):\n                Dummy indicator whether event is a game misconduct penalty, e.g., 0\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.play_by_play\n\n        \"\"\"\n        # TODO: Update documentation for extended version of play_by_play\n\n        if self.game_ids != self._scraped_play_by_play:\n            self._scrape(\"play_by_play\")\n\n        return pd.DataFrame(self._play_by_play_ext)\n\n    @property\n    def rosters(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of players scraped from API &amp; HTML endpoints.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            api_id (int | None):\n                Player's NHL API ID, e.g., 8476887\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            jersey (int):\n                Player's jersey number, e.g., 9\n            position (str):\n                Player's position, e.g., L\n            starter (int):\n                Whether the player started the game, e.g., 0\n            status (str):\n                Whether player is active or scratched, e.g., ACTIVE\n            headshot_url (str | None):\n                URL to get player's headshot, e.g., https://assets.nhle.com/mugs/nhl/20192020/NSH/8476887.png\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.rosters\n\n        \"\"\"\n        if not self._rosters:\n            self._scrape(\"rosters\")\n\n        return pd.DataFrame(self._rosters)\n\n    @property\n    def shifts(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of shifts scraped from HTML endpoint.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            position (str):\n                Player's position, e.g., L\n            jersey (int):\n                Player's jersey number, e.g., 9\n            shift_count (int):\n                Shift number for that player, e.g., 1\n            period (int):\n                Period number for the shift, e.g., 1\n            start_time (str):\n                Time shift started, e.g., 0:00\n            end_time (str):\n                Time shift ended, e.g., 0:18\n            duration (str):\n                Length of shift, e.g, 00:18\n            start_time_seconds (int):\n                Time shift started in seconds, e.g., 0\n            end_time_seconds (int):\n                Time shift ended in seconds, e.g., 18\n            duration_seconds (int):\n                Length of shift in seconds, e.g., 18\n            shift_start (str):\n                Time the shift started as the original string, e.g., 0:00 / 20:00\n            shift_end (str):\n                Time the shift ended as the original string, e.g., 0:18 / 19:42\n            goalie (int):\n                Whether player is a goalie, e.g., 0\n            is_home (int):\n                Whether player is home e.g., 0\n            is_away (int):\n                Whether player is away, e.g., 1\n            team_venue (str):\n                Whether player is home or away, e.g., AWAY\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.shifts\n\n        \"\"\"\n        if not self._shifts:\n            self._scrape(\"shifts\")\n\n        return pd.DataFrame(self._shifts)\n\n    def _prep_ind(\n        self,\n        level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n        score: bool = False,\n        teammates: bool = False,\n        opposition: bool = False,\n    ) -&gt; None:\n        \"\"\"Prepares DataFrame of individual stats from play-by-play data.\n\n        Nested within `prep_stats` method.\n\n        Parameters:\n            level (str):\n                Determines the level of aggregation. One of season, session, game, period\n            score (bool):\n                Determines if stats account for score state\n            teammates (bool):\n                Determines if stats account for teammates on ice\n            opposition (bool):\n                Determines if stats account for opponents on ice\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 2023 for 2023-24 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020001\n            game_date (int):\n                Date game was played, e.g., 2023-10-10\n            player (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            api_id (str):\n                NHL API ID for the player, e.g., 8476887\n            position (str):\n                Player's position, e.g., L\n            team (str):\n                Player's team, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., TBL\n            strength_state (str):\n                Strength state, e.g., 5v5\n            period (int):\n                Period, e.g., 3\n            score_state (str):\n                Score state, e.g., 2v1\n            forwards (str):\n                Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY\n            forwards_eh_id (str):\n                Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n            forwards_api_id (str):\n                Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158\n            defense (str):\n                Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER\n            defense_eh_id (str):\n                Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER\n            defense_api_id (str):\n                Defense teammates' NHL API IDs, e.g., 8474151, 8478851\n            own_goalie (str):\n                Own goalie, e.g., JUUSE SAROS\n            own_goalie_eh_id (str):\n                Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS\n            own_goalie_api_id (str):\n                Own goalie's NHL API ID, e.g., 8477424\n            opp_forwards (str):\n                Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS\n            opp_forwards_eh_id (str):\n                Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS\n            opp_forwards_api_id (str):\n                Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564\n            opp_defense (str):\n                Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN\n            opp_defense_eh_id (str):\n                Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN\n            opp_defense_api_id (str):\n                Opposing defense's NHL API IDs, e.g., 8480246, 8475167\n            opp_goalie (str):\n                Opposing goalie, e.g., JONAS JOHANSSON\n            opp_goalie_eh_id (str):\n                Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON\n            opp_goalie_api_id (str):\n                Opposing goalie's NHL API ID, e.g., 8477992\n            g (int):\n                Goals scored, e.g, 0\n            ihdg (int):\n                High-danger goals scored, e.g, 0\n            a1 (int):\n                Primary assists, e.g, 0\n            a2 (int):\n                Secondary assists, e.g, 0\n            ixg (float):\n                Individual xG for, e.g, 1.014336\n            isf (int):\n                Individual shots taken, e.g, 3\n            ihdsf (int):\n                High-danger shots taken, e.g, 3\n            imsf (int):\n                Individual missed shots, e.g, 0\n            ihdm (int):\n                High-danger missed shots, e.g, 0\n            iff (int):\n                Individual fenwick for, e.g., 3\n            ihdf (int):\n                High-danger fenwick for, e.g., 3\n            isb (int):\n                Shots taken that were blocked, e.g, 0\n            icf (int):\n                Individual corsi for, e.g., 3\n            ibs (int):\n                Individual shots blocked on defense, e.g, 0\n            igive (int):\n                Individual giveaways, e.g, 0\n            itake (int):\n                Individual takeaways, e.g, 0\n            ihf (int):\n                Individual hits for, e.g, 0\n            iht (int):\n                Individual hits taken, e.g, 0\n            ifow (int):\n                Individual faceoffs won, e.g, 0\n            ifol (int):\n                Individual faceoffs lost, e.g, 0\n            iozfw (int):\n                Individual faceoffs won in offensive zone, e.g, 0\n            iozfl (int):\n                Individual faceoffs lost in offensive zone, e.g, 0\n            inzfw (int):\n                Individual faceoffs won in neutral zone, e.g, 0\n            inzfl (int):\n                Individual faceoffs lost in neutral zone, e.g, 0\n            idzfw (int):\n                Individual faceoffs won in defensive zone, e.g, 0\n            idzfl (int):\n                Individual faceoffs lost in defensive zone, e.g, 0\n            a1_xg (float):\n                xG on primary assists, e.g, 0\n            a2_xg (float):\n                xG on secondary assists, e.g, 0\n            ipent0 (int):\n                Individual penalty shots against, e.g, 0\n            ipent2 (int):\n                Individual minor penalties taken, e.g, 0\n            ipent4 (int):\n                Individual double minor penalties taken, e.g, 0\n            ipent5 (int):\n                Individual major penalties taken, e.g, 0\n            ipent10 (int):\n                Individual game misconduct penalties taken, e.g, 0\n            ipend0 (int):\n                Individual penalty shots drawn, e.g, 0\n            ipend2 (int):\n                Individual minor penalties taken, e.g, 0\n            ipend4 (int):\n                Individual double minor penalties drawn, e.g, 0\n            ipend5 (int):\n                Individual major penalties drawn, e.g, 0\n            ipend10 (int):\n                Individual game misconduct penalties drawn, e.g, 0\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2023020001\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Aggregates individual stats to game level\n            &gt;&gt;&gt; scraper._prep_ind(level=\"game\")\n\n            Aggregates individual stats to season level\n            &gt;&gt;&gt; scraper._prep_ind(level=\"season\")\n\n            Aggregates individual stats to game level, accounting for teammates on-ice\n            &gt;&gt;&gt; scraper._prep_ind(level=\"game\", teammates=True)\n\n        \"\"\"\n        df = self.play_by_play.copy()\n\n        players = [\"player_1\", \"player_2\", \"player_3\"]\n\n        merge_list = [\"season\", \"session\", \"player\", \"eh_id\", \"api_id\", \"position\", \"team\", \"strength_state\"]\n\n        if level == \"session\" or level == \"season\":\n            merge_list = merge_list\n\n        if level == \"game\":\n            merge_list.extend([\"game_id\", \"game_date\", \"opp_team\"])\n\n        if level == \"period\":\n            merge_list.extend([\"game_id\", \"game_date\", \"opp_team\", \"period\"])\n\n        if score:\n            merge_list.append(\"score_state\")\n\n        if teammates:\n            merge_list.extend(\n                [\n                    \"forwards\",\n                    \"forwards_eh_id\",\n                    \"forwards_api_id\",\n                    \"defense\",\n                    \"defense_eh_id\",\n                    \"defense_api_id\",\n                    \"own_goalie\",\n                    \"own_goalie_eh_id\",\n                    \"own_goalie_api_id\",\n                ]\n            )\n\n        if opposition:\n            merge_list.extend(\n                [\n                    \"opp_forwards\",\n                    \"opp_forwards_eh_id\",\n                    \"opp_forwards_api_id\",\n                    \"opp_defense\",\n                    \"opp_defense_eh_id\",\n                    \"opp_defense_api_id\",\n                    \"opp_goalie\",\n                    \"opp_goalie_eh_id\",\n                    \"opp_goalie_api_id\",\n                ]\n            )\n\n            if \"opp_team\" not in merge_list:\n                merge_list.append(\"opp_team\")\n\n        ind_stats = pd.DataFrame(columns=merge_list)\n\n        for player in players:\n            player_eh_id = f\"{player}_eh_id\"\n            player_api_id = f\"{player}_api_id\"\n            position = f\"{player}_position\"\n\n            group_base = [\"season\", \"session\", \"event_team\", player, player_eh_id, player_api_id, position]\n\n            if level == \"session\" or level == \"season\":\n                group_base = group_base\n\n            if level == \"game\":\n                group_base.extend([\"game_id\", \"game_date\", \"opp_team\"])\n\n            if level == \"period\":\n                group_base.extend([\"game_id\", \"game_date\", \"opp_team\", \"period\"])\n\n            if opposition and \"opp_team\" not in group_base:\n                group_base.append(\"opp_team\")\n\n            mask = df[player] != \"BENCH\"\n\n            if player == \"player_1\":\n                group_list = group_base.copy()\n                group_list.append(\"strength_state\")\n\n                if teammates:\n                    group_list.extend(\n                        [\n                            \"forwards\",\n                            \"forwards_eh_id\",\n                            \"forwards_api_id\",\n                            \"defense\",\n                            \"defense_eh_id\",\n                            \"defense_api_id\",\n                            \"own_goalie\",\n                            \"own_goalie_eh_id\",\n                            \"own_goalie_api_id\",\n                        ]\n                    )\n\n                if score:\n                    group_list.append(\"score_state\")\n\n                if opposition:\n                    group_list.extend(\n                        [\n                            \"opp_forwards\",\n                            \"opp_forwards_eh_id\",\n                            \"opp_forwards_api_id\",\n                            \"opp_defense\",\n                            \"opp_defense_eh_id\",\n                            \"opp_defense_api_id\",\n                            \"opp_goalie\",\n                            \"opp_goalie_eh_id\",\n                            \"opp_goalie_api_id\",\n                        ]\n                    )\n\n                stats_list = [\n                    \"block\",\n                    \"block_adj\",\n                    \"fac\",\n                    \"give\",\n                    \"goal\",\n                    \"goal_adj\",\n                    \"hd_fenwick\",\n                    \"hd_goal\",\n                    \"hd_miss\",\n                    \"hd_shot\",\n                    \"hit\",\n                    \"miss\",\n                    \"miss_adj\",\n                    \"pen0\",\n                    \"pen2\",\n                    \"pen4\",\n                    \"pen5\",\n                    \"pen10\",\n                    \"shot\",\n                    \"shot_adj\",\n                    \"take\",\n                    # \"corsi\",\n                    \"fenwick\",\n                    \"fenwick_adj\",\n                    \"pred_goal\",\n                    \"pred_goal_adj\",\n                    \"ozf\",\n                    \"nzf\",\n                    \"dzf\",\n                ]\n\n                stats_dict = {x: \"sum\" for x in stats_list if x in df.columns}\n\n                new_cols = {\n                    \"block\": \"ibs\",\n                    \"block_adj\": \"ibs_adj\",\n                    \"fac\": \"ifow\",\n                    \"give\": \"igive\",\n                    \"goal\": \"g\",\n                    \"goal_adj\": \"g_adj\",\n                    \"hd_fenwick\": \"ihdf\",\n                    \"hd_goal\": \"ihdg\",\n                    \"hd_miss\": \"ihdm\",\n                    \"hd_shot\": \"ihdsf\",\n                    \"hit\": \"ihf\",\n                    \"miss\": \"imsf\",\n                    \"miss_adj\": \"imsf_adj\",\n                    \"pen0\": \"ipent0\",\n                    \"pen2\": \"ipent2\",\n                    \"pen4\": \"ipent4\",\n                    \"pen5\": \"ipent5\",\n                    \"pen10\": \"ipent10\",\n                    \"shot\": \"isf\",\n                    \"shot_adj\": \"isf_adj\",\n                    \"take\": \"itake\",\n                    \"fenwick\": \"iff\",\n                    \"fenwick_adj\": \"iff_adj\",\n                    \"pred_goal\": \"ixg\",\n                    \"pred_goal_adj\": \"ixg_adj\",\n                    \"ozf\": \"iozfw\",\n                    \"nzf\": \"inzfw\",\n                    \"dzf\": \"idzfw\",\n                    \"event_team\": \"team\",\n                    player: \"player\",\n                    player_eh_id: \"eh_id\",\n                    player_api_id: \"api_id\",\n                    position: \"position\",\n                }\n\n                mask = np.logical_and.reduce(\n                    [df[player] != \"BENCH\", ~df.description.astype(str).str.contains(\"BLOCKED BY TEAMMATE\", na=False)]\n                )\n\n                player_df = df[mask].copy().groupby(group_list, as_index=False).agg(stats_dict).rename(columns=new_cols)\n\n                # drop_list = [x for x in stats if x not in new_cols.keys() and x in player_df.columns]\n\n            if player == \"player_2\":\n                # Getting on-ice stats against for player 2\n\n                opp_group_list = group_base.copy()\n                opp_group_list.append(\"opp_strength_state\")\n\n                event_group_list = group_base.copy()\n                event_group_list.append(\"strength_state\")\n\n                if not opposition and level in [\"season\", \"session\"]:\n                    opp_group_list.remove(\"event_team\")\n                    opp_group_list.append(\"opp_team\")\n\n                if teammates:\n                    opp_group_list.extend(\n                        [\n                            \"opp_forwards\",\n                            \"opp_forwards_eh_id\",\n                            \"opp_forwards_api_id\",\n                            \"opp_defense\",\n                            \"opp_defense_eh_id\",\n                            \"opp_defense_api_id\",\n                            \"opp_goalie\",\n                            \"opp_goalie_eh_id\",\n                            \"opp_goalie_api_id\",\n                        ]\n                    )\n\n                    event_group_list.extend(\n                        [\n                            \"forwards\",\n                            \"forwards_eh_id\",\n                            \"forwards_api_id\",\n                            \"defense\",\n                            \"defense_eh_id\",\n                            \"defense_api_id\",\n                            \"own_goalie\",\n                            \"own_goalie_eh_id\",\n                            \"own_goalie_api_id\",\n                        ]\n                    )\n\n                if score:\n                    opp_group_list.append(\"opp_score_state\")\n                    event_group_list.append(\"score_state\")\n\n                if opposition:\n                    opp_group_list.extend(\n                        [\n                            \"forwards\",\n                            \"forwards_eh_id\",\n                            \"forwards_api_id\",\n                            \"defense\",\n                            \"defense_eh_id\",\n                            \"defense_api_id\",\n                            \"own_goalie\",\n                            \"own_goalie_eh_id\",\n                            \"own_goalie_api_id\",\n                        ]\n                    )\n\n                    event_group_list.extend(\n                        [\n                            \"opp_forwards\",\n                            \"opp_forwards_eh_id\",\n                            \"opp_forwards_api_id\",\n                            \"opp_defense\",\n                            \"opp_defense_eh_id\",\n                            \"opp_defense_api_id\",\n                            \"opp_goalie\",\n                            \"opp_goalie_eh_id\",\n                            \"opp_goalie_api_id\",\n                        ]\n                    )\n\n                stats_1 = [\n                    \"block\",\n                    \"block_adj\",\n                    \"fac\",\n                    \"hit\",\n                    \"pen0\",\n                    \"pen2\",\n                    \"pen4\",\n                    \"pen5\",\n                    \"pen10\",\n                    \"ozf\",\n                    \"nzf\",\n                    \"dzf\",\n                ]\n\n                stats_1 = {x: \"sum\" for x in stats_1 if x.lower() in df.columns}\n\n                new_cols_1 = {\n                    \"opp_goalie\": \"own_goalie\",\n                    \"opp_goalie_eh_id\": \"own_goalie_eh_id\",\n                    \"opp_goalie_api_id\": \"own_goalie_api_id\",\n                    \"own_goalie\": \"opp_goalie\",\n                    \"own_goalie_eh_id\": \"opp_goalie_eh_id\",\n                    \"own_goalie_api_id\": \"opp_goalie_api_id\",\n                    \"opp_team\": \"team\",\n                    \"event_team\": \"opp_team\",\n                    \"opp_score_state\": \"score_state\",\n                    \"opp_strength_state\": \"strength_state\",\n                    \"pen0\": \"ipend0\",\n                    \"pen2\": \"ipend2\",\n                    \"pen4\": \"ipend4\",\n                    \"pen5\": \"ipend5\",\n                    \"pen10\": \"ipend10\",\n                    player: \"player\",\n                    player_eh_id: \"eh_id\",\n                    player_api_id: \"api_id\",\n                    position: \"position\",\n                    \"fac\": \"ifol\",\n                    \"hit\": \"iht\",\n                    \"ozf\": \"iozfl\",\n                    \"nzf\": \"inzfl\",\n                    \"dzf\": \"idzfl\",\n                    \"block\": \"isb\",\n                    \"block_adj\": \"isb_adj\",\n                    \"opp_forwards\": \"forwards\",\n                    \"opp_forwards_eh_id\": \"forwards_eh_id\",\n                    \"opp_forwards_api_id\": \"forwards_api_id\",\n                    \"opp_defense\": \"defense\",\n                    \"opp_defense_eh_id\": \"defense_eh_id\",\n                    \"opp_defense_api_id\": \"defense_api_id\",\n                    \"forwards\": \"opp_forwards\",\n                    \"forwards_eh_id\": \"opp_forwards_eh_id\",\n                    \"forwards_api_id\": \"opp_forwards_api_id\",\n                    \"defense\": \"opp_defense\",\n                    \"defense_eh_id\": \"opp_defense_eh_id\",\n                    \"defense_api_id\": \"opp_defense_api_id\",\n                }\n\n                event_types = [\"BLOCK\", \"FAC\", \"HIT\", \"PENL\"]\n\n                mask_1 = np.logical_and.reduce(\n                    [\n                        df[player] != \"BENCH\",\n                        df.event.isin(event_types),\n                        ~df.description.astype(str).str.contains(\"BLOCKED BY TEAMMATE\", na=False),\n                    ]\n                )\n\n                opps = df[mask_1].copy().groupby(opp_group_list, as_index=False).agg(stats_1).rename(columns=new_cols_1)\n\n                # Getting primary assists and primary assists xG from player 2\n\n                stats_2 = [\"goal\", \"pred_goal\", \"teammate_block\", \"teammate_block_adj\"]\n\n                stats_2 = {x: \"sum\" for x in stats_2 if x in df.columns}\n\n                new_cols_2 = {\n                    \"event_team\": \"team\",\n                    player: \"player\",\n                    player_eh_id: \"eh_id\",\n                    player_api_id: \"api_id\",\n                    \"goal\": \"a1\",\n                    \"pred_goal\": \"a1_xg\",\n                    position: \"position\",\n                    \"teammate_block\": \"isb\",\n                    \"teammate_block_adj\": \"isb_adj\",\n                }\n\n                event_types = [\"BLOCK\", \"GOAL\"]\n\n                mask_2 = np.logical_and.reduce([df[player] != \"BENCH\", df.event.isin(event_types)])\n\n                own = (\n                    df[mask_2].copy().groupby(event_group_list, as_index=False).agg(stats_2).rename(columns=new_cols_2)\n                )\n\n                player_df = opps.merge(own, left_on=merge_list, right_on=merge_list, how=\"outer\").fillna(0)\n\n                player_df[\"isb\"] = player_df.isb_x + player_df.isb_y\n                player_df[\"isb_adj\"] = player_df.isb_adj_x + player_df.isb_adj_y\n\n            if player == \"player_3\":\n                group_list = group_base.copy()\n                group_list.append(\"strength_state\")\n\n                if teammates:\n                    group_list.extend(\n                        [\n                            \"forwards\",\n                            \"forwards_eh_id\",\n                            \"forwards_api_id\",\n                            \"defense\",\n                            \"defense_eh_id\",\n                            \"defense_api_id\",\n                            \"own_goalie\",\n                            \"own_goalie_eh_id\",\n                            \"own_goalie_api_id\",\n                        ]\n                    )\n\n                if score:\n                    group_list.append(\"score_state\")\n\n                if opposition:\n                    group_list.extend(\n                        [\n                            \"opp_forwards\",\n                            \"opp_forwards_eh_id\",\n                            \"opp_forwards_api_id\",\n                            \"opp_defense\",\n                            \"opp_defense_eh_id\",\n                            \"opp_defense_api_id\",\n                            \"opp_goalie\",\n                            \"opp_goalie_eh_id\",\n                            \"opp_goalie_api_id\",\n                        ]\n                    )\n\n                    if \"opp_team\" not in group_list:\n                        group_list.append(\"opp_team\")\n\n                stats_list = [\"goal\", \"pred_goal\"]\n\n                stats_dict = {x: \"sum\" for x in stats_list if x in df.columns}\n\n                player_df = df[mask].groupby(group_list, as_index=False).agg(stats_dict)\n\n                new_cols = {\n                    \"goal\": \"a2\",\n                    \"pred_goal\": \"a2_xg\",\n                    \"event_team\": \"team\",\n                    player: \"player\",\n                    player_eh_id: \"eh_id\",\n                    player_api_id: \"api_id\",\n                    position: \"position\",\n                }\n\n                player_df = player_df.rename(columns=new_cols)\n\n            ind_stats = ind_stats.merge(player_df, on=merge_list, how=\"outer\").infer_objects(copy=False).fillna(0)\n\n        # Fixing some stats\n\n        ind_stats[\"icf\"] = ind_stats.iff + ind_stats.isb\n        ind_stats[\"icf_adj\"] = ind_stats.iff_adj + ind_stats.isb_adj\n\n        ind_stats[\"gax\"] = ind_stats.g - ind_stats.ixg\n\n        columns = [x for x in list(IndStatSchema.dtypes.keys()) if x in ind_stats.columns]\n\n        ind_stats = ind_stats[columns]\n\n        stats = [\n            \"g\",\n            \"a1\",\n            \"a2\",\n            \"isf\",\n            \"iff\",\n            \"icf\",\n            \"ixg\",\n            \"gax\",\n            \"ihdg\",\n            \"ihdf\",\n            \"ihdsf\",\n            \"ihdm\",\n            \"imsf\",\n            \"isb\",\n            \"ibs\",\n            \"igive\",\n            \"itake\",\n            \"ihf\",\n            \"iht\",\n            \"ifow\",\n            \"ifol\",\n            \"iozfw\",\n            \"iozfl\",\n            \"inzfw\",\n            \"inzfl\",\n            \"idzfw\",\n            \"idzfl\",\n            \"a1_xg\",\n            \"a2_xg\",\n            \"ipent0\",\n            \"ipent2\",\n            \"ipent4\",\n            \"ipent5\",\n            \"ipent10\",\n            \"ipend0\",\n            \"ipend2\",\n            \"ipend4\",\n            \"ipend5\",\n            \"ipend10\",\n        ]\n\n        stats = [x for x in stats if x in ind_stats.columns]\n\n        ind_stats = ind_stats.loc[(ind_stats[stats] &gt; 0).any(axis=1)]\n\n        ind_stats = IndStatSchema.validate(ind_stats)\n\n        self._ind_stats = ind_stats\n\n    @property\n    def ind_stats(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of individual stats aggregated from play-by-play data.\n\n        Nested within `prep_stats` method.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 2023 for 2023-24 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020001\n            game_date (int):\n                Date game was played, e.g., 2023-10-10\n            player (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            api_id (str):\n                NHL API ID for the player, e.g., 8476887\n            position (str):\n                Player's position, e.g., L\n            team (str):\n                Player's team, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., TBL\n            strength_state (str):\n                Strength state, e.g., 5v5\n            period (int):\n                Period, e.g., 3\n            score_state (str):\n                Score state, e.g., 2v1\n            forwards (str):\n                Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY\n            forwards_eh_id (str):\n                Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n            forwards_api_id (str):\n                Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158\n            defense (str):\n                Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER\n            defense_eh_id (str):\n                Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER\n            defense_api_id (str):\n                Defense teammates' NHL API IDs, e.g., 8474151, 8478851\n            own_goalie (str):\n                Own goalie, e.g., JUUSE SAROS\n            own_goalie_eh_id (str):\n                Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS\n            own_goalie_api_id (str):\n                Own goalie's NHL API ID, e.g., 8477424\n            opp_forwards (str):\n                Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS\n            opp_forwards_eh_id (str):\n                Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS\n            opp_forwards_api_id (str):\n                Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564\n            opp_defense (str):\n                Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN\n            opp_defense_eh_id (str):\n                Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN\n            opp_defense_api_id (str):\n                Opposing defense's NHL API IDs, e.g., 8480246, 8475167\n            opp_goalie (str):\n                Opposing goalie, e.g., JONAS JOHANSSON\n            opp_goalie_eh_id (str):\n                Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON\n            opp_goalie_api_id (str):\n                Opposing goalie's NHL API ID, e.g., 8477992\n            g (int):\n                Goals scored, e.g, 0\n            ihdg (int):\n                High-danger goals scored, e.g, 0\n            a1 (int):\n                Primary assists, e.g, 0\n            a2 (int):\n                Secondary assists, e.g, 0\n            ixg (float):\n                Individual xG for, e.g, 1.014336\n            isf (int):\n                Individual shots taken, e.g, 3\n            ihdsf (int):\n                High-danger shots taken, e.g, 3\n            imsf (int):\n                Individual missed shots, e.g, 0\n            ihdm (int):\n                High-danger missed shots, e.g, 0\n            iff (int):\n                Individual fenwick for, e.g., 3\n            ihdf (int):\n                High-danger fenwick for, e.g., 3\n            isb (int):\n                Shots taken that were blocked, e.g, 0\n            icf (int):\n                Individual corsi for, e.g., 3\n            ibs (int):\n                Individual shots blocked on defense, e.g, 0\n            igive (int):\n                Individual giveaways, e.g, 0\n            itake (int):\n                Individual takeaways, e.g, 0\n            ihf (int):\n                Individual hits for, e.g, 0\n            iht (int):\n                Individual hits taken, e.g, 0\n            ifow (int):\n                Individual faceoffs won, e.g, 0\n            ifol (int):\n                Individual faceoffs lost, e.g, 0\n            iozfw (int):\n                Individual faceoffs won in offensive zone, e.g, 0\n            iozfl (int):\n                Individual faceoffs lost in offensive zone, e.g, 0\n            inzfw (int):\n                Individual faceoffs won in neutral zone, e.g, 0\n            inzfl (int):\n                Individual faceoffs lost in neutral zone, e.g, 0\n            idzfw (int):\n                Individual faceoffs won in defensive zone, e.g, 0\n            idzfl (int):\n                Individual faceoffs lost in defensive zone, e.g, 0\n            a1_xg (float):\n                xG on primary assists, e.g, 0\n            a2_xg (float):\n                xG on secondary assists, e.g, 0\n            ipent0 (int):\n                Individual penalty shots against, e.g, 0\n            ipent2 (int):\n                Individual minor penalties taken, e.g, 0\n            ipent4 (int):\n                Individual double minor penalties taken, e.g, 0\n            ipent5 (int):\n                Individual major penalties taken, e.g, 0\n            ipent10 (int):\n                Individual game misconduct penalties taken, e.g, 0\n            ipend0 (int):\n                Individual penalty shots drawn, e.g, 0\n            ipend2 (int):\n                Individual minor penalties taken, e.g, 0\n            ipend4 (int):\n                Individual double minor penalties drawn, e.g, 0\n            ipend5 (int):\n                Individual major penalties drawn, e.g, 0\n            ipend10 (int):\n                Individual game misconduct penalties drawn, e.g, 0\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2023020001\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.ind_stats\n\n        \"\"\"\n        if self._ind_stats.empty:\n            self._prep_ind()\n\n        return self._ind_stats\n\n    def _prep_oi(\n        self,\n        level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n        score: bool = False,\n        teammates: bool = False,\n        opposition: bool = False,\n    ) -&gt; None:\n        \"\"\"Prepares DataFrame of on-ice stats from play-by-play data.\n\n        Nested within `prep_stats` method.\n\n        Parameters:\n            level (str):\n                Determines the level of aggregation. One of season, session, game, period\n            score (bool):\n                Determines if stats account for score state\n            teammates (bool):\n                Determines if stats account for teammates on ice\n            opposition (bool):\n                Determines if stats account for opponents on ice\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 2023 for 2023-24 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020001\n            game_date (int):\n                Date game was played, e.g., 2023-10-10\n            player (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            api_id (str):\n                NHL API ID for the player, e.g., 8476887\n            position (str):\n                Player's position, e.g., L\n            team (str):\n                Player's team, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., TBL\n            strength_state (str):\n                Strength state, e.g., 5v5\n            period (int):\n                Period, e.g., 3\n            score_state (str):\n                Score state, e.g., 2v1\n            forwards (str):\n                Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY\n            forwards_eh_id (str):\n                Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n            forwards_api_id (str):\n                Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158\n            defense (str):\n                Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER\n            defense_eh_id (str):\n                Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER\n            defense_api_id (str):\n                Defense teammates' NHL API IDs, e.g., 8474151, 8478851\n            own_goalie (str):\n                Own goalie, e.g., JUUSE SAROS\n            own_goalie_eh_id (str):\n                Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS\n            own_goalie_api_id (str):\n                Own goalie's NHL API ID, e.g., 8477424\n            opp_forwards (str):\n                Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS\n            opp_forwards_eh_id (str):\n                Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS\n            opp_forwards_api_id (str):\n                Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564\n            opp_defense (str):\n                Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN\n            opp_defense_eh_id (str):\n                Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN\n            opp_defense_api_id (str):\n                Opposing defense's NHL API IDs, e.g., 8480246, 8475167\n            opp_goalie (str):\n                Opposing goalie, e.g., JONAS JOHANSSON\n            opp_goalie_eh_id (str):\n                Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON\n            opp_goalie_api_id (str):\n                Opposing goalie's NHL API ID, e.g., 8477992\n            toi (float):\n                Time on-ice, in minutes, e.g, 0.483333\n            gf (int):\n                Goals for (on-ice), e.g, 0\n            hdgf (int):\n                High-danger goals for (on-ice), e.g, 0\n            ga (int):\n                Goals against (on-ice), e.g, 0\n            hdga (int):\n                High-danger goals against (on-ice), e.g, 0\n            xgf (float):\n                xG for (on-ice), e.g., 1.258332\n            xga (float):\n                xG against (on-ice), e.g, 0.000000\n            sf (int):\n                Shots for (on-ice), e.g, 4\n            sa (int):\n                Shots against (on-ice), e.g, 0\n            hdsf (int):\n                High-danger shots for (on-ice), e.g, 3\n            hdsa (int):\n                High-danger shots against (on-ice), e.g, 0\n            ff (int):\n                Fenwick for (on-ice), e.g, 4\n            fa (int):\n                Fenwick against (on-ice), e.g, 0\n            hdff (int):\n                High-danger fenwick for (on-ice), e.g, 3\n            hdfa (int):\n                High-danger fenwick against (on-ice), e.g, 0\n            cf (int):\n                Corsi for (on-ice), e.g, 4\n            ca (int):\n                Corsi against (on-ice), e.g, 0\n            bsf (int):\n                Shots taken that were blocked (on-ice), e.g, 0\n            bsa (int):\n                Shots blocked (on-ice), e.g, 0\n            msf (int):\n                Missed shots taken (on-ice), e.g, 0\n            msa (int):\n                Missed shots against (on-ice), e.g, 0\n            hdmsf (int):\n                High-danger missed shots taken (on-ice), e.g, 0\n            hdmsa (int):\n                High-danger missed shots against (on-ice), e.g, 0\n            teammate_block (int):\n                Shots blocked by teammates (on-ice), e.g, 0\n            hf (int):\n                Hits for (on-ice), e.g, 0\n            ht (int):\n                Hits taken (on-ice), e.g, 0\n            give (int):\n                Giveaways (on-ice), e.g, 0\n            take (int):\n                Takeaways (on-ice), e.g, 0\n            ozf (int):\n                Offensive zone faceoffs (on-ice), e.g, 0\n            nzf (int):\n                Neutral zone faceoffs (on-ice), e.g, 1\n            dzf (int):\n                Defensive zone faceoffs (on-ice), e.g, 0\n            fow (int):\n                Faceoffs won (on-ice), e.g, 1\n            fol (int):\n                Faceoffs lost (on-ice), e.g, 0\n            ozfw (int):\n                Offensive zone faceoffs won (on-ice), e.g, 0\n            ozfl (int):\n                Offensive zone faceoffs lost (on-ice), e.g, 0\n            nzfw (int):\n                Neutral zone faceoffs won (on-ice), e.g, 1\n            nzfl (int):\n                Neutral zone faceoffs lost (on-ice), e.g, 0\n            dzfw (int):\n                Defensive zone faceoffs won (on-ice), e.g, 0\n            dzfl (int):\n                Defensive zone faceoffs lost (on-ice), e.g, 0\n            pent0 (int):\n                Penalty shots allowed (on-ice), e.g, 0\n            pent2 (int):\n                Minor penalties taken (on-ice), e.g, 0\n            pent4 (int):\n                Double minor penalties taken (on-ice), e.g, 0\n            pent5 (int):\n                Major penalties taken (on-ice), e.g, 0\n            pent10 (int):\n                Game misconduct penalties taken (on-ice), e.g, 0\n            pend0 (int):\n                Penalty shots drawn (on-ice), e.g, 0\n            pend2 (int):\n                Minor penalties drawn (on-ice), e.g, 0\n            pend4 (int):\n                Double minor penalties drawn (on-ice), e.g, 0\n            pend5 (int):\n                Major penalties drawn (on-ice), e.g, 0\n            pend10 (int):\n                Game misconduct penalties drawn (on-ice), e.g, 0\n            ozs (int):\n                Offensive zone starts, e.g, 0\n            nzs (int):\n                Neutral zone starts, e.g, 0\n            dzs (int):\n                Defenzive zone starts, e.g, 0\n            otf (int):\n                On-the-fly starts, e.g, 0\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2023020001\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Prepares on-ice dataframe with default options\n            &gt;&gt;&gt; scraper._prep_oi()\n\n            On-ice statistics, aggregated to season level\n            &gt;&gt;&gt; scraper._prep_oi(level=\"season\")\n\n            On-ice statistics, aggregated to game level, accounting for teammates\n            &gt;&gt;&gt; scraper._prep_oi(level=\"game\", teammates=True)\n\n        \"\"\"\n        merge_cols = [\"id\", \"event_idx\"]\n\n        df = self.play_by_play.merge(self.play_by_play_ext, how=\"left\", on=merge_cols)\n\n        players = (\n            [f\"event_on_{x}\" for x in range(1, 8)]\n            + [f\"opp_on_{x}\" for x in range(1, 8)]\n            + [f\"change_on_{x}\" for x in range(1, 8)]\n        )\n\n        event_list = []\n        opp_list = []\n        zones_list = []\n\n        for player in players:\n            position = f\"{player}_pos\"\n            player_eh_id = f\"{player}_eh_id\"\n            player_api_id = f\"{player}_api_id\"\n\n            group_list = [\"season\", \"session\"]\n\n            if level == \"session\" or level == \"season\":\n                group_list = group_list\n\n            if level == \"game\":\n                group_list.extend([\"game_id\", \"game_date\", \"event_team\", \"opp_team\"])\n\n            if level == \"period\":\n                group_list.extend([\"game_id\", \"game_date\", \"event_team\", \"opp_team\", \"period\"])\n\n            # Accounting for desired player\n\n            if \"event_on\" in player or \"opp_on\" in player:\n                stats_list = [\n                    \"block\",\n                    \"block_adj\",\n                    \"teammate_block\",\n                    \"teammate_block_adj\",\n                    \"fac\",\n                    \"goal\",\n                    \"goal_adj\",\n                    \"hd_fenwick\",\n                    \"hd_goal\",\n                    \"hd_miss\",\n                    \"hd_shot\",\n                    \"hit\",\n                    \"miss\",\n                    \"miss_adj\",\n                    \"pen0\",\n                    \"pen2\",\n                    \"pen4\",\n                    \"pen5\",\n                    \"pen10\",\n                    \"shot\",\n                    \"shot_adj\",\n                    \"fenwick\",\n                    \"fenwick_adj\",\n                    \"pred_goal\",\n                    \"pred_goal_adj\",\n                    \"ozf\",\n                    \"nzf\",\n                    \"dzf\",\n                    \"event_length\",\n                ]\n\n            if \"change_on\" in player:\n                stats_list = [\"ozc\", \"nzc\", \"dzc\", \"otf\"]\n\n            stats_dict = {x: \"sum\" for x in stats_list if x in df.columns}\n\n            if \"event_on\" in player or \"change_on\" in player:\n                if level == \"session\" or level == \"season\":\n                    group_list.append(\"event_team\")\n\n                strength_group = [\"strength_state\"]\n\n                teammates_group = [\n                    \"forwards\",\n                    \"forwards_eh_id\",\n                    \"forwards_api_id\",\n                    \"defense\",\n                    \"defense_eh_id\",\n                    \"defense_api_id\",\n                    \"own_goalie\",\n                    \"own_goalie_eh_id\",\n                    \"own_goalie_api_id\",\n                ]\n\n                score_group = [\"score_state\"]\n\n                opposition_group = [\n                    \"opp_forwards\",\n                    \"opp_forwards_eh_id\",\n                    \"opp_forwards_api_id\",\n                    \"opp_defense\",\n                    \"opp_defense_eh_id\",\n                    \"opp_defense_api_id\",\n                    \"opp_goalie\",\n                    \"opp_goalie_eh_id\",\n                    \"opp_goalie_api_id\",\n                ]\n\n                if \"opp_team\" not in group_list:\n                    opposition_group.insert(0, \"opp_team\")\n\n                col_names = {\n                    \"event_team\": \"team\",\n                    player: \"player\",\n                    player_eh_id: \"eh_id\",\n                    player_api_id: \"api_id\",\n                    position: \"position\",\n                    \"goal\": \"gf\",\n                    \"goal_adj\": \"gf_adj\",\n                    \"hit\": \"hf\",\n                    \"miss\": \"msf\",\n                    \"miss_adj\": \"msf_adj\",\n                    \"block\": \"bsa\",\n                    \"block_adj\": \"bsa_adj\",\n                    \"teammate_block\": \"bsf\",\n                    \"teammate_block_adj\": \"bsf_adj\",\n                    \"pen0\": \"pent0\",\n                    \"pen2\": \"pent2\",\n                    \"pen4\": \"pent4\",\n                    \"pen5\": \"pent5\",\n                    \"pen10\": \"pent10\",\n                    \"fenwick\": \"ff\",\n                    \"fenwick_adj\": \"ff_adj\",\n                    \"pred_goal\": \"xgf\",\n                    \"pred_goal_adj\": \"xgf_adj\",\n                    \"fac\": \"fow\",\n                    \"ozf\": \"ozfw\",\n                    \"dzf\": \"dzfw\",\n                    \"nzf\": \"nzfw\",\n                    \"ozc\": \"ozs\",\n                    \"nzc\": \"nzs\",\n                    \"dzc\": \"dzs\",\n                    \"shot\": \"sf\",\n                    \"shot_adj\": \"sf_adj\",\n                    \"hd_goal\": \"hdgf\",\n                    \"hd_shot\": \"hdsf\",\n                    \"hd_fenwick\": \"hdff\",\n                    \"hd_miss\": \"hdmsf\",\n                }\n\n            if \"opp_on\" in player:\n                if level == \"session\" or level == \"season\":\n                    group_list.append(\"opp_team\")\n\n                strength_group = [\"opp_strength_state\"]\n\n                teammates_group = [\n                    \"opp_forwards\",\n                    \"opp_forwards_eh_id\",\n                    \"opp_forwards_api_id\",\n                    \"opp_defense\",\n                    \"opp_defense_eh_id\",\n                    \"opp_defense_api_id\",\n                    \"opp_goalie\",\n                    \"opp_goalie_eh_id\",\n                    \"opp_goalie_api_id\",\n                ]\n\n                score_group = [\"opp_score_state\"]\n\n                opposition_group = [\n                    \"forwards\",\n                    \"forwards_eh_id\",\n                    \"forwards_api_id\",\n                    \"defense\",\n                    \"defense_eh_id\",\n                    \"defense_api_id\",\n                    \"own_goalie\",\n                    \"own_goalie_eh_id\",\n                    \"own_goalie_api_id\",\n                ]\n\n                if \"event_team\" not in group_list:\n                    opposition_group.insert(0, \"event_team\")\n\n                col_names = {\n                    \"opp_team\": \"team\",\n                    \"event_team\": \"opp_team\",\n                    \"opp_goalie\": \"own_goalie\",\n                    \"own_goalie\": \"opp_goalie\",\n                    \"opp_score_state\": \"score_state\",\n                    \"opp_strength_state\": \"strength_state\",\n                    player: \"player\",\n                    player_eh_id: \"eh_id\",\n                    player_api_id: \"api_id\",\n                    position: \"position\",\n                    \"block\": \"bsf\",\n                    \"block_adj\": \"bsf_adj\",\n                    \"goal\": \"ga\",\n                    \"goal_adj\": \"ga_adj\",\n                    \"hit\": \"ht\",\n                    \"miss\": \"msa\",\n                    \"miss_adj\": \"msa_adj\",\n                    \"pen0\": \"pend0\",\n                    \"pen2\": \"pend2\",\n                    \"pen4\": \"pend4\",\n                    \"pen5\": \"pend5\",\n                    \"pen10\": \"pend10\",\n                    \"shot\": \"sa\",\n                    \"shot_adj\": \"sa_adj\",\n                    \"fenwick\": \"fa\",\n                    \"fenwick_adj\": \"fa_adj\",\n                    \"pred_goal\": \"xga\",\n                    \"pred_goal_adj\": \"xga_adj\",\n                    \"fac\": \"fol\",\n                    \"ozf\": \"dzfl\",\n                    \"dzf\": \"ozfl\",\n                    \"nzf\": \"nzfl\",\n                    \"hd_goal\": \"hdga\",\n                    \"hd_shot\": \"hdsa\",\n                    \"hd_fenwick\": \"hdfa\",\n                    \"hd_miss\": \"hdmsa\",\n                    \"forwards\": \"opp_forwards\",\n                    \"forwards_eh_id\": \"opp_forwards_eh_id\",\n                    \"forwards_api_id\": \"opp_forwards_api_id\",\n                    \"defense\": \"opp_defense\",\n                    \"defense_eh_id\": \"opp_defense_eh_id\",\n                    \"defense_api_id\": \"opp_defense_api_id\",\n                    \"own_goalie_eh_id\": \"opp_goalie_eh_id\",\n                    \"own_goalie_api_id\": \"opp_goalie_api_id\",\n                    \"opp_forwards\": \"forwards\",\n                    \"opp_forwards_eh_id\": \"forwards_eh_id\",\n                    \"opp_forwards_api_id\": \"forwards_api_id\",\n                    \"opp_defense\": \"defense\",\n                    \"opp_defense_eh_id\": \"defense_eh_id\",\n                    \"opp_defense_api_id\": \"defense_api_id\",\n                    \"opp_goalie_eh_id\": \"own_goalie_eh_id\",\n                    \"opp_goalie_api_id\": \"own_goalie_api_id\",\n                }\n\n            group_list = group_list + [player, player_eh_id, player_api_id, position] + strength_group\n\n            if teammates is True:\n                group_list = group_list + teammates_group\n\n            if score is True:\n                group_list = group_list + score_group\n\n            if opposition is True:\n                group_list = group_list + opposition_group\n\n            player_df = df.groupby(group_list, dropna=False, as_index=False).agg(stats_dict)\n\n            col_names = {key: value for key, value in col_names.items() if key in player_df.columns}\n\n            player_df = player_df.rename(columns=col_names)\n\n            if \"event_on\" in player:\n                event_list.append(player_df)\n\n            elif \"opp_on\" in player:\n                opp_list.append(player_df)\n\n            elif \"change_on\" in player:\n                zones_list.append(player_df)\n\n        # On-ice stats\n\n        merge_cols = [\n            \"season\",\n            \"session\",\n            \"game_id\",\n            \"game_date\",\n            \"team\",\n            \"opp_team\",\n            \"player\",\n            \"eh_id\",\n            \"api_id\",\n            \"position\",\n            \"period\",\n            \"strength_state\",\n            \"score_state\",\n            \"opp_goalie\",\n            \"opp_goalie_eh_id\",\n            \"opp_goalie_api_id\",\n            \"own_goalie\",\n            \"own_goalie_eh_id\",\n            \"own_goalie_api_id\",\n            \"forwards\",\n            \"forwards_eh_id\",\n            \"forwards_api_id\",\n            \"defense\",\n            \"defense_eh_id\",\n            \"defense_api_id\",\n            \"opp_forwards\",\n            \"opp_forwards_eh_id\",\n            \"opp_forwards_api_id\",\n            \"opp_defense\",\n            \"opp_defense_eh_id\",\n            \"opp_defense_api_id\",\n        ]\n\n        event_stats = pd.concat(event_list, ignore_index=True)\n\n        stats_dict = {x: \"sum\" for x in event_stats.columns if x not in merge_cols}\n\n        group_list = [x for x in merge_cols if x in event_stats.columns]\n\n        event_stats = event_stats.groupby(group_list, as_index=False).agg(stats_dict)\n\n        opp_stats = pd.concat(opp_list, ignore_index=True)\n\n        stats_dict = {x: \"sum\" for x in opp_stats.columns if x not in merge_cols}\n\n        group_list = [x for x in merge_cols if x in opp_stats.columns]\n\n        opp_stats = opp_stats.groupby(group_list, as_index=False).agg(stats_dict)\n\n        zones_stats = pd.concat(zones_list, ignore_index=True)\n\n        stats_dict = {x: \"sum\" for x in zones_stats.columns if x not in merge_cols}\n\n        group_list = [x for x in merge_cols if x in zones_stats.columns]\n\n        zones_stats = zones_stats.groupby(group_list, as_index=False).agg(stats_dict)\n\n        merge_cols = [\n            x for x in merge_cols if x in event_stats.columns and x in opp_stats.columns and x in zones_stats.columns\n        ]\n\n        oi_stats = event_stats.merge(opp_stats, on=merge_cols, how=\"outer\").fillna(0)\n\n        oi_stats = oi_stats.merge(zones_stats, on=merge_cols, how=\"outer\").fillna(0)\n\n        oi_stats[\"toi\"] = (oi_stats.event_length_x + oi_stats.event_length_y) / 60\n\n        oi_stats[\"bsf\"] = oi_stats.bsf_x + oi_stats.bsf_y\n        oi_stats[\"bsf_adj\"] = oi_stats.bsf_adj_x + oi_stats.bsf_adj_y\n\n        oi_stats[\"cf\"] = oi_stats.ff + oi_stats.bsf\n        oi_stats[\"cf_adj\"] = oi_stats.ff_adj + oi_stats.bsf_adj\n\n        oi_stats[\"ca\"] = oi_stats.fa + oi_stats.bsa + oi_stats.teammate_block\n        oi_stats[\"ca_adj\"] = oi_stats.fa_adj + oi_stats.bsa_adj + oi_stats.teammate_block_adj\n\n        fo_list = [\"ozf\", \"dzf\", \"nzf\"]\n\n        for fo in fo_list:\n            oi_stats[fo] = oi_stats[f\"{fo}w\"] + oi_stats[f\"{fo}l\"]\n\n        oi_stats[\"fac\"] = oi_stats.ozf + oi_stats.nzf + oi_stats.dzf\n\n        columns = [x for x in list(OIStatSchema.dtypes.keys()) if x in oi_stats.columns]\n\n        oi_stats = oi_stats[columns]\n\n        stats = [\n            \"toi\",\n            \"gf\",\n            \"gf_adj\",\n            \"hdgf\",\n            \"sf\",\n            \"sf_adj\",\n            \"hdsf\",\n            \"ff\",\n            \"ff_adj\",\n            \"hdff\",\n            \"cf\",\n            \"cf_adj\",\n            \"xgf\",\n            \"xgf_adj\",\n            \"bsf\",\n            \"msf\",\n            \"hdmsf\",\n            \"ga\",\n            \"ga_adj\",\n            \"hdga\",\n            \"sa\",\n            \"sa_adj\",\n            \"hdsa\",\n            \"fa\",\n            \"fa_adj\",\n            \"hdfa\",\n            \"ca\",\n            \"ca_adj\",\n            \"xga\",\n            \"xga_adj\",\n            \"bsa\",\n            \"msa\",\n            \"hdmsa\",\n            \"hf\",\n            \"ht\",\n            \"ozf\",\n            \"nzf\",\n            \"dzf\",\n            \"fow\",\n            \"fol\",\n            \"ozfw\",\n            \"ozfl\",\n            \"nzfw\",\n            \"nzfl\",\n            \"dzfw\",\n            \"dzfl\",\n            \"pent0\",\n            \"pent2\",\n            \"pent4\",\n            \"pent5\",\n            \"pent10\",\n            \"pend0\",\n            \"pend2\",\n            \"pend4\",\n            \"pend5\",\n            \"pend10\",\n        ]\n\n        stats = [x.lower() for x in stats if x.lower() in oi_stats.columns]\n\n        oi_stats = oi_stats.loc[(oi_stats[stats] != 0).any(axis=1)]\n\n        oi_stats = OIStatSchema.validate(oi_stats)\n\n        self._oi_stats = oi_stats\n\n    @property\n    def oi_stats(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of on-ice stats aggregated from play-by-play data.\n\n        Nested within `prep_stats` method.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 2023 for 2023-24 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020001\n            game_date (int):\n                Date game was played, e.g., 2023-10-10\n            player (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            api_id (str):\n                NHL API ID for the player, e.g., 8476887\n            position (str):\n                Player's position, e.g., L\n            team (str):\n                Player's team, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., TBL\n            strength_state (str):\n                Strength state, e.g., 5v5\n            period (int):\n                Period, e.g., 3\n            score_state (str):\n                Score state, e.g., 2v1\n            forwards (str):\n                Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY\n            forwards_eh_id (str):\n                Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n            forwards_api_id (str):\n                Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158\n            defense (str):\n                Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER\n            defense_eh_id (str):\n                Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER\n            defense_api_id (str):\n                Defense teammates' NHL API IDs, e.g., 8474151, 8478851\n            own_goalie (str):\n                Own goalie, e.g., JUUSE SAROS\n            own_goalie_eh_id (str):\n                Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS\n            own_goalie_api_id (str):\n                Own goalie's NHL API ID, e.g., 8477424\n            opp_forwards (str):\n                Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS\n            opp_forwards_eh_id (str):\n                Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS\n            opp_forwards_api_id (str):\n                Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564\n            opp_defense (str):\n                Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN\n            opp_defense_eh_id (str):\n                Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN\n            opp_defense_api_id (str):\n                Opposing defense's NHL API IDs, e.g., 8480246, 8475167\n            opp_goalie (str):\n                Opposing goalie, e.g., JONAS JOHANSSON\n            opp_goalie_eh_id (str):\n                Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON\n            opp_goalie_api_id (str):\n                Opposing goalie's NHL API ID, e.g., 8477992\n            toi (float):\n                Time on-ice, in minutes, e.g, 0.483333\n            gf (int):\n                Goals for (on-ice), e.g, 0\n            hdgf (int):\n                High-danger goals for (on-ice), e.g, 0\n            ga (int):\n                Goals against (on-ice), e.g, 0\n            hdga (int):\n                High-danger goals against (on-ice), e.g, 0\n            xgf (float):\n                xG for (on-ice), e.g., 1.258332\n            xga (float):\n                xG against (on-ice), e.g, 0.000000\n            sf (int):\n                Shots for (on-ice), e.g, 4\n            sa (int):\n                Shots against (on-ice), e.g, 0\n            hdsf (int):\n                High-danger shots for (on-ice), e.g, 3\n            hdsa (int):\n                High-danger shots against (on-ice), e.g, 0\n            ff (int):\n                Fenwick for (on-ice), e.g, 4\n            fa (int):\n                Fenwick against (on-ice), e.g, 0\n            hdff (int):\n                High-danger fenwick for (on-ice), e.g, 3\n            hdfa (int):\n                High-danger fenwick against (on-ice), e.g, 0\n            cf (int):\n                Corsi for (on-ice), e.g, 4\n            ca (int):\n                Corsi against (on-ice), e.g, 0\n            bsf (int):\n                Shots taken that were blocked (on-ice), e.g, 0\n            bsa (int):\n                Shots blocked (on-ice), e.g, 0\n            msf (int):\n                Missed shots taken (on-ice), e.g, 0\n            msa (int):\n                Missed shots against (on-ice), e.g, 0\n            hdmsf (int):\n                High-danger missed shots taken (on-ice), e.g, 0\n            hdmsa (int):\n                High-danger missed shots against (on-ice), e.g, 0\n            teammate_block (int):\n                Shots blocked by teammates (on-ice), e.g, 0\n            hf (int):\n                Hits for (on-ice), e.g, 0\n            ht (int):\n                Hits taken (on-ice), e.g, 0\n            give (int):\n                Giveaways (on-ice), e.g, 0\n            take (int):\n                Takeaways (on-ice), e.g, 0\n            ozf (int):\n                Offensive zone faceoffs (on-ice), e.g, 0\n            nzf (int):\n                Neutral zone faceoffs (on-ice), e.g, 1\n            dzf (int):\n                Defensive zone faceoffs (on-ice), e.g, 0\n            fow (int):\n                Faceoffs won (on-ice), e.g, 1\n            fol (int):\n                Faceoffs lost (on-ice), e.g, 0\n            ozfw (int):\n                Offensive zone faceoffs won (on-ice), e.g, 0\n            ozfl (int):\n                Offensive zone faceoffs lost (on-ice), e.g, 0\n            nzfw (int):\n                Neutral zone faceoffs won (on-ice), e.g, 1\n            nzfl (int):\n                Neutral zone faceoffs lost (on-ice), e.g, 0\n            dzfw (int):\n                Defensive zone faceoffs won (on-ice), e.g, 0\n            dzfl (int):\n                Defensive zone faceoffs lost (on-ice), e.g, 0\n            pent0 (int):\n                Penalty shots allowed (on-ice), e.g, 0\n            pent2 (int):\n                Minor penalties taken (on-ice), e.g, 0\n            pent4 (int):\n                Double minor penalties taken (on-ice), e.g, 0\n            pent5 (int):\n                Major penalties taken (on-ice), e.g, 0\n            pent10 (int):\n                Game misconduct penalties taken (on-ice), e.g, 0\n            pend0 (int):\n                Penalty shots drawn (on-ice), e.g, 0\n            pend2 (int):\n                Minor penalties drawn (on-ice), e.g, 0\n            pend4 (int):\n                Double minor penalties drawn (on-ice), e.g, 0\n            pend5 (int):\n                Major penalties drawn (on-ice), e.g, 0\n            pend10 (int):\n                Game misconduct penalties drawn (on-ice), e.g, 0\n            ozs (int):\n                Offensive zone starts, e.g, 0\n            nzs (int):\n                Neutral zone starts, e.g, 0\n            dzs (int):\n                Defenzive zone starts, e.g, 0\n            otf (int):\n                On-the-fly starts, e.g, 0\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2023020001\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.ind_stats\n\n        \"\"\"\n        if self._oi_stats.empty:\n            self._prep_oi()\n\n        return self._oi_stats\n\n    def _prep_stats(\n        self,\n        level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n        score: bool = False,\n        teammates: bool = False,\n        opposition: bool = False,\n    ) -&gt; None:\n        \"\"\"Prepares DataFrame of individual and on-ice stats from play-by-play data.\n\n        Nested within `prep_stats` method.\n\n        Parameters:\n            level (str):\n                Determines the level of aggregation. One of season, session, game, period\n            score (bool):\n                Determines if stats account for score state\n            teammates (bool):\n                Determines if stats account for teammates on ice\n            opposition (bool):\n                Determines if stats account for opponents on ice\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 2023 for 2023-24 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020001\n            game_date (int):\n                Date game was played, e.g., 2023-10-10\n            player (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            api_id (str):\n                NHL API ID for the player, e.g., 8476887\n            position (str):\n                Player's position, e.g., L\n            team (str):\n                Player's team, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., TBL\n            strength_state (str):\n                Strength state, e.g., 5v5\n            period (int):\n                Period, e.g., 3\n            score_state (str):\n                Score state, e.g., 2v1\n            forwards (str):\n                Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY\n            forwards_eh_id (str):\n                Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n            forwards_api_id (str):\n                Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158\n            defense (str):\n                Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER\n            defense_eh_id (str):\n                Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER\n            defense_api_id (str):\n                Defense teammates' NHL API IDs, e.g., 8474151, 8478851\n            own_goalie (str):\n                Own goalie, e.g., JUUSE SAROS\n            own_goalie_eh_id (str):\n                Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS\n            own_goalie_api_id (str):\n                Own goalie's NHL API ID, e.g., 8477424\n            opp_forwards (str):\n                Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS\n            opp_forwards_eh_id (str):\n                Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS\n            opp_forwards_api_id (str):\n                Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564\n            opp_defense (str):\n                Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN\n            opp_defense_eh_id (str):\n                Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN\n            opp_defense_api_id (str):\n                Opposing defense's NHL API IDs, e.g., 8480246, 8475167\n            opp_goalie (str):\n                Opposing goalie, e.g., JONAS JOHANSSON\n            opp_goalie_eh_id (str):\n                Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON\n            opp_goalie_api_id (str):\n                Opposing goalie's NHL API ID, e.g., 8477992\n            toi (float):\n                Time on-ice, in minutes, e.g, 0.483333\n            g (int):\n                Goals scored, e.g, 0\n            ihdg (int):\n                High-danger goals scored, e.g, 0\n            a1 (int):\n                Primary assists, e.g, 0\n            a2 (int):\n                Secondary assists, e.g, 0\n            ixg (float):\n                Individual xG for, e.g, 1.014336\n            isf (int):\n                Individual shots taken, e.g, 3\n            ihdsf (int):\n                High-danger shots taken, e.g, 3\n            imsf (int):\n                Individual missed shots, e.g, 0\n            ihdm (int):\n                High-danger missed shots, e.g, 0\n            iff (int):\n                Individual fenwick for, e.g., 3\n            ihdf (int):\n                High-danger fenwick for, e.g., 3\n            isb (int):\n                Shots taken that were blocked, e.g, 0\n            icf (int):\n                Individual corsi for, e.g., 3\n            ibs (int):\n                Individual shots blocked on defense, e.g, 0\n            igive (int):\n                Individual giveaways, e.g, 0\n            itake (int):\n                Individual takeaways, e.g, 0\n            ihf (int):\n                Individual hits for, e.g, 0\n            iht (int):\n                Individual hits taken, e.g, 0\n            ifow (int):\n                Individual faceoffs won, e.g, 0\n            ifol (int):\n                Individual faceoffs lost, e.g, 0\n            iozfw (int):\n                Individual faceoffs won in offensive zone, e.g, 0\n            iozfl (int):\n                Individual faceoffs lost in offensive zone, e.g, 0\n            inzfw (int):\n                Individual faceoffs won in neutral zone, e.g, 0\n            inzfl (int):\n                Individual faceoffs lost in neutral zone, e.g, 0\n            idzfw (int):\n                Individual faceoffs won in defensive zone, e.g, 0\n            idzfl (int):\n                Individual faceoffs lost in defensive zone, e.g, 0\n            a1_xg (float):\n                xG on primary assists, e.g, 0\n            a2_xg (float):\n                xG on secondary assists, e.g, 0\n            ipent0 (int):\n                Individual penalty shots against, e.g, 0\n            ipent2 (int):\n                Individual minor penalties taken, e.g, 0\n            ipent4 (int):\n                Individual double minor penalties taken, e.g, 0\n            ipent5 (int):\n                Individual major penalties taken, e.g, 0\n            ipent10 (int):\n                Individual game misconduct penalties taken, e.g, 0\n            ipend0 (int):\n                Individual penalty shots drawn, e.g, 0\n            ipend2 (int):\n                Individual minor penalties taken, e.g, 0\n            ipend4 (int):\n                Individual double minor penalties drawn, e.g, 0\n            ipend5 (int):\n                Individual major penalties drawn, e.g, 0\n            ipend10 (int):\n                Individual game misconduct penalties drawn, e.g, 0\n            gf (int):\n                Goals for (on-ice), e.g, 0\n            hdgf (int):\n                High-danger goals for (on-ice), e.g, 0\n            ga (int):\n                Goals against (on-ice), e.g, 0\n            hdga (int):\n                High-danger goals against (on-ice), e.g, 0\n            xgf (float):\n                xG for (on-ice), e.g., 1.258332\n            xga (float):\n                xG against (on-ice), e.g, 0.000000\n            sf (int):\n                Shots for (on-ice), e.g, 4\n            sa (int):\n                Shots against (on-ice), e.g, 0\n            hdsf (int):\n                High-danger shots for (on-ice), e.g, 3\n            hdsa (int):\n                High-danger shots against (on-ice), e.g, 0\n            ff (int):\n                Fenwick for (on-ice), e.g, 4\n            fa (int):\n                Fenwick against (on-ice), e.g, 0\n            hdff (int):\n                High-danger fenwick for (on-ice), e.g, 3\n            hdfa (int):\n                High-danger fenwick against (on-ice), e.g, 0\n            cf (int):\n                Corsi for (on-ice), e.g, 4\n            ca (int):\n                Corsi against (on-ice), e.g, 0\n            bsf (int):\n                Shots taken that were blocked (on-ice), e.g, 0\n            bsa (int):\n                Shots blocked (on-ice), e.g, 0\n            msf (int):\n                Missed shots taken (on-ice), e.g, 0\n            msa (int):\n                Missed shots against (on-ice), e.g, 0\n            hdmsf (int):\n                High-danger missed shots taken (on-ice), e.g, 0\n            hdmsa (int):\n                High-danger missed shots against (on-ice), e.g, 0\n            teammate_block (int):\n                Shots blocked by teammates (on-ice), e.g, 0\n            hf (int):\n                Hits for (on-ice), e.g, 0\n            ht (int):\n                Hits taken (on-ice), e.g, 0\n            give (int):\n                Giveaways (on-ice), e.g, 0\n            take (int):\n                Takeaways (on-ice), e.g, 0\n            ozf (int):\n                Offensive zone faceoffs (on-ice), e.g, 0\n            nzf (int):\n                Neutral zone faceoffs (on-ice), e.g, 1\n            dzf (int):\n                Defensive zone faceoffs (on-ice), e.g, 0\n            fow (int):\n                Faceoffs won (on-ice), e.g, 1\n            fol (int):\n                Faceoffs lost (on-ice), e.g, 0\n            ozfw (int):\n                Offensive zone faceoffs won (on-ice), e.g, 0\n            ozfl (int):\n                Offensive zone faceoffs lost (on-ice), e.g, 0\n            nzfw (int):\n                Neutral zone faceoffs won (on-ice), e.g, 1\n            nzfl (int):\n                Neutral zone faceoffs lost (on-ice), e.g, 0\n            dzfw (int):\n                Defensive zone faceoffs won (on-ice), e.g, 0\n            dzfl (int):\n                Defensive zone faceoffs lost (on-ice), e.g, 0\n            pent0 (int):\n                Penalty shots allowed (on-ice), e.g, 0\n            pent2 (int):\n                Minor penalties taken (on-ice), e.g, 0\n            pent4 (int):\n                Double minor penalties taken (on-ice), e.g, 0\n            pent5 (int):\n                Major penalties taken (on-ice), e.g, 0\n            pent10 (int):\n                Game misconduct penalties taken (on-ice), e.g, 0\n            pend0 (int):\n                Penalty shots drawn (on-ice), e.g, 0\n            pend2 (int):\n                Minor penalties drawn (on-ice), e.g, 0\n            pend4 (int):\n                Double minor penalties drawn (on-ice), e.g, 0\n            pend5 (int):\n                Major penalties drawn (on-ice), e.g, 0\n            pend10 (int):\n                Game misconduct penalties drawn (on-ice), e.g, 0\n            ozs (int):\n                Offensive zone starts, e.g, 0\n            nzs (int):\n                Neutral zone starts, e.g, 0\n            dzs (int):\n                Defenzive zone starts, e.g, 0\n            otf (int):\n                On-the-fly starts, e.g, 0\n            g_p60 (float):\n                Goals scored per 60 minutes\n            ihdg_p60 (float):\n                Individual high-danger goals scored per 60\n            a1_p60 (float):\n                Primary assists per 60 minutes\n            a2_p60 (float):\n                Secondary per 60 minutes\n            ixg_p60 (float):\n                Individual xG for per 60 minutes\n            isf_p60 (float):\n                Individual shots for per 60 minutes\n            ihdsf_p60 (float):\n                Individual high-danger shots for per 60 minutes\n            imsf_p60 (float):\n                Individual missed shorts for per 60 minutes\n            ihdm_p60 (float):\n                Individual high-danger missed shots for per 60 minutes\n            iff_p60 (float):\n                Individual fenwick for per 60 minutes\n            ihdff_p60 (float):\n                Individual high-danger fenwick for per 60 minutes\n            isb_p60 (float):\n                Individual shots blocked (for) per 60 minutes\n            icf_p60 (float):\n                Individual corsi for per 60 minutes\n            ibs_p60 (float):\n                Individual blocked shots (against) per 60 minutes\n            igive_p60 (float):\n                Individual giveaways per 60 minutes\n            itake_p60 (float):\n                Individual takeaways per 60 minutes\n            ihf_p60 (float):\n                Individual hits for per 60 minutes\n            iht_p60 (float):\n                Individual hits taken per 60 minutes\n            a1_xg_p60 (float):\n                Individual primary assists' xG per 60 minutes\n            a2_xg_p60 (float):\n                Individual secondary assists' xG per 60 minutes\n            ipent0_p60 (float):\n                Individual penalty shots taken per 60 minutes\n            ipent2_p60 (float):\n                Individual minor penalties taken per 60 minutes\n            ipent4_p60 (float):\n                Individual double minor penalties taken per 60 minutes\n            ipent5_p60 (float):\n                Individual major penalties taken per 60 minutes\n            ipent10_p60 (float):\n                Individual game misconduct pentalties taken per 60 minutes\n            ipend0_p60 (float):\n                Individual penalty shots drawn per 60 minutes\n            ipend2_p60 (float):\n                Individual minor penalties drawn per 60 minutes\n            ipend4_p60 (float):\n                Individual double minor penalties drawn per 60 minutes\n            ipend5_p60 (float):\n                Individual major penalties drawn per 60 minutes\n            ipend10_p60 (float):\n                Individual game misconduct penalties drawn per 60 minutes\n            gf_p60 (float):\n                Goals for (on-ice) per 60 minutes\n            ga_p60 (float):\n                Goals against (on-ice) per 60 minutes\n            hdgf_p60 (float):\n                High-danger goals for (on-ice) per 60 minutes\n            hdga_p60 (float):\n                High-danger goals against (on-ice) per 60 minutes\n            xgf_p60 (float):\n                xG for (on-ice) per 60 minutes\n            xga_p60 (float):\n                xG against (on-ice) per 60 minutes\n            sf_p60 (float):\n                Shots for (on-ice) per 60 minutes\n            sa_p60 (float):\n                Shots against (on-ice) per 60 minutes\n            hdsf_p60 (float):\n                High-danger shots for (on-ice) per 60 minutes\n            hdsa_p60 (float):\n                High danger shots against (on-ice) per 60 minutes\n            ff_p60 (float):\n                Fenwick for (on-ice) per 60 minutes\n            fa_p60 (float):\n                Fenwick against (on-ice) per 60 minutes\n            hdff_p60 (float):\n                High-danger fenwick for (on-ice) per 60 minutes\n            hdfa_p60 (float):\n                High-danger fenwick against (on-ice) per 60 minutes\n            cf_p60 (float):\n                Corsi for (on-ice) per 60 minutes\n            ca_p60 (float):\n                Corsi against (on-ice) per 60 minutes\n            bsf_p60 (float):\n                Blocked shots for (on-ice) per 60 minutes\n            bsa_p60 (float):\n                Blocked shots against (on-ice) per 60 minutes\n            msf_p60 (float):\n                Missed shots for (on-ice) per 60 minutes\n            msa_p60 (float):\n                Missed shots against (on-ice) per 60 minutes\n            hdmsf_p60 (float):\n                High-danger missed shots for (on-ice) per 60 minutes\n            hdmsa_p60 (float):\n                High-danger missed shots against (on-ice) per 60 minutes\n            teammate_block_p60 (float):\n                Shots blocked by teammates (on-ice) per 60 minutes\n            hf_p60 (float):\n                Hits  for (on-ice) per 60 minutes\n            ht_p60 (float):\n                Hits taken (on-ice) per 60 minutes\n            give_p60 (float):\n                Giveaways (on-ice) per 60 minutes\n            take_p60 (float):\n                Takeaways (on-ice) per 60 minutes\n            pent0_p60 (float):\n                Penalty shots taken (on-ice) per 60 minutes\n            pent2_p60 (float):\n                Minor penalties taken (on-ice) per 60 minutes\n            pent4_p60 (float):\n                Double minor penalties taken (on-ice) per 60 minutes\n            pent5_p60 (float):\n                Major penalties taken (on-ice) per 60 minutes\n            pent10_p60 (float):\n                Game misconduct pentalties taken (on-ice) per 60 minutes\n            pend0_p60 (float):\n                Penalty shots drawn (on-ice) per 60 minutes\n            pend2_p60 (float):\n                Minor penalties drawn (on-ice) per 60 minutes\n            pend4_p60 (float):\n                Double minor penalties drawn (on-ice) per 60 minutes\n            pend5_p60 (float):\n                Major penalties drawn (on-ice) per 60 minutes\n            pend10_p60 (float):\n                Game misconduct penalties drawn (on-ice) per 60 minutes\n            gf_percent (float):\n                On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)\n            hdgf_percent (float):\n                On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF /\n                (HDGF + HDGA)\n            xgf_percent (float):\n                On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)\n            sf_percent (float):\n                On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)\n            hdsf_percent (float):\n                On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF /\n                (HDSF + HDSA)\n            ff_percent (float):\n                On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)\n            hdff_percent (float):\n                On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF /\n                (HDFF + HDFA)\n            cf_percent (float):\n                On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)\n            bsf_percent (float):\n                On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)\n            msf_percent (float):\n                On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)\n            hdmsf_percent (float):\n                On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e.,\n                HDMSF / (HDMSF + HDMSA)\n            hf_percent (float):\n                On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)\n            take_percent (float):\n                On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2023020001\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Prepares individual and on-ice dataframe with default options\n            &gt;&gt;&gt; scraper._prep_stats()\n\n            Individual and on-ice statistics, aggregated to season level\n            &gt;&gt;&gt; scraper._prep_stats(level=\"season\")\n\n            Individual and on-ice statistics, aggregated to game level, accounting for teammates\n            &gt;&gt;&gt; scraper._prep_stats(level=\"game\", teammates=True)\n\n        \"\"\"\n        if self._ind_stats.empty:\n            self._prep_ind(level=level, score=score, teammates=teammates, opposition=opposition)\n\n        if self._oi_stats.empty:\n            self._prep_oi(level=level, score=score, teammates=teammates, opposition=opposition)\n\n        merge_cols = [\n            \"season\",\n            \"session\",\n            \"game_id\",\n            \"game_date\",\n            \"player\",\n            \"eh_id\",\n            \"api_id\",\n            \"position\",\n            \"team\",\n            \"opp_team\",\n            \"strength_state\",\n            \"score_state\",\n            \"period\",\n            \"forwards\",\n            \"forwards_eh_id\",\n            \"forwards_api_id\",\n            \"defense\",\n            \"defense_eh_id\",\n            \"defense_api_id\",\n            \"own_goalie\",\n            \"own_goalie_eh_id\",\n            \"own_goalie_api_id\",\n            \"opp_forwards\",\n            \"opp_forwards_eh_id\",\n            \"opp_forwards_api_id\",\n            \"opp_defense\",\n            \"opp_defense_eh_id\",\n            \"opp_defense_api_id\",\n            \"opp_goalie\",\n            \"opp_goalie_eh_id\",\n            \"opp_goalie_api_id\",\n        ]\n\n        merge_cols = [\n            x\n            for x in merge_cols\n            if x in self._ind_stats.columns and x in self._oi_stats.columns\n            # and x in self._zones.columns\n        ]\n\n        stats = self._oi_stats.merge(self._ind_stats, how=\"left\", left_on=merge_cols, right_on=merge_cols).fillna(0)\n\n        stats = stats.loc[stats.toi &gt; 0].reset_index(drop=True).copy()\n\n        columns = [x for x in list(StatSchema.dtypes.keys()) if x in stats.columns]\n\n        stats = stats[columns]\n\n        stats = prep_p60(stats)\n\n        stats = prep_oi_percent(stats)\n\n        stats = StatSchema.validate(stats)\n\n        self._stats = stats\n\n    def prep_stats(\n        self,\n        level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n        score: bool = False,\n        teammates: bool = False,\n        opposition: bool = False,\n        disable_progress_bar: bool | None = None,\n    ) -&gt; None:\n        \"\"\"Prepares DataFrame of individual and on-ice stats from play-by-play data.\n\n        Used to prepare, or reset prepared data for later analysis\n\n        Parameters:\n            level (str):\n                Determines the level of aggregation. One of season, session, game, period\n            score (bool):\n                Determines if stats account for score state\n            teammates (bool):\n                Determines if stats account for teammates on ice\n            opposition (bool):\n                Determines if stats account for opponents on ice\n            disable_progress_bar (bool):\n                Determines whether to display the progress bar\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 2023 for 2023-24 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020001\n            game_date (int):\n                Date game was played, e.g., 2023-10-10\n            player (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            api_id (str):\n                NHL API ID for the player, e.g., 8476887\n            position (str):\n                Player's position, e.g., L\n            team (str):\n                Player's team, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., TBL\n            strength_state (str):\n                Strength state, e.g., 5v5\n            period (int):\n                Period, e.g., 3\n            score_state (str):\n                Score state, e.g., 2v1\n            forwards (str):\n                Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY\n            forwards_eh_id (str):\n                Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n            forwards_api_id (str):\n                Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158\n            defense (str):\n                Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER\n            defense_eh_id (str):\n                Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER\n            defense_api_id (str):\n                Defense teammates' NHL API IDs, e.g., 8474151, 8478851\n            own_goalie (str):\n                Own goalie, e.g., JUUSE SAROS\n            own_goalie_eh_id (str):\n                Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS\n            own_goalie_api_id (str):\n                Own goalie's NHL API ID, e.g., 8477424\n            opp_forwards (str):\n                Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS\n            opp_forwards_eh_id (str):\n                Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS\n            opp_forwards_api_id (str):\n                Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564\n            opp_defense (str):\n                Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN\n            opp_defense_eh_id (str):\n                Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN\n            opp_defense_api_id (str):\n                Opposing defense's NHL API IDs, e.g., 8480246, 8475167\n            opp_goalie (str):\n                Opposing goalie, e.g., JONAS JOHANSSON\n            opp_goalie_eh_id (str):\n                Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON\n            opp_goalie_api_id (str):\n                Opposing goalie's NHL API ID, e.g., 8477992\n            toi (float):\n                Time on-ice, in minutes, e.g, 0.483333\n            g (int):\n                Goals scored, e.g, 0\n            ihdg (int):\n                High-danger goals scored, e.g, 0\n            a1 (int):\n                Primary assists, e.g, 0\n            a2 (int):\n                Secondary assists, e.g, 0\n            ixg (float):\n                Individual xG for, e.g, 1.014336\n            isf (int):\n                Individual shots taken, e.g, 3\n            ihdsf (int):\n                High-danger shots taken, e.g, 3\n            imsf (int):\n                Individual missed shots, e.g, 0\n            ihdm (int):\n                High-danger missed shots, e.g, 0\n            iff (int):\n                Individual fenwick for, e.g., 3\n            ihdf (int):\n                High-danger fenwick for, e.g., 3\n            isb (int):\n                Shots taken that were blocked, e.g, 0\n            icf (int):\n                Individual corsi for, e.g., 3\n            ibs (int):\n                Individual shots blocked on defense, e.g, 0\n            igive (int):\n                Individual giveaways, e.g, 0\n            itake (int):\n                Individual takeaways, e.g, 0\n            ihf (int):\n                Individual hits for, e.g, 0\n            iht (int):\n                Individual hits taken, e.g, 0\n            ifow (int):\n                Individual faceoffs won, e.g, 0\n            ifol (int):\n                Individual faceoffs lost, e.g, 0\n            iozfw (int):\n                Individual faceoffs won in offensive zone, e.g, 0\n            iozfl (int):\n                Individual faceoffs lost in offensive zone, e.g, 0\n            inzfw (int):\n                Individual faceoffs won in neutral zone, e.g, 0\n            inzfl (int):\n                Individual faceoffs lost in neutral zone, e.g, 0\n            idzfw (int):\n                Individual faceoffs won in defensive zone, e.g, 0\n            idzfl (int):\n                Individual faceoffs lost in defensive zone, e.g, 0\n            a1_xg (float):\n                xG on primary assists, e.g, 0\n            a2_xg (float):\n                xG on secondary assists, e.g, 0\n            ipent0 (int):\n                Individual penalty shots against, e.g, 0\n            ipent2 (int):\n                Individual minor penalties taken, e.g, 0\n            ipent4 (int):\n                Individual double minor penalties taken, e.g, 0\n            ipent5 (int):\n                Individual major penalties taken, e.g, 0\n            ipent10 (int):\n                Individual game misconduct penalties taken, e.g, 0\n            ipend0 (int):\n                Individual penalty shots drawn, e.g, 0\n            ipend2 (int):\n                Individual minor penalties taken, e.g, 0\n            ipend4 (int):\n                Individual double minor penalties drawn, e.g, 0\n            ipend5 (int):\n                Individual major penalties drawn, e.g, 0\n            ipend10 (int):\n                Individual game misconduct penalties drawn, e.g, 0\n            gf (int):\n                Goals for (on-ice), e.g, 0\n            hdgf (int):\n                High-danger goals for (on-ice), e.g, 0\n            ga (int):\n                Goals against (on-ice), e.g, 0\n            hdga (int):\n                High-danger goals against (on-ice), e.g, 0\n            xgf (float):\n                xG for (on-ice), e.g., 1.258332\n            xga (float):\n                xG against (on-ice), e.g, 0.000000\n            sf (int):\n                Shots for (on-ice), e.g, 4\n            sa (int):\n                Shots against (on-ice), e.g, 0\n            hdsf (int):\n                High-danger shots for (on-ice), e.g, 3\n            hdsa (int):\n                High-danger shots against (on-ice), e.g, 0\n            ff (int):\n                Fenwick for (on-ice), e.g, 4\n            fa (int):\n                Fenwick against (on-ice), e.g, 0\n            hdff (int):\n                High-danger fenwick for (on-ice), e.g, 3\n            hdfa (int):\n                High-danger fenwick against (on-ice), e.g, 0\n            cf (int):\n                Corsi for (on-ice), e.g, 4\n            ca (int):\n                Corsi against (on-ice), e.g, 0\n            bsf (int):\n                Shots taken that were blocked (on-ice), e.g, 0\n            bsa (int):\n                Shots blocked (on-ice), e.g, 0\n            msf (int):\n                Missed shots taken (on-ice), e.g, 0\n            msa (int):\n                Missed shots against (on-ice), e.g, 0\n            hdmsf (int):\n                High-danger missed shots taken (on-ice), e.g, 0\n            hdmsa (int):\n                High-danger missed shots against (on-ice), e.g, 0\n            teammate_block (int):\n                Shots blocked by teammates (on-ice), e.g, 0\n            hf (int):\n                Hits for (on-ice), e.g, 0\n            ht (int):\n                Hits taken (on-ice), e.g, 0\n            give (int):\n                Giveaways (on-ice), e.g, 0\n            take (int):\n                Takeaways (on-ice), e.g, 0\n            ozf (int):\n                Offensive zone faceoffs (on-ice), e.g, 0\n            nzf (int):\n                Neutral zone faceoffs (on-ice), e.g, 1\n            dzf (int):\n                Defensive zone faceoffs (on-ice), e.g, 0\n            fow (int):\n                Faceoffs won (on-ice), e.g, 1\n            fol (int):\n                Faceoffs lost (on-ice), e.g, 0\n            ozfw (int):\n                Offensive zone faceoffs won (on-ice), e.g, 0\n            ozfl (int):\n                Offensive zone faceoffs lost (on-ice), e.g, 0\n            nzfw (int):\n                Neutral zone faceoffs won (on-ice), e.g, 1\n            nzfl (int):\n                Neutral zone faceoffs lost (on-ice), e.g, 0\n            dzfw (int):\n                Defensive zone faceoffs won (on-ice), e.g, 0\n            dzfl (int):\n                Defensive zone faceoffs lost (on-ice), e.g, 0\n            pent0 (int):\n                Penalty shots allowed (on-ice), e.g, 0\n            pent2 (int):\n                Minor penalties taken (on-ice), e.g, 0\n            pent4 (int):\n                Double minor penalties taken (on-ice), e.g, 0\n            pent5 (int):\n                Major penalties taken (on-ice), e.g, 0\n            pent10 (int):\n                Game misconduct penalties taken (on-ice), e.g, 0\n            pend0 (int):\n                Penalty shots drawn (on-ice), e.g, 0\n            pend2 (int):\n                Minor penalties drawn (on-ice), e.g, 0\n            pend4 (int):\n                Double minor penalties drawn (on-ice), e.g, 0\n            pend5 (int):\n                Major penalties drawn (on-ice), e.g, 0\n            pend10 (int):\n                Game misconduct penalties drawn (on-ice), e.g, 0\n            ozs (int):\n                Offensive zone starts, e.g, 0\n            nzs (int):\n                Neutral zone starts, e.g, 0\n            dzs (int):\n                Defenzive zone starts, e.g, 0\n            otf (int):\n                On-the-fly starts, e.g, 0\n            g_p60 (float):\n                Goals scored per 60 minutes\n            ihdg_p60 (float):\n                Individual high-danger goals scored per 60\n            a1_p60 (float):\n                Primary assists per 60 minutes\n            a2_p60 (float):\n                Secondary per 60 minutes\n            ixg_p60 (float):\n                Individual xG for per 60 minutes\n            isf_p60 (float):\n                Individual shots for per 60 minutes\n            ihdsf_p60 (float):\n                Individual high-danger shots for per 60 minutes\n            imsf_p60 (float):\n                Individual missed shorts for per 60 minutes\n            ihdm_p60 (float):\n                Individual high-danger missed shots for per 60 minutes\n            iff_p60 (float):\n                Individual fenwick for per 60 minutes\n            ihdff_p60 (float):\n                Individual high-danger fenwick for per 60 minutes\n            isb_p60 (float):\n                Individual shots blocked (for) per 60 minutes\n            icf_p60 (float):\n                Individual corsi for per 60 minutes\n            ibs_p60 (float):\n                Individual blocked shots (against) per 60 minutes\n            igive_p60 (float):\n                Individual giveaways per 60 minutes\n            itake_p60 (float):\n                Individual takeaways per 60 minutes\n            ihf_p60 (float):\n                Individual hits for per 60 minutes\n            iht_p60 (float):\n                Individual hits taken per 60 minutes\n            a1_xg_p60 (float):\n                Individual primary assists' xG per 60 minutes\n            a2_xg_p60 (float):\n                Individual secondary assists' xG per 60 minutes\n            ipent0_p60 (float):\n                Individual penalty shots taken per 60 minutes\n            ipent2_p60 (float):\n                Individual minor penalties taken per 60 minutes\n            ipent4_p60 (float):\n                Individual double minor penalties taken per 60 minutes\n            ipent5_p60 (float):\n                Individual major penalties taken per 60 minutes\n            ipent10_p60 (float):\n                Individual game misconduct pentalties taken per 60 minutes\n            ipend0_p60 (float):\n                Individual penalty shots drawn per 60 minutes\n            ipend2_p60 (float):\n                Individual minor penalties drawn per 60 minutes\n            ipend4_p60 (float):\n                Individual double minor penalties drawn per 60 minutes\n            ipend5_p60 (float):\n                Individual major penalties drawn per 60 minutes\n            ipend10_p60 (float):\n                Individual game misconduct penalties drawn per 60 minutes\n            gf_p60 (float):\n                Goals for (on-ice) per 60 minutes\n            ga_p60 (float):\n                Goals against (on-ice) per 60 minutes\n            hdgf_p60 (float):\n                High-danger goals for (on-ice) per 60 minutes\n            hdga_p60 (float):\n                High-danger goals against (on-ice) per 60 minutes\n            xgf_p60 (float):\n                xG for (on-ice) per 60 minutes\n            xga_p60 (float):\n                xG against (on-ice) per 60 minutes\n            sf_p60 (float):\n                Shots for (on-ice) per 60 minutes\n            sa_p60 (float):\n                Shots against (on-ice) per 60 minutes\n            hdsf_p60 (float):\n                High-danger shots for (on-ice) per 60 minutes\n            hdsa_p60 (float):\n                High danger shots against (on-ice) per 60 minutes\n            ff_p60 (float):\n                Fenwick for (on-ice) per 60 minutes\n            fa_p60 (float):\n                Fenwick against (on-ice) per 60 minutes\n            hdff_p60 (float):\n                High-danger fenwick for (on-ice) per 60 minutes\n            hdfa_p60 (float):\n                High-danger fenwick against (on-ice) per 60 minutes\n            cf_p60 (float):\n                Corsi for (on-ice) per 60 minutes\n            ca_p60 (float):\n                Corsi against (on-ice) per 60 minutes\n            bsf_p60 (float):\n                Blocked shots for (on-ice) per 60 minutes\n            bsa_p60 (float):\n                Blocked shots against (on-ice) per 60 minutes\n            msf_p60 (float):\n                Missed shots for (on-ice) per 60 minutes\n            msa_p60 (float):\n                Missed shots against (on-ice) per 60 minutes\n            hdmsf_p60 (float):\n                High-danger missed shots for (on-ice) per 60 minutes\n            hdmsa_p60 (float):\n                High-danger missed shots against (on-ice) per 60 minutes\n            teammate_block_p60 (float):\n                Shots blocked by teammates (on-ice) per 60 minutes\n            hf_p60 (float):\n                Hits  for (on-ice) per 60 minutes\n            ht_p60 (float):\n                Hits taken (on-ice) per 60 minutes\n            give_p60 (float):\n                Giveaways (on-ice) per 60 minutes\n            take_p60 (float):\n                Takeaways (on-ice) per 60 minutes\n            pent0_p60 (float):\n                Penalty shots taken (on-ice) per 60 minutes\n            pent2_p60 (float):\n                Minor penalties taken (on-ice) per 60 minutes\n            pent4_p60 (float):\n                Double minor penalties taken (on-ice) per 60 minutes\n            pent5_p60 (float):\n                Major penalties taken (on-ice) per 60 minutes\n            pent10_p60 (float):\n                Game misconduct pentalties taken (on-ice) per 60 minutes\n            pend0_p60 (float):\n                Penalty shots drawn (on-ice) per 60 minutes\n            pend2_p60 (float):\n                Minor penalties drawn (on-ice) per 60 minutes\n            pend4_p60 (float):\n                Double minor penalties drawn (on-ice) per 60 minutes\n            pend5_p60 (float):\n                Major penalties drawn (on-ice) per 60 minutes\n            pend10_p60 (float):\n                Game misconduct penalties drawn (on-ice) per 60 minutes\n            gf_percent (float):\n                On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)\n            hdgf_percent (float):\n                On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF /\n                (HDGF + HDGA)\n            xgf_percent (float):\n                On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)\n            sf_percent (float):\n                On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)\n            hdsf_percent (float):\n                On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF /\n                (HDSF + HDSA)\n            ff_percent (float):\n                On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)\n            hdff_percent (float):\n                On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF /\n                (HDFF + HDFA)\n            cf_percent (float):\n                On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)\n            bsf_percent (float):\n                On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)\n            msf_percent (float):\n                On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)\n            hdmsf_percent (float):\n                On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e.,\n                HDMSF / (HDMSF + HDMSA)\n            hf_percent (float):\n                On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)\n            take_percent (float):\n                On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2023020001\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Prepares individual and on-ice dataframe with default options\n            &gt;&gt;&gt; scraper.prep_stats()\n\n            Individual and on-ice statistics, aggregated to season level\n            &gt;&gt;&gt; scraper.prep_stats(level=\"season\")\n\n            Individual and on-ice statistics, aggregated to game level, accounting for teammates\n            &gt;&gt;&gt; scraper.prep_stats(level=\"game\", teammates=True)\n\n        \"\"\"\n        levels = self._stats_levels\n\n        if (\n            levels[\"level\"] != level\n            or levels[\"score\"] != score\n            or levels[\"teammates\"] != teammates\n            or levels[\"opposition\"] != opposition\n        ):\n            self._clear_stats()\n\n            new_values = {\"level\": level, \"score\": score, \"teammates\": teammates, \"opposition\": opposition}\n\n            self._stats_levels.update(new_values)\n\n        if self._stats.empty:\n            if not disable_progress_bar:\n                disable_progress_bar = self.disable_progress_bar\n\n            with ChickenProgressIndeterminate(disable=disable_progress_bar) as progress:\n                pbar_message = \"Prepping stats data...\"\n                progress_task = progress.add_task(pbar_message, total=None, refresh=True)\n\n                progress.start_task(progress_task)\n                progress.update(progress_task, total=1, description=pbar_message, refresh=True)\n\n                self._prep_stats(level=level, score=score, teammates=teammates, opposition=opposition)\n\n                progress.update(\n                    progress_task,\n                    description=\"Finished prepping stats data\",\n                    completed=True,\n                    advance=True,\n                    refresh=True,\n                )\n\n    @property\n    def stats(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of individual &amp; on-ice stats aggregated from play-by-play data.\n\n        Determine level of aggregation using prep_stats method.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 2023 for 2023-24 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020001\n            game_date (int):\n                Date game was played, e.g., 2023-10-10\n            player (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            api_id (str):\n                NHL API ID for the player, e.g., 8476887\n            position (str):\n                Player's position, e.g., L\n            team (str):\n                Player's team, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., TBL\n            strength_state (str):\n                Strength state, e.g., 5v5\n            period (int):\n                Period, e.g., 3\n            score_state (str):\n                Score state, e.g., 2v1\n            forwards (str):\n                Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY\n            forwards_eh_id (str):\n                Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n            forwards_api_id (str):\n                Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158\n            defense (str):\n                Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER\n            defense_eh_id (str):\n                Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER\n            defense_api_id (str):\n                Defense teammates' NHL API IDs, e.g., 8474151, 8478851\n            own_goalie (str):\n                Own goalie, e.g., JUUSE SAROS\n            own_goalie_eh_id (str):\n                Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS\n            own_goalie_api_id (str):\n                Own goalie's NHL API ID, e.g., 8477424\n            opp_forwards (str):\n                Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS\n            opp_forwards_eh_id (str):\n                Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS\n            opp_forwards_api_id (str):\n                Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564\n            opp_defense (str):\n                Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN\n            opp_defense_eh_id (str):\n                Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN\n            opp_defense_api_id (str):\n                Opposing defense's NHL API IDs, e.g., 8480246, 8475167\n            opp_goalie (str):\n                Opposing goalie, e.g., JONAS JOHANSSON\n            opp_goalie_eh_id (str):\n                Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON\n            opp_goalie_api_id (str):\n                Opposing goalie's NHL API ID, e.g., 8477992\n            toi (float):\n                Time on-ice, in minutes, e.g, 0.483333\n            g (int):\n                Goals scored, e.g, 0\n            ihdg (int):\n                High-danger goals scored, e.g, 0\n            a1 (int):\n                Primary assists, e.g, 0\n            a2 (int):\n                Secondary assists, e.g, 0\n            ixg (float):\n                Individual xG for, e.g, 1.014336\n            isf (int):\n                Individual shots taken, e.g, 3\n            ihdsf (int):\n                High-danger shots taken, e.g, 3\n            imsf (int):\n                Individual missed shots, e.g, 0\n            ihdm (int):\n                High-danger missed shots, e.g, 0\n            iff (int):\n                Individual fenwick for, e.g., 3\n            ihdf (int):\n                High-danger fenwick for, e.g., 3\n            isb (int):\n                Shots taken that were blocked, e.g, 0\n            icf (int):\n                Individual corsi for, e.g., 3\n            ibs (int):\n                Individual shots blocked on defense, e.g, 0\n            igive (int):\n                Individual giveaways, e.g, 0\n            itake (int):\n                Individual takeaways, e.g, 0\n            ihf (int):\n                Individual hits for, e.g, 0\n            iht (int):\n                Individual hits taken, e.g, 0\n            ifow (int):\n                Individual faceoffs won, e.g, 0\n            ifol (int):\n                Individual faceoffs lost, e.g, 0\n            iozfw (int):\n                Individual faceoffs won in offensive zone, e.g, 0\n            iozfl (int):\n                Individual faceoffs lost in offensive zone, e.g, 0\n            inzfw (int):\n                Individual faceoffs won in neutral zone, e.g, 0\n            inzfl (int):\n                Individual faceoffs lost in neutral zone, e.g, 0\n            idzfw (int):\n                Individual faceoffs won in defensive zone, e.g, 0\n            idzfl (int):\n                Individual faceoffs lost in defensive zone, e.g, 0\n            a1_xg (float):\n                xG on primary assists, e.g, 0\n            a2_xg (float):\n                xG on secondary assists, e.g, 0\n            ipent0 (int):\n                Individual penalty shots against, e.g, 0\n            ipent2 (int):\n                Individual minor penalties taken, e.g, 0\n            ipent4 (int):\n                Individual double minor penalties taken, e.g, 0\n            ipent5 (int):\n                Individual major penalties taken, e.g, 0\n            ipent10 (int):\n                Individual game misconduct penalties taken, e.g, 0\n            ipend0 (int):\n                Individual penalty shots drawn, e.g, 0\n            ipend2 (int):\n                Individual minor penalties taken, e.g, 0\n            ipend4 (int):\n                Individual double minor penalties drawn, e.g, 0\n            ipend5 (int):\n                Individual major penalties drawn, e.g, 0\n            ipend10 (int):\n                Individual game misconduct penalties drawn, e.g, 0\n            gf (int):\n                Goals for (on-ice), e.g, 0\n            hdgf (int):\n                High-danger goals for (on-ice), e.g, 0\n            ga (int):\n                Goals against (on-ice), e.g, 0\n            hdga (int):\n                High-danger goals against (on-ice), e.g, 0\n            xgf (float):\n                xG for (on-ice), e.g., 1.258332\n            xga (float):\n                xG against (on-ice), e.g, 0.000000\n            sf (int):\n                Shots for (on-ice), e.g, 4\n            sa (int):\n                Shots against (on-ice), e.g, 0\n            hdsf (int):\n                High-danger shots for (on-ice), e.g, 3\n            hdsa (int):\n                High-danger shots against (on-ice), e.g, 0\n            ff (int):\n                Fenwick for (on-ice), e.g, 4\n            fa (int):\n                Fenwick against (on-ice), e.g, 0\n            hdff (int):\n                High-danger fenwick for (on-ice), e.g, 3\n            hdfa (int):\n                High-danger fenwick against (on-ice), e.g, 0\n            cf (int):\n                Corsi for (on-ice), e.g, 4\n            ca (int):\n                Corsi against (on-ice), e.g, 0\n            bsf (int):\n                Shots taken that were blocked (on-ice), e.g, 0\n            bsa (int):\n                Shots blocked (on-ice), e.g, 0\n            msf (int):\n                Missed shots taken (on-ice), e.g, 0\n            msa (int):\n                Missed shots against (on-ice), e.g, 0\n            hdmsf (int):\n                High-danger missed shots taken (on-ice), e.g, 0\n            hdmsa (int):\n                High-danger missed shots against (on-ice), e.g, 0\n            teammate_block (int):\n                Shots blocked by teammates (on-ice), e.g, 0\n            hf (int):\n                Hits for (on-ice), e.g, 0\n            ht (int):\n                Hits taken (on-ice), e.g, 0\n            give (int):\n                Giveaways (on-ice), e.g, 0\n            take (int):\n                Takeaways (on-ice), e.g, 0\n            ozf (int):\n                Offensive zone faceoffs (on-ice), e.g, 0\n            nzf (int):\n                Neutral zone faceoffs (on-ice), e.g, 1\n            dzf (int):\n                Defensive zone faceoffs (on-ice), e.g, 0\n            fow (int):\n                Faceoffs won (on-ice), e.g, 1\n            fol (int):\n                Faceoffs lost (on-ice), e.g, 0\n            ozfw (int):\n                Offensive zone faceoffs won (on-ice), e.g, 0\n            ozfl (int):\n                Offensive zone faceoffs lost (on-ice), e.g, 0\n            nzfw (int):\n                Neutral zone faceoffs won (on-ice), e.g, 1\n            nzfl (int):\n                Neutral zone faceoffs lost (on-ice), e.g, 0\n            dzfw (int):\n                Defensive zone faceoffs won (on-ice), e.g, 0\n            dzfl (int):\n                Defensive zone faceoffs lost (on-ice), e.g, 0\n            pent0 (int):\n                Penalty shots allowed (on-ice), e.g, 0\n            pent2 (int):\n                Minor penalties taken (on-ice), e.g, 0\n            pent4 (int):\n                Double minor penalties taken (on-ice), e.g, 0\n            pent5 (int):\n                Major penalties taken (on-ice), e.g, 0\n            pent10 (int):\n                Game misconduct penalties taken (on-ice), e.g, 0\n            pend0 (int):\n                Penalty shots drawn (on-ice), e.g, 0\n            pend2 (int):\n                Minor penalties drawn (on-ice), e.g, 0\n            pend4 (int):\n                Double minor penalties drawn (on-ice), e.g, 0\n            pend5 (int):\n                Major penalties drawn (on-ice), e.g, 0\n            pend10 (int):\n                Game misconduct penalties drawn (on-ice), e.g, 0\n            ozs (int):\n                Offensive zone starts, e.g, 0\n            nzs (int):\n                Neutral zone starts, e.g, 0\n            dzs (int):\n                Defenzive zone starts, e.g, 0\n            otf (int):\n                On-the-fly starts, e.g, 0\n            g_p60 (float):\n                Goals scored per 60 minutes\n            ihdg_p60 (float):\n                Individual high-danger goals scored per 60\n            a1_p60 (float):\n                Primary assists per 60 minutes\n            a2_p60 (float):\n                Secondary per 60 minutes\n            ixg_p60 (float):\n                Individual xG for per 60 minutes\n            isf_p60 (float):\n                Individual shots for per 60 minutes\n            ihdsf_p60 (float):\n                Individual high-danger shots for per 60 minutes\n            imsf_p60 (float):\n                Individual missed shorts for per 60 minutes\n            ihdm_p60 (float):\n                Individual high-danger missed shots for per 60 minutes\n            iff_p60 (float):\n                Individual fenwick for per 60 minutes\n            ihdff_p60 (float):\n                Individual high-danger fenwick for per 60 minutes\n            isb_p60 (float):\n                Individual shots blocked (for) per 60 minutes\n            icf_p60 (float):\n                Individual corsi for per 60 minutes\n            ibs_p60 (float):\n                Individual blocked shots (against) per 60 minutes\n            igive_p60 (float):\n                Individual giveaways per 60 minutes\n            itake_p60 (float):\n                Individual takeaways per 60 minutes\n            ihf_p60 (float):\n                Individual hits for per 60 minutes\n            iht_p60 (float):\n                Individual hits taken per 60 minutes\n            a1_xg_p60 (float):\n                Individual primary assists' xG per 60 minutes\n            a2_xg_p60 (float):\n                Individual secondary assists' xG per 60 minutes\n            ipent0_p60 (float):\n                Individual penalty shots taken per 60 minutes\n            ipent2_p60 (float):\n                Individual minor penalties taken per 60 minutes\n            ipent4_p60 (float):\n                Individual double minor penalties taken per 60 minutes\n            ipent5_p60 (float):\n                Individual major penalties taken per 60 minutes\n            ipent10_p60 (float):\n                Individual game misconduct pentalties taken per 60 minutes\n            ipend0_p60 (float):\n                Individual penalty shots drawn per 60 minutes\n            ipend2_p60 (float):\n                Individual minor penalties drawn per 60 minutes\n            ipend4_p60 (float):\n                Individual double minor penalties drawn per 60 minutes\n            ipend5_p60 (float):\n                Individual major penalties drawn per 60 minutes\n            ipend10_p60 (float):\n                Individual game misconduct penalties drawn per 60 minutes\n            gf_p60 (float):\n                Goals for (on-ice) per 60 minutes\n            ga_p60 (float):\n                Goals against (on-ice) per 60 minutes\n            hdgf_p60 (float):\n                High-danger goals for (on-ice) per 60 minutes\n            hdga_p60 (float):\n                High-danger goals against (on-ice) per 60 minutes\n            xgf_p60 (float):\n                xG for (on-ice) per 60 minutes\n            xga_p60 (float):\n                xG against (on-ice) per 60 minutes\n            sf_p60 (float):\n                Shots for (on-ice) per 60 minutes\n            sa_p60 (float):\n                Shots against (on-ice) per 60 minutes\n            hdsf_p60 (float):\n                High-danger shots for (on-ice) per 60 minutes\n            hdsa_p60 (float):\n                High danger shots against (on-ice) per 60 minutes\n            ff_p60 (float):\n                Fenwick for (on-ice) per 60 minutes\n            fa_p60 (float):\n                Fenwick against (on-ice) per 60 minutes\n            hdff_p60 (float):\n                High-danger fenwick for (on-ice) per 60 minutes\n            hdfa_p60 (float):\n                High-danger fenwick against (on-ice) per 60 minutes\n            cf_p60 (float):\n                Corsi for (on-ice) per 60 minutes\n            ca_p60 (float):\n                Corsi against (on-ice) per 60 minutes\n            bsf_p60 (float):\n                Blocked shots for (on-ice) per 60 minutes\n            bsa_p60 (float):\n                Blocked shots against (on-ice) per 60 minutes\n            msf_p60 (float):\n                Missed shots for (on-ice) per 60 minutes\n            msa_p60 (float):\n                Missed shots against (on-ice) per 60 minutes\n            hdmsf_p60 (float):\n                High-danger missed shots for (on-ice) per 60 minutes\n            hdmsa_p60 (float):\n                High-danger missed shots against (on-ice) per 60 minutes\n            teammate_block_p60 (float):\n                Shots blocked by teammates (on-ice) per 60 minutes\n            hf_p60 (float):\n                Hits  for (on-ice) per 60 minutes\n            ht_p60 (float):\n                Hits taken (on-ice) per 60 minutes\n            give_p60 (float):\n                Giveaways (on-ice) per 60 minutes\n            take_p60 (float):\n                Takeaways (on-ice) per 60 minutes\n            pent0_p60 (float):\n                Penalty shots taken (on-ice) per 60 minutes\n            pent2_p60 (float):\n                Minor penalties taken (on-ice) per 60 minutes\n            pent4_p60 (float):\n                Double minor penalties taken (on-ice) per 60 minutes\n            pent5_p60 (float):\n                Major penalties taken (on-ice) per 60 minutes\n            pent10_p60 (float):\n                Game misconduct pentalties taken (on-ice) per 60 minutes\n            pend0_p60 (float):\n                Penalty shots drawn (on-ice) per 60 minutes\n            pend2_p60 (float):\n                Minor penalties drawn (on-ice) per 60 minutes\n            pend4_p60 (float):\n                Double minor penalties drawn (on-ice) per 60 minutes\n            pend5_p60 (float):\n                Major penalties drawn (on-ice) per 60 minutes\n            pend10_p60 (float):\n                Game misconduct penalties drawn (on-ice) per 60 minutes\n            gf_percent (float):\n                On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)\n            hdgf_percent (float):\n                On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e.,\n                HDGF / (HDGF + HDGA)\n            xgf_percent (float):\n                On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)\n            sf_percent (float):\n                On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)\n            hdsf_percent (float):\n                On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e.,\n                HDSF / (HDSF + HDSA)\n            ff_percent (float):\n                On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)\n            hdff_percent (float):\n                On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e.,\n                HDFF / (HDFF + HDFA)\n            cf_percent (float):\n                On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)\n            bsf_percent (float):\n                On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)\n            msf_percent (float):\n                On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)\n            hdmsf_percent (float):\n                On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e.,\n                HDMSF / (HDMSF + HDMSA)\n            hf_percent (float):\n                On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)\n            take_percent (float):\n                On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2023020001\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Returns individual and on-ice stats with default options\n            &gt;&gt;&gt; scraper.stats\n\n            Resets individual and on-ice stats to period level, accounting for teammates on-ice\n            &gt;&gt;&gt; scraper.prep_stats(level=\"period\", teammates=True)\n            &gt;&gt;&gt; scraper.stats\n\n            Resets individual and on-ice stats to season level, accounting for teammates on-ice and score state\n            &gt;&gt;&gt; scraper.prep_stats(level=\"season\", teammates=True, score=True)\n            &gt;&gt;&gt; scraper.stats\n\n        \"\"\"\n        if self._stats.empty:\n            self.prep_stats()\n\n        return self._stats.copy()\n\n    def _clear_stats(self):\n        \"\"\"Method to clear stats dataframes. Nested within `prep_stats` method.\"\"\"\n        self._stats = pd.DataFrame()\n        self._oi_stats = pd.DataFrame()\n        self._ind_stats = pd.DataFrame()\n\n    def _prep_lines(\n        self,\n        position: Literal[\"f\", \"d\"] = \"f\",\n        level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n        score: bool = False,\n        teammates: bool = False,\n        opposition: bool = False,\n    ) -&gt; None:\n        \"\"\"Prepares DataFrame of line-level stats from play-by-play data.\n\n        Nested within `prep_lines` method.\n\n        Parameters:\n            position (str):\n                Determines what positions to aggregate. One of F or D\n            level (str):\n                Determines the level of aggregation. One of season, session, game, period\n            score (bool):\n                Determines if stats account for score state\n            teammates (bool):\n                Determines if stats account for teammates on ice\n            opposition (bool):\n                Determines if stats account for opponents on ice\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 2023 for 2023-24 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020001\n            game_date (int):\n                Date game was played, e.g., 2023-10-10\n            team (str):\n                Player's team, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., TBL\n            strength_state (str):\n                Strength state, e.g., 5v5\n            period (int):\n                Period, e.g., 3\n            score_state (str):\n                Score state, e.g., 2v1\n            forwards (str):\n                Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY\n            forwards_eh_id (str):\n                Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n            forwards_api_id (str):\n                Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158\n            defense (str):\n                Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER\n            defense_eh_id (str):\n                Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER\n            defense_api_id (str):\n                Defense teammates' NHL API IDs, e.g., 8474151, 8478851\n            own_goalie (str):\n                Own goalie, e.g., JUUSE SAROS\n            own_goalie_eh_id (str):\n                Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS\n            own_goalie_api_id (str):\n                Own goalie's NHL API ID, e.g., 8477424\n            opp_forwards (str):\n                Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS\n            opp_forwards_eh_id (str):\n                Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS\n            opp_forwards_api_id (str):\n                Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564\n            opp_defense (str):\n                Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN\n            opp_defense_eh_id (str):\n                Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN\n            opp_defense_api_id (str):\n                Opposing defense's NHL API IDs, e.g., 8480246, 8475167\n            opp_goalie (str):\n                Opposing goalie, e.g., JONAS JOHANSSON\n            opp_goalie_eh_id (str):\n                Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON\n            opp_goalie_api_id (str):\n                Opposing goalie's NHL API ID, e.g., 8477992\n            toi (float):\n                Time on-ice, in minutes, e.g, 0.483333\n            gf (int):\n                Goals for (on-ice), e.g, 0\n            ga (int):\n                Goals against (on-ice), e.g, 0\n            hdgf (int):\n                High-danger goals for (on-ice), e.g, 0\n            hdga (int):\n                High-danger goals against (on-ice), e.g, 0\n            xgf (float):\n                xG for (on-ice), e.g., 1.258332\n            xga (float):\n                xG against (on-ice), e.g, 0.000000\n            sf (int):\n                Shots for (on-ice), e.g, 4\n            sa (int):\n                Shots against (on-ice), e.g, 0\n            hdsf (int):\n                High-danger shots for (on-ice), e.g, 3\n            hdsa (int):\n                High-danger shots against (on-ice), e.g, 0\n            ff (int):\n                Fenwick for (on-ice), e.g, 4\n            fa (int):\n                Fenwick against (on-ice), e.g, 0\n            hdff (int):\n                High-danger fenwick for (on-ice), e.g, 3\n            hdfa (int):\n                High-danger fenwick against (on-ice), e.g, 0\n            cf (int):\n                Corsi for (on-ice), e.g, 4\n            ca (int):\n                Corsi against (on-ice), e.g, 0\n            bsf (int):\n                Shots taken that were blocked (on-ice), e.g, 0\n            bsa (int):\n                Shots blocked (on-ice), e.g, 0\n            msf (int):\n                Missed shots taken (on-ice), e.g, 0\n            msa (int):\n                Missed shots against (on-ice), e.g, 0\n            hdmsf (int):\n                High-danger missed shots taken (on-ice), e.g, 0\n            hdmsa (int):\n                High-danger missed shots against (on-ice), e.g, 0\n            teammate_block (int):\n                Shots blocked by teammates (on-ice), e.g, 0\n            hf (int):\n                Hits for (on-ice), e.g, 0\n            ht (int):\n                Hits taken (on-ice), e.g, 0\n            give (int):\n                Giveaways (on-ice), e.g, 0\n            take (int):\n                Takeaways (on-ice), e.g, 0\n            ozf (int):\n                Offensive zone faceoffs (on-ice), e.g, 0\n            nzf (int):\n                Neutral zone faceoffs (on-ice), e.g, 1\n            dzf (int):\n                Defensive zone faceoffs (on-ice), e.g, 0\n            fow (int):\n                Faceoffs won (on-ice), e.g, 1\n            fol (int):\n                Faceoffs lost (on-ice), e.g, 0\n            ozfw (int):\n                Offensive zone faceoffs won (on-ice), e.g, 0\n            ozfl (int):\n                Offensive zone faceoffs lost (on-ice), e.g, 0\n            nzfw (int):\n                Neutral zone faceoffs won (on-ice), e.g, 1\n            nzfl (int):\n                Neutral zone faceoffs lost (on-ice), e.g, 0\n            dzfw (int):\n                Defensive zone faceoffs won (on-ice), e.g, 0\n            dzfl (int):\n                Defensive zone faceoffs lost (on-ice), e.g, 0\n            pent0 (int):\n                Penalty shots allowed (on-ice), e.g, 0\n            pent2 (int):\n                Minor penalties taken (on-ice), e.g, 0\n            pent4 (int):\n                Double minor penalties taken (on-ice), e.g, 0\n            pent5 (int):\n                Major penalties taken (on-ice), e.g, 0\n            pent10 (int):\n                Game misconduct penalties taken (on-ice), e.g, 0\n            pend0 (int):\n                Penalty shots drawn (on-ice), e.g, 0\n            pend2 (int):\n                Minor penalties drawn (on-ice), e.g, 0\n            pend4 (int):\n                Double minor penalties drawn (on-ice), e.g, 0\n            pend5 (int):\n                Major penalties drawn (on-ice), e.g, 0\n            pend10 (int):\n                Game misconduct penalties drawn (on-ice), e.g, 0\n            gf_p60 (float):\n                Goals for (on-ice) per 60 minutes\n            ga_p60 (float):\n                Goals against (on-ice) per 60 minutes\n            hdgf_p60 (float):\n                High-danger goals for (on-ice) per 60 minutes\n            hdga_p60 (float):\n                High-danger goals against (on-ice) per 60 minutes\n            xgf_p60 (float):\n                xG for (on-ice) per 60 minutes\n            xga_p60 (float):\n                xG against (on-ice) per 60 minutes\n            sf_p60 (float):\n                Shots for (on-ice) per 60 minutes\n            sa_p60 (float):\n                Shots against (on-ice) per 60 minutes\n            hdsf_p60 (float):\n                High-danger shots for (on-ice) per 60 minutes\n            hdsa_p60 (float):\n                High danger shots against (on-ice) per 60 minutes\n            ff_p60 (float):\n                Fenwick for (on-ice) per 60 minutes\n            fa_p60 (float):\n                Fenwick against (on-ice) per 60 minutes\n            hdff_p60 (float):\n                High-danger fenwick for (on-ice) per 60 minutes\n            hdfa_p60 (float):\n                High-danger fenwick against (on-ice) per 60 minutes\n            cf_p60 (float):\n                Corsi for (on-ice) per 60 minutes\n            ca_p60 (float):\n                Corsi against (on-ice) per 60 minutes\n            bsf_p60 (float):\n                Blocked shots for (on-ice) per 60 minutes\n            bsa_p60 (float):\n                Blocked shots against (on-ice) per 60 minutes\n            msf_p60 (float):\n                Missed shots for (on-ice) per 60 minutes\n            msa_p60 (float):\n                Missed shots against (on-ice) per 60 minutes\n            hdmsf_p60 (float):\n                High-danger missed shots for (on-ice) per 60 minutes\n            hdmsa_p60 (float):\n                High-danger missed shots against (on-ice) per 60 minutes\n            teammate_block_p60 (float):\n                Shots blocked by teammates (on-ice) per 60 minutes\n            hf_p60 (float):\n                Hits  for (on-ice) per 60 minutes\n            ht_p60 (float):\n                Hits taken (on-ice) per 60 minutes\n            give_p60 (float):\n                Giveaways (on-ice) per 60 minutes\n            take_p60 (float):\n                Takeaways (on-ice) per 60 minutes\n            pent0_p60 (float):\n                Penalty shots taken (on-ice) per 60 minutes\n            pent2_p60 (float):\n                Minor penalties taken (on-ice) per 60 minutes\n            pent4_p60 (float):\n                Double minor penalties taken (on-ice) per 60 minutes\n            pent5_p60 (float):\n                Major penalties taken (on-ice) per 60 minutes\n            pent10_p60 (float):\n                Game misconduct pentalties taken (on-ice) per 60 minutes\n            pend0_p60 (float):\n                Penalty shots drawn (on-ice) per 60 minutes\n            pend2_p60 (float):\n                Minor penalties drawn (on-ice) per 60 minutes\n            pend4_p60 (float):\n                Double minor penalties drawn (on-ice) per 60 minutes\n            pend5_p60 (float):\n                Major penalties drawn (on-ice) per 60 minutes\n            pend10_p60 (float):\n                Game misconduct penalties drawn (on-ice) per 60 minutes\n            gf_percent (float):\n                On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)\n            hdgf_percent (float):\n                On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF /\n                (HDGF + HDGA)\n            xgf_percent (float):\n                On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)\n            sf_percent (float):\n                On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)\n            hdsf_percent (float):\n                On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF /\n                (HDSF + HDSA)\n            ff_percent (float):\n                On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)\n            hdff_percent (float):\n                On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF /\n                (HDFF + HDFA)\n            cf_percent (float):\n                On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)\n            bsf_percent (float):\n                On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)\n            msf_percent (float):\n                On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)\n            hdmsf_percent (float):\n                On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e.,\n                HDMSF / (HDMSF + HDMSA)\n            hf_percent (float):\n                On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)\n            take_percent (float):\n                On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2023020001\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Prepares on-ice, line-level dataframe with default options\n            &gt;&gt;&gt; scraper._prep_lines()\n\n            Line-level statistics, aggregated to season level\n            &gt;&gt;&gt; scraper._prep_lines(level=\"season\")\n\n            Line-level statistics, aggregated to game level, accounting for teammates\n            &gt;&gt;&gt; scraper._prep_lines(level=\"game\", teammates=True)\n\n        \"\"\"\n        merge_cols = [\"id\", \"event_idx\"]\n\n        data = self.play_by_play.merge(self.play_by_play_ext, how=\"left\", on=merge_cols)\n\n        # Creating the \"for\" dataframe\n\n        # Accounting for desired level of aggregation\n\n        group_list = [\"season\", \"session\", \"event_team\", \"strength_state\"]\n\n        if level == \"session\" or level == \"season\":\n            group_list = group_list\n\n        elif level == \"game\":\n            group_list.extend([\"game_id\", \"game_date\", \"opp_team\"])\n\n        elif level == \"period\":\n            group_list.extend([\"game_id\", \"game_date\", \"opp_team\", \"period\"])\n\n        # Accounting for score state\n\n        if score:\n            group_list.append(\"score_state\")\n\n        # Accounting for desired position\n\n        if position == \"f\":\n            group_list.extend([\"forwards\", \"forwards_eh_id\", \"forwards_api_id\"])\n\n        if position == \"d\":\n            group_list.extend([\"defense\", \"defense_eh_id\", \"defense_api_id\"])\n\n        # Accounting for teammates\n\n        if teammates is True:\n            if position == \"f\":\n                group_list.extend(\n                    [\n                        \"defense\",\n                        \"defense_eh_id\",\n                        \"defense_api_id\",\n                        \"own_goalie\",\n                        \"own_goalie_eh_id\",\n                        \"own_goalie_api_id\",\n                    ]\n                )\n\n            if position == \"d\":\n                group_list.extend(\n                    [\n                        \"forwards\",\n                        \"forwards_eh_id\",\n                        \"forwards_api_id\",\n                        \"own_goalie\",\n                        \"own_goalie_eh_id\",\n                        \"own_goalie_api_id\",\n                    ]\n                )\n\n        # Accounting for opposition\n\n        if opposition is True:\n            group_list.extend(\n                [\n                    \"opp_forwards\",\n                    \"opp_forwards_eh_id\",\n                    \"opp_forwards_api_id\",\n                    \"opp_defense\",\n                    \"opp_defense_eh_id\",\n                    \"opp_defense_api_id\",\n                    \"opp_goalie\",\n                    \"opp_goalie_eh_id\",\n                    \"opp_goalie_api_id\",\n                ]\n            )\n\n            if \"opp_team\" not in group_list:\n                group_list.append(\"opp_team\")\n\n        group_list_order = [\n            \"season\",\n            \"session\",\n            \"game_id\",\n            \"game_date\",\n            \"event_team\",\n            \"opp_team\",\n            \"period\",\n            \"strength_state\",\n            \"score_state\",\n            \"forwards\",\n            \"forwards_eh_id\",\n            \"forwards_api_id\",\n            \"defense\",\n            \"defense_eh_id\",\n            \"defense_api_id\",\n            \"own_goalie\",\n            \"own_goalie_eh_id\",\n            \"own_goalie_api_id\",\n            \"opp_forwards\",\n            \"opp_forwards_eh_id\",\n            \"opp_forwards_api_id\",\n            \"opp_defense\",\n            \"opp_defense_eh_id\",\n            \"opp_defense_api_id\",\n            \"opp_goalie\",\n            \"opp_goalie_eh_id\",\n            \"opp_goalie_api_id\",\n        ]\n\n        group_list = [x for x in group_list_order if x in group_list]\n\n        # Creating dictionary of statistics for the groupby function\n\n        stats = [\n            \"pred_goal\",\n            \"pred_goal_adj\",\n            \"fenwick\",\n            \"fenwick_adj\",\n            \"goal\",\n            \"goal_adj\",\n            \"miss\",\n            \"miss_adj\",\n            \"block\",\n            \"block_adj\",\n            \"teammate_block\",\n            \"teammate_block_adj\",\n            \"shot\",\n            \"shot_adj\",\n            \"hd_goal\",\n            \"hd_shot\",\n            \"hd_fenwick\",\n            \"hd_miss\",\n            \"event_length\",\n            \"fac\",\n            \"ozf\",\n            \"nzf\",\n            \"dzf\",\n            \"hit\",\n            \"give\",\n            \"take\",\n            \"pen0\",\n            \"pen2\",\n            \"pen4\",\n            \"pen5\",\n            \"pen10\",\n        ]\n\n        agg_stats = {x: \"sum\" for x in stats if x in data.columns}\n\n        # Aggregating the \"for\" dataframe\n\n        lines_f = data.groupby(group_list, as_index=False, dropna=False).agg(agg_stats)\n\n        # Creating the dictionary to change column names\n\n        columns = [\n            \"xgf\",\n            \"xgf_adj\",\n            \"ff\",\n            \"ff_adj\",\n            \"gf\",\n            \"gf_adj\",\n            \"msf\",\n            \"msf_adj\",\n            \"bsf\",\n            \"bsf_adj\",\n            \"teammate_block\",\n            \"teammate_block_adj\",\n            \"sf\",\n            \"sf_adj\",\n            \"hdgf\",\n            \"hdsf\",\n            \"hdff\",\n            \"hdmsf\",\n            \"toi\",\n            \"fow\",\n            \"ozfw\",\n            \"nzfw\",\n            \"dzfw\",\n            \"hf\",\n            \"give\",\n            \"take\",\n            \"pent0\",\n            \"pent2\",\n            \"pent4\",\n            \"pent5\",\n            \"pent10\",\n        ]\n\n        columns = dict(zip(stats, columns, strict=False))\n\n        # Accounting for positions\n\n        columns.update({\"event_team\": \"team\"})\n\n        # columns = {k: v for k, v in columns.items() if k in lines_f.columns}\n\n        lines_f = lines_f.rename(columns=columns)\n\n        cols = [\n            \"forwards\",\n            \"forwards_eh_id\",\n            \"forwards_api_id\",\n            \"defense\",\n            \"defense_eh_id\",\n            \"defense_api_id\",\n            \"own_goalie\",\n            \"own_goalie_eh_id\",\n            \"own_goalie_api_id\",\n            \"opp_forwards\",\n            \"opp_forwards_eh_id\",\n            \"opp_forwards_api_id\",\n            \"opp_defense\",\n            \"opp_defense_eh_id\",\n            \"opp_defense_api_id\",\n            \"opp_goalie\",\n            \"opp_goalie_eh_id\",\n            \"opp_goalie_api_id\",\n        ]\n\n        cols = [x for x in cols if x in lines_f]\n\n        for col in cols:\n            lines_f[col] = lines_f[col].fillna(\"EMPTY\")\n\n        # Creating the against dataframe\n\n        # Accounting for desired level of aggregation\n\n        group_list = [\"season\", \"session\", \"opp_team\", \"opp_strength_state\"]\n\n        if level == \"session\" or level == \"season\":\n            group_list = group_list\n\n        elif level == \"game\":\n            group_list.extend([\"game_id\", \"game_date\", \"event_team\"])\n\n        elif level == \"period\":\n            group_list.extend([\"game_id\", \"game_date\", \"event_team\", \"period\"])\n\n        # Accounting for score state\n\n        if score:\n            group_list.append(\"opp_score_state\")\n\n        # Accounting for desired position\n\n        if position == \"f\":\n            group_list.extend([\"opp_forwards\", \"opp_forwards_eh_id\", \"opp_forwards_api_id\"])\n\n        if position == \"d\":\n            group_list.extend([\"opp_defense\", \"opp_defense_eh_id\", \"opp_defense_api_id\"])\n\n        # Accounting for teammates\n\n        if teammates is True:\n            if position == \"f\":\n                group_list.extend(\n                    [\n                        \"opp_defense\",\n                        \"opp_defense_eh_id\",\n                        \"opp_defense_api_id\",\n                        \"opp_goalie\",\n                        \"opp_goalie_eh_id\",\n                        \"opp_goalie_api_id\",\n                    ]\n                )\n\n            if position == \"d\":\n                group_list.extend(\n                    [\n                        \"opp_forwards\",\n                        \"opp_forwards_eh_id\",\n                        \"opp_forwards_api_id\",\n                        \"opp_goalie\",\n                        \"opp_goalie_eh_id\",\n                        \"opp_goalie_api_id\",\n                    ]\n                )\n\n        # Accounting for opposition\n\n        if opposition is True:\n            group_list.extend(\n                [\n                    \"forwards\",\n                    \"forwards_eh_id\",\n                    \"forwards_api_id\",\n                    \"defense\",\n                    \"defense_eh_id\",\n                    \"defense_api_id\",\n                    \"own_goalie\",\n                    \"own_goalie_eh_id\",\n                    \"own_goalie_api_id\",\n                ]\n            )\n\n            if \"event_team\" not in group_list:\n                group_list.append(\"event_team\")\n\n        group_list_order = [\n            \"season\",\n            \"session\",\n            \"game_id\",\n            \"game_date\",\n            \"event_team\",\n            \"opp_team\",\n            \"period\",\n            \"opp_strength_state\",\n            \"opp_score_state\",\n            \"opp_forwards\",\n            \"opp_forwards_eh_id\",\n            \"opp_forwards_api_id\",\n            \"opp_defense\",\n            \"opp_defense_eh_id\",\n            \"opp_defense_api_id\",\n            \"opp_goalie\",\n            \"opp_goalie_eh_id\",\n            \"opp_goalie_api_id\",\n            \"forwards\",\n            \"forwards_eh_id\",\n            \"forwards_api_id\",\n            \"defense\",\n            \"defense_eh_id\",\n            \"defense_api_id\",\n            \"own_goalie\",\n            \"own_goalie_eh_id\",\n            \"own_goalie_api_id\",\n        ]\n\n        group_list = [x for x in group_list_order if x in group_list]\n\n        # Creating dictionary of statistics for the groupby function\n\n        stats = [\n            \"pred_goal\",\n            \"pred_goal_adj\",\n            \"fenwick\",\n            \"fenwick_adj\",\n            \"goal\",\n            \"goal_adj\",\n            \"miss\",\n            \"miss_adj\",\n            \"block\",\n            \"block_adj\",\n            \"shot\",\n            \"shot_adj\",\n            \"hd_goal\",\n            \"hd_shot\",\n            \"hd_fenwick\",\n            \"hd_miss\",\n            \"event_length\",\n            \"fac\",\n            \"ozf\",\n            \"nzf\",\n            \"dzf\",\n            \"hit\",\n            \"pen0\",\n            \"pen2\",\n            \"pen4\",\n            \"pen5\",\n            \"pen10\",\n        ]\n\n        agg_stats = {x: \"sum\" for x in stats if x in data.columns}\n\n        # Aggregating \"against\" dataframe\n\n        lines_a = data.groupby(group_list, as_index=False, dropna=False).agg(agg_stats)\n\n        # Creating the dictionary to change column names\n\n        columns = [\n            \"xga\",\n            \"xga_adj\",\n            \"fa\",\n            \"fa_adj\",\n            \"ga\",\n            \"ga_adj\",\n            \"msa\",\n            \"msa_adj\",\n            \"bsa\",\n            \"bsa_adj\",\n            \"sa\",\n            \"sa_adj\",\n            \"hdga\",\n            \"hdsa\",\n            \"hdfa\",\n            \"hdmsa\",\n            \"toi\",\n            \"fol\",\n            \"ozfl\",\n            \"nzfl\",\n            \"dzfl\",\n            \"ht\",\n            \"pend0\",\n            \"pend2\",\n            \"pend4\",\n            \"pend5\",\n            \"pend10\",\n        ]\n\n        columns = dict(zip(stats, columns, strict=False))\n\n        # Accounting for positions\n\n        columns.update(\n            {\n                \"opp_team\": \"team\",\n                \"event_team\": \"opp_team\",\n                \"opp_forwards\": \"forwards\",\n                \"opp_forwards_eh_id\": \"forwards_eh_id\",\n                \"opp_forwards_api_id\": \"forwards_api_id\",\n                \"opp_strength_state\": \"strength_state\",\n                \"opp_defense\": \"defense\",\n                \"opp_defense_eh_id\": \"defense_eh_id\",\n                \"opp_defense_api_id\": \"defense_api_id\",\n                \"forwards\": \"opp_forwards\",\n                \"forwards_eh_id\": \"opp_forwards_eh_id\",\n                \"forwards_api_id\": \"opp_forwards_api_id\",\n                \"defense\": \"opp_defense\",\n                \"defense_eh_id\": \"opp_defense_eh_id\",\n                \"defense_api_id\": \"opp_defense_api_id\",\n                \"opp_score_state\": \"score_state\",\n                \"own_goalie\": \"opp_goalie\",\n                \"own_goalie_eh_id\": \"opp_goalie_eh_id\",\n                \"own_goalie_api_id\": \"opp_goalie_api_id\",\n                \"opp_goalie\": \"own_goalie\",\n                \"opp_goalie_eh_id\": \"own_goalie_eh_id\",\n                \"opp_goalie_api_id\": \"own_goalie_api_id\",\n            }\n        )\n\n        # columns = {k: v for k, v in columns.items() if k in lines_a.columns}\n\n        lines_a = lines_a.rename(columns=columns)\n\n        cols = [\n            \"forwards\",\n            \"forwards_eh_id\",\n            \"forwards_api_id\",\n            \"defense\",\n            \"defense_eh_id\",\n            \"defense_api_id\",\n            \"own_goalie\",\n            \"own_goalie_eh_id\",\n            \"own_goalie_api_id\",\n            \"opp_forwards\",\n            \"opp_forwards_eh_id\",\n            \"opp_forwards_api_id\",\n            \"opp_defense\",\n            \"opp_defense_eh_id\",\n            \"opp_defense_api_id\",\n            \"opp_goalie\",\n            \"opp_goalie_eh_id\",\n            \"opp_goalie_api_id\",\n        ]\n\n        cols = [x for x in cols if x in lines_a]\n\n        for col in cols:\n            lines_a[col] = lines_a[col].fillna(\"EMPTY\")\n\n        # Merging the \"for\" and \"against\" dataframes\n\n        if level == \"session\" or level == \"season\":\n            if position == \"f\":\n                merge_list = [\n                    \"season\",\n                    \"session\",\n                    \"team\",\n                    \"strength_state\",\n                    \"forwards\",\n                    \"forwards_eh_id\",\n                    \"forwards_api_id\",\n                ]\n\n            if position == \"d\":\n                merge_list = [\n                    \"season\",\n                    \"session\",\n                    \"team\",\n                    \"strength_state\",\n                    \"defense\",\n                    \"defense_eh_id\",\n                    \"defense_api_id\",\n                ]\n\n        if level == \"game\":\n            if position == \"f\":\n                merge_list = [\n                    \"season\",\n                    \"game_id\",\n                    \"game_date\",\n                    \"session\",\n                    \"team\",\n                    \"opp_team\",\n                    \"strength_state\",\n                    \"forwards\",\n                    \"forwards_eh_id\",\n                    \"forwards_api_id\",\n                ]\n\n            if position == \"d\":\n                merge_list = [\n                    \"season\",\n                    \"game_id\",\n                    \"game_date\",\n                    \"session\",\n                    \"team\",\n                    \"opp_team\",\n                    \"strength_state\",\n                    \"defense\",\n                    \"defense_eh_id\",\n                    \"defense_api_id\",\n                ]\n\n        if level == \"period\":\n            if position == \"f\":\n                merge_list = [\n                    \"season\",\n                    \"game_id\",\n                    \"game_date\",\n                    \"session\",\n                    \"team\",\n                    \"opp_team\",\n                    \"strength_state\",\n                    \"forwards\",\n                    \"forwards_eh_id\",\n                    \"forwards_api_id\",\n                    \"period\",\n                ]\n\n            if position == \"d\":\n                merge_list = [\n                    \"season\",\n                    \"game_id\",\n                    \"game_date\",\n                    \"session\",\n                    \"team\",\n                    \"opp_team\",\n                    \"strength_state\",\n                    \"defense\",\n                    \"defense_eh_id\",\n                    \"defense_api_id\",\n                    \"period\",\n                ]\n\n        if score is True:\n            merge_list.append(\"score_state\")\n\n        if teammates is True:\n            if position == \"f\":\n                merge_list = merge_list + [\n                    \"defense\",\n                    \"defense_eh_id\",\n                    \"defense_api_id\",\n                    \"own_goalie\",\n                    \"own_goalie_eh_id\",\n                    \"own_goalie_api_id\",\n                ]\n\n            if position == \"d\":\n                merge_list = merge_list + [\n                    \"forwards\",\n                    \"forwards_eh_id\",\n                    \"forwards_api_id\",\n                    \"own_goalie\",\n                    \"own_goalie_eh_id\",\n                    \"own_goalie_api_id\",\n                ]\n\n        if opposition is True:\n            merge_list = merge_list + [\n                \"opp_forwards\",\n                \"opp_forwards_eh_id\",\n                \"opp_forwards_api_id\",\n                \"opp_defense\",\n                \"opp_defense_eh_id\",\n                \"opp_defense_api_id\",\n                \"opp_goalie\",\n                \"opp_goalie_eh_id\",\n                \"opp_goalie_api_id\",\n            ]\n\n            if \"opp_team\" not in merge_list:\n                merge_list.insert(3, \"opp_team\")\n\n        lines = lines_f.merge(lines_a, how=\"outer\", on=merge_list, suffixes=(\"_x\", \"_y\")).fillna(0)\n\n        lines[\"toi\"] = (lines.toi_x + lines.toi_y) / 60\n\n        lines[\"cf\"] = lines.bsf + lines.teammate_block + lines.ff\n        lines[\"cf_adj\"] = lines.bsf_adj + lines.teammate_block_adj + lines.ff_adj\n\n        lines[\"ca\"] = lines.bsa + lines.fa\n        lines[\"ca_adj\"] = lines.bsa_adj + lines.fa_adj\n\n        lines[\"ozf\"] = lines.ozfw + lines.ozfl\n\n        lines[\"nzf\"] = lines.nzfw + lines.nzfl\n\n        lines[\"dzf\"] = lines.dzfw + lines.dzfl\n\n        cols = [x for x in list(LineSchema.dtypes.keys()) if x in lines.columns]\n\n        lines = lines[cols].loc[lines.toi &gt; 0].reset_index(drop=True)\n\n        lines = prep_p60(lines)\n\n        lines = prep_oi_percent(lines)\n\n        lines = LineSchema.validate(lines)\n\n        self._lines = lines\n\n    def prep_lines(\n        self,\n        position: Literal[\"f\", \"d\"] = \"f\",\n        level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n        score: bool = False,\n        teammates: bool = False,\n        opposition: bool = False,\n        disable_progress_bar: bool | None = None,\n    ) -&gt; None:\n        \"\"\"Prepares DataFrame of line-level stats from play-by-play data.\n\n        Used to prepare, or reset prepared data for later analysis\n\n        Parameters:\n            position (str):\n                Determines what positions to aggregate. One of F or D\n            level (str):\n                Determines the level of aggregation. One of season, session, game, period\n            score (bool):\n                Determines if stats account for score state\n            teammates (bool):\n                Determines if stats account for teammates on ice\n            opposition (bool):\n                Determines if stats account for opponents on ice\n            disable_progress_bar (bool):\n                Determines whether to display the progress bar\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 2023 for 2023-24 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020001\n            game_date (int):\n                Date game was played, e.g., 2023-10-10\n            team (str):\n                Player's team, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., TBL\n            strength_state (str):\n                Strength state, e.g., 5v5\n            period (int):\n                Period, e.g., 3\n            score_state (str):\n                Score state, e.g., 2v1\n            forwards (str):\n                Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY\n            forwards_eh_id (str):\n                Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n            forwards_api_id (str):\n                Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158\n            defense (str):\n                Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER\n            defense_eh_id (str):\n                Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER\n            defense_api_id (str):\n                Defense teammates' NHL API IDs, e.g., 8474151, 8478851\n            own_goalie (str):\n                Own goalie, e.g., JUUSE SAROS\n            own_goalie_eh_id (str):\n                Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS\n            own_goalie_api_id (str):\n                Own goalie's NHL API ID, e.g., 8477424\n            opp_forwards (str):\n                Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS\n            opp_forwards_eh_id (str):\n                Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS\n            opp_forwards_api_id (str):\n                Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564\n            opp_defense (str):\n                Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN\n            opp_defense_eh_id (str):\n                Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN\n            opp_defense_api_id (str):\n                Opposing defense's NHL API IDs, e.g., 8480246, 8475167\n            opp_goalie (str):\n                Opposing goalie, e.g., JONAS JOHANSSON\n            opp_goalie_eh_id (str):\n                Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON\n            opp_goalie_api_id (str):\n                Opposing goalie's NHL API ID, e.g., 8477992\n            toi (float):\n                Time on-ice, in minutes, e.g, 0.483333\n            gf (int):\n                Goals for (on-ice), e.g, 0\n            ga (int):\n                Goals against (on-ice), e.g, 0\n            hdgf (int):\n                High-danger goals for (on-ice), e.g, 0\n            hdga (int):\n                High-danger goals against (on-ice), e.g, 0\n            xgf (float):\n                xG for (on-ice), e.g., 1.258332\n            xga (float):\n                xG against (on-ice), e.g, 0.000000\n            sf (int):\n                Shots for (on-ice), e.g, 4\n            sa (int):\n                Shots against (on-ice), e.g, 0\n            hdsf (int):\n                High-danger shots for (on-ice), e.g, 3\n            hdsa (int):\n                High-danger shots against (on-ice), e.g, 0\n            ff (int):\n                Fenwick for (on-ice), e.g, 4\n            fa (int):\n                Fenwick against (on-ice), e.g, 0\n            hdff (int):\n                High-danger fenwick for (on-ice), e.g, 3\n            hdfa (int):\n                High-danger fenwick against (on-ice), e.g, 0\n            cf (int):\n                Corsi for (on-ice), e.g, 4\n            ca (int):\n                Corsi against (on-ice), e.g, 0\n            bsf (int):\n                Shots taken that were blocked (on-ice), e.g, 0\n            bsa (int):\n                Shots blocked (on-ice), e.g, 0\n            msf (int):\n                Missed shots taken (on-ice), e.g, 0\n            msa (int):\n                Missed shots against (on-ice), e.g, 0\n            hdmsf (int):\n                High-danger missed shots taken (on-ice), e.g, 0\n            hdmsa (int):\n                High-danger missed shots against (on-ice), e.g, 0\n            teammate_block (int):\n                Shots blocked by teammates (on-ice), e.g, 0\n            hf (int):\n                Hits for (on-ice), e.g, 0\n            ht (int):\n                Hits taken (on-ice), e.g, 0\n            give (int):\n                Giveaways (on-ice), e.g, 0\n            take (int):\n                Takeaways (on-ice), e.g, 0\n            ozf (int):\n                Offensive zone faceoffs (on-ice), e.g, 0\n            nzf (int):\n                Neutral zone faceoffs (on-ice), e.g, 1\n            dzf (int):\n                Defensive zone faceoffs (on-ice), e.g, 0\n            fow (int):\n                Faceoffs won (on-ice), e.g, 1\n            fol (int):\n                Faceoffs lost (on-ice), e.g, 0\n            ozfw (int):\n                Offensive zone faceoffs won (on-ice), e.g, 0\n            ozfl (int):\n                Offensive zone faceoffs lost (on-ice), e.g, 0\n            nzfw (int):\n                Neutral zone faceoffs won (on-ice), e.g, 1\n            nzfl (int):\n                Neutral zone faceoffs lost (on-ice), e.g, 0\n            dzfw (int):\n                Defensive zone faceoffs won (on-ice), e.g, 0\n            dzfl (int):\n                Defensive zone faceoffs lost (on-ice), e.g, 0\n            pent0 (int):\n                Penalty shots allowed (on-ice), e.g, 0\n            pent2 (int):\n                Minor penalties taken (on-ice), e.g, 0\n            pent4 (int):\n                Double minor penalties taken (on-ice), e.g, 0\n            pent5 (int):\n                Major penalties taken (on-ice), e.g, 0\n            pent10 (int):\n                Game misconduct penalties taken (on-ice), e.g, 0\n            pend0 (int):\n                Penalty shots drawn (on-ice), e.g, 0\n            pend2 (int):\n                Minor penalties drawn (on-ice), e.g, 0\n            pend4 (int):\n                Double minor penalties drawn (on-ice), e.g, 0\n            pend5 (int):\n                Major penalties drawn (on-ice), e.g, 0\n            pend10 (int):\n                Game misconduct penalties drawn (on-ice), e.g, 0\n            gf_p60 (float):\n                Goals for (on-ice) per 60 minutes\n            ga_p60 (float):\n                Goals against (on-ice) per 60 minutes\n            hdgf_p60 (float):\n                High-danger goals for (on-ice) per 60 minutes\n            hdga_p60 (float):\n                High-danger goals against (on-ice) per 60 minutes\n            xgf_p60 (float):\n                xG for (on-ice) per 60 minutes\n            xga_p60 (float):\n                xG against (on-ice) per 60 minutes\n            sf_p60 (float):\n                Shots for (on-ice) per 60 minutes\n            sa_p60 (float):\n                Shots against (on-ice) per 60 minutes\n            hdsf_p60 (float):\n                High-danger shots for (on-ice) per 60 minutes\n            hdsa_p60 (float):\n                High danger shots against (on-ice) per 60 minutes\n            ff_p60 (float):\n                Fenwick for (on-ice) per 60 minutes\n            fa_p60 (float):\n                Fenwick against (on-ice) per 60 minutes\n            hdff_p60 (float):\n                High-danger fenwick for (on-ice) per 60 minutes\n            hdfa_p60 (float):\n                High-danger fenwick against (on-ice) per 60 minutes\n            cf_p60 (float):\n                Corsi for (on-ice) per 60 minutes\n            ca_p60 (float):\n                Corsi against (on-ice) per 60 minutes\n            bsf_p60 (float):\n                Blocked shots for (on-ice) per 60 minutes\n            bsa_p60 (float):\n                Blocked shots against (on-ice) per 60 minutes\n            msf_p60 (float):\n                Missed shots for (on-ice) per 60 minutes\n            msa_p60 (float):\n                Missed shots against (on-ice) per 60 minutes\n            hdmsf_p60 (float):\n                High-danger missed shots for (on-ice) per 60 minutes\n            hdmsa_p60 (float):\n                High-danger missed shots against (on-ice) per 60 minutes\n            teammate_block_p60 (float):\n                Shots blocked by teammates (on-ice) per 60 minutes\n            hf_p60 (float):\n                Hits  for (on-ice) per 60 minutes\n            ht_p60 (float):\n                Hits taken (on-ice) per 60 minutes\n            give_p60 (float):\n                Giveaways (on-ice) per 60 minutes\n            take_p60 (float):\n                Takeaways (on-ice) per 60 minutes\n            pent0_p60 (float):\n                Penalty shots taken (on-ice) per 60 minutes\n            pent2_p60 (float):\n                Minor penalties taken (on-ice) per 60 minutes\n            pent4_p60 (float):\n                Double minor penalties taken (on-ice) per 60 minutes\n            pent5_p60 (float):\n                Major penalties taken (on-ice) per 60 minutes\n            pent10_p60 (float):\n                Game misconduct pentalties taken (on-ice) per 60 minutes\n            pend0_p60 (float):\n                Penalty shots drawn (on-ice) per 60 minutes\n            pend2_p60 (float):\n                Minor penalties drawn (on-ice) per 60 minutes\n            pend4_p60 (float):\n                Double minor penalties drawn (on-ice) per 60 minutes\n            pend5_p60 (float):\n                Major penalties drawn (on-ice) per 60 minutes\n            pend10_p60 (float):\n                Game misconduct penalties drawn (on-ice) per 60 minutes\n            gf_percent (float):\n                On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)\n            hdgf_percent (float):\n                On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF /\n                (HDGF + HDGA)\n            xgf_percent (float):\n                On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)\n            sf_percent (float):\n                On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)\n            hdsf_percent (float):\n                On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF /\n                (HDSF + HDSA)\n            ff_percent (float):\n                On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)\n            hdff_percent (float):\n                On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF /\n                (HDFF + HDFA)\n            cf_percent (float):\n                On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)\n            bsf_percent (float):\n                On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)\n            msf_percent (float):\n                On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)\n            hdmsf_percent (float):\n                On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e.,\n                HDMSF / (HDMSF + HDMSA)\n            hf_percent (float):\n                On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)\n            take_percent (float):\n                On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2023020001\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Prepares on-ice, line-level dataframe with default options\n            &gt;&gt;&gt; scraper.prep_lines()\n\n            Line-level statistics, aggregated to season level\n            &gt;&gt;&gt; scraper.prep_lines(level=\"season\")\n\n            Line-level statistics, aggregated to game level, accounting for teammates\n            &gt;&gt;&gt; scraper.prep_lines(level=\"game\", teammates=True)\n\n        \"\"\"\n        levels = self._lines_levels\n\n        if (\n            levels[\"position\"] != position\n            or levels[\"level\"] != level\n            or levels[\"score\"] != score\n            or levels[\"teammates\"] != teammates\n            or levels[\"opposition\"] != opposition\n        ):\n            self._lines = pd.DataFrame()\n\n            new_values = {\n                \"position\": position,\n                \"level\": level,\n                \"score\": score,\n                \"teammates\": teammates,\n                \"opposition\": opposition,\n            }\n\n            self._lines_levels.update(new_values)\n\n        if self._lines.empty:\n            if not disable_progress_bar:\n                disable_progress_bar = self.disable_progress_bar\n\n            with ChickenProgressIndeterminate(disable=disable_progress_bar) as progress:\n                pbar_message = \"Prepping lines data...\"\n                progress_task = progress.add_task(pbar_message, total=None, refresh=True)\n\n                progress.start_task(progress_task)\n                progress.update(progress_task, total=1, description=pbar_message, refresh=True)\n\n                self._prep_lines(\n                    level=level, position=position, score=score, teammates=teammates, opposition=opposition\n                )\n\n                progress.update(\n                    progress_task,\n                    description=\"Finished prepping lines data\",\n                    completed=True,\n                    advance=True,\n                    refresh=True,\n                )\n\n    @property\n    def lines(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of line-level stats aggregated from play-by-play data.\n\n        Determine level of aggregation using `prep_lines` method.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 2023 for 2023-24 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020001\n            game_date (int):\n                Date game was played, e.g., 2023-10-10\n            team (str):\n                Player's team, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., TBL\n            strength_state (str):\n                Strength state, e.g., 5v5\n            period (int):\n                Period, e.g., 3\n            score_state (str):\n                Score state, e.g., 2v1\n            forwards (str):\n                Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY\n            forwards_eh_id (str):\n                Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n            forwards_api_id (str):\n                Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158\n            defense (str):\n                Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER\n            defense_eh_id (str):\n                Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER\n            defense_api_id (str):\n                Defense teammates' NHL API IDs, e.g., 8474151, 8478851\n            own_goalie (str):\n                Own goalie, e.g., JUUSE SAROS\n            own_goalie_eh_id (str):\n                Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS\n            own_goalie_api_id (str):\n                Own goalie's NHL API ID, e.g., 8477424\n            opp_forwards (str):\n                Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS\n            opp_forwards_eh_id (str):\n                Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS\n            opp_forwards_api_id (str):\n                Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564\n            opp_defense (str):\n                Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN\n            opp_defense_eh_id (str):\n                Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN\n            opp_defense_api_id (str):\n                Opposing defense's NHL API IDs, e.g., 8480246, 8475167\n            opp_goalie (str):\n                Opposing goalie, e.g., JONAS JOHANSSON\n            opp_goalie_eh_id (str):\n                Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON\n            opp_goalie_api_id (str):\n                Opposing goalie's NHL API ID, e.g., 8477992\n            toi (float):\n                Time on-ice, in minutes, e.g, 0.483333\n            gf (int):\n                Goals for (on-ice), e.g, 0\n            ga (int):\n                Goals against (on-ice), e.g, 0\n            hdgf (int):\n                High-danger goals for (on-ice), e.g, 0\n            hdga (int):\n                High-danger goals against (on-ice), e.g, 0\n            xgf (float):\n                xG for (on-ice), e.g., 1.258332\n            xga (float):\n                xG against (on-ice), e.g, 0.000000\n            sf (int):\n                Shots for (on-ice), e.g, 4\n            sa (int):\n                Shots against (on-ice), e.g, 0\n            hdsf (int):\n                High-danger shots for (on-ice), e.g, 3\n            hdsa (int):\n                High-danger shots against (on-ice), e.g, 0\n            ff (int):\n                Fenwick for (on-ice), e.g, 4\n            fa (int):\n                Fenwick against (on-ice), e.g, 0\n            hdff (int):\n                High-danger fenwick for (on-ice), e.g, 3\n            hdfa (int):\n                High-danger fenwick against (on-ice), e.g, 0\n            cf (int):\n                Corsi for (on-ice), e.g, 4\n            ca (int):\n                Corsi against (on-ice), e.g, 0\n            bsf (int):\n                Shots taken that were blocked (on-ice), e.g, 0\n            bsa (int):\n                Shots blocked (on-ice), e.g, 0\n            msf (int):\n                Missed shots taken (on-ice), e.g, 0\n            msa (int):\n                Missed shots against (on-ice), e.g, 0\n            hdmsf (int):\n                High-danger missed shots taken (on-ice), e.g, 0\n            hdmsa (int):\n                High-danger missed shots against (on-ice), e.g, 0\n            teammate_block (int):\n                Shots blocked by teammates (on-ice), e.g, 0\n            hf (int):\n                Hits for (on-ice), e.g, 0\n            ht (int):\n                Hits taken (on-ice), e.g, 0\n            give (int):\n                Giveaways (on-ice), e.g, 0\n            take (int):\n                Takeaways (on-ice), e.g, 0\n            ozf (int):\n                Offensive zone faceoffs (on-ice), e.g, 0\n            nzf (int):\n                Neutral zone faceoffs (on-ice), e.g, 1\n            dzf (int):\n                Defensive zone faceoffs (on-ice), e.g, 0\n            fow (int):\n                Faceoffs won (on-ice), e.g, 1\n            fol (int):\n                Faceoffs lost (on-ice), e.g, 0\n            ozfw (int):\n                Offensive zone faceoffs won (on-ice), e.g, 0\n            ozfl (int):\n                Offensive zone faceoffs lost (on-ice), e.g, 0\n            nzfw (int):\n                Neutral zone faceoffs won (on-ice), e.g, 1\n            nzfl (int):\n                Neutral zone faceoffs lost (on-ice), e.g, 0\n            dzfw (int):\n                Defensive zone faceoffs won (on-ice), e.g, 0\n            dzfl (int):\n                Defensive zone faceoffs lost (on-ice), e.g, 0\n            pent0 (int):\n                Penalty shots allowed (on-ice), e.g, 0\n            pent2 (int):\n                Minor penalties taken (on-ice), e.g, 0\n            pent4 (int):\n                Double minor penalties taken (on-ice), e.g, 0\n            pent5 (int):\n                Major penalties taken (on-ice), e.g, 0\n            pent10 (int):\n                Game misconduct penalties taken (on-ice), e.g, 0\n            pend0 (int):\n                Penalty shots drawn (on-ice), e.g, 0\n            pend2 (int):\n                Minor penalties drawn (on-ice), e.g, 0\n            pend4 (int):\n                Double minor penalties drawn (on-ice), e.g, 0\n            pend5 (int):\n                Major penalties drawn (on-ice), e.g, 0\n            pend10 (int):\n                Game misconduct penalties drawn (on-ice), e.g, 0\n            gf_p60 (float):\n                Goals for (on-ice) per 60 minutes\n            ga_p60 (float):\n                Goals against (on-ice) per 60 minutes\n            hdgf_p60 (float):\n                High-danger goals for (on-ice) per 60 minutes\n            hdga_p60 (float):\n                High-danger goals against (on-ice) per 60 minutes\n            xgf_p60 (float):\n                xG for (on-ice) per 60 minutes\n            xga_p60 (float):\n                xG against (on-ice) per 60 minutes\n            sf_p60 (float):\n                Shots for (on-ice) per 60 minutes\n            sa_p60 (float):\n                Shots against (on-ice) per 60 minutes\n            hdsf_p60 (float):\n                High-danger shots for (on-ice) per 60 minutes\n            hdsa_p60 (float):\n                High danger shots against (on-ice) per 60 minutes\n            ff_p60 (float):\n                Fenwick for (on-ice) per 60 minutes\n            fa_p60 (float):\n                Fenwick against (on-ice) per 60 minutes\n            hdff_p60 (float):\n                High-danger fenwick for (on-ice) per 60 minutes\n            hdfa_p60 (float):\n                High-danger fenwick against (on-ice) per 60 minutes\n            cf_p60 (float):\n                Corsi for (on-ice) per 60 minutes\n            ca_p60 (float):\n                Corsi against (on-ice) per 60 minutes\n            bsf_p60 (float):\n                Blocked shots for (on-ice) per 60 minutes\n            bsa_p60 (float):\n                Blocked shots against (on-ice) per 60 minutes\n            msf_p60 (float):\n                Missed shots for (on-ice) per 60 minutes\n            msa_p60 (float):\n                Missed shots against (on-ice) per 60 minutes\n            hdmsf_p60 (float):\n                High-danger missed shots for (on-ice) per 60 minutes\n            hdmsa_p60 (float):\n                High-danger missed shots against (on-ice) per 60 minutes\n            teammate_block_p60 (float):\n                Shots blocked by teammates (on-ice) per 60 minutes\n            hf_p60 (float):\n                Hits  for (on-ice) per 60 minutes\n            ht_p60 (float):\n                Hits taken (on-ice) per 60 minutes\n            give_p60 (float):\n                Giveaways (on-ice) per 60 minutes\n            take_p60 (float):\n                Takeaways (on-ice) per 60 minutes\n            pent0_p60 (float):\n                Penalty shots taken (on-ice) per 60 minutes\n            pent2_p60 (float):\n                Minor penalties taken (on-ice) per 60 minutes\n            pent4_p60 (float):\n                Double minor penalties taken (on-ice) per 60 minutes\n            pent5_p60 (float):\n                Major penalties taken (on-ice) per 60 minutes\n            pent10_p60 (float):\n                Game misconduct pentalties taken (on-ice) per 60 minutes\n            pend0_p60 (float):\n                Penalty shots drawn (on-ice) per 60 minutes\n            pend2_p60 (float):\n                Minor penalties drawn (on-ice) per 60 minutes\n            pend4_p60 (float):\n                Double minor penalties drawn (on-ice) per 60 minutes\n            pend5_p60 (float):\n                Major penalties drawn (on-ice) per 60 minutes\n            pend10_p60 (float):\n                Game misconduct penalties drawn (on-ice) per 60 minutes\n            gf_percent (float):\n                On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)\n            hdgf_percent (float):\n                On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF /\n                (HDGF + HDGA)\n            xgf_percent (float):\n                On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)\n            sf_percent (float):\n                On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)\n            hdsf_percent (float):\n                On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF /\n                (HDSF + HDSA)\n            ff_percent (float):\n                On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)\n            hdff_percent (float):\n                On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF /\n                (HDFF + HDFA)\n            cf_percent (float):\n                On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)\n            bsf_percent (float):\n                On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)\n            msf_percent (float):\n                On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)\n            hdmsf_percent (float):\n                On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e.,\n                HDMSF / (HDMSF + HDMSA)\n            hf_percent (float):\n                On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)\n            take_percent (float):\n                On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2023020001\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Returns line stats with default options\n            &gt;&gt;&gt; scraper.lines\n\n            Resets line stats to period level, accounting for teammates on-ice\n            &gt;&gt;&gt; scraper.prep_lines(level=\"period\", teammates=True)\n            &gt;&gt;&gt; scraper.lines\n\n            Resets line stats to season level, accounting for teammates on-ice and score state\n            &gt;&gt;&gt; scraper.prep_lines(level=\"season\", teammates=True, score=True)\n            &gt;&gt;&gt; scraper.lines\n\n        \"\"\"\n        if self._lines.empty:\n            self.prep_lines()\n\n        return self._lines.copy()\n\n    def _prep_team_stats(\n        self,\n        level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n        strengths: bool = True,\n        opposition: bool = False,\n        score: bool = False,\n    ) -&gt; None:\n        \"\"\"Prepares DataFrame of team stats from play-by-play data.\n\n        Nested within `prep_team_stats` method.\n\n        Parameters:\n            level (str):\n                Determines the level of aggregation. One of season, session, game, period\n            score (bool):\n                Determines if stats account  for score state\n            strengths (bool):\n                Determines if stats account  for strength state\n            opposition (bool):\n                Determines if stats account  for opponents on ice\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 2023 for 2023-24 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020001\n            team (str):\n                Player's team, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., TBL\n            strength_state (str):\n                Strength state, e.g., 5v5\n            period (int):\n                Period, e.g., 3\n            score_state (str):\n                Score state, e.g., 2v1\n            toi (float):\n                Time on-ice, in minutes, e.g, 1.100000\n            gf (int):\n                Goals for (on-ice), e.g, 0\n            hdgf (int):\n                High-danger goals for (on-ice), e.g, 0\n            ga (int):\n                Goals against (on-ice), e.g, 0\n            hdga (int):\n                High-danger goals against (on-ice), e.g, 0\n            xgf (float):\n                xG for (on-ice), e.g., 1.271583\n            xga (float):\n                xG against (on-ice), e.g, 0.000000\n            sf (int):\n                Shots for (on-ice), e.g, 5\n            sa (int):\n                Shots against (on-ice), e.g, 0\n            hdsf (int):\n                High-danger shots for (on-ice), e.g, 3\n            hdsa (int):\n                High-danger shots against (on-ice), e.g, 0\n            ff (int):\n                Fenwick for (on-ice), e.g, 5\n            fa (int):\n                Fenwick against (on-ice), e.g, 0\n            hdff (int):\n                High-danger fenwick for (on-ice), e.g, 3\n            hdfa (int):\n                High-danger fenwick against (on-ice), e.g, 0\n            cf (int):\n                Corsi for (on-ice), e.g, 5\n            ca (int):\n                Corsi against (on-ice), e.g, 0\n            bsf (int):\n                Shots taken that were blocked (on-ice), e.g, 0\n            bsa (int):\n                Shots blocked (on-ice), e.g, 0\n            msf (int):\n                Missed shots taken (on-ice), e.g, 0\n            msa (int):\n                Missed shots against (on-ice), e.g, 0\n            hdmsf (int):\n                High-danger missed shots taken (on-ice), e.g, 0\n            hdmsa (int):\n                High-danger missed shots against (on-ice), e.g, 0\n            teammate_block (int):\n                Shots blocked by teammates (on-ice), e.g, 0\n            hf (int):\n                Hits for (on-ice), e.g, 0\n            ht (int):\n                Hits taken (on-ice), e.g, 0\n            give (int):\n                Giveaways (on-ice), e.g, 0\n            take (int):\n                Takeaways (on-ice), e.g, 0\n            ozf (int):\n                Offensive zone faceoffs (on-ice), e.g, 0\n            nzf (int):\n                Neutral zone faceoffs (on-ice), e.g, 4\n            dzf (int):\n                Defensive zone faceoffs (on-ice), e.g, 0\n            fow (int):\n                Faceoffs won (on-ice), e.g, 2\n            fol (int):\n                Faceoffs lost (on-ice), e.g, 0\n            ozfw (int):\n                Offensive zone faceoffs won (on-ice), e.g, 0\n            ozfl (int):\n                Offensive zone faceoffs lost (on-ice), e.g, 0\n            nzfw (int):\n                Neutral zone faceoffs won (on-ice), e.g, 2\n            nzfl (int):\n                Neutral zone faceoffs lost (on-ice), e.g, 1\n            dzfw (int):\n                Defensive zone faceoffs won (on-ice), e.g, 0\n            dzfl (int):\n                Defensive zone faceoffs lost (on-ice), e.g, 1\n            pent0 (int):\n                Penalty shots allowed (on-ice), e.g, 0\n            pent2 (int):\n                Minor penalties taken (on-ice), e.g, 1\n            pent4 (int):\n                Double minor penalties taken (on-ice), e.g, 0\n            pent5 (int):\n                Major penalties taken (on-ice), e.g, 0\n            pent10 (int):\n                Game misconduct penalties taken (on-ice), e.g, 0\n            pend0 (int):\n                Penalty shots drawn (on-ice), e.g, 0\n            pend2 (int):\n                Minor penalties drawn (on-ice), e.g, 0\n            pend4 (int):\n                Double minor penalties drawn (on-ice), e.g, 0\n            pend5 (int):\n                Major penalties drawn (on-ice), e.g, 0\n            pend10 (int):\n                Game misconduct penalties drawn (on-ice), e.g, 0\n            gf_p60 (float):\n                Goals for (on-ice) per 60 minutes\n            ga_p60 (float):\n                Goals against (on-ice) per 60 minutes\n            hdgf_p60 (float):\n                High-danger goals for (on-ice) per 60 minutes\n            hdga_p60 (float):\n                High-danger goals against (on-ice) per 60 minutes\n            xgf_p60 (float):\n                xG for (on-ice) per 60 minutes\n            xga_p60 (float):\n                xG against (on-ice) per 60 minutes\n            sf_p60 (float):\n                Shots for (on-ice) per 60 minutes\n            sa_p60 (float):\n                Shots against (on-ice) per 60 minutes\n            hdsf_p60 (float):\n                High-danger shots for (on-ice) per 60 minutes\n            hdsa_p60 (float):\n                High danger shots against (on-ice) per 60 minutes\n            ff_p60 (float):\n                Fenwick for (on-ice) per 60 minutes\n            fa_p60 (float):\n                Fenwick against (on-ice) per 60 minutes\n            hdff_p60 (float):\n                High-danger fenwick for (on-ice) per 60 minutes\n            hdfa_p60 (float):\n                High-danger fenwick against (on-ice) per 60 minutes\n            cf_p60 (float):\n                Corsi for (on-ice) per 60 minutes\n            ca_p60 (float):\n                Corsi against (on-ice) per 60 minutes\n            bsf_p60 (float):\n                Blocked shots for (on-ice) per 60 minutes\n            bsa_p60 (float):\n                Blocked shots against (on-ice) per 60 minutes\n            msf_p60 (float):\n                Missed shots for (on-ice) per 60 minutes\n            msa_p60 (float):\n                Missed shots against (on-ice) per 60 minutes\n            hdmsf_p60 (float):\n                High-danger missed shots for (on-ice) per 60 minutes\n            hdmsa_p60 (float):\n                High-danger missed shots against (on-ice) per 60 minutes\n            teammate_block_p60 (float):\n                Shots blocked by teammates (on-ice) per 60 minutes\n            hf_p60 (float):\n                Hits  for (on-ice) per 60 minutes\n            ht_p60 (float):\n                Hits taken (on-ice) per 60 minutes\n            give_p60 (float):\n                Giveaways (on-ice) per 60 minutes\n            take_p60 (float):\n                Takeaways (on-ice) per 60 minutes\n            pent0_p60 (float):\n                Penalty shots taken (on-ice) per 60 minutes\n            pent2_p60 (float):\n                Minor penalties taken (on-ice) per 60 minutes\n            pent4_p60 (float):\n                Double minor penalties taken (on-ice) per 60 minutes\n            pent5_p60 (float):\n                Major penalties taken (on-ice) per 60 minutes\n            pent10_p60 (float):\n                Game misconduct pentalties taken (on-ice) per 60 minutes\n            pend0_p60 (float):\n                Penalty shots drawn (on-ice) per 60 minutes\n            pend2_p60 (float):\n                Minor penalties drawn (on-ice) per 60 minutes\n            pend4_p60 (float):\n                Double minor penalties drawn (on-ice) per 60 minutes\n            pend5_p60 (float):\n                Major penalties drawn (on-ice) per 60 minutes\n            pend10_p60 (float):\n                Game misconduct penalties drawn (on-ice) per 60 minutes\n            gf_percent (float):\n                On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)\n            hdgf_percent (float):\n                On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF /\n                (HDGF + HDGA)\n            xgf_percent (float):\n                On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)\n            sf_percent (float):\n                On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)\n            hdsf_percent (float):\n                On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF /\n                (HDSF + HDSA)\n            ff_percent (float):\n                On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)\n            hdff_percent (float):\n                On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF /\n                (HDFF + HDFA)\n            cf_percent (float):\n                On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)\n            bsf_percent (float):\n                On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)\n            msf_percent (float):\n                On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)\n            hdmsf_percent (float):\n                On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e.,\n                HDMSF / (HDMSF + HDMSA)\n            hf_percent (float):\n                On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)\n            take_percent (float):\n                On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2023020001\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Team dataframe with default options\n            &gt;&gt;&gt; scraper._prep_team_stats()\n\n            Team statistics, aggregated to season level\n            &gt;&gt;&gt; scraper._prep_team_stats(level=\"season\")\n\n            Team statistics, aggregated to game level, accounting for teammates\n            &gt;&gt;&gt; scraper._prep_team_stats(level=\"game\", teammates=True)\n\n        \"\"\"\n        merge_cols = [\"id\", \"event_idx\"]\n\n        data = self.play_by_play.merge(self.play_by_play_ext, how=\"left\", on=merge_cols)\n\n        # Getting the \"for\" stats\n\n        group_list = [\"season\", \"session\", \"event_team\"]\n\n        if strengths is True:\n            group_list.append(\"strength_state\")\n\n        if level == \"game\" or level == \"period\" or opposition:\n            group_list.insert(3, \"opp_team\")\n\n            group_list[2:2] = [\"game_id\", \"game_date\"]\n\n        if level == \"period\":\n            group_list.append(\"period\")\n\n        if score is True:\n            group_list.append(\"score_state\")\n\n        agg_stats = [\n            \"pred_goal\",\n            \"pred_goal_adj\",\n            \"shot\",\n            \"shot_adj\",\n            \"miss\",\n            \"miss_adj\",\n            \"block\",\n            \"block_adj\",\n            \"teammate_block\",\n            \"teammate_block_adj\",\n            \"fenwick\",\n            \"fenwick_adj\",\n            \"goal\",\n            \"goal_adj\",\n            \"give\",\n            \"take\",\n            \"hd_goal\",\n            \"hd_shot\",\n            \"hd_fenwick\",\n            \"hd_miss\",\n            \"hit\",\n            \"pen0\",\n            \"pen2\",\n            \"pen4\",\n            \"pen5\",\n            \"pen10\",\n            \"fac\",\n            \"ozf\",\n            \"nzf\",\n            \"dzf\",\n            \"event_length\",\n        ]\n\n        agg_dict = {x: \"sum\" for x in agg_stats if x in data.columns}\n\n        new_cols = [\n            \"xgf\",\n            \"xgf_adj\",\n            \"sf\",\n            \"sf_adj\",\n            \"msf\",\n            \"msf_adj\",\n            \"bsa\",\n            \"bsa_adj\",\n            \"teammate_block\",\n            \"teammate_block_adj\",\n            \"ff\",\n            \"ff_adj\",\n            \"gf\",\n            \"gf_adj\",\n            \"give\",\n            \"take\",\n            \"hdgf\",\n            \"hdsf\",\n            \"hdff\",\n            \"hdmsf\",\n            \"hf\",\n            \"pent0\",\n            \"pent2\",\n            \"pent4\",\n            \"pent5\",\n            \"pent10\",\n            \"fow\",\n            \"ozfw\",\n            \"nzfw\",\n            \"dzfw\",\n            \"toi\",\n        ]\n\n        new_cols = dict(zip(agg_stats, new_cols, strict=False))\n\n        new_cols.update({\"event_team\": \"team\"})\n\n        stats_for = data.groupby(group_list, as_index=False).agg(agg_dict).rename(columns=new_cols)\n\n        # Getting the \"against\" stats\n\n        group_list = [\"season\", \"session\", \"opp_team\"]\n\n        if strengths is True:\n            group_list.append(\"opp_strength_state\")\n\n        if level == \"game\" or level == \"period\":\n            group_list.insert(3, \"event_team\")\n\n            group_list[2:2] = [\"game_id\", \"game_date\"]\n\n        if level == \"period\":\n            group_list.append(\"period\")\n\n        if score is True:\n            group_list.append(\"opp_score_state\")\n\n        agg_stats = [\n            \"pred_goal\",\n            \"pred_goal_adj\",\n            \"shot\",\n            \"shot_adj\",\n            \"miss\",\n            \"miss_adj\",\n            \"block\",\n            \"block_adj\",\n            \"fenwick\",\n            \"fenwick_adj\",\n            \"goal\",\n            \"goal_adj\",\n            \"hd_goal\",\n            \"hd_shot\",\n            \"hd_fenwick\",\n            \"hd_miss\",\n            \"hit\",\n            \"pen0\",\n            \"pen2\",\n            \"pen4\",\n            \"pen5\",\n            \"pen10\",\n            \"fac\",\n            \"ozf\",\n            \"nzf\",\n            \"dzf\",\n            \"event_length\",\n        ]\n\n        agg_dict = {x: \"sum\" for x in agg_stats if x in data.columns}\n\n        new_cols = [\n            \"xga\",\n            \"xga_adj\",\n            \"sa\",\n            \"sa_adj\",\n            \"msa\",\n            \"msa_adj\",\n            \"bsf\",\n            \"bsf_adj\",\n            \"fa\",\n            \"fa_adj\",\n            \"ga\",\n            \"ga_adj\",\n            \"hdga\",\n            \"hdsa\",\n            \"hdfa\",\n            \"hdmsa\",\n            \"ht\",\n            \"pend0\",\n            \"pend2\",\n            \"pend4\",\n            \"pend5\",\n            \"pend10\",\n            \"fol\",\n            \"ozfl\",\n            \"nzfl\",\n            \"dzfl\",\n            \"toi\",\n        ]\n\n        new_cols = dict(zip(agg_stats, new_cols, strict=False))\n\n        new_cols.update(\n            {\n                \"opp_team\": \"team\",\n                \"opp_score_state\": \"score_state\",\n                \"opp_strength_state\": \"strength_state\",\n                \"event_team\": \"opp_team\",\n            }\n        )\n\n        stats_against = data.groupby(group_list, as_index=False).agg(agg_dict).rename(columns=new_cols)\n\n        merge_list = [\n            \"season\",\n            \"session\",\n            \"game_id\",\n            \"game_date\",\n            \"team\",\n            \"opp_team\",\n            \"strength_state\",\n            \"score_state\",\n            \"period\",\n        ]\n\n        merge_list = [x for x in merge_list if x in stats_for.columns and x in stats_against.columns]\n\n        team_stats = stats_for.merge(stats_against, on=merge_list, how=\"outer\")\n\n        team_stats[\"toi\"] = (team_stats.toi_x + team_stats.toi_y) / 60\n\n        fos = [\"ozf\", \"nzf\", \"dzf\"]\n\n        for fo in fos:\n            team_stats[fo] = team_stats[f\"{fo}w\"] + team_stats[f\"{fo}w\"]\n\n        team_stats = team_stats.dropna(subset=\"toi\").reset_index(drop=True)\n\n        cols = [x for x in list(TeamStatSchema.dtypes.keys()) if x in team_stats]\n\n        team_stats = team_stats[cols]\n\n        team_stats = prep_p60(team_stats)\n\n        team_stats = prep_oi_percent(team_stats)\n\n        team_stats = TeamStatSchema.validate(team_stats)\n\n        self._team_stats = team_stats\n\n    def prep_team_stats(\n        self,\n        level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n        strengths: bool = True,\n        opposition: bool = False,\n        score: bool = False,\n        disable_progress_bar: bool | None = None,\n    ) -&gt; None:\n        \"\"\"Prepares DataFrame of team stats from play-by-play data.\n\n        Used to prepare, or reset prepared data for later analysis\n\n        Parameters:\n            level (str):\n                Determines the level of aggregation. One of season, session, game, period\n            score (bool):\n                Determines if stats account  for score state\n            strengths (bool):\n                Determines if stats account  for strength state\n            opposition (bool):\n                Determines if stats account  for opponents on ice\n            disable_progress_bar (bool):\n                Determines whether to display the progress bar\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 2023 for 2023-24 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020001\n            team (str):\n                Player's team, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., TBL\n            strength_state (str):\n                Strength state, e.g., 5v5\n            period (int):\n                Period, e.g., 3\n            score_state (str):\n                Score state, e.g., 2v1\n            toi (float):\n                Time on-ice, in minutes, e.g, 1.100000\n            gf (int):\n                Goals for (on-ice), e.g, 0\n            hdgf (int):\n                High-danger goals for (on-ice), e.g, 0\n            ga (int):\n                Goals against (on-ice), e.g, 0\n            hdga (int):\n                High-danger goals against (on-ice), e.g, 0\n            xgf (float):\n                xG for (on-ice), e.g., 1.271583\n            xga (float):\n                xG against (on-ice), e.g, 0.000000\n            sf (int):\n                Shots for (on-ice), e.g, 5\n            sa (int):\n                Shots against (on-ice), e.g, 0\n            hdsf (int):\n                High-danger shots for (on-ice), e.g, 3\n            hdsa (int):\n                High-danger shots against (on-ice), e.g, 0\n            ff (int):\n                Fenwick for (on-ice), e.g, 5\n            fa (int):\n                Fenwick against (on-ice), e.g, 0\n            hdff (int):\n                High-danger fenwick for (on-ice), e.g, 3\n            hdfa (int):\n                High-danger fenwick against (on-ice), e.g, 0\n            cf (int):\n                Corsi for (on-ice), e.g, 5\n            ca (int):\n                Corsi against (on-ice), e.g, 0\n            bsf (int):\n                Shots taken that were blocked (on-ice), e.g, 0\n            bsa (int):\n                Shots blocked (on-ice), e.g, 0\n            msf (int):\n                Missed shots taken (on-ice), e.g, 0\n            msa (int):\n                Missed shots against (on-ice), e.g, 0\n            hdmsf (int):\n                High-danger missed shots taken (on-ice), e.g, 0\n            hdmsa (int):\n                High-danger missed shots against (on-ice), e.g, 0\n            teammate_block (int):\n                Shots blocked by teammates (on-ice), e.g, 0\n            hf (int):\n                Hits for (on-ice), e.g, 0\n            ht (int):\n                Hits taken (on-ice), e.g, 0\n            give (int):\n                Giveaways (on-ice), e.g, 0\n            take (int):\n                Takeaways (on-ice), e.g, 0\n            ozf (int):\n                Offensive zone faceoffs (on-ice), e.g, 0\n            nzf (int):\n                Neutral zone faceoffs (on-ice), e.g, 4\n            dzf (int):\n                Defensive zone faceoffs (on-ice), e.g, 0\n            fow (int):\n                Faceoffs won (on-ice), e.g, 2\n            fol (int):\n                Faceoffs lost (on-ice), e.g, 0\n            ozfw (int):\n                Offensive zone faceoffs won (on-ice), e.g, 0\n            ozfl (int):\n                Offensive zone faceoffs lost (on-ice), e.g, 0\n            nzfw (int):\n                Neutral zone faceoffs won (on-ice), e.g, 2\n            nzfl (int):\n                Neutral zone faceoffs lost (on-ice), e.g, 1\n            dzfw (int):\n                Defensive zone faceoffs won (on-ice), e.g, 0\n            dzfl (int):\n                Defensive zone faceoffs lost (on-ice), e.g, 1\n            pent0 (int):\n                Penalty shots allowed (on-ice), e.g, 0\n            pent2 (int):\n                Minor penalties taken (on-ice), e.g, 1\n            pent4 (int):\n                Double minor penalties taken (on-ice), e.g, 0\n            pent5 (int):\n                Major penalties taken (on-ice), e.g, 0\n            pent10 (int):\n                Game misconduct penalties taken (on-ice), e.g, 0\n            pend0 (int):\n                Penalty shots drawn (on-ice), e.g, 0\n            pend2 (int):\n                Minor penalties drawn (on-ice), e.g, 0\n            pend4 (int):\n                Double minor penalties drawn (on-ice), e.g, 0\n            pend5 (int):\n                Major penalties drawn (on-ice), e.g, 0\n            pend10 (int):\n                Game misconduct penalties drawn (on-ice), e.g, 0\n            gf_p60 (float):\n                Goals for (on-ice) per 60 minutes\n            ga_p60 (float):\n                Goals against (on-ice) per 60 minutes\n            hdgf_p60 (float):\n                High-danger goals for (on-ice) per 60 minutes\n            hdga_p60 (float):\n                High-danger goals against (on-ice) per 60 minutes\n            xgf_p60 (float):\n                xG for (on-ice) per 60 minutes\n            xga_p60 (float):\n                xG against (on-ice) per 60 minutes\n            sf_p60 (float):\n                Shots for (on-ice) per 60 minutes\n            sa_p60 (float):\n                Shots against (on-ice) per 60 minutes\n            hdsf_p60 (float):\n                High-danger shots for (on-ice) per 60 minutes\n            hdsa_p60 (float):\n                High danger shots against (on-ice) per 60 minutes\n            ff_p60 (float):\n                Fenwick for (on-ice) per 60 minutes\n            fa_p60 (float):\n                Fenwick against (on-ice) per 60 minutes\n            hdff_p60 (float):\n                High-danger fenwick for (on-ice) per 60 minutes\n            hdfa_p60 (float):\n                High-danger fenwick against (on-ice) per 60 minutes\n            cf_p60 (float):\n                Corsi for (on-ice) per 60 minutes\n            ca_p60 (float):\n                Corsi against (on-ice) per 60 minutes\n            bsf_p60 (float):\n                Blocked shots for (on-ice) per 60 minutes\n            bsa_p60 (float):\n                Blocked shots against (on-ice) per 60 minutes\n            msf_p60 (float):\n                Missed shots for (on-ice) per 60 minutes\n            msa_p60 (float):\n                Missed shots against (on-ice) per 60 minutes\n            hdmsf_p60 (float):\n                High-danger missed shots for (on-ice) per 60 minutes\n            hdmsa_p60 (float):\n                High-danger missed shots against (on-ice) per 60 minutes\n            teammate_block_p60 (float):\n                Shots blocked by teammates (on-ice) per 60 minutes\n            hf_p60 (float):\n                Hits  for (on-ice) per 60 minutes\n            ht_p60 (float):\n                Hits taken (on-ice) per 60 minutes\n            give_p60 (float):\n                Giveaways (on-ice) per 60 minutes\n            take_p60 (float):\n                Takeaways (on-ice) per 60 minutes\n            pent0_p60 (float):\n                Penalty shots taken (on-ice) per 60 minutes\n            pent2_p60 (float):\n                Minor penalties taken (on-ice) per 60 minutes\n            pent4_p60 (float):\n                Double minor penalties taken (on-ice) per 60 minutes\n            pent5_p60 (float):\n                Major penalties taken (on-ice) per 60 minutes\n            pent10_p60 (float):\n                Game misconduct pentalties taken (on-ice) per 60 minutes\n            pend0_p60 (float):\n                Penalty shots drawn (on-ice) per 60 minutes\n            pend2_p60 (float):\n                Minor penalties drawn (on-ice) per 60 minutes\n            pend4_p60 (float):\n                Double minor penalties drawn (on-ice) per 60 minutes\n            pend5_p60 (float):\n                Major penalties drawn (on-ice) per 60 minutes\n            pend10_p60 (float):\n                Game misconduct penalties drawn (on-ice) per 60 minutes\n            gf_percent (float):\n                On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)\n            hdgf_percent (float):\n                On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF /\n                (HDGF + HDGA)\n            xgf_percent (float):\n                On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)\n            sf_percent (float):\n                On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)\n            hdsf_percent (float):\n                On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF /\n                (HDSF + HDSA)\n            ff_percent (float):\n                On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)\n            hdff_percent (float):\n                On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF /\n                (HDFF + HDFA)\n            cf_percent (float):\n                On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)\n            bsf_percent (float):\n                On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)\n            msf_percent (float):\n                On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)\n            hdmsf_percent (float):\n                On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e.,\n                HDMSF / (HDMSF + HDMSA)\n            hf_percent (float):\n                On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)\n            take_percent (float):\n                On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2023020001\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Team dataframe with default options\n            &gt;&gt;&gt; scraper.prep_team_stats()\n\n            Team statistics, aggregated to season level\n            &gt;&gt;&gt; scraper.prep_team_stats(level=\"season\")\n\n            Team statistics, aggregated to game level, accounting for teammates\n            &gt;&gt;&gt; scraper.prep_team_stats(level=\"game\", teammates=True)\n\n        \"\"\"\n        levels = self._team_stats_levels\n\n        if (\n            levels[\"level\"] != level\n            or levels[\"score\"] != score\n            or levels[\"strengths\"] != strengths\n            or levels[\"opposition\"] != opposition\n        ):\n            self._team_stats = pd.DataFrame()\n\n            new_values = {\"level\": level, \"score\": score, \"strengths\": strengths, \"opposition\": opposition}\n\n            self._team_stats_levels.update(new_values)\n\n        if self._team_stats.empty:\n            if not disable_progress_bar:\n                disable_progress_bar = self.disable_progress_bar\n\n            with ChickenProgressIndeterminate(disable=disable_progress_bar) as progress:\n                pbar_message = \"Prepping team stats data...\"\n                progress_task = progress.add_task(pbar_message, total=None, refresh=True)\n\n                progress.start_task(progress_task)\n                progress.update(progress_task, total=1, description=pbar_message, refresh=True)\n\n                self._prep_team_stats(level=level, score=score, strengths=strengths, opposition=opposition)\n\n                progress.update(\n                    progress_task,\n                    description=\"Finished prepping team stats data\",\n                    completed=True,\n                    advance=True,\n                    refresh=True,\n                )\n\n    @property\n    def team_stats(self):\n        \"\"\"Pandas Dataframe of teams stats aggregated from play-by-play data.\n\n        Determine level of aggregation using `prep_team_stats` method.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 2023 for 2023-24 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020001\n            team (str):\n                Player's team, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., TBL\n            strength_state (str):\n                Strength state, e.g., 5v5\n            period (int):\n                Period, e.g., 3\n            score_state (str):\n                Score state, e.g., 2v1\n            toi (float):\n                Time on-ice, in minutes, e.g, 1.100000\n            gf (int):\n                Goals for (on-ice), e.g, 0\n            hdgf (int):\n                High-danger goals for (on-ice), e.g, 0\n            ga (int):\n                Goals against (on-ice), e.g, 0\n            hdga (int):\n                High-danger goals against (on-ice), e.g, 0\n            xgf (float):\n                xG for (on-ice), e.g., 1.271583\n            xga (float):\n                xG against (on-ice), e.g, 0.000000\n            sf (int):\n                Shots for (on-ice), e.g, 5\n            sa (int):\n                Shots against (on-ice), e.g, 0\n            hdsf (int):\n                High-danger shots for (on-ice), e.g, 3\n            hdsa (int):\n                High-danger shots against (on-ice), e.g, 0\n            ff (int):\n                Fenwick for (on-ice), e.g, 5\n            fa (int):\n                Fenwick against (on-ice), e.g, 0\n            hdff (int):\n                High-danger fenwick for (on-ice), e.g, 3\n            hdfa (int):\n                High-danger fenwick against (on-ice), e.g, 0\n            cf (int):\n                Corsi for (on-ice), e.g, 5\n            ca (int):\n                Corsi against (on-ice), e.g, 0\n            bsf (int):\n                Shots taken that were blocked (on-ice), e.g, 0\n            bsa (int):\n                Shots blocked (on-ice), e.g, 0\n            msf (int):\n                Missed shots taken (on-ice), e.g, 0\n            msa (int):\n                Missed shots against (on-ice), e.g, 0\n            hdmsf (int):\n                High-danger missed shots taken (on-ice), e.g, 0\n            hdmsa (int):\n                High-danger missed shots against (on-ice), e.g, 0\n            teammate_block (int):\n                Shots blocked by teammates (on-ice), e.g, 0\n            hf (int):\n                Hits for (on-ice), e.g, 0\n            ht (int):\n                Hits taken (on-ice), e.g, 0\n            give (int):\n                Giveaways (on-ice), e.g, 0\n            take (int):\n                Takeaways (on-ice), e.g, 0\n            ozf (int):\n                Offensive zone faceoffs (on-ice), e.g, 0\n            nzf (int):\n                Neutral zone faceoffs (on-ice), e.g, 4\n            dzf (int):\n                Defensive zone faceoffs (on-ice), e.g, 0\n            fow (int):\n                Faceoffs won (on-ice), e.g, 2\n            fol (int):\n                Faceoffs lost (on-ice), e.g, 0\n            ozfw (int):\n                Offensive zone faceoffs won (on-ice), e.g, 0\n            ozfl (int):\n                Offensive zone faceoffs lost (on-ice), e.g, 0\n            nzfw (int):\n                Neutral zone faceoffs won (on-ice), e.g, 2\n            nzfl (int):\n                Neutral zone faceoffs lost (on-ice), e.g, 1\n            dzfw (int):\n                Defensive zone faceoffs won (on-ice), e.g, 0\n            dzfl (int):\n                Defensive zone faceoffs lost (on-ice), e.g, 1\n            pent0 (int):\n                Penalty shots allowed (on-ice), e.g, 0\n            pent2 (int):\n                Minor penalties taken (on-ice), e.g, 1\n            pent4 (int):\n                Double minor penalties taken (on-ice), e.g, 0\n            pent5 (int):\n                Major penalties taken (on-ice), e.g, 0\n            pent10 (int):\n                Game misconduct penalties taken (on-ice), e.g, 0\n            pend0 (int):\n                Penalty shots drawn (on-ice), e.g, 0\n            pend2 (int):\n                Minor penalties drawn (on-ice), e.g, 0\n            pend4 (int):\n                Double minor penalties drawn (on-ice), e.g, 0\n            pend5 (int):\n                Major penalties drawn (on-ice), e.g, 0\n            pend10 (int):\n                Game misconduct penalties drawn (on-ice), e.g, 0\n            gf_p60 (float):\n                Goals for (on-ice) per 60 minutes\n            ga_p60 (float):\n                Goals against (on-ice) per 60 minutes\n            hdgf_p60 (float):\n                High-danger goals for (on-ice) per 60 minutes\n            hdga_p60 (float):\n                High-danger goals against (on-ice) per 60 minutes\n            xgf_p60 (float):\n                xG for (on-ice) per 60 minutes\n            xga_p60 (float):\n                xG against (on-ice) per 60 minutes\n            sf_p60 (float):\n                Shots for (on-ice) per 60 minutes\n            sa_p60 (float):\n                Shots against (on-ice) per 60 minutes\n            hdsf_p60 (float):\n                High-danger shots for (on-ice) per 60 minutes\n            hdsa_p60 (float):\n                High danger shots against (on-ice) per 60 minutes\n            ff_p60 (float):\n                Fenwick for (on-ice) per 60 minutes\n            fa_p60 (float):\n                Fenwick against (on-ice) per 60 minutes\n            hdff_p60 (float):\n                High-danger fenwick for (on-ice) per 60 minutes\n            hdfa_p60 (float):\n                High-danger fenwick against (on-ice) per 60 minutes\n            cf_p60 (float):\n                Corsi for (on-ice) per 60 minutes\n            ca_p60 (float):\n                Corsi against (on-ice) per 60 minutes\n            bsf_p60 (float):\n                Blocked shots for (on-ice) per 60 minutes\n            bsa_p60 (float):\n                Blocked shots against (on-ice) per 60 minutes\n            msf_p60 (float):\n                Missed shots for (on-ice) per 60 minutes\n            msa_p60 (float):\n                Missed shots against (on-ice) per 60 minutes\n            hdmsf_p60 (float):\n                High-danger missed shots for (on-ice) per 60 minutes\n            hdmsa_p60 (float):\n                High-danger missed shots against (on-ice) per 60 minutes\n            teammate_block_p60 (float):\n                Shots blocked by teammates (on-ice) per 60 minutes\n            hf_p60 (float):\n                Hits  for (on-ice) per 60 minutes\n            ht_p60 (float):\n                Hits taken (on-ice) per 60 minutes\n            give_p60 (float):\n                Giveaways (on-ice) per 60 minutes\n            take_p60 (float):\n                Takeaways (on-ice) per 60 minutes\n            pent0_p60 (float):\n                Penalty shots taken (on-ice) per 60 minutes\n            pent2_p60 (float):\n                Minor penalties taken (on-ice) per 60 minutes\n            pent4_p60 (float):\n                Double minor penalties taken (on-ice) per 60 minutes\n            pent5_p60 (float):\n                Major penalties taken (on-ice) per 60 minutes\n            pent10_p60 (float):\n                Game misconduct pentalties taken (on-ice) per 60 minutes\n            pend0_p60 (float):\n                Penalty shots drawn (on-ice) per 60 minutes\n            pend2_p60 (float):\n                Minor penalties drawn (on-ice) per 60 minutes\n            pend4_p60 (float):\n                Double minor penalties drawn (on-ice) per 60 minutes\n            pend5_p60 (float):\n                Major penalties drawn (on-ice) per 60 minutes\n            pend10_p60 (float):\n                Game misconduct penalties drawn (on-ice) per 60 minutes\n            gf_percent (float):\n                On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)\n            hdgf_percent (float):\n                On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF /\n                (HDGF + HDGA)\n            xgf_percent (float):\n                On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)\n            sf_percent (float):\n                On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)\n            hdsf_percent (float):\n                On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF /\n                (HDSF + HDSA)\n            ff_percent (float):\n                On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)\n            hdff_percent (float):\n                On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF /\n                (HDFF + HDFA)\n            cf_percent (float):\n                On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)\n            bsf_percent (float):\n                On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)\n            msf_percent (float):\n                On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)\n            hdmsf_percent (float):\n                On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e.,\n                HDMSF / (HDMSF + HDMSA)\n            hf_percent (float):\n                On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)\n            take_percent (float):\n                On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2023020001\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Returns team stats with default options\n            &gt;&gt;&gt; scraper.team_stats\n\n            Resets team stats to season level, accounting for opposing team\n            &gt;&gt;&gt; scraper.prep_team_stats(level=\"season\", opposition=True)\n            &gt;&gt;&gt; scraper.team_stats\n\n            Resets team stats to season level, accounting for opposing team and score state\n            &gt;&gt;&gt; scraper.prep_team_stats(level=\"season\", opposition=True, score=True)\n            &gt;&gt;&gt; scraper.team_stats\n\n        \"\"\"\n        if self._team_stats.empty:\n            self.prep_team_stats()\n\n        return self._team_stats.copy()\n</code></pre>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Scraper._scrape","title":"_scrape","text":"<pre><code>_scrape(scrape_type)\n</code></pre> <p>Method for scraping any data. Iterates through a list of game IDs using Game objects.</p> <p>For more information and usage, see https://chickenstats.com/latest/contribute/contribute/.</p> <p>Examples:</p> <p>First, instantiate the Scraper object</p> <pre><code>&gt;&gt;&gt; game_ids = list(range(2023020001, 2023020011))\n&gt;&gt;&gt; scraper = Scraper(game_ids)\n</code></pre> <p>Before scraping the data, any of the storage objects are None</p> <pre><code>&gt;&gt;&gt; scraper._shifts  # Returns None\n&gt;&gt;&gt; scraper._play_by_play  # Also returns None\n</code></pre> <p>You can use the <code>_scrape</code> method to get any data</p> <pre><code>&gt;&gt;&gt; scraper._scrape(\"html_events\")\n&gt;&gt;&gt; scraper._html_events  # Returns data as a list\n&gt;&gt;&gt; scraper.html_events  # Returns data as a Pandas DataFrame\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _scrape(\n    self,\n    scrape_type: Literal[\n        \"api_events\", \"api_rosters\", \"changes\", \"html_events\", \"html_rosters\", \"play_by_play\", \"shifts\", \"rosters\"\n    ],\n) -&gt; None:\n    \"\"\"Method for scraping any data. Iterates through a list of game IDs using Game objects.\n\n    For more information and usage, see https://chickenstats.com/latest/contribute/contribute/.\n\n    Examples:\n        First, instantiate the Scraper object\n        &gt;&gt;&gt; game_ids = list(range(2023020001, 2023020011))\n        &gt;&gt;&gt; scraper = Scraper(game_ids)\n\n        Before scraping the data, any of the storage objects are None\n        &gt;&gt;&gt; scraper._shifts  # Returns None\n        &gt;&gt;&gt; scraper._play_by_play  # Also returns None\n\n        You can use the `_scrape` method to get any data\n        &gt;&gt;&gt; scraper._scrape(\"html_events\")\n        &gt;&gt;&gt; scraper._html_events  # Returns data as a list\n        &gt;&gt;&gt; scraper.html_events  # Returns data as a Pandas DataFrame\n    \"\"\"\n    pbar_stubs = {\n        \"api_events\": \"API events\",\n        \"api_rosters\": \"API rosters\",\n        \"changes\": \"changes\",\n        \"html_events\": \"HTML events\",\n        \"html_rosters\": \"HTML rosters\",\n        \"play_by_play\": \"play-by-play data\",\n        \"shifts\": \"shifts\",\n        \"rosters\": \"rosters\",\n    }\n\n    if scrape_type == \"api_events\":\n        game_ids = [x for x in self.game_ids if x not in self._scraped_api_events]\n\n    if scrape_type == \"api_rosters\":\n        game_ids = [x for x in self.game_ids if x not in self._scraped_api_rosters]\n\n    if scrape_type == \"changes\":\n        game_ids = [x for x in self.game_ids if x not in self._scraped_changes]\n\n    if scrape_type == \"html_events\":\n        game_ids = [x for x in self.game_ids if x not in self._scraped_html_events]\n\n    if scrape_type == \"html_rosters\":\n        game_ids = [x for x in self.game_ids if x not in self._scraped_html_rosters]\n\n    if scrape_type == \"play_by_play\":\n        game_ids = [x for x in self.game_ids if x not in self._scraped_play_by_play]\n\n    if scrape_type == \"shifts\":\n        game_ids = [x for x in self.game_ids if x not in self._scraped_rosters]\n\n    if scrape_type == \"rosters\":\n        game_ids = [x for x in self.game_ids if x not in self._scraped_rosters]\n\n    with self._requests_session as s:\n        with ChickenProgress(disable=self.disable_progress_bar) as progress:\n            pbar_stub = pbar_stubs[scrape_type]\n\n            pbar_message = f\"Downloading {pbar_stub} for {game_ids[0]}...\"\n\n            game_task = progress.add_task(pbar_message, total=len(game_ids))\n\n            for idx, game_id in enumerate(game_ids):\n                game = Game(game_id, s)\n\n                if scrape_type == \"api_events\":\n                    if game_id in self._scraped_api_events:  # Not covered by tests\n                        continue\n\n                    else:\n                        if game_id in self._scraped_api_rosters:  # Not covered by tests\n                            game._api_rosters = [x for x in self._api_rosters if x[\"game_id\"] == game_id]\n\n                        else:\n                            self._api_rosters.extend(game.api_rosters)\n                            self._scraped_api_rosters.append(game_id)\n\n                        self._api_events.extend(game.api_events)\n                        self._scraped_api_events.append(game_id)\n\n                if scrape_type == \"api_rosters\":\n                    if game_id in self._scraped_api_rosters:  # Not covered by tests\n                        continue\n\n                    else:\n                        self._api_rosters.extend(game.api_rosters)\n                        self._scraped_api_rosters.append(game_id)\n\n                if scrape_type == \"changes\":\n                    if game_id in self._scraped_changes:  # Not covered by tests\n                        continue\n\n                    else:\n                        if game_id in self._scraped_rosters:  # Not covered by tests\n                            game._rosters = [x for x in self._rosters if x[\"game_id\"] == game_id]\n\n                        else:\n                            if game_id in self._scraped_html_rosters:\n                                game._html_rosters = [x for x in self._html_rosters if x[\"game_id\"] == game_id]\n\n                            else:\n                                self._html_rosters.extend(game.html_rosters)\n                                self._scraped_html_rosters.append(game_id)\n\n                            if game_id in self._scraped_api_rosters:\n                                game._api_rosters = [x for x in self._api_rosters if x[\"game_id\"] == game_id]\n\n                            else:\n                                self._api_rosters.extend(game.api_rosters)\n                                self._scraped_api_rosters.append(game_id)\n\n                            self._rosters.extend(game.rosters)\n                            self._scraped_rosters.append(game_id)\n\n                        if game_id in self._scraped_shifts:  # Not covered by tests\n                            game._shifts = [x for x in self._shifts if x[\"game_id\"] == game_id]\n\n                        else:\n                            self._shifts.extend(game.shifts)\n                            self._scraped_shifts.append(game_id)\n\n                        self._changes.extend(game.changes)\n                        self._scraped_changes.append(game_id)\n\n                if scrape_type == \"html_events\":\n                    if game_id in self._scraped_html_events:  # Not covered by tests\n                        continue\n\n                    else:\n                        if game_id in self._scraped_html_rosters:  # Not covered by tests\n                            game._html_rosters = [x for x in self._html_rosters if x[\"game_id\"] == game_id]\n\n                        else:\n                            self._html_rosters.extend(game.html_rosters)\n                            self._scraped_html_rosters.append(game_id)\n\n                        self._html_events.extend(game.html_events)\n                        self._scraped_html_events.append(game_id)\n\n                if scrape_type == \"html_rosters\":\n                    if game_id in self._scraped_html_rosters:  # Not covered by tests\n                        continue\n\n                    else:\n                        self._html_rosters.extend(game.html_rosters)\n                        self._scraped_html_rosters.append(game_id)\n\n                if scrape_type == \"play_by_play\":\n                    if game_id in self._scraped_play_by_play:  # Not covered by tests\n                        continue\n\n                    else:\n                        if game_id in self._scraped_rosters:  # Not covered by tests\n                            game._rosters = [x for x in self._rosters if x[\"game_id\"] == game_id]\n\n                        else:\n                            if game_id in self._scraped_html_rosters:  # Not covered by tests\n                                game._html_rosters = [x for x in self._html_rosters if x[\"game_id\"] == game_id]\n\n                            else:\n                                self._html_rosters.extend(game.html_rosters)\n                                self._scraped_html_rosters.append(game_id)\n\n                            if game_id in self._scraped_api_rosters:  # Not covered by tests\n                                game._api_rosters = [x for x in self._api_rosters if x[\"game_id\"] == game_id]\n\n                            else:\n                                self._api_rosters.extend(game.api_rosters)\n                                self._scraped_api_rosters.append(game_id)\n\n                            self._rosters.extend(game.rosters)\n                            self._scraped_rosters.append(game_id)\n\n                        if game_id in self._scraped_changes:  # Not covered by tests\n                            game._changes = [x for x in self._changes if x[\"game_id\"] == game_id]\n\n                        else:\n                            if game_id in self._scraped_shifts:  # Not covered by tests\n                                game._shifts = [x for x in self._shifts if x[\"game_id\"] == game_id]\n\n                            else:\n                                self._shifts.extend(game.shifts)\n                                self._scraped_shifts.append(game_id)\n\n                            self._changes.extend(game.changes)\n                            self._scraped_changes.append(game_id)\n\n                        if game_id in self._scraped_html_events:  # Not covered by tests\n                            game._html_events = [x for x in self._html_events if x[\"game_id\"] == game_id]\n\n                        else:\n                            self._html_events.extend(game.html_events)\n                            self._scraped_html_events.append(game_id)\n\n                        if game_id in self._scraped_api_events:  # Not covered by tests\n                            game._api_events = [x for x in self._api_events if x[\"game_id\"] == game_id]\n\n                        else:\n                            self._api_events.extend(game.api_events)\n                            self._scraped_api_events.append(game_id)\n\n                        self._play_by_play.extend(game.play_by_play)\n                        self._play_by_play_ext.extend(game.play_by_play_ext)\n                        self._scraped_play_by_play.append(game_id)\n\n                if scrape_type == \"rosters\":\n                    if game_id in self._scraped_rosters:  # Not covered by tests\n                        continue\n\n                    else:\n                        if game_id in self._scraped_html_rosters:  # Not covered by tests\n                            game._html_rosters = [x for x in self._html_rosters if x[\"game_id\"] == game_id]\n\n                        else:\n                            self._html_rosters.extend(game.html_rosters)\n                            self._scraped_html_rosters.append(game_id)\n\n                        if game_id in self._scraped_api_rosters:  # Not covered by tests\n                            game._api_rosters = [x for x in self._api_rosters if x[\"game_id\"] == game_id]\n\n                        else:\n                            self._api_rosters.extend(game.api_rosters)\n                            self._scraped_api_rosters.append(game_id)\n\n                        self._rosters.extend(game.rosters)\n                        self._scraped_rosters.append(game_id)\n\n                if scrape_type == \"shifts\":\n                    if game_id in self._scraped_shifts:  # Not covered by tests\n                        continue\n\n                    else:\n                        if game_id in self._scraped_rosters:\n                            game._rosters = [x for x in self._rosters if x[\"game_id\"] == game_id]\n\n                        else:\n                            if game_id in self._scraped_html_rosters:  # Not covered by tests\n                                game._html_rosters = [x for x in self._html_rosters if x[\"game_id\"] == game_id]\n                            else:\n                                self._html_rosters.extend(game.html_rosters)\n                                self._scraped_html_rosters.append(game_id)\n\n                            if game_id in self._scraped_api_rosters:  # Not covered by tests\n                                game._api_rosters = [x for x in self._api_rosters if x[\"game_id\"] == game_id]\n                            else:\n                                self._api_rosters.extend(game.api_rosters)\n                                self._scraped_api_rosters.append(game_id)\n\n                            self._rosters.extend(game.rosters)\n                            self._scraped_rosters.append(game_id)\n\n                        self._shifts.extend(game.shifts)\n                        self._scraped_shifts.append(game_id)\n\n                if game_id != self.game_ids[-1]:\n                    pbar_message = f\"Downloading {pbar_stub} for {self.game_ids[idx + 1]}...\"\n\n                else:\n                    pbar_message = f\"Finished downloading {pbar_stub}\"\n\n                progress.update(game_task, description=pbar_message, advance=1, refresh=True)\n</code></pre>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Scraper._prep_ind","title":"_prep_ind","text":"<pre><code>_prep_ind(\n    level=\"game\",\n    score=False,\n    teammates=False,\n    opposition=False,\n)\n</code></pre> <p>Prepares DataFrame of individual stats from play-by-play data.</p> <p>Nested within <code>prep_stats</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>str</code> <p>Determines the level of aggregation. One of season, session, game, period</p> <code>'game'</code> <code>score</code> <code>bool</code> <p>Determines if stats account for score state</p> <code>False</code> <code>teammates</code> <code>bool</code> <p>Determines if stats account for teammates on ice</p> <code>False</code> <code>opposition</code> <code>bool</code> <p>Determines if stats account for opponents on ice</p> <code>False</code> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 2023 for 2023-24 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2023020001</p> <code>game_date</code> <code>int</code> <p>Date game was played, e.g., 2023-10-10</p> <code>player</code> <code>str</code> <p>Player's name, e.g., FILIP FORSBERG</p> <code>eh_id</code> <code>str</code> <p>Evolving Hockey ID for the player, e.g., FILIP.FORSBERG</p> <code>api_id</code> <code>str</code> <p>NHL API ID for the player, e.g., 8476887</p> <code>position</code> <code>str</code> <p>Player's position, e.g., L</p> <code>team</code> <code>str</code> <p>Player's team, e.g., NSH</p> <code>opp_team</code> <code>str</code> <p>Opposing team, e.g., TBL</p> <code>strength_state</code> <code>str</code> <p>Strength state, e.g., 5v5</p> <code>period</code> <code>int</code> <p>Period, e.g., 3</p> <code>score_state</code> <code>str</code> <p>Score state, e.g., 2v1</p> <code>forwards</code> <code>str</code> <p>Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY</p> <code>forwards_eh_id</code> <code>str</code> <p>Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY</p> <code>forwards_api_id</code> <code>str</code> <p>Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158</p> <code>defense</code> <code>str</code> <p>Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER</p> <code>defense_eh_id</code> <code>str</code> <p>Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER</p> <code>defense_api_id</code> <code>str</code> <p>Defense teammates' NHL API IDs, e.g., 8474151, 8478851</p> <code>own_goalie</code> <code>str</code> <p>Own goalie, e.g., JUUSE SAROS</p> <code>own_goalie_eh_id</code> <code>str</code> <p>Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS</p> <code>own_goalie_api_id</code> <code>str</code> <p>Own goalie's NHL API ID, e.g., 8477424</p> <code>opp_forwards</code> <code>str</code> <p>Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS</p> <code>opp_forwards_eh_id</code> <code>str</code> <p>Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS</p> <code>opp_forwards_api_id</code> <code>str</code> <p>Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564</p> <code>opp_defense</code> <code>str</code> <p>Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN</p> <code>opp_defense_eh_id</code> <code>str</code> <p>Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN</p> <code>opp_defense_api_id</code> <code>str</code> <p>Opposing defense's NHL API IDs, e.g., 8480246, 8475167</p> <code>opp_goalie</code> <code>str</code> <p>Opposing goalie, e.g., JONAS JOHANSSON</p> <code>opp_goalie_eh_id</code> <code>str</code> <p>Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON</p> <code>opp_goalie_api_id</code> <code>str</code> <p>Opposing goalie's NHL API ID, e.g., 8477992</p> <code>g</code> <code>int</code> <p>Goals scored, e.g, 0</p> <code>ihdg</code> <code>int</code> <p>High-danger goals scored, e.g, 0</p> <code>a1</code> <code>int</code> <p>Primary assists, e.g, 0</p> <code>a2</code> <code>int</code> <p>Secondary assists, e.g, 0</p> <code>ixg</code> <code>float</code> <p>Individual xG for, e.g, 1.014336</p> <code>isf</code> <code>int</code> <p>Individual shots taken, e.g, 3</p> <code>ihdsf</code> <code>int</code> <p>High-danger shots taken, e.g, 3</p> <code>imsf</code> <code>int</code> <p>Individual missed shots, e.g, 0</p> <code>ihdm</code> <code>int</code> <p>High-danger missed shots, e.g, 0</p> <code>iff</code> <code>int</code> <p>Individual fenwick for, e.g., 3</p> <code>ihdf</code> <code>int</code> <p>High-danger fenwick for, e.g., 3</p> <code>isb</code> <code>int</code> <p>Shots taken that were blocked, e.g, 0</p> <code>icf</code> <code>int</code> <p>Individual corsi for, e.g., 3</p> <code>ibs</code> <code>int</code> <p>Individual shots blocked on defense, e.g, 0</p> <code>igive</code> <code>int</code> <p>Individual giveaways, e.g, 0</p> <code>itake</code> <code>int</code> <p>Individual takeaways, e.g, 0</p> <code>ihf</code> <code>int</code> <p>Individual hits for, e.g, 0</p> <code>iht</code> <code>int</code> <p>Individual hits taken, e.g, 0</p> <code>ifow</code> <code>int</code> <p>Individual faceoffs won, e.g, 0</p> <code>ifol</code> <code>int</code> <p>Individual faceoffs lost, e.g, 0</p> <code>iozfw</code> <code>int</code> <p>Individual faceoffs won in offensive zone, e.g, 0</p> <code>iozfl</code> <code>int</code> <p>Individual faceoffs lost in offensive zone, e.g, 0</p> <code>inzfw</code> <code>int</code> <p>Individual faceoffs won in neutral zone, e.g, 0</p> <code>inzfl</code> <code>int</code> <p>Individual faceoffs lost in neutral zone, e.g, 0</p> <code>idzfw</code> <code>int</code> <p>Individual faceoffs won in defensive zone, e.g, 0</p> <code>idzfl</code> <code>int</code> <p>Individual faceoffs lost in defensive zone, e.g, 0</p> <code>a1_xg</code> <code>float</code> <p>xG on primary assists, e.g, 0</p> <code>a2_xg</code> <code>float</code> <p>xG on secondary assists, e.g, 0</p> <code>ipent0</code> <code>int</code> <p>Individual penalty shots against, e.g, 0</p> <code>ipent2</code> <code>int</code> <p>Individual minor penalties taken, e.g, 0</p> <code>ipent4</code> <code>int</code> <p>Individual double minor penalties taken, e.g, 0</p> <code>ipent5</code> <code>int</code> <p>Individual major penalties taken, e.g, 0</p> <code>ipent10</code> <code>int</code> <p>Individual game misconduct penalties taken, e.g, 0</p> <code>ipend0</code> <code>int</code> <p>Individual penalty shots drawn, e.g, 0</p> <code>ipend2</code> <code>int</code> <p>Individual minor penalties taken, e.g, 0</p> <code>ipend4</code> <code>int</code> <p>Individual double minor penalties drawn, e.g, 0</p> <code>ipend5</code> <code>int</code> <p>Individual major penalties drawn, e.g, 0</p> <code>ipend10</code> <code>int</code> <p>Individual game misconduct penalties drawn, e.g, 0</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2023020001\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Aggregates individual stats to game level</p> <pre><code>&gt;&gt;&gt; scraper._prep_ind(level=\"game\")\n</code></pre> <p>Aggregates individual stats to season level</p> <pre><code>&gt;&gt;&gt; scraper._prep_ind(level=\"season\")\n</code></pre> <p>Aggregates individual stats to game level, accounting for teammates on-ice</p> <pre><code>&gt;&gt;&gt; scraper._prep_ind(level=\"game\", teammates=True)\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _prep_ind(\n    self,\n    level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n    score: bool = False,\n    teammates: bool = False,\n    opposition: bool = False,\n) -&gt; None:\n    \"\"\"Prepares DataFrame of individual stats from play-by-play data.\n\n    Nested within `prep_stats` method.\n\n    Parameters:\n        level (str):\n            Determines the level of aggregation. One of season, session, game, period\n        score (bool):\n            Determines if stats account for score state\n        teammates (bool):\n            Determines if stats account for teammates on ice\n        opposition (bool):\n            Determines if stats account for opponents on ice\n\n    Returns:\n        season (int):\n            Season as 8-digit number, e.g., 2023 for 2023-24 season\n        session (str):\n            Whether game is regular season, playoffs, or pre-season, e.g., R\n        game_id (int):\n            Unique game ID assigned by the NHL, e.g., 2023020001\n        game_date (int):\n            Date game was played, e.g., 2023-10-10\n        player (str):\n            Player's name, e.g., FILIP FORSBERG\n        eh_id (str):\n            Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n        api_id (str):\n            NHL API ID for the player, e.g., 8476887\n        position (str):\n            Player's position, e.g., L\n        team (str):\n            Player's team, e.g., NSH\n        opp_team (str):\n            Opposing team, e.g., TBL\n        strength_state (str):\n            Strength state, e.g., 5v5\n        period (int):\n            Period, e.g., 3\n        score_state (str):\n            Score state, e.g., 2v1\n        forwards (str):\n            Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY\n        forwards_eh_id (str):\n            Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n        forwards_api_id (str):\n            Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158\n        defense (str):\n            Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER\n        defense_eh_id (str):\n            Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER\n        defense_api_id (str):\n            Defense teammates' NHL API IDs, e.g., 8474151, 8478851\n        own_goalie (str):\n            Own goalie, e.g., JUUSE SAROS\n        own_goalie_eh_id (str):\n            Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS\n        own_goalie_api_id (str):\n            Own goalie's NHL API ID, e.g., 8477424\n        opp_forwards (str):\n            Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS\n        opp_forwards_eh_id (str):\n            Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS\n        opp_forwards_api_id (str):\n            Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564\n        opp_defense (str):\n            Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN\n        opp_defense_eh_id (str):\n            Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN\n        opp_defense_api_id (str):\n            Opposing defense's NHL API IDs, e.g., 8480246, 8475167\n        opp_goalie (str):\n            Opposing goalie, e.g., JONAS JOHANSSON\n        opp_goalie_eh_id (str):\n            Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON\n        opp_goalie_api_id (str):\n            Opposing goalie's NHL API ID, e.g., 8477992\n        g (int):\n            Goals scored, e.g, 0\n        ihdg (int):\n            High-danger goals scored, e.g, 0\n        a1 (int):\n            Primary assists, e.g, 0\n        a2 (int):\n            Secondary assists, e.g, 0\n        ixg (float):\n            Individual xG for, e.g, 1.014336\n        isf (int):\n            Individual shots taken, e.g, 3\n        ihdsf (int):\n            High-danger shots taken, e.g, 3\n        imsf (int):\n            Individual missed shots, e.g, 0\n        ihdm (int):\n            High-danger missed shots, e.g, 0\n        iff (int):\n            Individual fenwick for, e.g., 3\n        ihdf (int):\n            High-danger fenwick for, e.g., 3\n        isb (int):\n            Shots taken that were blocked, e.g, 0\n        icf (int):\n            Individual corsi for, e.g., 3\n        ibs (int):\n            Individual shots blocked on defense, e.g, 0\n        igive (int):\n            Individual giveaways, e.g, 0\n        itake (int):\n            Individual takeaways, e.g, 0\n        ihf (int):\n            Individual hits for, e.g, 0\n        iht (int):\n            Individual hits taken, e.g, 0\n        ifow (int):\n            Individual faceoffs won, e.g, 0\n        ifol (int):\n            Individual faceoffs lost, e.g, 0\n        iozfw (int):\n            Individual faceoffs won in offensive zone, e.g, 0\n        iozfl (int):\n            Individual faceoffs lost in offensive zone, e.g, 0\n        inzfw (int):\n            Individual faceoffs won in neutral zone, e.g, 0\n        inzfl (int):\n            Individual faceoffs lost in neutral zone, e.g, 0\n        idzfw (int):\n            Individual faceoffs won in defensive zone, e.g, 0\n        idzfl (int):\n            Individual faceoffs lost in defensive zone, e.g, 0\n        a1_xg (float):\n            xG on primary assists, e.g, 0\n        a2_xg (float):\n            xG on secondary assists, e.g, 0\n        ipent0 (int):\n            Individual penalty shots against, e.g, 0\n        ipent2 (int):\n            Individual minor penalties taken, e.g, 0\n        ipent4 (int):\n            Individual double minor penalties taken, e.g, 0\n        ipent5 (int):\n            Individual major penalties taken, e.g, 0\n        ipent10 (int):\n            Individual game misconduct penalties taken, e.g, 0\n        ipend0 (int):\n            Individual penalty shots drawn, e.g, 0\n        ipend2 (int):\n            Individual minor penalties taken, e.g, 0\n        ipend4 (int):\n            Individual double minor penalties drawn, e.g, 0\n        ipend5 (int):\n            Individual major penalties drawn, e.g, 0\n        ipend10 (int):\n            Individual game misconduct penalties drawn, e.g, 0\n\n    Examples:\n        First, instantiate the class with a game ID\n        &gt;&gt;&gt; game_id = 2023020001\n        &gt;&gt;&gt; scraper = Scraper(game_id)\n\n        Aggregates individual stats to game level\n        &gt;&gt;&gt; scraper._prep_ind(level=\"game\")\n\n        Aggregates individual stats to season level\n        &gt;&gt;&gt; scraper._prep_ind(level=\"season\")\n\n        Aggregates individual stats to game level, accounting for teammates on-ice\n        &gt;&gt;&gt; scraper._prep_ind(level=\"game\", teammates=True)\n\n    \"\"\"\n    df = self.play_by_play.copy()\n\n    players = [\"player_1\", \"player_2\", \"player_3\"]\n\n    merge_list = [\"season\", \"session\", \"player\", \"eh_id\", \"api_id\", \"position\", \"team\", \"strength_state\"]\n\n    if level == \"session\" or level == \"season\":\n        merge_list = merge_list\n\n    if level == \"game\":\n        merge_list.extend([\"game_id\", \"game_date\", \"opp_team\"])\n\n    if level == \"period\":\n        merge_list.extend([\"game_id\", \"game_date\", \"opp_team\", \"period\"])\n\n    if score:\n        merge_list.append(\"score_state\")\n\n    if teammates:\n        merge_list.extend(\n            [\n                \"forwards\",\n                \"forwards_eh_id\",\n                \"forwards_api_id\",\n                \"defense\",\n                \"defense_eh_id\",\n                \"defense_api_id\",\n                \"own_goalie\",\n                \"own_goalie_eh_id\",\n                \"own_goalie_api_id\",\n            ]\n        )\n\n    if opposition:\n        merge_list.extend(\n            [\n                \"opp_forwards\",\n                \"opp_forwards_eh_id\",\n                \"opp_forwards_api_id\",\n                \"opp_defense\",\n                \"opp_defense_eh_id\",\n                \"opp_defense_api_id\",\n                \"opp_goalie\",\n                \"opp_goalie_eh_id\",\n                \"opp_goalie_api_id\",\n            ]\n        )\n\n        if \"opp_team\" not in merge_list:\n            merge_list.append(\"opp_team\")\n\n    ind_stats = pd.DataFrame(columns=merge_list)\n\n    for player in players:\n        player_eh_id = f\"{player}_eh_id\"\n        player_api_id = f\"{player}_api_id\"\n        position = f\"{player}_position\"\n\n        group_base = [\"season\", \"session\", \"event_team\", player, player_eh_id, player_api_id, position]\n\n        if level == \"session\" or level == \"season\":\n            group_base = group_base\n\n        if level == \"game\":\n            group_base.extend([\"game_id\", \"game_date\", \"opp_team\"])\n\n        if level == \"period\":\n            group_base.extend([\"game_id\", \"game_date\", \"opp_team\", \"period\"])\n\n        if opposition and \"opp_team\" not in group_base:\n            group_base.append(\"opp_team\")\n\n        mask = df[player] != \"BENCH\"\n\n        if player == \"player_1\":\n            group_list = group_base.copy()\n            group_list.append(\"strength_state\")\n\n            if teammates:\n                group_list.extend(\n                    [\n                        \"forwards\",\n                        \"forwards_eh_id\",\n                        \"forwards_api_id\",\n                        \"defense\",\n                        \"defense_eh_id\",\n                        \"defense_api_id\",\n                        \"own_goalie\",\n                        \"own_goalie_eh_id\",\n                        \"own_goalie_api_id\",\n                    ]\n                )\n\n            if score:\n                group_list.append(\"score_state\")\n\n            if opposition:\n                group_list.extend(\n                    [\n                        \"opp_forwards\",\n                        \"opp_forwards_eh_id\",\n                        \"opp_forwards_api_id\",\n                        \"opp_defense\",\n                        \"opp_defense_eh_id\",\n                        \"opp_defense_api_id\",\n                        \"opp_goalie\",\n                        \"opp_goalie_eh_id\",\n                        \"opp_goalie_api_id\",\n                    ]\n                )\n\n            stats_list = [\n                \"block\",\n                \"block_adj\",\n                \"fac\",\n                \"give\",\n                \"goal\",\n                \"goal_adj\",\n                \"hd_fenwick\",\n                \"hd_goal\",\n                \"hd_miss\",\n                \"hd_shot\",\n                \"hit\",\n                \"miss\",\n                \"miss_adj\",\n                \"pen0\",\n                \"pen2\",\n                \"pen4\",\n                \"pen5\",\n                \"pen10\",\n                \"shot\",\n                \"shot_adj\",\n                \"take\",\n                # \"corsi\",\n                \"fenwick\",\n                \"fenwick_adj\",\n                \"pred_goal\",\n                \"pred_goal_adj\",\n                \"ozf\",\n                \"nzf\",\n                \"dzf\",\n            ]\n\n            stats_dict = {x: \"sum\" for x in stats_list if x in df.columns}\n\n            new_cols = {\n                \"block\": \"ibs\",\n                \"block_adj\": \"ibs_adj\",\n                \"fac\": \"ifow\",\n                \"give\": \"igive\",\n                \"goal\": \"g\",\n                \"goal_adj\": \"g_adj\",\n                \"hd_fenwick\": \"ihdf\",\n                \"hd_goal\": \"ihdg\",\n                \"hd_miss\": \"ihdm\",\n                \"hd_shot\": \"ihdsf\",\n                \"hit\": \"ihf\",\n                \"miss\": \"imsf\",\n                \"miss_adj\": \"imsf_adj\",\n                \"pen0\": \"ipent0\",\n                \"pen2\": \"ipent2\",\n                \"pen4\": \"ipent4\",\n                \"pen5\": \"ipent5\",\n                \"pen10\": \"ipent10\",\n                \"shot\": \"isf\",\n                \"shot_adj\": \"isf_adj\",\n                \"take\": \"itake\",\n                \"fenwick\": \"iff\",\n                \"fenwick_adj\": \"iff_adj\",\n                \"pred_goal\": \"ixg\",\n                \"pred_goal_adj\": \"ixg_adj\",\n                \"ozf\": \"iozfw\",\n                \"nzf\": \"inzfw\",\n                \"dzf\": \"idzfw\",\n                \"event_team\": \"team\",\n                player: \"player\",\n                player_eh_id: \"eh_id\",\n                player_api_id: \"api_id\",\n                position: \"position\",\n            }\n\n            mask = np.logical_and.reduce(\n                [df[player] != \"BENCH\", ~df.description.astype(str).str.contains(\"BLOCKED BY TEAMMATE\", na=False)]\n            )\n\n            player_df = df[mask].copy().groupby(group_list, as_index=False).agg(stats_dict).rename(columns=new_cols)\n\n            # drop_list = [x for x in stats if x not in new_cols.keys() and x in player_df.columns]\n\n        if player == \"player_2\":\n            # Getting on-ice stats against for player 2\n\n            opp_group_list = group_base.copy()\n            opp_group_list.append(\"opp_strength_state\")\n\n            event_group_list = group_base.copy()\n            event_group_list.append(\"strength_state\")\n\n            if not opposition and level in [\"season\", \"session\"]:\n                opp_group_list.remove(\"event_team\")\n                opp_group_list.append(\"opp_team\")\n\n            if teammates:\n                opp_group_list.extend(\n                    [\n                        \"opp_forwards\",\n                        \"opp_forwards_eh_id\",\n                        \"opp_forwards_api_id\",\n                        \"opp_defense\",\n                        \"opp_defense_eh_id\",\n                        \"opp_defense_api_id\",\n                        \"opp_goalie\",\n                        \"opp_goalie_eh_id\",\n                        \"opp_goalie_api_id\",\n                    ]\n                )\n\n                event_group_list.extend(\n                    [\n                        \"forwards\",\n                        \"forwards_eh_id\",\n                        \"forwards_api_id\",\n                        \"defense\",\n                        \"defense_eh_id\",\n                        \"defense_api_id\",\n                        \"own_goalie\",\n                        \"own_goalie_eh_id\",\n                        \"own_goalie_api_id\",\n                    ]\n                )\n\n            if score:\n                opp_group_list.append(\"opp_score_state\")\n                event_group_list.append(\"score_state\")\n\n            if opposition:\n                opp_group_list.extend(\n                    [\n                        \"forwards\",\n                        \"forwards_eh_id\",\n                        \"forwards_api_id\",\n                        \"defense\",\n                        \"defense_eh_id\",\n                        \"defense_api_id\",\n                        \"own_goalie\",\n                        \"own_goalie_eh_id\",\n                        \"own_goalie_api_id\",\n                    ]\n                )\n\n                event_group_list.extend(\n                    [\n                        \"opp_forwards\",\n                        \"opp_forwards_eh_id\",\n                        \"opp_forwards_api_id\",\n                        \"opp_defense\",\n                        \"opp_defense_eh_id\",\n                        \"opp_defense_api_id\",\n                        \"opp_goalie\",\n                        \"opp_goalie_eh_id\",\n                        \"opp_goalie_api_id\",\n                    ]\n                )\n\n            stats_1 = [\n                \"block\",\n                \"block_adj\",\n                \"fac\",\n                \"hit\",\n                \"pen0\",\n                \"pen2\",\n                \"pen4\",\n                \"pen5\",\n                \"pen10\",\n                \"ozf\",\n                \"nzf\",\n                \"dzf\",\n            ]\n\n            stats_1 = {x: \"sum\" for x in stats_1 if x.lower() in df.columns}\n\n            new_cols_1 = {\n                \"opp_goalie\": \"own_goalie\",\n                \"opp_goalie_eh_id\": \"own_goalie_eh_id\",\n                \"opp_goalie_api_id\": \"own_goalie_api_id\",\n                \"own_goalie\": \"opp_goalie\",\n                \"own_goalie_eh_id\": \"opp_goalie_eh_id\",\n                \"own_goalie_api_id\": \"opp_goalie_api_id\",\n                \"opp_team\": \"team\",\n                \"event_team\": \"opp_team\",\n                \"opp_score_state\": \"score_state\",\n                \"opp_strength_state\": \"strength_state\",\n                \"pen0\": \"ipend0\",\n                \"pen2\": \"ipend2\",\n                \"pen4\": \"ipend4\",\n                \"pen5\": \"ipend5\",\n                \"pen10\": \"ipend10\",\n                player: \"player\",\n                player_eh_id: \"eh_id\",\n                player_api_id: \"api_id\",\n                position: \"position\",\n                \"fac\": \"ifol\",\n                \"hit\": \"iht\",\n                \"ozf\": \"iozfl\",\n                \"nzf\": \"inzfl\",\n                \"dzf\": \"idzfl\",\n                \"block\": \"isb\",\n                \"block_adj\": \"isb_adj\",\n                \"opp_forwards\": \"forwards\",\n                \"opp_forwards_eh_id\": \"forwards_eh_id\",\n                \"opp_forwards_api_id\": \"forwards_api_id\",\n                \"opp_defense\": \"defense\",\n                \"opp_defense_eh_id\": \"defense_eh_id\",\n                \"opp_defense_api_id\": \"defense_api_id\",\n                \"forwards\": \"opp_forwards\",\n                \"forwards_eh_id\": \"opp_forwards_eh_id\",\n                \"forwards_api_id\": \"opp_forwards_api_id\",\n                \"defense\": \"opp_defense\",\n                \"defense_eh_id\": \"opp_defense_eh_id\",\n                \"defense_api_id\": \"opp_defense_api_id\",\n            }\n\n            event_types = [\"BLOCK\", \"FAC\", \"HIT\", \"PENL\"]\n\n            mask_1 = np.logical_and.reduce(\n                [\n                    df[player] != \"BENCH\",\n                    df.event.isin(event_types),\n                    ~df.description.astype(str).str.contains(\"BLOCKED BY TEAMMATE\", na=False),\n                ]\n            )\n\n            opps = df[mask_1].copy().groupby(opp_group_list, as_index=False).agg(stats_1).rename(columns=new_cols_1)\n\n            # Getting primary assists and primary assists xG from player 2\n\n            stats_2 = [\"goal\", \"pred_goal\", \"teammate_block\", \"teammate_block_adj\"]\n\n            stats_2 = {x: \"sum\" for x in stats_2 if x in df.columns}\n\n            new_cols_2 = {\n                \"event_team\": \"team\",\n                player: \"player\",\n                player_eh_id: \"eh_id\",\n                player_api_id: \"api_id\",\n                \"goal\": \"a1\",\n                \"pred_goal\": \"a1_xg\",\n                position: \"position\",\n                \"teammate_block\": \"isb\",\n                \"teammate_block_adj\": \"isb_adj\",\n            }\n\n            event_types = [\"BLOCK\", \"GOAL\"]\n\n            mask_2 = np.logical_and.reduce([df[player] != \"BENCH\", df.event.isin(event_types)])\n\n            own = (\n                df[mask_2].copy().groupby(event_group_list, as_index=False).agg(stats_2).rename(columns=new_cols_2)\n            )\n\n            player_df = opps.merge(own, left_on=merge_list, right_on=merge_list, how=\"outer\").fillna(0)\n\n            player_df[\"isb\"] = player_df.isb_x + player_df.isb_y\n            player_df[\"isb_adj\"] = player_df.isb_adj_x + player_df.isb_adj_y\n\n        if player == \"player_3\":\n            group_list = group_base.copy()\n            group_list.append(\"strength_state\")\n\n            if teammates:\n                group_list.extend(\n                    [\n                        \"forwards\",\n                        \"forwards_eh_id\",\n                        \"forwards_api_id\",\n                        \"defense\",\n                        \"defense_eh_id\",\n                        \"defense_api_id\",\n                        \"own_goalie\",\n                        \"own_goalie_eh_id\",\n                        \"own_goalie_api_id\",\n                    ]\n                )\n\n            if score:\n                group_list.append(\"score_state\")\n\n            if opposition:\n                group_list.extend(\n                    [\n                        \"opp_forwards\",\n                        \"opp_forwards_eh_id\",\n                        \"opp_forwards_api_id\",\n                        \"opp_defense\",\n                        \"opp_defense_eh_id\",\n                        \"opp_defense_api_id\",\n                        \"opp_goalie\",\n                        \"opp_goalie_eh_id\",\n                        \"opp_goalie_api_id\",\n                    ]\n                )\n\n                if \"opp_team\" not in group_list:\n                    group_list.append(\"opp_team\")\n\n            stats_list = [\"goal\", \"pred_goal\"]\n\n            stats_dict = {x: \"sum\" for x in stats_list if x in df.columns}\n\n            player_df = df[mask].groupby(group_list, as_index=False).agg(stats_dict)\n\n            new_cols = {\n                \"goal\": \"a2\",\n                \"pred_goal\": \"a2_xg\",\n                \"event_team\": \"team\",\n                player: \"player\",\n                player_eh_id: \"eh_id\",\n                player_api_id: \"api_id\",\n                position: \"position\",\n            }\n\n            player_df = player_df.rename(columns=new_cols)\n\n        ind_stats = ind_stats.merge(player_df, on=merge_list, how=\"outer\").infer_objects(copy=False).fillna(0)\n\n    # Fixing some stats\n\n    ind_stats[\"icf\"] = ind_stats.iff + ind_stats.isb\n    ind_stats[\"icf_adj\"] = ind_stats.iff_adj + ind_stats.isb_adj\n\n    ind_stats[\"gax\"] = ind_stats.g - ind_stats.ixg\n\n    columns = [x for x in list(IndStatSchema.dtypes.keys()) if x in ind_stats.columns]\n\n    ind_stats = ind_stats[columns]\n\n    stats = [\n        \"g\",\n        \"a1\",\n        \"a2\",\n        \"isf\",\n        \"iff\",\n        \"icf\",\n        \"ixg\",\n        \"gax\",\n        \"ihdg\",\n        \"ihdf\",\n        \"ihdsf\",\n        \"ihdm\",\n        \"imsf\",\n        \"isb\",\n        \"ibs\",\n        \"igive\",\n        \"itake\",\n        \"ihf\",\n        \"iht\",\n        \"ifow\",\n        \"ifol\",\n        \"iozfw\",\n        \"iozfl\",\n        \"inzfw\",\n        \"inzfl\",\n        \"idzfw\",\n        \"idzfl\",\n        \"a1_xg\",\n        \"a2_xg\",\n        \"ipent0\",\n        \"ipent2\",\n        \"ipent4\",\n        \"ipent5\",\n        \"ipent10\",\n        \"ipend0\",\n        \"ipend2\",\n        \"ipend4\",\n        \"ipend5\",\n        \"ipend10\",\n    ]\n\n    stats = [x for x in stats if x in ind_stats.columns]\n\n    ind_stats = ind_stats.loc[(ind_stats[stats] &gt; 0).any(axis=1)]\n\n    ind_stats = IndStatSchema.validate(ind_stats)\n\n    self._ind_stats = ind_stats\n</code></pre>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Scraper._prep_oi","title":"_prep_oi","text":"<pre><code>_prep_oi(\n    level=\"game\",\n    score=False,\n    teammates=False,\n    opposition=False,\n)\n</code></pre> <p>Prepares DataFrame of on-ice stats from play-by-play data.</p> <p>Nested within <code>prep_stats</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>str</code> <p>Determines the level of aggregation. One of season, session, game, period</p> <code>'game'</code> <code>score</code> <code>bool</code> <p>Determines if stats account for score state</p> <code>False</code> <code>teammates</code> <code>bool</code> <p>Determines if stats account for teammates on ice</p> <code>False</code> <code>opposition</code> <code>bool</code> <p>Determines if stats account for opponents on ice</p> <code>False</code> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 2023 for 2023-24 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2023020001</p> <code>game_date</code> <code>int</code> <p>Date game was played, e.g., 2023-10-10</p> <code>player</code> <code>str</code> <p>Player's name, e.g., FILIP FORSBERG</p> <code>eh_id</code> <code>str</code> <p>Evolving Hockey ID for the player, e.g., FILIP.FORSBERG</p> <code>api_id</code> <code>str</code> <p>NHL API ID for the player, e.g., 8476887</p> <code>position</code> <code>str</code> <p>Player's position, e.g., L</p> <code>team</code> <code>str</code> <p>Player's team, e.g., NSH</p> <code>opp_team</code> <code>str</code> <p>Opposing team, e.g., TBL</p> <code>strength_state</code> <code>str</code> <p>Strength state, e.g., 5v5</p> <code>period</code> <code>int</code> <p>Period, e.g., 3</p> <code>score_state</code> <code>str</code> <p>Score state, e.g., 2v1</p> <code>forwards</code> <code>str</code> <p>Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY</p> <code>forwards_eh_id</code> <code>str</code> <p>Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY</p> <code>forwards_api_id</code> <code>str</code> <p>Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158</p> <code>defense</code> <code>str</code> <p>Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER</p> <code>defense_eh_id</code> <code>str</code> <p>Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER</p> <code>defense_api_id</code> <code>str</code> <p>Defense teammates' NHL API IDs, e.g., 8474151, 8478851</p> <code>own_goalie</code> <code>str</code> <p>Own goalie, e.g., JUUSE SAROS</p> <code>own_goalie_eh_id</code> <code>str</code> <p>Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS</p> <code>own_goalie_api_id</code> <code>str</code> <p>Own goalie's NHL API ID, e.g., 8477424</p> <code>opp_forwards</code> <code>str</code> <p>Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS</p> <code>opp_forwards_eh_id</code> <code>str</code> <p>Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS</p> <code>opp_forwards_api_id</code> <code>str</code> <p>Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564</p> <code>opp_defense</code> <code>str</code> <p>Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN</p> <code>opp_defense_eh_id</code> <code>str</code> <p>Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN</p> <code>opp_defense_api_id</code> <code>str</code> <p>Opposing defense's NHL API IDs, e.g., 8480246, 8475167</p> <code>opp_goalie</code> <code>str</code> <p>Opposing goalie, e.g., JONAS JOHANSSON</p> <code>opp_goalie_eh_id</code> <code>str</code> <p>Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON</p> <code>opp_goalie_api_id</code> <code>str</code> <p>Opposing goalie's NHL API ID, e.g., 8477992</p> <code>toi</code> <code>float</code> <p>Time on-ice, in minutes, e.g, 0.483333</p> <code>gf</code> <code>int</code> <p>Goals for (on-ice), e.g, 0</p> <code>hdgf</code> <code>int</code> <p>High-danger goals for (on-ice), e.g, 0</p> <code>ga</code> <code>int</code> <p>Goals against (on-ice), e.g, 0</p> <code>hdga</code> <code>int</code> <p>High-danger goals against (on-ice), e.g, 0</p> <code>xgf</code> <code>float</code> <p>xG for (on-ice), e.g., 1.258332</p> <code>xga</code> <code>float</code> <p>xG against (on-ice), e.g, 0.000000</p> <code>sf</code> <code>int</code> <p>Shots for (on-ice), e.g, 4</p> <code>sa</code> <code>int</code> <p>Shots against (on-ice), e.g, 0</p> <code>hdsf</code> <code>int</code> <p>High-danger shots for (on-ice), e.g, 3</p> <code>hdsa</code> <code>int</code> <p>High-danger shots against (on-ice), e.g, 0</p> <code>ff</code> <code>int</code> <p>Fenwick for (on-ice), e.g, 4</p> <code>fa</code> <code>int</code> <p>Fenwick against (on-ice), e.g, 0</p> <code>hdff</code> <code>int</code> <p>High-danger fenwick for (on-ice), e.g, 3</p> <code>hdfa</code> <code>int</code> <p>High-danger fenwick against (on-ice), e.g, 0</p> <code>cf</code> <code>int</code> <p>Corsi for (on-ice), e.g, 4</p> <code>ca</code> <code>int</code> <p>Corsi against (on-ice), e.g, 0</p> <code>bsf</code> <code>int</code> <p>Shots taken that were blocked (on-ice), e.g, 0</p> <code>bsa</code> <code>int</code> <p>Shots blocked (on-ice), e.g, 0</p> <code>msf</code> <code>int</code> <p>Missed shots taken (on-ice), e.g, 0</p> <code>msa</code> <code>int</code> <p>Missed shots against (on-ice), e.g, 0</p> <code>hdmsf</code> <code>int</code> <p>High-danger missed shots taken (on-ice), e.g, 0</p> <code>hdmsa</code> <code>int</code> <p>High-danger missed shots against (on-ice), e.g, 0</p> <code>teammate_block</code> <code>int</code> <p>Shots blocked by teammates (on-ice), e.g, 0</p> <code>hf</code> <code>int</code> <p>Hits for (on-ice), e.g, 0</p> <code>ht</code> <code>int</code> <p>Hits taken (on-ice), e.g, 0</p> <code>give</code> <code>int</code> <p>Giveaways (on-ice), e.g, 0</p> <code>take</code> <code>int</code> <p>Takeaways (on-ice), e.g, 0</p> <code>ozf</code> <code>int</code> <p>Offensive zone faceoffs (on-ice), e.g, 0</p> <code>nzf</code> <code>int</code> <p>Neutral zone faceoffs (on-ice), e.g, 1</p> <code>dzf</code> <code>int</code> <p>Defensive zone faceoffs (on-ice), e.g, 0</p> <code>fow</code> <code>int</code> <p>Faceoffs won (on-ice), e.g, 1</p> <code>fol</code> <code>int</code> <p>Faceoffs lost (on-ice), e.g, 0</p> <code>ozfw</code> <code>int</code> <p>Offensive zone faceoffs won (on-ice), e.g, 0</p> <code>ozfl</code> <code>int</code> <p>Offensive zone faceoffs lost (on-ice), e.g, 0</p> <code>nzfw</code> <code>int</code> <p>Neutral zone faceoffs won (on-ice), e.g, 1</p> <code>nzfl</code> <code>int</code> <p>Neutral zone faceoffs lost (on-ice), e.g, 0</p> <code>dzfw</code> <code>int</code> <p>Defensive zone faceoffs won (on-ice), e.g, 0</p> <code>dzfl</code> <code>int</code> <p>Defensive zone faceoffs lost (on-ice), e.g, 0</p> <code>pent0</code> <code>int</code> <p>Penalty shots allowed (on-ice), e.g, 0</p> <code>pent2</code> <code>int</code> <p>Minor penalties taken (on-ice), e.g, 0</p> <code>pent4</code> <code>int</code> <p>Double minor penalties taken (on-ice), e.g, 0</p> <code>pent5</code> <code>int</code> <p>Major penalties taken (on-ice), e.g, 0</p> <code>pent10</code> <code>int</code> <p>Game misconduct penalties taken (on-ice), e.g, 0</p> <code>pend0</code> <code>int</code> <p>Penalty shots drawn (on-ice), e.g, 0</p> <code>pend2</code> <code>int</code> <p>Minor penalties drawn (on-ice), e.g, 0</p> <code>pend4</code> <code>int</code> <p>Double minor penalties drawn (on-ice), e.g, 0</p> <code>pend5</code> <code>int</code> <p>Major penalties drawn (on-ice), e.g, 0</p> <code>pend10</code> <code>int</code> <p>Game misconduct penalties drawn (on-ice), e.g, 0</p> <code>ozs</code> <code>int</code> <p>Offensive zone starts, e.g, 0</p> <code>nzs</code> <code>int</code> <p>Neutral zone starts, e.g, 0</p> <code>dzs</code> <code>int</code> <p>Defenzive zone starts, e.g, 0</p> <code>otf</code> <code>int</code> <p>On-the-fly starts, e.g, 0</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2023020001\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Prepares on-ice dataframe with default options</p> <pre><code>&gt;&gt;&gt; scraper._prep_oi()\n</code></pre> <p>On-ice statistics, aggregated to season level</p> <pre><code>&gt;&gt;&gt; scraper._prep_oi(level=\"season\")\n</code></pre> <p>On-ice statistics, aggregated to game level, accounting for teammates</p> <pre><code>&gt;&gt;&gt; scraper._prep_oi(level=\"game\", teammates=True)\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _prep_oi(\n    self,\n    level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n    score: bool = False,\n    teammates: bool = False,\n    opposition: bool = False,\n) -&gt; None:\n    \"\"\"Prepares DataFrame of on-ice stats from play-by-play data.\n\n    Nested within `prep_stats` method.\n\n    Parameters:\n        level (str):\n            Determines the level of aggregation. One of season, session, game, period\n        score (bool):\n            Determines if stats account for score state\n        teammates (bool):\n            Determines if stats account for teammates on ice\n        opposition (bool):\n            Determines if stats account for opponents on ice\n\n    Returns:\n        season (int):\n            Season as 8-digit number, e.g., 2023 for 2023-24 season\n        session (str):\n            Whether game is regular season, playoffs, or pre-season, e.g., R\n        game_id (int):\n            Unique game ID assigned by the NHL, e.g., 2023020001\n        game_date (int):\n            Date game was played, e.g., 2023-10-10\n        player (str):\n            Player's name, e.g., FILIP FORSBERG\n        eh_id (str):\n            Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n        api_id (str):\n            NHL API ID for the player, e.g., 8476887\n        position (str):\n            Player's position, e.g., L\n        team (str):\n            Player's team, e.g., NSH\n        opp_team (str):\n            Opposing team, e.g., TBL\n        strength_state (str):\n            Strength state, e.g., 5v5\n        period (int):\n            Period, e.g., 3\n        score_state (str):\n            Score state, e.g., 2v1\n        forwards (str):\n            Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY\n        forwards_eh_id (str):\n            Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n        forwards_api_id (str):\n            Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158\n        defense (str):\n            Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER\n        defense_eh_id (str):\n            Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER\n        defense_api_id (str):\n            Defense teammates' NHL API IDs, e.g., 8474151, 8478851\n        own_goalie (str):\n            Own goalie, e.g., JUUSE SAROS\n        own_goalie_eh_id (str):\n            Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS\n        own_goalie_api_id (str):\n            Own goalie's NHL API ID, e.g., 8477424\n        opp_forwards (str):\n            Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS\n        opp_forwards_eh_id (str):\n            Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS\n        opp_forwards_api_id (str):\n            Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564\n        opp_defense (str):\n            Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN\n        opp_defense_eh_id (str):\n            Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN\n        opp_defense_api_id (str):\n            Opposing defense's NHL API IDs, e.g., 8480246, 8475167\n        opp_goalie (str):\n            Opposing goalie, e.g., JONAS JOHANSSON\n        opp_goalie_eh_id (str):\n            Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON\n        opp_goalie_api_id (str):\n            Opposing goalie's NHL API ID, e.g., 8477992\n        toi (float):\n            Time on-ice, in minutes, e.g, 0.483333\n        gf (int):\n            Goals for (on-ice), e.g, 0\n        hdgf (int):\n            High-danger goals for (on-ice), e.g, 0\n        ga (int):\n            Goals against (on-ice), e.g, 0\n        hdga (int):\n            High-danger goals against (on-ice), e.g, 0\n        xgf (float):\n            xG for (on-ice), e.g., 1.258332\n        xga (float):\n            xG against (on-ice), e.g, 0.000000\n        sf (int):\n            Shots for (on-ice), e.g, 4\n        sa (int):\n            Shots against (on-ice), e.g, 0\n        hdsf (int):\n            High-danger shots for (on-ice), e.g, 3\n        hdsa (int):\n            High-danger shots against (on-ice), e.g, 0\n        ff (int):\n            Fenwick for (on-ice), e.g, 4\n        fa (int):\n            Fenwick against (on-ice), e.g, 0\n        hdff (int):\n            High-danger fenwick for (on-ice), e.g, 3\n        hdfa (int):\n            High-danger fenwick against (on-ice), e.g, 0\n        cf (int):\n            Corsi for (on-ice), e.g, 4\n        ca (int):\n            Corsi against (on-ice), e.g, 0\n        bsf (int):\n            Shots taken that were blocked (on-ice), e.g, 0\n        bsa (int):\n            Shots blocked (on-ice), e.g, 0\n        msf (int):\n            Missed shots taken (on-ice), e.g, 0\n        msa (int):\n            Missed shots against (on-ice), e.g, 0\n        hdmsf (int):\n            High-danger missed shots taken (on-ice), e.g, 0\n        hdmsa (int):\n            High-danger missed shots against (on-ice), e.g, 0\n        teammate_block (int):\n            Shots blocked by teammates (on-ice), e.g, 0\n        hf (int):\n            Hits for (on-ice), e.g, 0\n        ht (int):\n            Hits taken (on-ice), e.g, 0\n        give (int):\n            Giveaways (on-ice), e.g, 0\n        take (int):\n            Takeaways (on-ice), e.g, 0\n        ozf (int):\n            Offensive zone faceoffs (on-ice), e.g, 0\n        nzf (int):\n            Neutral zone faceoffs (on-ice), e.g, 1\n        dzf (int):\n            Defensive zone faceoffs (on-ice), e.g, 0\n        fow (int):\n            Faceoffs won (on-ice), e.g, 1\n        fol (int):\n            Faceoffs lost (on-ice), e.g, 0\n        ozfw (int):\n            Offensive zone faceoffs won (on-ice), e.g, 0\n        ozfl (int):\n            Offensive zone faceoffs lost (on-ice), e.g, 0\n        nzfw (int):\n            Neutral zone faceoffs won (on-ice), e.g, 1\n        nzfl (int):\n            Neutral zone faceoffs lost (on-ice), e.g, 0\n        dzfw (int):\n            Defensive zone faceoffs won (on-ice), e.g, 0\n        dzfl (int):\n            Defensive zone faceoffs lost (on-ice), e.g, 0\n        pent0 (int):\n            Penalty shots allowed (on-ice), e.g, 0\n        pent2 (int):\n            Minor penalties taken (on-ice), e.g, 0\n        pent4 (int):\n            Double minor penalties taken (on-ice), e.g, 0\n        pent5 (int):\n            Major penalties taken (on-ice), e.g, 0\n        pent10 (int):\n            Game misconduct penalties taken (on-ice), e.g, 0\n        pend0 (int):\n            Penalty shots drawn (on-ice), e.g, 0\n        pend2 (int):\n            Minor penalties drawn (on-ice), e.g, 0\n        pend4 (int):\n            Double minor penalties drawn (on-ice), e.g, 0\n        pend5 (int):\n            Major penalties drawn (on-ice), e.g, 0\n        pend10 (int):\n            Game misconduct penalties drawn (on-ice), e.g, 0\n        ozs (int):\n            Offensive zone starts, e.g, 0\n        nzs (int):\n            Neutral zone starts, e.g, 0\n        dzs (int):\n            Defenzive zone starts, e.g, 0\n        otf (int):\n            On-the-fly starts, e.g, 0\n\n    Examples:\n        First, instantiate the class with a game ID\n        &gt;&gt;&gt; game_id = 2023020001\n        &gt;&gt;&gt; scraper = Scraper(game_id)\n\n        Prepares on-ice dataframe with default options\n        &gt;&gt;&gt; scraper._prep_oi()\n\n        On-ice statistics, aggregated to season level\n        &gt;&gt;&gt; scraper._prep_oi(level=\"season\")\n\n        On-ice statistics, aggregated to game level, accounting for teammates\n        &gt;&gt;&gt; scraper._prep_oi(level=\"game\", teammates=True)\n\n    \"\"\"\n    merge_cols = [\"id\", \"event_idx\"]\n\n    df = self.play_by_play.merge(self.play_by_play_ext, how=\"left\", on=merge_cols)\n\n    players = (\n        [f\"event_on_{x}\" for x in range(1, 8)]\n        + [f\"opp_on_{x}\" for x in range(1, 8)]\n        + [f\"change_on_{x}\" for x in range(1, 8)]\n    )\n\n    event_list = []\n    opp_list = []\n    zones_list = []\n\n    for player in players:\n        position = f\"{player}_pos\"\n        player_eh_id = f\"{player}_eh_id\"\n        player_api_id = f\"{player}_api_id\"\n\n        group_list = [\"season\", \"session\"]\n\n        if level == \"session\" or level == \"season\":\n            group_list = group_list\n\n        if level == \"game\":\n            group_list.extend([\"game_id\", \"game_date\", \"event_team\", \"opp_team\"])\n\n        if level == \"period\":\n            group_list.extend([\"game_id\", \"game_date\", \"event_team\", \"opp_team\", \"period\"])\n\n        # Accounting for desired player\n\n        if \"event_on\" in player or \"opp_on\" in player:\n            stats_list = [\n                \"block\",\n                \"block_adj\",\n                \"teammate_block\",\n                \"teammate_block_adj\",\n                \"fac\",\n                \"goal\",\n                \"goal_adj\",\n                \"hd_fenwick\",\n                \"hd_goal\",\n                \"hd_miss\",\n                \"hd_shot\",\n                \"hit\",\n                \"miss\",\n                \"miss_adj\",\n                \"pen0\",\n                \"pen2\",\n                \"pen4\",\n                \"pen5\",\n                \"pen10\",\n                \"shot\",\n                \"shot_adj\",\n                \"fenwick\",\n                \"fenwick_adj\",\n                \"pred_goal\",\n                \"pred_goal_adj\",\n                \"ozf\",\n                \"nzf\",\n                \"dzf\",\n                \"event_length\",\n            ]\n\n        if \"change_on\" in player:\n            stats_list = [\"ozc\", \"nzc\", \"dzc\", \"otf\"]\n\n        stats_dict = {x: \"sum\" for x in stats_list if x in df.columns}\n\n        if \"event_on\" in player or \"change_on\" in player:\n            if level == \"session\" or level == \"season\":\n                group_list.append(\"event_team\")\n\n            strength_group = [\"strength_state\"]\n\n            teammates_group = [\n                \"forwards\",\n                \"forwards_eh_id\",\n                \"forwards_api_id\",\n                \"defense\",\n                \"defense_eh_id\",\n                \"defense_api_id\",\n                \"own_goalie\",\n                \"own_goalie_eh_id\",\n                \"own_goalie_api_id\",\n            ]\n\n            score_group = [\"score_state\"]\n\n            opposition_group = [\n                \"opp_forwards\",\n                \"opp_forwards_eh_id\",\n                \"opp_forwards_api_id\",\n                \"opp_defense\",\n                \"opp_defense_eh_id\",\n                \"opp_defense_api_id\",\n                \"opp_goalie\",\n                \"opp_goalie_eh_id\",\n                \"opp_goalie_api_id\",\n            ]\n\n            if \"opp_team\" not in group_list:\n                opposition_group.insert(0, \"opp_team\")\n\n            col_names = {\n                \"event_team\": \"team\",\n                player: \"player\",\n                player_eh_id: \"eh_id\",\n                player_api_id: \"api_id\",\n                position: \"position\",\n                \"goal\": \"gf\",\n                \"goal_adj\": \"gf_adj\",\n                \"hit\": \"hf\",\n                \"miss\": \"msf\",\n                \"miss_adj\": \"msf_adj\",\n                \"block\": \"bsa\",\n                \"block_adj\": \"bsa_adj\",\n                \"teammate_block\": \"bsf\",\n                \"teammate_block_adj\": \"bsf_adj\",\n                \"pen0\": \"pent0\",\n                \"pen2\": \"pent2\",\n                \"pen4\": \"pent4\",\n                \"pen5\": \"pent5\",\n                \"pen10\": \"pent10\",\n                \"fenwick\": \"ff\",\n                \"fenwick_adj\": \"ff_adj\",\n                \"pred_goal\": \"xgf\",\n                \"pred_goal_adj\": \"xgf_adj\",\n                \"fac\": \"fow\",\n                \"ozf\": \"ozfw\",\n                \"dzf\": \"dzfw\",\n                \"nzf\": \"nzfw\",\n                \"ozc\": \"ozs\",\n                \"nzc\": \"nzs\",\n                \"dzc\": \"dzs\",\n                \"shot\": \"sf\",\n                \"shot_adj\": \"sf_adj\",\n                \"hd_goal\": \"hdgf\",\n                \"hd_shot\": \"hdsf\",\n                \"hd_fenwick\": \"hdff\",\n                \"hd_miss\": \"hdmsf\",\n            }\n\n        if \"opp_on\" in player:\n            if level == \"session\" or level == \"season\":\n                group_list.append(\"opp_team\")\n\n            strength_group = [\"opp_strength_state\"]\n\n            teammates_group = [\n                \"opp_forwards\",\n                \"opp_forwards_eh_id\",\n                \"opp_forwards_api_id\",\n                \"opp_defense\",\n                \"opp_defense_eh_id\",\n                \"opp_defense_api_id\",\n                \"opp_goalie\",\n                \"opp_goalie_eh_id\",\n                \"opp_goalie_api_id\",\n            ]\n\n            score_group = [\"opp_score_state\"]\n\n            opposition_group = [\n                \"forwards\",\n                \"forwards_eh_id\",\n                \"forwards_api_id\",\n                \"defense\",\n                \"defense_eh_id\",\n                \"defense_api_id\",\n                \"own_goalie\",\n                \"own_goalie_eh_id\",\n                \"own_goalie_api_id\",\n            ]\n\n            if \"event_team\" not in group_list:\n                opposition_group.insert(0, \"event_team\")\n\n            col_names = {\n                \"opp_team\": \"team\",\n                \"event_team\": \"opp_team\",\n                \"opp_goalie\": \"own_goalie\",\n                \"own_goalie\": \"opp_goalie\",\n                \"opp_score_state\": \"score_state\",\n                \"opp_strength_state\": \"strength_state\",\n                player: \"player\",\n                player_eh_id: \"eh_id\",\n                player_api_id: \"api_id\",\n                position: \"position\",\n                \"block\": \"bsf\",\n                \"block_adj\": \"bsf_adj\",\n                \"goal\": \"ga\",\n                \"goal_adj\": \"ga_adj\",\n                \"hit\": \"ht\",\n                \"miss\": \"msa\",\n                \"miss_adj\": \"msa_adj\",\n                \"pen0\": \"pend0\",\n                \"pen2\": \"pend2\",\n                \"pen4\": \"pend4\",\n                \"pen5\": \"pend5\",\n                \"pen10\": \"pend10\",\n                \"shot\": \"sa\",\n                \"shot_adj\": \"sa_adj\",\n                \"fenwick\": \"fa\",\n                \"fenwick_adj\": \"fa_adj\",\n                \"pred_goal\": \"xga\",\n                \"pred_goal_adj\": \"xga_adj\",\n                \"fac\": \"fol\",\n                \"ozf\": \"dzfl\",\n                \"dzf\": \"ozfl\",\n                \"nzf\": \"nzfl\",\n                \"hd_goal\": \"hdga\",\n                \"hd_shot\": \"hdsa\",\n                \"hd_fenwick\": \"hdfa\",\n                \"hd_miss\": \"hdmsa\",\n                \"forwards\": \"opp_forwards\",\n                \"forwards_eh_id\": \"opp_forwards_eh_id\",\n                \"forwards_api_id\": \"opp_forwards_api_id\",\n                \"defense\": \"opp_defense\",\n                \"defense_eh_id\": \"opp_defense_eh_id\",\n                \"defense_api_id\": \"opp_defense_api_id\",\n                \"own_goalie_eh_id\": \"opp_goalie_eh_id\",\n                \"own_goalie_api_id\": \"opp_goalie_api_id\",\n                \"opp_forwards\": \"forwards\",\n                \"opp_forwards_eh_id\": \"forwards_eh_id\",\n                \"opp_forwards_api_id\": \"forwards_api_id\",\n                \"opp_defense\": \"defense\",\n                \"opp_defense_eh_id\": \"defense_eh_id\",\n                \"opp_defense_api_id\": \"defense_api_id\",\n                \"opp_goalie_eh_id\": \"own_goalie_eh_id\",\n                \"opp_goalie_api_id\": \"own_goalie_api_id\",\n            }\n\n        group_list = group_list + [player, player_eh_id, player_api_id, position] + strength_group\n\n        if teammates is True:\n            group_list = group_list + teammates_group\n\n        if score is True:\n            group_list = group_list + score_group\n\n        if opposition is True:\n            group_list = group_list + opposition_group\n\n        player_df = df.groupby(group_list, dropna=False, as_index=False).agg(stats_dict)\n\n        col_names = {key: value for key, value in col_names.items() if key in player_df.columns}\n\n        player_df = player_df.rename(columns=col_names)\n\n        if \"event_on\" in player:\n            event_list.append(player_df)\n\n        elif \"opp_on\" in player:\n            opp_list.append(player_df)\n\n        elif \"change_on\" in player:\n            zones_list.append(player_df)\n\n    # On-ice stats\n\n    merge_cols = [\n        \"season\",\n        \"session\",\n        \"game_id\",\n        \"game_date\",\n        \"team\",\n        \"opp_team\",\n        \"player\",\n        \"eh_id\",\n        \"api_id\",\n        \"position\",\n        \"period\",\n        \"strength_state\",\n        \"score_state\",\n        \"opp_goalie\",\n        \"opp_goalie_eh_id\",\n        \"opp_goalie_api_id\",\n        \"own_goalie\",\n        \"own_goalie_eh_id\",\n        \"own_goalie_api_id\",\n        \"forwards\",\n        \"forwards_eh_id\",\n        \"forwards_api_id\",\n        \"defense\",\n        \"defense_eh_id\",\n        \"defense_api_id\",\n        \"opp_forwards\",\n        \"opp_forwards_eh_id\",\n        \"opp_forwards_api_id\",\n        \"opp_defense\",\n        \"opp_defense_eh_id\",\n        \"opp_defense_api_id\",\n    ]\n\n    event_stats = pd.concat(event_list, ignore_index=True)\n\n    stats_dict = {x: \"sum\" for x in event_stats.columns if x not in merge_cols}\n\n    group_list = [x for x in merge_cols if x in event_stats.columns]\n\n    event_stats = event_stats.groupby(group_list, as_index=False).agg(stats_dict)\n\n    opp_stats = pd.concat(opp_list, ignore_index=True)\n\n    stats_dict = {x: \"sum\" for x in opp_stats.columns if x not in merge_cols}\n\n    group_list = [x for x in merge_cols if x in opp_stats.columns]\n\n    opp_stats = opp_stats.groupby(group_list, as_index=False).agg(stats_dict)\n\n    zones_stats = pd.concat(zones_list, ignore_index=True)\n\n    stats_dict = {x: \"sum\" for x in zones_stats.columns if x not in merge_cols}\n\n    group_list = [x for x in merge_cols if x in zones_stats.columns]\n\n    zones_stats = zones_stats.groupby(group_list, as_index=False).agg(stats_dict)\n\n    merge_cols = [\n        x for x in merge_cols if x in event_stats.columns and x in opp_stats.columns and x in zones_stats.columns\n    ]\n\n    oi_stats = event_stats.merge(opp_stats, on=merge_cols, how=\"outer\").fillna(0)\n\n    oi_stats = oi_stats.merge(zones_stats, on=merge_cols, how=\"outer\").fillna(0)\n\n    oi_stats[\"toi\"] = (oi_stats.event_length_x + oi_stats.event_length_y) / 60\n\n    oi_stats[\"bsf\"] = oi_stats.bsf_x + oi_stats.bsf_y\n    oi_stats[\"bsf_adj\"] = oi_stats.bsf_adj_x + oi_stats.bsf_adj_y\n\n    oi_stats[\"cf\"] = oi_stats.ff + oi_stats.bsf\n    oi_stats[\"cf_adj\"] = oi_stats.ff_adj + oi_stats.bsf_adj\n\n    oi_stats[\"ca\"] = oi_stats.fa + oi_stats.bsa + oi_stats.teammate_block\n    oi_stats[\"ca_adj\"] = oi_stats.fa_adj + oi_stats.bsa_adj + oi_stats.teammate_block_adj\n\n    fo_list = [\"ozf\", \"dzf\", \"nzf\"]\n\n    for fo in fo_list:\n        oi_stats[fo] = oi_stats[f\"{fo}w\"] + oi_stats[f\"{fo}l\"]\n\n    oi_stats[\"fac\"] = oi_stats.ozf + oi_stats.nzf + oi_stats.dzf\n\n    columns = [x for x in list(OIStatSchema.dtypes.keys()) if x in oi_stats.columns]\n\n    oi_stats = oi_stats[columns]\n\n    stats = [\n        \"toi\",\n        \"gf\",\n        \"gf_adj\",\n        \"hdgf\",\n        \"sf\",\n        \"sf_adj\",\n        \"hdsf\",\n        \"ff\",\n        \"ff_adj\",\n        \"hdff\",\n        \"cf\",\n        \"cf_adj\",\n        \"xgf\",\n        \"xgf_adj\",\n        \"bsf\",\n        \"msf\",\n        \"hdmsf\",\n        \"ga\",\n        \"ga_adj\",\n        \"hdga\",\n        \"sa\",\n        \"sa_adj\",\n        \"hdsa\",\n        \"fa\",\n        \"fa_adj\",\n        \"hdfa\",\n        \"ca\",\n        \"ca_adj\",\n        \"xga\",\n        \"xga_adj\",\n        \"bsa\",\n        \"msa\",\n        \"hdmsa\",\n        \"hf\",\n        \"ht\",\n        \"ozf\",\n        \"nzf\",\n        \"dzf\",\n        \"fow\",\n        \"fol\",\n        \"ozfw\",\n        \"ozfl\",\n        \"nzfw\",\n        \"nzfl\",\n        \"dzfw\",\n        \"dzfl\",\n        \"pent0\",\n        \"pent2\",\n        \"pent4\",\n        \"pent5\",\n        \"pent10\",\n        \"pend0\",\n        \"pend2\",\n        \"pend4\",\n        \"pend5\",\n        \"pend10\",\n    ]\n\n    stats = [x.lower() for x in stats if x.lower() in oi_stats.columns]\n\n    oi_stats = oi_stats.loc[(oi_stats[stats] != 0).any(axis=1)]\n\n    oi_stats = OIStatSchema.validate(oi_stats)\n\n    self._oi_stats = oi_stats\n</code></pre>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Scraper._prep_stats","title":"_prep_stats","text":"<pre><code>_prep_stats(\n    level=\"game\",\n    score=False,\n    teammates=False,\n    opposition=False,\n)\n</code></pre> <p>Prepares DataFrame of individual and on-ice stats from play-by-play data.</p> <p>Nested within <code>prep_stats</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>str</code> <p>Determines the level of aggregation. One of season, session, game, period</p> <code>'game'</code> <code>score</code> <code>bool</code> <p>Determines if stats account for score state</p> <code>False</code> <code>teammates</code> <code>bool</code> <p>Determines if stats account for teammates on ice</p> <code>False</code> <code>opposition</code> <code>bool</code> <p>Determines if stats account for opponents on ice</p> <code>False</code> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 2023 for 2023-24 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2023020001</p> <code>game_date</code> <code>int</code> <p>Date game was played, e.g., 2023-10-10</p> <code>player</code> <code>str</code> <p>Player's name, e.g., FILIP FORSBERG</p> <code>eh_id</code> <code>str</code> <p>Evolving Hockey ID for the player, e.g., FILIP.FORSBERG</p> <code>api_id</code> <code>str</code> <p>NHL API ID for the player, e.g., 8476887</p> <code>position</code> <code>str</code> <p>Player's position, e.g., L</p> <code>team</code> <code>str</code> <p>Player's team, e.g., NSH</p> <code>opp_team</code> <code>str</code> <p>Opposing team, e.g., TBL</p> <code>strength_state</code> <code>str</code> <p>Strength state, e.g., 5v5</p> <code>period</code> <code>int</code> <p>Period, e.g., 3</p> <code>score_state</code> <code>str</code> <p>Score state, e.g., 2v1</p> <code>forwards</code> <code>str</code> <p>Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY</p> <code>forwards_eh_id</code> <code>str</code> <p>Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY</p> <code>forwards_api_id</code> <code>str</code> <p>Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158</p> <code>defense</code> <code>str</code> <p>Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER</p> <code>defense_eh_id</code> <code>str</code> <p>Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER</p> <code>defense_api_id</code> <code>str</code> <p>Defense teammates' NHL API IDs, e.g., 8474151, 8478851</p> <code>own_goalie</code> <code>str</code> <p>Own goalie, e.g., JUUSE SAROS</p> <code>own_goalie_eh_id</code> <code>str</code> <p>Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS</p> <code>own_goalie_api_id</code> <code>str</code> <p>Own goalie's NHL API ID, e.g., 8477424</p> <code>opp_forwards</code> <code>str</code> <p>Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS</p> <code>opp_forwards_eh_id</code> <code>str</code> <p>Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS</p> <code>opp_forwards_api_id</code> <code>str</code> <p>Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564</p> <code>opp_defense</code> <code>str</code> <p>Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN</p> <code>opp_defense_eh_id</code> <code>str</code> <p>Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN</p> <code>opp_defense_api_id</code> <code>str</code> <p>Opposing defense's NHL API IDs, e.g., 8480246, 8475167</p> <code>opp_goalie</code> <code>str</code> <p>Opposing goalie, e.g., JONAS JOHANSSON</p> <code>opp_goalie_eh_id</code> <code>str</code> <p>Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON</p> <code>opp_goalie_api_id</code> <code>str</code> <p>Opposing goalie's NHL API ID, e.g., 8477992</p> <code>toi</code> <code>float</code> <p>Time on-ice, in minutes, e.g, 0.483333</p> <code>g</code> <code>int</code> <p>Goals scored, e.g, 0</p> <code>ihdg</code> <code>int</code> <p>High-danger goals scored, e.g, 0</p> <code>a1</code> <code>int</code> <p>Primary assists, e.g, 0</p> <code>a2</code> <code>int</code> <p>Secondary assists, e.g, 0</p> <code>ixg</code> <code>float</code> <p>Individual xG for, e.g, 1.014336</p> <code>isf</code> <code>int</code> <p>Individual shots taken, e.g, 3</p> <code>ihdsf</code> <code>int</code> <p>High-danger shots taken, e.g, 3</p> <code>imsf</code> <code>int</code> <p>Individual missed shots, e.g, 0</p> <code>ihdm</code> <code>int</code> <p>High-danger missed shots, e.g, 0</p> <code>iff</code> <code>int</code> <p>Individual fenwick for, e.g., 3</p> <code>ihdf</code> <code>int</code> <p>High-danger fenwick for, e.g., 3</p> <code>isb</code> <code>int</code> <p>Shots taken that were blocked, e.g, 0</p> <code>icf</code> <code>int</code> <p>Individual corsi for, e.g., 3</p> <code>ibs</code> <code>int</code> <p>Individual shots blocked on defense, e.g, 0</p> <code>igive</code> <code>int</code> <p>Individual giveaways, e.g, 0</p> <code>itake</code> <code>int</code> <p>Individual takeaways, e.g, 0</p> <code>ihf</code> <code>int</code> <p>Individual hits for, e.g, 0</p> <code>iht</code> <code>int</code> <p>Individual hits taken, e.g, 0</p> <code>ifow</code> <code>int</code> <p>Individual faceoffs won, e.g, 0</p> <code>ifol</code> <code>int</code> <p>Individual faceoffs lost, e.g, 0</p> <code>iozfw</code> <code>int</code> <p>Individual faceoffs won in offensive zone, e.g, 0</p> <code>iozfl</code> <code>int</code> <p>Individual faceoffs lost in offensive zone, e.g, 0</p> <code>inzfw</code> <code>int</code> <p>Individual faceoffs won in neutral zone, e.g, 0</p> <code>inzfl</code> <code>int</code> <p>Individual faceoffs lost in neutral zone, e.g, 0</p> <code>idzfw</code> <code>int</code> <p>Individual faceoffs won in defensive zone, e.g, 0</p> <code>idzfl</code> <code>int</code> <p>Individual faceoffs lost in defensive zone, e.g, 0</p> <code>a1_xg</code> <code>float</code> <p>xG on primary assists, e.g, 0</p> <code>a2_xg</code> <code>float</code> <p>xG on secondary assists, e.g, 0</p> <code>ipent0</code> <code>int</code> <p>Individual penalty shots against, e.g, 0</p> <code>ipent2</code> <code>int</code> <p>Individual minor penalties taken, e.g, 0</p> <code>ipent4</code> <code>int</code> <p>Individual double minor penalties taken, e.g, 0</p> <code>ipent5</code> <code>int</code> <p>Individual major penalties taken, e.g, 0</p> <code>ipent10</code> <code>int</code> <p>Individual game misconduct penalties taken, e.g, 0</p> <code>ipend0</code> <code>int</code> <p>Individual penalty shots drawn, e.g, 0</p> <code>ipend2</code> <code>int</code> <p>Individual minor penalties taken, e.g, 0</p> <code>ipend4</code> <code>int</code> <p>Individual double minor penalties drawn, e.g, 0</p> <code>ipend5</code> <code>int</code> <p>Individual major penalties drawn, e.g, 0</p> <code>ipend10</code> <code>int</code> <p>Individual game misconduct penalties drawn, e.g, 0</p> <code>gf</code> <code>int</code> <p>Goals for (on-ice), e.g, 0</p> <code>hdgf</code> <code>int</code> <p>High-danger goals for (on-ice), e.g, 0</p> <code>ga</code> <code>int</code> <p>Goals against (on-ice), e.g, 0</p> <code>hdga</code> <code>int</code> <p>High-danger goals against (on-ice), e.g, 0</p> <code>xgf</code> <code>float</code> <p>xG for (on-ice), e.g., 1.258332</p> <code>xga</code> <code>float</code> <p>xG against (on-ice), e.g, 0.000000</p> <code>sf</code> <code>int</code> <p>Shots for (on-ice), e.g, 4</p> <code>sa</code> <code>int</code> <p>Shots against (on-ice), e.g, 0</p> <code>hdsf</code> <code>int</code> <p>High-danger shots for (on-ice), e.g, 3</p> <code>hdsa</code> <code>int</code> <p>High-danger shots against (on-ice), e.g, 0</p> <code>ff</code> <code>int</code> <p>Fenwick for (on-ice), e.g, 4</p> <code>fa</code> <code>int</code> <p>Fenwick against (on-ice), e.g, 0</p> <code>hdff</code> <code>int</code> <p>High-danger fenwick for (on-ice), e.g, 3</p> <code>hdfa</code> <code>int</code> <p>High-danger fenwick against (on-ice), e.g, 0</p> <code>cf</code> <code>int</code> <p>Corsi for (on-ice), e.g, 4</p> <code>ca</code> <code>int</code> <p>Corsi against (on-ice), e.g, 0</p> <code>bsf</code> <code>int</code> <p>Shots taken that were blocked (on-ice), e.g, 0</p> <code>bsa</code> <code>int</code> <p>Shots blocked (on-ice), e.g, 0</p> <code>msf</code> <code>int</code> <p>Missed shots taken (on-ice), e.g, 0</p> <code>msa</code> <code>int</code> <p>Missed shots against (on-ice), e.g, 0</p> <code>hdmsf</code> <code>int</code> <p>High-danger missed shots taken (on-ice), e.g, 0</p> <code>hdmsa</code> <code>int</code> <p>High-danger missed shots against (on-ice), e.g, 0</p> <code>teammate_block</code> <code>int</code> <p>Shots blocked by teammates (on-ice), e.g, 0</p> <code>hf</code> <code>int</code> <p>Hits for (on-ice), e.g, 0</p> <code>ht</code> <code>int</code> <p>Hits taken (on-ice), e.g, 0</p> <code>give</code> <code>int</code> <p>Giveaways (on-ice), e.g, 0</p> <code>take</code> <code>int</code> <p>Takeaways (on-ice), e.g, 0</p> <code>ozf</code> <code>int</code> <p>Offensive zone faceoffs (on-ice), e.g, 0</p> <code>nzf</code> <code>int</code> <p>Neutral zone faceoffs (on-ice), e.g, 1</p> <code>dzf</code> <code>int</code> <p>Defensive zone faceoffs (on-ice), e.g, 0</p> <code>fow</code> <code>int</code> <p>Faceoffs won (on-ice), e.g, 1</p> <code>fol</code> <code>int</code> <p>Faceoffs lost (on-ice), e.g, 0</p> <code>ozfw</code> <code>int</code> <p>Offensive zone faceoffs won (on-ice), e.g, 0</p> <code>ozfl</code> <code>int</code> <p>Offensive zone faceoffs lost (on-ice), e.g, 0</p> <code>nzfw</code> <code>int</code> <p>Neutral zone faceoffs won (on-ice), e.g, 1</p> <code>nzfl</code> <code>int</code> <p>Neutral zone faceoffs lost (on-ice), e.g, 0</p> <code>dzfw</code> <code>int</code> <p>Defensive zone faceoffs won (on-ice), e.g, 0</p> <code>dzfl</code> <code>int</code> <p>Defensive zone faceoffs lost (on-ice), e.g, 0</p> <code>pent0</code> <code>int</code> <p>Penalty shots allowed (on-ice), e.g, 0</p> <code>pent2</code> <code>int</code> <p>Minor penalties taken (on-ice), e.g, 0</p> <code>pent4</code> <code>int</code> <p>Double minor penalties taken (on-ice), e.g, 0</p> <code>pent5</code> <code>int</code> <p>Major penalties taken (on-ice), e.g, 0</p> <code>pent10</code> <code>int</code> <p>Game misconduct penalties taken (on-ice), e.g, 0</p> <code>pend0</code> <code>int</code> <p>Penalty shots drawn (on-ice), e.g, 0</p> <code>pend2</code> <code>int</code> <p>Minor penalties drawn (on-ice), e.g, 0</p> <code>pend4</code> <code>int</code> <p>Double minor penalties drawn (on-ice), e.g, 0</p> <code>pend5</code> <code>int</code> <p>Major penalties drawn (on-ice), e.g, 0</p> <code>pend10</code> <code>int</code> <p>Game misconduct penalties drawn (on-ice), e.g, 0</p> <code>ozs</code> <code>int</code> <p>Offensive zone starts, e.g, 0</p> <code>nzs</code> <code>int</code> <p>Neutral zone starts, e.g, 0</p> <code>dzs</code> <code>int</code> <p>Defenzive zone starts, e.g, 0</p> <code>otf</code> <code>int</code> <p>On-the-fly starts, e.g, 0</p> <code>g_p60</code> <code>float</code> <p>Goals scored per 60 minutes</p> <code>ihdg_p60</code> <code>float</code> <p>Individual high-danger goals scored per 60</p> <code>a1_p60</code> <code>float</code> <p>Primary assists per 60 minutes</p> <code>a2_p60</code> <code>float</code> <p>Secondary per 60 minutes</p> <code>ixg_p60</code> <code>float</code> <p>Individual xG for per 60 minutes</p> <code>isf_p60</code> <code>float</code> <p>Individual shots for per 60 minutes</p> <code>ihdsf_p60</code> <code>float</code> <p>Individual high-danger shots for per 60 minutes</p> <code>imsf_p60</code> <code>float</code> <p>Individual missed shorts for per 60 minutes</p> <code>ihdm_p60</code> <code>float</code> <p>Individual high-danger missed shots for per 60 minutes</p> <code>iff_p60</code> <code>float</code> <p>Individual fenwick for per 60 minutes</p> <code>ihdff_p60</code> <code>float</code> <p>Individual high-danger fenwick for per 60 minutes</p> <code>isb_p60</code> <code>float</code> <p>Individual shots blocked (for) per 60 minutes</p> <code>icf_p60</code> <code>float</code> <p>Individual corsi for per 60 minutes</p> <code>ibs_p60</code> <code>float</code> <p>Individual blocked shots (against) per 60 minutes</p> <code>igive_p60</code> <code>float</code> <p>Individual giveaways per 60 minutes</p> <code>itake_p60</code> <code>float</code> <p>Individual takeaways per 60 minutes</p> <code>ihf_p60</code> <code>float</code> <p>Individual hits for per 60 minutes</p> <code>iht_p60</code> <code>float</code> <p>Individual hits taken per 60 minutes</p> <code>a1_xg_p60</code> <code>float</code> <p>Individual primary assists' xG per 60 minutes</p> <code>a2_xg_p60</code> <code>float</code> <p>Individual secondary assists' xG per 60 minutes</p> <code>ipent0_p60</code> <code>float</code> <p>Individual penalty shots taken per 60 minutes</p> <code>ipent2_p60</code> <code>float</code> <p>Individual minor penalties taken per 60 minutes</p> <code>ipent4_p60</code> <code>float</code> <p>Individual double minor penalties taken per 60 minutes</p> <code>ipent5_p60</code> <code>float</code> <p>Individual major penalties taken per 60 minutes</p> <code>ipent10_p60</code> <code>float</code> <p>Individual game misconduct pentalties taken per 60 minutes</p> <code>ipend0_p60</code> <code>float</code> <p>Individual penalty shots drawn per 60 minutes</p> <code>ipend2_p60</code> <code>float</code> <p>Individual minor penalties drawn per 60 minutes</p> <code>ipend4_p60</code> <code>float</code> <p>Individual double minor penalties drawn per 60 minutes</p> <code>ipend5_p60</code> <code>float</code> <p>Individual major penalties drawn per 60 minutes</p> <code>ipend10_p60</code> <code>float</code> <p>Individual game misconduct penalties drawn per 60 minutes</p> <code>gf_p60</code> <code>float</code> <p>Goals for (on-ice) per 60 minutes</p> <code>ga_p60</code> <code>float</code> <p>Goals against (on-ice) per 60 minutes</p> <code>hdgf_p60</code> <code>float</code> <p>High-danger goals for (on-ice) per 60 minutes</p> <code>hdga_p60</code> <code>float</code> <p>High-danger goals against (on-ice) per 60 minutes</p> <code>xgf_p60</code> <code>float</code> <p>xG for (on-ice) per 60 minutes</p> <code>xga_p60</code> <code>float</code> <p>xG against (on-ice) per 60 minutes</p> <code>sf_p60</code> <code>float</code> <p>Shots for (on-ice) per 60 minutes</p> <code>sa_p60</code> <code>float</code> <p>Shots against (on-ice) per 60 minutes</p> <code>hdsf_p60</code> <code>float</code> <p>High-danger shots for (on-ice) per 60 minutes</p> <code>hdsa_p60</code> <code>float</code> <p>High danger shots against (on-ice) per 60 minutes</p> <code>ff_p60</code> <code>float</code> <p>Fenwick for (on-ice) per 60 minutes</p> <code>fa_p60</code> <code>float</code> <p>Fenwick against (on-ice) per 60 minutes</p> <code>hdff_p60</code> <code>float</code> <p>High-danger fenwick for (on-ice) per 60 minutes</p> <code>hdfa_p60</code> <code>float</code> <p>High-danger fenwick against (on-ice) per 60 minutes</p> <code>cf_p60</code> <code>float</code> <p>Corsi for (on-ice) per 60 minutes</p> <code>ca_p60</code> <code>float</code> <p>Corsi against (on-ice) per 60 minutes</p> <code>bsf_p60</code> <code>float</code> <p>Blocked shots for (on-ice) per 60 minutes</p> <code>bsa_p60</code> <code>float</code> <p>Blocked shots against (on-ice) per 60 minutes</p> <code>msf_p60</code> <code>float</code> <p>Missed shots for (on-ice) per 60 minutes</p> <code>msa_p60</code> <code>float</code> <p>Missed shots against (on-ice) per 60 minutes</p> <code>hdmsf_p60</code> <code>float</code> <p>High-danger missed shots for (on-ice) per 60 minutes</p> <code>hdmsa_p60</code> <code>float</code> <p>High-danger missed shots against (on-ice) per 60 minutes</p> <code>teammate_block_p60</code> <code>float</code> <p>Shots blocked by teammates (on-ice) per 60 minutes</p> <code>hf_p60</code> <code>float</code> <p>Hits  for (on-ice) per 60 minutes</p> <code>ht_p60</code> <code>float</code> <p>Hits taken (on-ice) per 60 minutes</p> <code>give_p60</code> <code>float</code> <p>Giveaways (on-ice) per 60 minutes</p> <code>take_p60</code> <code>float</code> <p>Takeaways (on-ice) per 60 minutes</p> <code>pent0_p60</code> <code>float</code> <p>Penalty shots taken (on-ice) per 60 minutes</p> <code>pent2_p60</code> <code>float</code> <p>Minor penalties taken (on-ice) per 60 minutes</p> <code>pent4_p60</code> <code>float</code> <p>Double minor penalties taken (on-ice) per 60 minutes</p> <code>pent5_p60</code> <code>float</code> <p>Major penalties taken (on-ice) per 60 minutes</p> <code>pent10_p60</code> <code>float</code> <p>Game misconduct pentalties taken (on-ice) per 60 minutes</p> <code>pend0_p60</code> <code>float</code> <p>Penalty shots drawn (on-ice) per 60 minutes</p> <code>pend2_p60</code> <code>float</code> <p>Minor penalties drawn (on-ice) per 60 minutes</p> <code>pend4_p60</code> <code>float</code> <p>Double minor penalties drawn (on-ice) per 60 minutes</p> <code>pend5_p60</code> <code>float</code> <p>Major penalties drawn (on-ice) per 60 minutes</p> <code>pend10_p60</code> <code>float</code> <p>Game misconduct penalties drawn (on-ice) per 60 minutes</p> <code>gf_percent</code> <code>float</code> <p>On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)</p> <code>hdgf_percent</code> <code>float</code> <p>On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF / (HDGF + HDGA)</p> <code>xgf_percent</code> <code>float</code> <p>On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)</p> <code>sf_percent</code> <code>float</code> <p>On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)</p> <code>hdsf_percent</code> <code>float</code> <p>On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF / (HDSF + HDSA)</p> <code>ff_percent</code> <code>float</code> <p>On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)</p> <code>hdff_percent</code> <code>float</code> <p>On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF / (HDFF + HDFA)</p> <code>cf_percent</code> <code>float</code> <p>On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)</p> <code>bsf_percent</code> <code>float</code> <p>On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)</p> <code>msf_percent</code> <code>float</code> <p>On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)</p> <code>hdmsf_percent</code> <code>float</code> <p>On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e., HDMSF / (HDMSF + HDMSA)</p> <code>hf_percent</code> <code>float</code> <p>On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)</p> <code>take_percent</code> <code>float</code> <p>On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2023020001\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Prepares individual and on-ice dataframe with default options</p> <pre><code>&gt;&gt;&gt; scraper._prep_stats()\n</code></pre> <p>Individual and on-ice statistics, aggregated to season level</p> <pre><code>&gt;&gt;&gt; scraper._prep_stats(level=\"season\")\n</code></pre> <p>Individual and on-ice statistics, aggregated to game level, accounting for teammates</p> <pre><code>&gt;&gt;&gt; scraper._prep_stats(level=\"game\", teammates=True)\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _prep_stats(\n    self,\n    level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n    score: bool = False,\n    teammates: bool = False,\n    opposition: bool = False,\n) -&gt; None:\n    \"\"\"Prepares DataFrame of individual and on-ice stats from play-by-play data.\n\n    Nested within `prep_stats` method.\n\n    Parameters:\n        level (str):\n            Determines the level of aggregation. One of season, session, game, period\n        score (bool):\n            Determines if stats account for score state\n        teammates (bool):\n            Determines if stats account for teammates on ice\n        opposition (bool):\n            Determines if stats account for opponents on ice\n\n    Returns:\n        season (int):\n            Season as 8-digit number, e.g., 2023 for 2023-24 season\n        session (str):\n            Whether game is regular season, playoffs, or pre-season, e.g., R\n        game_id (int):\n            Unique game ID assigned by the NHL, e.g., 2023020001\n        game_date (int):\n            Date game was played, e.g., 2023-10-10\n        player (str):\n            Player's name, e.g., FILIP FORSBERG\n        eh_id (str):\n            Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n        api_id (str):\n            NHL API ID for the player, e.g., 8476887\n        position (str):\n            Player's position, e.g., L\n        team (str):\n            Player's team, e.g., NSH\n        opp_team (str):\n            Opposing team, e.g., TBL\n        strength_state (str):\n            Strength state, e.g., 5v5\n        period (int):\n            Period, e.g., 3\n        score_state (str):\n            Score state, e.g., 2v1\n        forwards (str):\n            Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY\n        forwards_eh_id (str):\n            Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n        forwards_api_id (str):\n            Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158\n        defense (str):\n            Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER\n        defense_eh_id (str):\n            Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER\n        defense_api_id (str):\n            Defense teammates' NHL API IDs, e.g., 8474151, 8478851\n        own_goalie (str):\n            Own goalie, e.g., JUUSE SAROS\n        own_goalie_eh_id (str):\n            Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS\n        own_goalie_api_id (str):\n            Own goalie's NHL API ID, e.g., 8477424\n        opp_forwards (str):\n            Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS\n        opp_forwards_eh_id (str):\n            Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS\n        opp_forwards_api_id (str):\n            Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564\n        opp_defense (str):\n            Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN\n        opp_defense_eh_id (str):\n            Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN\n        opp_defense_api_id (str):\n            Opposing defense's NHL API IDs, e.g., 8480246, 8475167\n        opp_goalie (str):\n            Opposing goalie, e.g., JONAS JOHANSSON\n        opp_goalie_eh_id (str):\n            Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON\n        opp_goalie_api_id (str):\n            Opposing goalie's NHL API ID, e.g., 8477992\n        toi (float):\n            Time on-ice, in minutes, e.g, 0.483333\n        g (int):\n            Goals scored, e.g, 0\n        ihdg (int):\n            High-danger goals scored, e.g, 0\n        a1 (int):\n            Primary assists, e.g, 0\n        a2 (int):\n            Secondary assists, e.g, 0\n        ixg (float):\n            Individual xG for, e.g, 1.014336\n        isf (int):\n            Individual shots taken, e.g, 3\n        ihdsf (int):\n            High-danger shots taken, e.g, 3\n        imsf (int):\n            Individual missed shots, e.g, 0\n        ihdm (int):\n            High-danger missed shots, e.g, 0\n        iff (int):\n            Individual fenwick for, e.g., 3\n        ihdf (int):\n            High-danger fenwick for, e.g., 3\n        isb (int):\n            Shots taken that were blocked, e.g, 0\n        icf (int):\n            Individual corsi for, e.g., 3\n        ibs (int):\n            Individual shots blocked on defense, e.g, 0\n        igive (int):\n            Individual giveaways, e.g, 0\n        itake (int):\n            Individual takeaways, e.g, 0\n        ihf (int):\n            Individual hits for, e.g, 0\n        iht (int):\n            Individual hits taken, e.g, 0\n        ifow (int):\n            Individual faceoffs won, e.g, 0\n        ifol (int):\n            Individual faceoffs lost, e.g, 0\n        iozfw (int):\n            Individual faceoffs won in offensive zone, e.g, 0\n        iozfl (int):\n            Individual faceoffs lost in offensive zone, e.g, 0\n        inzfw (int):\n            Individual faceoffs won in neutral zone, e.g, 0\n        inzfl (int):\n            Individual faceoffs lost in neutral zone, e.g, 0\n        idzfw (int):\n            Individual faceoffs won in defensive zone, e.g, 0\n        idzfl (int):\n            Individual faceoffs lost in defensive zone, e.g, 0\n        a1_xg (float):\n            xG on primary assists, e.g, 0\n        a2_xg (float):\n            xG on secondary assists, e.g, 0\n        ipent0 (int):\n            Individual penalty shots against, e.g, 0\n        ipent2 (int):\n            Individual minor penalties taken, e.g, 0\n        ipent4 (int):\n            Individual double minor penalties taken, e.g, 0\n        ipent5 (int):\n            Individual major penalties taken, e.g, 0\n        ipent10 (int):\n            Individual game misconduct penalties taken, e.g, 0\n        ipend0 (int):\n            Individual penalty shots drawn, e.g, 0\n        ipend2 (int):\n            Individual minor penalties taken, e.g, 0\n        ipend4 (int):\n            Individual double minor penalties drawn, e.g, 0\n        ipend5 (int):\n            Individual major penalties drawn, e.g, 0\n        ipend10 (int):\n            Individual game misconduct penalties drawn, e.g, 0\n        gf (int):\n            Goals for (on-ice), e.g, 0\n        hdgf (int):\n            High-danger goals for (on-ice), e.g, 0\n        ga (int):\n            Goals against (on-ice), e.g, 0\n        hdga (int):\n            High-danger goals against (on-ice), e.g, 0\n        xgf (float):\n            xG for (on-ice), e.g., 1.258332\n        xga (float):\n            xG against (on-ice), e.g, 0.000000\n        sf (int):\n            Shots for (on-ice), e.g, 4\n        sa (int):\n            Shots against (on-ice), e.g, 0\n        hdsf (int):\n            High-danger shots for (on-ice), e.g, 3\n        hdsa (int):\n            High-danger shots against (on-ice), e.g, 0\n        ff (int):\n            Fenwick for (on-ice), e.g, 4\n        fa (int):\n            Fenwick against (on-ice), e.g, 0\n        hdff (int):\n            High-danger fenwick for (on-ice), e.g, 3\n        hdfa (int):\n            High-danger fenwick against (on-ice), e.g, 0\n        cf (int):\n            Corsi for (on-ice), e.g, 4\n        ca (int):\n            Corsi against (on-ice), e.g, 0\n        bsf (int):\n            Shots taken that were blocked (on-ice), e.g, 0\n        bsa (int):\n            Shots blocked (on-ice), e.g, 0\n        msf (int):\n            Missed shots taken (on-ice), e.g, 0\n        msa (int):\n            Missed shots against (on-ice), e.g, 0\n        hdmsf (int):\n            High-danger missed shots taken (on-ice), e.g, 0\n        hdmsa (int):\n            High-danger missed shots against (on-ice), e.g, 0\n        teammate_block (int):\n            Shots blocked by teammates (on-ice), e.g, 0\n        hf (int):\n            Hits for (on-ice), e.g, 0\n        ht (int):\n            Hits taken (on-ice), e.g, 0\n        give (int):\n            Giveaways (on-ice), e.g, 0\n        take (int):\n            Takeaways (on-ice), e.g, 0\n        ozf (int):\n            Offensive zone faceoffs (on-ice), e.g, 0\n        nzf (int):\n            Neutral zone faceoffs (on-ice), e.g, 1\n        dzf (int):\n            Defensive zone faceoffs (on-ice), e.g, 0\n        fow (int):\n            Faceoffs won (on-ice), e.g, 1\n        fol (int):\n            Faceoffs lost (on-ice), e.g, 0\n        ozfw (int):\n            Offensive zone faceoffs won (on-ice), e.g, 0\n        ozfl (int):\n            Offensive zone faceoffs lost (on-ice), e.g, 0\n        nzfw (int):\n            Neutral zone faceoffs won (on-ice), e.g, 1\n        nzfl (int):\n            Neutral zone faceoffs lost (on-ice), e.g, 0\n        dzfw (int):\n            Defensive zone faceoffs won (on-ice), e.g, 0\n        dzfl (int):\n            Defensive zone faceoffs lost (on-ice), e.g, 0\n        pent0 (int):\n            Penalty shots allowed (on-ice), e.g, 0\n        pent2 (int):\n            Minor penalties taken (on-ice), e.g, 0\n        pent4 (int):\n            Double minor penalties taken (on-ice), e.g, 0\n        pent5 (int):\n            Major penalties taken (on-ice), e.g, 0\n        pent10 (int):\n            Game misconduct penalties taken (on-ice), e.g, 0\n        pend0 (int):\n            Penalty shots drawn (on-ice), e.g, 0\n        pend2 (int):\n            Minor penalties drawn (on-ice), e.g, 0\n        pend4 (int):\n            Double minor penalties drawn (on-ice), e.g, 0\n        pend5 (int):\n            Major penalties drawn (on-ice), e.g, 0\n        pend10 (int):\n            Game misconduct penalties drawn (on-ice), e.g, 0\n        ozs (int):\n            Offensive zone starts, e.g, 0\n        nzs (int):\n            Neutral zone starts, e.g, 0\n        dzs (int):\n            Defenzive zone starts, e.g, 0\n        otf (int):\n            On-the-fly starts, e.g, 0\n        g_p60 (float):\n            Goals scored per 60 minutes\n        ihdg_p60 (float):\n            Individual high-danger goals scored per 60\n        a1_p60 (float):\n            Primary assists per 60 minutes\n        a2_p60 (float):\n            Secondary per 60 minutes\n        ixg_p60 (float):\n            Individual xG for per 60 minutes\n        isf_p60 (float):\n            Individual shots for per 60 minutes\n        ihdsf_p60 (float):\n            Individual high-danger shots for per 60 minutes\n        imsf_p60 (float):\n            Individual missed shorts for per 60 minutes\n        ihdm_p60 (float):\n            Individual high-danger missed shots for per 60 minutes\n        iff_p60 (float):\n            Individual fenwick for per 60 minutes\n        ihdff_p60 (float):\n            Individual high-danger fenwick for per 60 minutes\n        isb_p60 (float):\n            Individual shots blocked (for) per 60 minutes\n        icf_p60 (float):\n            Individual corsi for per 60 minutes\n        ibs_p60 (float):\n            Individual blocked shots (against) per 60 minutes\n        igive_p60 (float):\n            Individual giveaways per 60 minutes\n        itake_p60 (float):\n            Individual takeaways per 60 minutes\n        ihf_p60 (float):\n            Individual hits for per 60 minutes\n        iht_p60 (float):\n            Individual hits taken per 60 minutes\n        a1_xg_p60 (float):\n            Individual primary assists' xG per 60 minutes\n        a2_xg_p60 (float):\n            Individual secondary assists' xG per 60 minutes\n        ipent0_p60 (float):\n            Individual penalty shots taken per 60 minutes\n        ipent2_p60 (float):\n            Individual minor penalties taken per 60 minutes\n        ipent4_p60 (float):\n            Individual double minor penalties taken per 60 minutes\n        ipent5_p60 (float):\n            Individual major penalties taken per 60 minutes\n        ipent10_p60 (float):\n            Individual game misconduct pentalties taken per 60 minutes\n        ipend0_p60 (float):\n            Individual penalty shots drawn per 60 minutes\n        ipend2_p60 (float):\n            Individual minor penalties drawn per 60 minutes\n        ipend4_p60 (float):\n            Individual double minor penalties drawn per 60 minutes\n        ipend5_p60 (float):\n            Individual major penalties drawn per 60 minutes\n        ipend10_p60 (float):\n            Individual game misconduct penalties drawn per 60 minutes\n        gf_p60 (float):\n            Goals for (on-ice) per 60 minutes\n        ga_p60 (float):\n            Goals against (on-ice) per 60 minutes\n        hdgf_p60 (float):\n            High-danger goals for (on-ice) per 60 minutes\n        hdga_p60 (float):\n            High-danger goals against (on-ice) per 60 minutes\n        xgf_p60 (float):\n            xG for (on-ice) per 60 minutes\n        xga_p60 (float):\n            xG against (on-ice) per 60 minutes\n        sf_p60 (float):\n            Shots for (on-ice) per 60 minutes\n        sa_p60 (float):\n            Shots against (on-ice) per 60 minutes\n        hdsf_p60 (float):\n            High-danger shots for (on-ice) per 60 minutes\n        hdsa_p60 (float):\n            High danger shots against (on-ice) per 60 minutes\n        ff_p60 (float):\n            Fenwick for (on-ice) per 60 minutes\n        fa_p60 (float):\n            Fenwick against (on-ice) per 60 minutes\n        hdff_p60 (float):\n            High-danger fenwick for (on-ice) per 60 minutes\n        hdfa_p60 (float):\n            High-danger fenwick against (on-ice) per 60 minutes\n        cf_p60 (float):\n            Corsi for (on-ice) per 60 minutes\n        ca_p60 (float):\n            Corsi against (on-ice) per 60 minutes\n        bsf_p60 (float):\n            Blocked shots for (on-ice) per 60 minutes\n        bsa_p60 (float):\n            Blocked shots against (on-ice) per 60 minutes\n        msf_p60 (float):\n            Missed shots for (on-ice) per 60 minutes\n        msa_p60 (float):\n            Missed shots against (on-ice) per 60 minutes\n        hdmsf_p60 (float):\n            High-danger missed shots for (on-ice) per 60 minutes\n        hdmsa_p60 (float):\n            High-danger missed shots against (on-ice) per 60 minutes\n        teammate_block_p60 (float):\n            Shots blocked by teammates (on-ice) per 60 minutes\n        hf_p60 (float):\n            Hits  for (on-ice) per 60 minutes\n        ht_p60 (float):\n            Hits taken (on-ice) per 60 minutes\n        give_p60 (float):\n            Giveaways (on-ice) per 60 minutes\n        take_p60 (float):\n            Takeaways (on-ice) per 60 minutes\n        pent0_p60 (float):\n            Penalty shots taken (on-ice) per 60 minutes\n        pent2_p60 (float):\n            Minor penalties taken (on-ice) per 60 minutes\n        pent4_p60 (float):\n            Double minor penalties taken (on-ice) per 60 minutes\n        pent5_p60 (float):\n            Major penalties taken (on-ice) per 60 minutes\n        pent10_p60 (float):\n            Game misconduct pentalties taken (on-ice) per 60 minutes\n        pend0_p60 (float):\n            Penalty shots drawn (on-ice) per 60 minutes\n        pend2_p60 (float):\n            Minor penalties drawn (on-ice) per 60 minutes\n        pend4_p60 (float):\n            Double minor penalties drawn (on-ice) per 60 minutes\n        pend5_p60 (float):\n            Major penalties drawn (on-ice) per 60 minutes\n        pend10_p60 (float):\n            Game misconduct penalties drawn (on-ice) per 60 minutes\n        gf_percent (float):\n            On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)\n        hdgf_percent (float):\n            On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF /\n            (HDGF + HDGA)\n        xgf_percent (float):\n            On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)\n        sf_percent (float):\n            On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)\n        hdsf_percent (float):\n            On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF /\n            (HDSF + HDSA)\n        ff_percent (float):\n            On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)\n        hdff_percent (float):\n            On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF /\n            (HDFF + HDFA)\n        cf_percent (float):\n            On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)\n        bsf_percent (float):\n            On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)\n        msf_percent (float):\n            On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)\n        hdmsf_percent (float):\n            On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e.,\n            HDMSF / (HDMSF + HDMSA)\n        hf_percent (float):\n            On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)\n        take_percent (float):\n            On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)\n\n    Examples:\n        First, instantiate the class with a game ID\n        &gt;&gt;&gt; game_id = 2023020001\n        &gt;&gt;&gt; scraper = Scraper(game_id)\n\n        Prepares individual and on-ice dataframe with default options\n        &gt;&gt;&gt; scraper._prep_stats()\n\n        Individual and on-ice statistics, aggregated to season level\n        &gt;&gt;&gt; scraper._prep_stats(level=\"season\")\n\n        Individual and on-ice statistics, aggregated to game level, accounting for teammates\n        &gt;&gt;&gt; scraper._prep_stats(level=\"game\", teammates=True)\n\n    \"\"\"\n    if self._ind_stats.empty:\n        self._prep_ind(level=level, score=score, teammates=teammates, opposition=opposition)\n\n    if self._oi_stats.empty:\n        self._prep_oi(level=level, score=score, teammates=teammates, opposition=opposition)\n\n    merge_cols = [\n        \"season\",\n        \"session\",\n        \"game_id\",\n        \"game_date\",\n        \"player\",\n        \"eh_id\",\n        \"api_id\",\n        \"position\",\n        \"team\",\n        \"opp_team\",\n        \"strength_state\",\n        \"score_state\",\n        \"period\",\n        \"forwards\",\n        \"forwards_eh_id\",\n        \"forwards_api_id\",\n        \"defense\",\n        \"defense_eh_id\",\n        \"defense_api_id\",\n        \"own_goalie\",\n        \"own_goalie_eh_id\",\n        \"own_goalie_api_id\",\n        \"opp_forwards\",\n        \"opp_forwards_eh_id\",\n        \"opp_forwards_api_id\",\n        \"opp_defense\",\n        \"opp_defense_eh_id\",\n        \"opp_defense_api_id\",\n        \"opp_goalie\",\n        \"opp_goalie_eh_id\",\n        \"opp_goalie_api_id\",\n    ]\n\n    merge_cols = [\n        x\n        for x in merge_cols\n        if x in self._ind_stats.columns and x in self._oi_stats.columns\n        # and x in self._zones.columns\n    ]\n\n    stats = self._oi_stats.merge(self._ind_stats, how=\"left\", left_on=merge_cols, right_on=merge_cols).fillna(0)\n\n    stats = stats.loc[stats.toi &gt; 0].reset_index(drop=True).copy()\n\n    columns = [x for x in list(StatSchema.dtypes.keys()) if x in stats.columns]\n\n    stats = stats[columns]\n\n    stats = prep_p60(stats)\n\n    stats = prep_oi_percent(stats)\n\n    stats = StatSchema.validate(stats)\n\n    self._stats = stats\n</code></pre>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Scraper._prep_lines","title":"_prep_lines","text":"<pre><code>_prep_lines(\n    position=\"f\",\n    level=\"game\",\n    score=False,\n    teammates=False,\n    opposition=False,\n)\n</code></pre> <p>Prepares DataFrame of line-level stats from play-by-play data.</p> <p>Nested within <code>prep_lines</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>Determines what positions to aggregate. One of F or D</p> <code>'f'</code> <code>level</code> <code>str</code> <p>Determines the level of aggregation. One of season, session, game, period</p> <code>'game'</code> <code>score</code> <code>bool</code> <p>Determines if stats account for score state</p> <code>False</code> <code>teammates</code> <code>bool</code> <p>Determines if stats account for teammates on ice</p> <code>False</code> <code>opposition</code> <code>bool</code> <p>Determines if stats account for opponents on ice</p> <code>False</code> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 2023 for 2023-24 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2023020001</p> <code>game_date</code> <code>int</code> <p>Date game was played, e.g., 2023-10-10</p> <code>team</code> <code>str</code> <p>Player's team, e.g., NSH</p> <code>opp_team</code> <code>str</code> <p>Opposing team, e.g., TBL</p> <code>strength_state</code> <code>str</code> <p>Strength state, e.g., 5v5</p> <code>period</code> <code>int</code> <p>Period, e.g., 3</p> <code>score_state</code> <code>str</code> <p>Score state, e.g., 2v1</p> <code>forwards</code> <code>str</code> <p>Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY</p> <code>forwards_eh_id</code> <code>str</code> <p>Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY</p> <code>forwards_api_id</code> <code>str</code> <p>Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158</p> <code>defense</code> <code>str</code> <p>Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER</p> <code>defense_eh_id</code> <code>str</code> <p>Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER</p> <code>defense_api_id</code> <code>str</code> <p>Defense teammates' NHL API IDs, e.g., 8474151, 8478851</p> <code>own_goalie</code> <code>str</code> <p>Own goalie, e.g., JUUSE SAROS</p> <code>own_goalie_eh_id</code> <code>str</code> <p>Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS</p> <code>own_goalie_api_id</code> <code>str</code> <p>Own goalie's NHL API ID, e.g., 8477424</p> <code>opp_forwards</code> <code>str</code> <p>Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS</p> <code>opp_forwards_eh_id</code> <code>str</code> <p>Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS</p> <code>opp_forwards_api_id</code> <code>str</code> <p>Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564</p> <code>opp_defense</code> <code>str</code> <p>Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN</p> <code>opp_defense_eh_id</code> <code>str</code> <p>Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN</p> <code>opp_defense_api_id</code> <code>str</code> <p>Opposing defense's NHL API IDs, e.g., 8480246, 8475167</p> <code>opp_goalie</code> <code>str</code> <p>Opposing goalie, e.g., JONAS JOHANSSON</p> <code>opp_goalie_eh_id</code> <code>str</code> <p>Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON</p> <code>opp_goalie_api_id</code> <code>str</code> <p>Opposing goalie's NHL API ID, e.g., 8477992</p> <code>toi</code> <code>float</code> <p>Time on-ice, in minutes, e.g, 0.483333</p> <code>gf</code> <code>int</code> <p>Goals for (on-ice), e.g, 0</p> <code>ga</code> <code>int</code> <p>Goals against (on-ice), e.g, 0</p> <code>hdgf</code> <code>int</code> <p>High-danger goals for (on-ice), e.g, 0</p> <code>hdga</code> <code>int</code> <p>High-danger goals against (on-ice), e.g, 0</p> <code>xgf</code> <code>float</code> <p>xG for (on-ice), e.g., 1.258332</p> <code>xga</code> <code>float</code> <p>xG against (on-ice), e.g, 0.000000</p> <code>sf</code> <code>int</code> <p>Shots for (on-ice), e.g, 4</p> <code>sa</code> <code>int</code> <p>Shots against (on-ice), e.g, 0</p> <code>hdsf</code> <code>int</code> <p>High-danger shots for (on-ice), e.g, 3</p> <code>hdsa</code> <code>int</code> <p>High-danger shots against (on-ice), e.g, 0</p> <code>ff</code> <code>int</code> <p>Fenwick for (on-ice), e.g, 4</p> <code>fa</code> <code>int</code> <p>Fenwick against (on-ice), e.g, 0</p> <code>hdff</code> <code>int</code> <p>High-danger fenwick for (on-ice), e.g, 3</p> <code>hdfa</code> <code>int</code> <p>High-danger fenwick against (on-ice), e.g, 0</p> <code>cf</code> <code>int</code> <p>Corsi for (on-ice), e.g, 4</p> <code>ca</code> <code>int</code> <p>Corsi against (on-ice), e.g, 0</p> <code>bsf</code> <code>int</code> <p>Shots taken that were blocked (on-ice), e.g, 0</p> <code>bsa</code> <code>int</code> <p>Shots blocked (on-ice), e.g, 0</p> <code>msf</code> <code>int</code> <p>Missed shots taken (on-ice), e.g, 0</p> <code>msa</code> <code>int</code> <p>Missed shots against (on-ice), e.g, 0</p> <code>hdmsf</code> <code>int</code> <p>High-danger missed shots taken (on-ice), e.g, 0</p> <code>hdmsa</code> <code>int</code> <p>High-danger missed shots against (on-ice), e.g, 0</p> <code>teammate_block</code> <code>int</code> <p>Shots blocked by teammates (on-ice), e.g, 0</p> <code>hf</code> <code>int</code> <p>Hits for (on-ice), e.g, 0</p> <code>ht</code> <code>int</code> <p>Hits taken (on-ice), e.g, 0</p> <code>give</code> <code>int</code> <p>Giveaways (on-ice), e.g, 0</p> <code>take</code> <code>int</code> <p>Takeaways (on-ice), e.g, 0</p> <code>ozf</code> <code>int</code> <p>Offensive zone faceoffs (on-ice), e.g, 0</p> <code>nzf</code> <code>int</code> <p>Neutral zone faceoffs (on-ice), e.g, 1</p> <code>dzf</code> <code>int</code> <p>Defensive zone faceoffs (on-ice), e.g, 0</p> <code>fow</code> <code>int</code> <p>Faceoffs won (on-ice), e.g, 1</p> <code>fol</code> <code>int</code> <p>Faceoffs lost (on-ice), e.g, 0</p> <code>ozfw</code> <code>int</code> <p>Offensive zone faceoffs won (on-ice), e.g, 0</p> <code>ozfl</code> <code>int</code> <p>Offensive zone faceoffs lost (on-ice), e.g, 0</p> <code>nzfw</code> <code>int</code> <p>Neutral zone faceoffs won (on-ice), e.g, 1</p> <code>nzfl</code> <code>int</code> <p>Neutral zone faceoffs lost (on-ice), e.g, 0</p> <code>dzfw</code> <code>int</code> <p>Defensive zone faceoffs won (on-ice), e.g, 0</p> <code>dzfl</code> <code>int</code> <p>Defensive zone faceoffs lost (on-ice), e.g, 0</p> <code>pent0</code> <code>int</code> <p>Penalty shots allowed (on-ice), e.g, 0</p> <code>pent2</code> <code>int</code> <p>Minor penalties taken (on-ice), e.g, 0</p> <code>pent4</code> <code>int</code> <p>Double minor penalties taken (on-ice), e.g, 0</p> <code>pent5</code> <code>int</code> <p>Major penalties taken (on-ice), e.g, 0</p> <code>pent10</code> <code>int</code> <p>Game misconduct penalties taken (on-ice), e.g, 0</p> <code>pend0</code> <code>int</code> <p>Penalty shots drawn (on-ice), e.g, 0</p> <code>pend2</code> <code>int</code> <p>Minor penalties drawn (on-ice), e.g, 0</p> <code>pend4</code> <code>int</code> <p>Double minor penalties drawn (on-ice), e.g, 0</p> <code>pend5</code> <code>int</code> <p>Major penalties drawn (on-ice), e.g, 0</p> <code>pend10</code> <code>int</code> <p>Game misconduct penalties drawn (on-ice), e.g, 0</p> <code>gf_p60</code> <code>float</code> <p>Goals for (on-ice) per 60 minutes</p> <code>ga_p60</code> <code>float</code> <p>Goals against (on-ice) per 60 minutes</p> <code>hdgf_p60</code> <code>float</code> <p>High-danger goals for (on-ice) per 60 minutes</p> <code>hdga_p60</code> <code>float</code> <p>High-danger goals against (on-ice) per 60 minutes</p> <code>xgf_p60</code> <code>float</code> <p>xG for (on-ice) per 60 minutes</p> <code>xga_p60</code> <code>float</code> <p>xG against (on-ice) per 60 minutes</p> <code>sf_p60</code> <code>float</code> <p>Shots for (on-ice) per 60 minutes</p> <code>sa_p60</code> <code>float</code> <p>Shots against (on-ice) per 60 minutes</p> <code>hdsf_p60</code> <code>float</code> <p>High-danger shots for (on-ice) per 60 minutes</p> <code>hdsa_p60</code> <code>float</code> <p>High danger shots against (on-ice) per 60 minutes</p> <code>ff_p60</code> <code>float</code> <p>Fenwick for (on-ice) per 60 minutes</p> <code>fa_p60</code> <code>float</code> <p>Fenwick against (on-ice) per 60 minutes</p> <code>hdff_p60</code> <code>float</code> <p>High-danger fenwick for (on-ice) per 60 minutes</p> <code>hdfa_p60</code> <code>float</code> <p>High-danger fenwick against (on-ice) per 60 minutes</p> <code>cf_p60</code> <code>float</code> <p>Corsi for (on-ice) per 60 minutes</p> <code>ca_p60</code> <code>float</code> <p>Corsi against (on-ice) per 60 minutes</p> <code>bsf_p60</code> <code>float</code> <p>Blocked shots for (on-ice) per 60 minutes</p> <code>bsa_p60</code> <code>float</code> <p>Blocked shots against (on-ice) per 60 minutes</p> <code>msf_p60</code> <code>float</code> <p>Missed shots for (on-ice) per 60 minutes</p> <code>msa_p60</code> <code>float</code> <p>Missed shots against (on-ice) per 60 minutes</p> <code>hdmsf_p60</code> <code>float</code> <p>High-danger missed shots for (on-ice) per 60 minutes</p> <code>hdmsa_p60</code> <code>float</code> <p>High-danger missed shots against (on-ice) per 60 minutes</p> <code>teammate_block_p60</code> <code>float</code> <p>Shots blocked by teammates (on-ice) per 60 minutes</p> <code>hf_p60</code> <code>float</code> <p>Hits  for (on-ice) per 60 minutes</p> <code>ht_p60</code> <code>float</code> <p>Hits taken (on-ice) per 60 minutes</p> <code>give_p60</code> <code>float</code> <p>Giveaways (on-ice) per 60 minutes</p> <code>take_p60</code> <code>float</code> <p>Takeaways (on-ice) per 60 minutes</p> <code>pent0_p60</code> <code>float</code> <p>Penalty shots taken (on-ice) per 60 minutes</p> <code>pent2_p60</code> <code>float</code> <p>Minor penalties taken (on-ice) per 60 minutes</p> <code>pent4_p60</code> <code>float</code> <p>Double minor penalties taken (on-ice) per 60 minutes</p> <code>pent5_p60</code> <code>float</code> <p>Major penalties taken (on-ice) per 60 minutes</p> <code>pent10_p60</code> <code>float</code> <p>Game misconduct pentalties taken (on-ice) per 60 minutes</p> <code>pend0_p60</code> <code>float</code> <p>Penalty shots drawn (on-ice) per 60 minutes</p> <code>pend2_p60</code> <code>float</code> <p>Minor penalties drawn (on-ice) per 60 minutes</p> <code>pend4_p60</code> <code>float</code> <p>Double minor penalties drawn (on-ice) per 60 minutes</p> <code>pend5_p60</code> <code>float</code> <p>Major penalties drawn (on-ice) per 60 minutes</p> <code>pend10_p60</code> <code>float</code> <p>Game misconduct penalties drawn (on-ice) per 60 minutes</p> <code>gf_percent</code> <code>float</code> <p>On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)</p> <code>hdgf_percent</code> <code>float</code> <p>On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF / (HDGF + HDGA)</p> <code>xgf_percent</code> <code>float</code> <p>On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)</p> <code>sf_percent</code> <code>float</code> <p>On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)</p> <code>hdsf_percent</code> <code>float</code> <p>On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF / (HDSF + HDSA)</p> <code>ff_percent</code> <code>float</code> <p>On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)</p> <code>hdff_percent</code> <code>float</code> <p>On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF / (HDFF + HDFA)</p> <code>cf_percent</code> <code>float</code> <p>On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)</p> <code>bsf_percent</code> <code>float</code> <p>On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)</p> <code>msf_percent</code> <code>float</code> <p>On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)</p> <code>hdmsf_percent</code> <code>float</code> <p>On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e., HDMSF / (HDMSF + HDMSA)</p> <code>hf_percent</code> <code>float</code> <p>On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)</p> <code>take_percent</code> <code>float</code> <p>On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2023020001\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Prepares on-ice, line-level dataframe with default options</p> <pre><code>&gt;&gt;&gt; scraper._prep_lines()\n</code></pre> <p>Line-level statistics, aggregated to season level</p> <pre><code>&gt;&gt;&gt; scraper._prep_lines(level=\"season\")\n</code></pre> <p>Line-level statistics, aggregated to game level, accounting for teammates</p> <pre><code>&gt;&gt;&gt; scraper._prep_lines(level=\"game\", teammates=True)\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _prep_lines(\n    self,\n    position: Literal[\"f\", \"d\"] = \"f\",\n    level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n    score: bool = False,\n    teammates: bool = False,\n    opposition: bool = False,\n) -&gt; None:\n    \"\"\"Prepares DataFrame of line-level stats from play-by-play data.\n\n    Nested within `prep_lines` method.\n\n    Parameters:\n        position (str):\n            Determines what positions to aggregate. One of F or D\n        level (str):\n            Determines the level of aggregation. One of season, session, game, period\n        score (bool):\n            Determines if stats account for score state\n        teammates (bool):\n            Determines if stats account for teammates on ice\n        opposition (bool):\n            Determines if stats account for opponents on ice\n\n    Returns:\n        season (int):\n            Season as 8-digit number, e.g., 2023 for 2023-24 season\n        session (str):\n            Whether game is regular season, playoffs, or pre-season, e.g., R\n        game_id (int):\n            Unique game ID assigned by the NHL, e.g., 2023020001\n        game_date (int):\n            Date game was played, e.g., 2023-10-10\n        team (str):\n            Player's team, e.g., NSH\n        opp_team (str):\n            Opposing team, e.g., TBL\n        strength_state (str):\n            Strength state, e.g., 5v5\n        period (int):\n            Period, e.g., 3\n        score_state (str):\n            Score state, e.g., 2v1\n        forwards (str):\n            Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY\n        forwards_eh_id (str):\n            Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n        forwards_api_id (str):\n            Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158\n        defense (str):\n            Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER\n        defense_eh_id (str):\n            Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER\n        defense_api_id (str):\n            Defense teammates' NHL API IDs, e.g., 8474151, 8478851\n        own_goalie (str):\n            Own goalie, e.g., JUUSE SAROS\n        own_goalie_eh_id (str):\n            Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS\n        own_goalie_api_id (str):\n            Own goalie's NHL API ID, e.g., 8477424\n        opp_forwards (str):\n            Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS\n        opp_forwards_eh_id (str):\n            Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS\n        opp_forwards_api_id (str):\n            Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564\n        opp_defense (str):\n            Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN\n        opp_defense_eh_id (str):\n            Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN\n        opp_defense_api_id (str):\n            Opposing defense's NHL API IDs, e.g., 8480246, 8475167\n        opp_goalie (str):\n            Opposing goalie, e.g., JONAS JOHANSSON\n        opp_goalie_eh_id (str):\n            Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON\n        opp_goalie_api_id (str):\n            Opposing goalie's NHL API ID, e.g., 8477992\n        toi (float):\n            Time on-ice, in minutes, e.g, 0.483333\n        gf (int):\n            Goals for (on-ice), e.g, 0\n        ga (int):\n            Goals against (on-ice), e.g, 0\n        hdgf (int):\n            High-danger goals for (on-ice), e.g, 0\n        hdga (int):\n            High-danger goals against (on-ice), e.g, 0\n        xgf (float):\n            xG for (on-ice), e.g., 1.258332\n        xga (float):\n            xG against (on-ice), e.g, 0.000000\n        sf (int):\n            Shots for (on-ice), e.g, 4\n        sa (int):\n            Shots against (on-ice), e.g, 0\n        hdsf (int):\n            High-danger shots for (on-ice), e.g, 3\n        hdsa (int):\n            High-danger shots against (on-ice), e.g, 0\n        ff (int):\n            Fenwick for (on-ice), e.g, 4\n        fa (int):\n            Fenwick against (on-ice), e.g, 0\n        hdff (int):\n            High-danger fenwick for (on-ice), e.g, 3\n        hdfa (int):\n            High-danger fenwick against (on-ice), e.g, 0\n        cf (int):\n            Corsi for (on-ice), e.g, 4\n        ca (int):\n            Corsi against (on-ice), e.g, 0\n        bsf (int):\n            Shots taken that were blocked (on-ice), e.g, 0\n        bsa (int):\n            Shots blocked (on-ice), e.g, 0\n        msf (int):\n            Missed shots taken (on-ice), e.g, 0\n        msa (int):\n            Missed shots against (on-ice), e.g, 0\n        hdmsf (int):\n            High-danger missed shots taken (on-ice), e.g, 0\n        hdmsa (int):\n            High-danger missed shots against (on-ice), e.g, 0\n        teammate_block (int):\n            Shots blocked by teammates (on-ice), e.g, 0\n        hf (int):\n            Hits for (on-ice), e.g, 0\n        ht (int):\n            Hits taken (on-ice), e.g, 0\n        give (int):\n            Giveaways (on-ice), e.g, 0\n        take (int):\n            Takeaways (on-ice), e.g, 0\n        ozf (int):\n            Offensive zone faceoffs (on-ice), e.g, 0\n        nzf (int):\n            Neutral zone faceoffs (on-ice), e.g, 1\n        dzf (int):\n            Defensive zone faceoffs (on-ice), e.g, 0\n        fow (int):\n            Faceoffs won (on-ice), e.g, 1\n        fol (int):\n            Faceoffs lost (on-ice), e.g, 0\n        ozfw (int):\n            Offensive zone faceoffs won (on-ice), e.g, 0\n        ozfl (int):\n            Offensive zone faceoffs lost (on-ice), e.g, 0\n        nzfw (int):\n            Neutral zone faceoffs won (on-ice), e.g, 1\n        nzfl (int):\n            Neutral zone faceoffs lost (on-ice), e.g, 0\n        dzfw (int):\n            Defensive zone faceoffs won (on-ice), e.g, 0\n        dzfl (int):\n            Defensive zone faceoffs lost (on-ice), e.g, 0\n        pent0 (int):\n            Penalty shots allowed (on-ice), e.g, 0\n        pent2 (int):\n            Minor penalties taken (on-ice), e.g, 0\n        pent4 (int):\n            Double minor penalties taken (on-ice), e.g, 0\n        pent5 (int):\n            Major penalties taken (on-ice), e.g, 0\n        pent10 (int):\n            Game misconduct penalties taken (on-ice), e.g, 0\n        pend0 (int):\n            Penalty shots drawn (on-ice), e.g, 0\n        pend2 (int):\n            Minor penalties drawn (on-ice), e.g, 0\n        pend4 (int):\n            Double minor penalties drawn (on-ice), e.g, 0\n        pend5 (int):\n            Major penalties drawn (on-ice), e.g, 0\n        pend10 (int):\n            Game misconduct penalties drawn (on-ice), e.g, 0\n        gf_p60 (float):\n            Goals for (on-ice) per 60 minutes\n        ga_p60 (float):\n            Goals against (on-ice) per 60 minutes\n        hdgf_p60 (float):\n            High-danger goals for (on-ice) per 60 minutes\n        hdga_p60 (float):\n            High-danger goals against (on-ice) per 60 minutes\n        xgf_p60 (float):\n            xG for (on-ice) per 60 minutes\n        xga_p60 (float):\n            xG against (on-ice) per 60 minutes\n        sf_p60 (float):\n            Shots for (on-ice) per 60 minutes\n        sa_p60 (float):\n            Shots against (on-ice) per 60 minutes\n        hdsf_p60 (float):\n            High-danger shots for (on-ice) per 60 minutes\n        hdsa_p60 (float):\n            High danger shots against (on-ice) per 60 minutes\n        ff_p60 (float):\n            Fenwick for (on-ice) per 60 minutes\n        fa_p60 (float):\n            Fenwick against (on-ice) per 60 minutes\n        hdff_p60 (float):\n            High-danger fenwick for (on-ice) per 60 minutes\n        hdfa_p60 (float):\n            High-danger fenwick against (on-ice) per 60 minutes\n        cf_p60 (float):\n            Corsi for (on-ice) per 60 minutes\n        ca_p60 (float):\n            Corsi against (on-ice) per 60 minutes\n        bsf_p60 (float):\n            Blocked shots for (on-ice) per 60 minutes\n        bsa_p60 (float):\n            Blocked shots against (on-ice) per 60 minutes\n        msf_p60 (float):\n            Missed shots for (on-ice) per 60 minutes\n        msa_p60 (float):\n            Missed shots against (on-ice) per 60 minutes\n        hdmsf_p60 (float):\n            High-danger missed shots for (on-ice) per 60 minutes\n        hdmsa_p60 (float):\n            High-danger missed shots against (on-ice) per 60 minutes\n        teammate_block_p60 (float):\n            Shots blocked by teammates (on-ice) per 60 minutes\n        hf_p60 (float):\n            Hits  for (on-ice) per 60 minutes\n        ht_p60 (float):\n            Hits taken (on-ice) per 60 minutes\n        give_p60 (float):\n            Giveaways (on-ice) per 60 minutes\n        take_p60 (float):\n            Takeaways (on-ice) per 60 minutes\n        pent0_p60 (float):\n            Penalty shots taken (on-ice) per 60 minutes\n        pent2_p60 (float):\n            Minor penalties taken (on-ice) per 60 minutes\n        pent4_p60 (float):\n            Double minor penalties taken (on-ice) per 60 minutes\n        pent5_p60 (float):\n            Major penalties taken (on-ice) per 60 minutes\n        pent10_p60 (float):\n            Game misconduct pentalties taken (on-ice) per 60 minutes\n        pend0_p60 (float):\n            Penalty shots drawn (on-ice) per 60 minutes\n        pend2_p60 (float):\n            Minor penalties drawn (on-ice) per 60 minutes\n        pend4_p60 (float):\n            Double minor penalties drawn (on-ice) per 60 minutes\n        pend5_p60 (float):\n            Major penalties drawn (on-ice) per 60 minutes\n        pend10_p60 (float):\n            Game misconduct penalties drawn (on-ice) per 60 minutes\n        gf_percent (float):\n            On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)\n        hdgf_percent (float):\n            On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF /\n            (HDGF + HDGA)\n        xgf_percent (float):\n            On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)\n        sf_percent (float):\n            On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)\n        hdsf_percent (float):\n            On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF /\n            (HDSF + HDSA)\n        ff_percent (float):\n            On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)\n        hdff_percent (float):\n            On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF /\n            (HDFF + HDFA)\n        cf_percent (float):\n            On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)\n        bsf_percent (float):\n            On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)\n        msf_percent (float):\n            On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)\n        hdmsf_percent (float):\n            On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e.,\n            HDMSF / (HDMSF + HDMSA)\n        hf_percent (float):\n            On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)\n        take_percent (float):\n            On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)\n\n    Examples:\n        First, instantiate the class with a game ID\n        &gt;&gt;&gt; game_id = 2023020001\n        &gt;&gt;&gt; scraper = Scraper(game_id)\n\n        Prepares on-ice, line-level dataframe with default options\n        &gt;&gt;&gt; scraper._prep_lines()\n\n        Line-level statistics, aggregated to season level\n        &gt;&gt;&gt; scraper._prep_lines(level=\"season\")\n\n        Line-level statistics, aggregated to game level, accounting for teammates\n        &gt;&gt;&gt; scraper._prep_lines(level=\"game\", teammates=True)\n\n    \"\"\"\n    merge_cols = [\"id\", \"event_idx\"]\n\n    data = self.play_by_play.merge(self.play_by_play_ext, how=\"left\", on=merge_cols)\n\n    # Creating the \"for\" dataframe\n\n    # Accounting for desired level of aggregation\n\n    group_list = [\"season\", \"session\", \"event_team\", \"strength_state\"]\n\n    if level == \"session\" or level == \"season\":\n        group_list = group_list\n\n    elif level == \"game\":\n        group_list.extend([\"game_id\", \"game_date\", \"opp_team\"])\n\n    elif level == \"period\":\n        group_list.extend([\"game_id\", \"game_date\", \"opp_team\", \"period\"])\n\n    # Accounting for score state\n\n    if score:\n        group_list.append(\"score_state\")\n\n    # Accounting for desired position\n\n    if position == \"f\":\n        group_list.extend([\"forwards\", \"forwards_eh_id\", \"forwards_api_id\"])\n\n    if position == \"d\":\n        group_list.extend([\"defense\", \"defense_eh_id\", \"defense_api_id\"])\n\n    # Accounting for teammates\n\n    if teammates is True:\n        if position == \"f\":\n            group_list.extend(\n                [\n                    \"defense\",\n                    \"defense_eh_id\",\n                    \"defense_api_id\",\n                    \"own_goalie\",\n                    \"own_goalie_eh_id\",\n                    \"own_goalie_api_id\",\n                ]\n            )\n\n        if position == \"d\":\n            group_list.extend(\n                [\n                    \"forwards\",\n                    \"forwards_eh_id\",\n                    \"forwards_api_id\",\n                    \"own_goalie\",\n                    \"own_goalie_eh_id\",\n                    \"own_goalie_api_id\",\n                ]\n            )\n\n    # Accounting for opposition\n\n    if opposition is True:\n        group_list.extend(\n            [\n                \"opp_forwards\",\n                \"opp_forwards_eh_id\",\n                \"opp_forwards_api_id\",\n                \"opp_defense\",\n                \"opp_defense_eh_id\",\n                \"opp_defense_api_id\",\n                \"opp_goalie\",\n                \"opp_goalie_eh_id\",\n                \"opp_goalie_api_id\",\n            ]\n        )\n\n        if \"opp_team\" not in group_list:\n            group_list.append(\"opp_team\")\n\n    group_list_order = [\n        \"season\",\n        \"session\",\n        \"game_id\",\n        \"game_date\",\n        \"event_team\",\n        \"opp_team\",\n        \"period\",\n        \"strength_state\",\n        \"score_state\",\n        \"forwards\",\n        \"forwards_eh_id\",\n        \"forwards_api_id\",\n        \"defense\",\n        \"defense_eh_id\",\n        \"defense_api_id\",\n        \"own_goalie\",\n        \"own_goalie_eh_id\",\n        \"own_goalie_api_id\",\n        \"opp_forwards\",\n        \"opp_forwards_eh_id\",\n        \"opp_forwards_api_id\",\n        \"opp_defense\",\n        \"opp_defense_eh_id\",\n        \"opp_defense_api_id\",\n        \"opp_goalie\",\n        \"opp_goalie_eh_id\",\n        \"opp_goalie_api_id\",\n    ]\n\n    group_list = [x for x in group_list_order if x in group_list]\n\n    # Creating dictionary of statistics for the groupby function\n\n    stats = [\n        \"pred_goal\",\n        \"pred_goal_adj\",\n        \"fenwick\",\n        \"fenwick_adj\",\n        \"goal\",\n        \"goal_adj\",\n        \"miss\",\n        \"miss_adj\",\n        \"block\",\n        \"block_adj\",\n        \"teammate_block\",\n        \"teammate_block_adj\",\n        \"shot\",\n        \"shot_adj\",\n        \"hd_goal\",\n        \"hd_shot\",\n        \"hd_fenwick\",\n        \"hd_miss\",\n        \"event_length\",\n        \"fac\",\n        \"ozf\",\n        \"nzf\",\n        \"dzf\",\n        \"hit\",\n        \"give\",\n        \"take\",\n        \"pen0\",\n        \"pen2\",\n        \"pen4\",\n        \"pen5\",\n        \"pen10\",\n    ]\n\n    agg_stats = {x: \"sum\" for x in stats if x in data.columns}\n\n    # Aggregating the \"for\" dataframe\n\n    lines_f = data.groupby(group_list, as_index=False, dropna=False).agg(agg_stats)\n\n    # Creating the dictionary to change column names\n\n    columns = [\n        \"xgf\",\n        \"xgf_adj\",\n        \"ff\",\n        \"ff_adj\",\n        \"gf\",\n        \"gf_adj\",\n        \"msf\",\n        \"msf_adj\",\n        \"bsf\",\n        \"bsf_adj\",\n        \"teammate_block\",\n        \"teammate_block_adj\",\n        \"sf\",\n        \"sf_adj\",\n        \"hdgf\",\n        \"hdsf\",\n        \"hdff\",\n        \"hdmsf\",\n        \"toi\",\n        \"fow\",\n        \"ozfw\",\n        \"nzfw\",\n        \"dzfw\",\n        \"hf\",\n        \"give\",\n        \"take\",\n        \"pent0\",\n        \"pent2\",\n        \"pent4\",\n        \"pent5\",\n        \"pent10\",\n    ]\n\n    columns = dict(zip(stats, columns, strict=False))\n\n    # Accounting for positions\n\n    columns.update({\"event_team\": \"team\"})\n\n    # columns = {k: v for k, v in columns.items() if k in lines_f.columns}\n\n    lines_f = lines_f.rename(columns=columns)\n\n    cols = [\n        \"forwards\",\n        \"forwards_eh_id\",\n        \"forwards_api_id\",\n        \"defense\",\n        \"defense_eh_id\",\n        \"defense_api_id\",\n        \"own_goalie\",\n        \"own_goalie_eh_id\",\n        \"own_goalie_api_id\",\n        \"opp_forwards\",\n        \"opp_forwards_eh_id\",\n        \"opp_forwards_api_id\",\n        \"opp_defense\",\n        \"opp_defense_eh_id\",\n        \"opp_defense_api_id\",\n        \"opp_goalie\",\n        \"opp_goalie_eh_id\",\n        \"opp_goalie_api_id\",\n    ]\n\n    cols = [x for x in cols if x in lines_f]\n\n    for col in cols:\n        lines_f[col] = lines_f[col].fillna(\"EMPTY\")\n\n    # Creating the against dataframe\n\n    # Accounting for desired level of aggregation\n\n    group_list = [\"season\", \"session\", \"opp_team\", \"opp_strength_state\"]\n\n    if level == \"session\" or level == \"season\":\n        group_list = group_list\n\n    elif level == \"game\":\n        group_list.extend([\"game_id\", \"game_date\", \"event_team\"])\n\n    elif level == \"period\":\n        group_list.extend([\"game_id\", \"game_date\", \"event_team\", \"period\"])\n\n    # Accounting for score state\n\n    if score:\n        group_list.append(\"opp_score_state\")\n\n    # Accounting for desired position\n\n    if position == \"f\":\n        group_list.extend([\"opp_forwards\", \"opp_forwards_eh_id\", \"opp_forwards_api_id\"])\n\n    if position == \"d\":\n        group_list.extend([\"opp_defense\", \"opp_defense_eh_id\", \"opp_defense_api_id\"])\n\n    # Accounting for teammates\n\n    if teammates is True:\n        if position == \"f\":\n            group_list.extend(\n                [\n                    \"opp_defense\",\n                    \"opp_defense_eh_id\",\n                    \"opp_defense_api_id\",\n                    \"opp_goalie\",\n                    \"opp_goalie_eh_id\",\n                    \"opp_goalie_api_id\",\n                ]\n            )\n\n        if position == \"d\":\n            group_list.extend(\n                [\n                    \"opp_forwards\",\n                    \"opp_forwards_eh_id\",\n                    \"opp_forwards_api_id\",\n                    \"opp_goalie\",\n                    \"opp_goalie_eh_id\",\n                    \"opp_goalie_api_id\",\n                ]\n            )\n\n    # Accounting for opposition\n\n    if opposition is True:\n        group_list.extend(\n            [\n                \"forwards\",\n                \"forwards_eh_id\",\n                \"forwards_api_id\",\n                \"defense\",\n                \"defense_eh_id\",\n                \"defense_api_id\",\n                \"own_goalie\",\n                \"own_goalie_eh_id\",\n                \"own_goalie_api_id\",\n            ]\n        )\n\n        if \"event_team\" not in group_list:\n            group_list.append(\"event_team\")\n\n    group_list_order = [\n        \"season\",\n        \"session\",\n        \"game_id\",\n        \"game_date\",\n        \"event_team\",\n        \"opp_team\",\n        \"period\",\n        \"opp_strength_state\",\n        \"opp_score_state\",\n        \"opp_forwards\",\n        \"opp_forwards_eh_id\",\n        \"opp_forwards_api_id\",\n        \"opp_defense\",\n        \"opp_defense_eh_id\",\n        \"opp_defense_api_id\",\n        \"opp_goalie\",\n        \"opp_goalie_eh_id\",\n        \"opp_goalie_api_id\",\n        \"forwards\",\n        \"forwards_eh_id\",\n        \"forwards_api_id\",\n        \"defense\",\n        \"defense_eh_id\",\n        \"defense_api_id\",\n        \"own_goalie\",\n        \"own_goalie_eh_id\",\n        \"own_goalie_api_id\",\n    ]\n\n    group_list = [x for x in group_list_order if x in group_list]\n\n    # Creating dictionary of statistics for the groupby function\n\n    stats = [\n        \"pred_goal\",\n        \"pred_goal_adj\",\n        \"fenwick\",\n        \"fenwick_adj\",\n        \"goal\",\n        \"goal_adj\",\n        \"miss\",\n        \"miss_adj\",\n        \"block\",\n        \"block_adj\",\n        \"shot\",\n        \"shot_adj\",\n        \"hd_goal\",\n        \"hd_shot\",\n        \"hd_fenwick\",\n        \"hd_miss\",\n        \"event_length\",\n        \"fac\",\n        \"ozf\",\n        \"nzf\",\n        \"dzf\",\n        \"hit\",\n        \"pen0\",\n        \"pen2\",\n        \"pen4\",\n        \"pen5\",\n        \"pen10\",\n    ]\n\n    agg_stats = {x: \"sum\" for x in stats if x in data.columns}\n\n    # Aggregating \"against\" dataframe\n\n    lines_a = data.groupby(group_list, as_index=False, dropna=False).agg(agg_stats)\n\n    # Creating the dictionary to change column names\n\n    columns = [\n        \"xga\",\n        \"xga_adj\",\n        \"fa\",\n        \"fa_adj\",\n        \"ga\",\n        \"ga_adj\",\n        \"msa\",\n        \"msa_adj\",\n        \"bsa\",\n        \"bsa_adj\",\n        \"sa\",\n        \"sa_adj\",\n        \"hdga\",\n        \"hdsa\",\n        \"hdfa\",\n        \"hdmsa\",\n        \"toi\",\n        \"fol\",\n        \"ozfl\",\n        \"nzfl\",\n        \"dzfl\",\n        \"ht\",\n        \"pend0\",\n        \"pend2\",\n        \"pend4\",\n        \"pend5\",\n        \"pend10\",\n    ]\n\n    columns = dict(zip(stats, columns, strict=False))\n\n    # Accounting for positions\n\n    columns.update(\n        {\n            \"opp_team\": \"team\",\n            \"event_team\": \"opp_team\",\n            \"opp_forwards\": \"forwards\",\n            \"opp_forwards_eh_id\": \"forwards_eh_id\",\n            \"opp_forwards_api_id\": \"forwards_api_id\",\n            \"opp_strength_state\": \"strength_state\",\n            \"opp_defense\": \"defense\",\n            \"opp_defense_eh_id\": \"defense_eh_id\",\n            \"opp_defense_api_id\": \"defense_api_id\",\n            \"forwards\": \"opp_forwards\",\n            \"forwards_eh_id\": \"opp_forwards_eh_id\",\n            \"forwards_api_id\": \"opp_forwards_api_id\",\n            \"defense\": \"opp_defense\",\n            \"defense_eh_id\": \"opp_defense_eh_id\",\n            \"defense_api_id\": \"opp_defense_api_id\",\n            \"opp_score_state\": \"score_state\",\n            \"own_goalie\": \"opp_goalie\",\n            \"own_goalie_eh_id\": \"opp_goalie_eh_id\",\n            \"own_goalie_api_id\": \"opp_goalie_api_id\",\n            \"opp_goalie\": \"own_goalie\",\n            \"opp_goalie_eh_id\": \"own_goalie_eh_id\",\n            \"opp_goalie_api_id\": \"own_goalie_api_id\",\n        }\n    )\n\n    # columns = {k: v for k, v in columns.items() if k in lines_a.columns}\n\n    lines_a = lines_a.rename(columns=columns)\n\n    cols = [\n        \"forwards\",\n        \"forwards_eh_id\",\n        \"forwards_api_id\",\n        \"defense\",\n        \"defense_eh_id\",\n        \"defense_api_id\",\n        \"own_goalie\",\n        \"own_goalie_eh_id\",\n        \"own_goalie_api_id\",\n        \"opp_forwards\",\n        \"opp_forwards_eh_id\",\n        \"opp_forwards_api_id\",\n        \"opp_defense\",\n        \"opp_defense_eh_id\",\n        \"opp_defense_api_id\",\n        \"opp_goalie\",\n        \"opp_goalie_eh_id\",\n        \"opp_goalie_api_id\",\n    ]\n\n    cols = [x for x in cols if x in lines_a]\n\n    for col in cols:\n        lines_a[col] = lines_a[col].fillna(\"EMPTY\")\n\n    # Merging the \"for\" and \"against\" dataframes\n\n    if level == \"session\" or level == \"season\":\n        if position == \"f\":\n            merge_list = [\n                \"season\",\n                \"session\",\n                \"team\",\n                \"strength_state\",\n                \"forwards\",\n                \"forwards_eh_id\",\n                \"forwards_api_id\",\n            ]\n\n        if position == \"d\":\n            merge_list = [\n                \"season\",\n                \"session\",\n                \"team\",\n                \"strength_state\",\n                \"defense\",\n                \"defense_eh_id\",\n                \"defense_api_id\",\n            ]\n\n    if level == \"game\":\n        if position == \"f\":\n            merge_list = [\n                \"season\",\n                \"game_id\",\n                \"game_date\",\n                \"session\",\n                \"team\",\n                \"opp_team\",\n                \"strength_state\",\n                \"forwards\",\n                \"forwards_eh_id\",\n                \"forwards_api_id\",\n            ]\n\n        if position == \"d\":\n            merge_list = [\n                \"season\",\n                \"game_id\",\n                \"game_date\",\n                \"session\",\n                \"team\",\n                \"opp_team\",\n                \"strength_state\",\n                \"defense\",\n                \"defense_eh_id\",\n                \"defense_api_id\",\n            ]\n\n    if level == \"period\":\n        if position == \"f\":\n            merge_list = [\n                \"season\",\n                \"game_id\",\n                \"game_date\",\n                \"session\",\n                \"team\",\n                \"opp_team\",\n                \"strength_state\",\n                \"forwards\",\n                \"forwards_eh_id\",\n                \"forwards_api_id\",\n                \"period\",\n            ]\n\n        if position == \"d\":\n            merge_list = [\n                \"season\",\n                \"game_id\",\n                \"game_date\",\n                \"session\",\n                \"team\",\n                \"opp_team\",\n                \"strength_state\",\n                \"defense\",\n                \"defense_eh_id\",\n                \"defense_api_id\",\n                \"period\",\n            ]\n\n    if score is True:\n        merge_list.append(\"score_state\")\n\n    if teammates is True:\n        if position == \"f\":\n            merge_list = merge_list + [\n                \"defense\",\n                \"defense_eh_id\",\n                \"defense_api_id\",\n                \"own_goalie\",\n                \"own_goalie_eh_id\",\n                \"own_goalie_api_id\",\n            ]\n\n        if position == \"d\":\n            merge_list = merge_list + [\n                \"forwards\",\n                \"forwards_eh_id\",\n                \"forwards_api_id\",\n                \"own_goalie\",\n                \"own_goalie_eh_id\",\n                \"own_goalie_api_id\",\n            ]\n\n    if opposition is True:\n        merge_list = merge_list + [\n            \"opp_forwards\",\n            \"opp_forwards_eh_id\",\n            \"opp_forwards_api_id\",\n            \"opp_defense\",\n            \"opp_defense_eh_id\",\n            \"opp_defense_api_id\",\n            \"opp_goalie\",\n            \"opp_goalie_eh_id\",\n            \"opp_goalie_api_id\",\n        ]\n\n        if \"opp_team\" not in merge_list:\n            merge_list.insert(3, \"opp_team\")\n\n    lines = lines_f.merge(lines_a, how=\"outer\", on=merge_list, suffixes=(\"_x\", \"_y\")).fillna(0)\n\n    lines[\"toi\"] = (lines.toi_x + lines.toi_y) / 60\n\n    lines[\"cf\"] = lines.bsf + lines.teammate_block + lines.ff\n    lines[\"cf_adj\"] = lines.bsf_adj + lines.teammate_block_adj + lines.ff_adj\n\n    lines[\"ca\"] = lines.bsa + lines.fa\n    lines[\"ca_adj\"] = lines.bsa_adj + lines.fa_adj\n\n    lines[\"ozf\"] = lines.ozfw + lines.ozfl\n\n    lines[\"nzf\"] = lines.nzfw + lines.nzfl\n\n    lines[\"dzf\"] = lines.dzfw + lines.dzfl\n\n    cols = [x for x in list(LineSchema.dtypes.keys()) if x in lines.columns]\n\n    lines = lines[cols].loc[lines.toi &gt; 0].reset_index(drop=True)\n\n    lines = prep_p60(lines)\n\n    lines = prep_oi_percent(lines)\n\n    lines = LineSchema.validate(lines)\n\n    self._lines = lines\n</code></pre>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Scraper._prep_team_stats","title":"_prep_team_stats","text":"<pre><code>_prep_team_stats(\n    level=\"game\",\n    strengths=True,\n    opposition=False,\n    score=False,\n)\n</code></pre> <p>Prepares DataFrame of team stats from play-by-play data.</p> <p>Nested within <code>prep_team_stats</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>str</code> <p>Determines the level of aggregation. One of season, session, game, period</p> <code>'game'</code> <code>score</code> <code>bool</code> <p>Determines if stats account  for score state</p> <code>False</code> <code>strengths</code> <code>bool</code> <p>Determines if stats account  for strength state</p> <code>True</code> <code>opposition</code> <code>bool</code> <p>Determines if stats account  for opponents on ice</p> <code>False</code> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 2023 for 2023-24 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2023020001</p> <code>team</code> <code>str</code> <p>Player's team, e.g., NSH</p> <code>opp_team</code> <code>str</code> <p>Opposing team, e.g., TBL</p> <code>strength_state</code> <code>str</code> <p>Strength state, e.g., 5v5</p> <code>period</code> <code>int</code> <p>Period, e.g., 3</p> <code>score_state</code> <code>str</code> <p>Score state, e.g., 2v1</p> <code>toi</code> <code>float</code> <p>Time on-ice, in minutes, e.g, 1.100000</p> <code>gf</code> <code>int</code> <p>Goals for (on-ice), e.g, 0</p> <code>hdgf</code> <code>int</code> <p>High-danger goals for (on-ice), e.g, 0</p> <code>ga</code> <code>int</code> <p>Goals against (on-ice), e.g, 0</p> <code>hdga</code> <code>int</code> <p>High-danger goals against (on-ice), e.g, 0</p> <code>xgf</code> <code>float</code> <p>xG for (on-ice), e.g., 1.271583</p> <code>xga</code> <code>float</code> <p>xG against (on-ice), e.g, 0.000000</p> <code>sf</code> <code>int</code> <p>Shots for (on-ice), e.g, 5</p> <code>sa</code> <code>int</code> <p>Shots against (on-ice), e.g, 0</p> <code>hdsf</code> <code>int</code> <p>High-danger shots for (on-ice), e.g, 3</p> <code>hdsa</code> <code>int</code> <p>High-danger shots against (on-ice), e.g, 0</p> <code>ff</code> <code>int</code> <p>Fenwick for (on-ice), e.g, 5</p> <code>fa</code> <code>int</code> <p>Fenwick against (on-ice), e.g, 0</p> <code>hdff</code> <code>int</code> <p>High-danger fenwick for (on-ice), e.g, 3</p> <code>hdfa</code> <code>int</code> <p>High-danger fenwick against (on-ice), e.g, 0</p> <code>cf</code> <code>int</code> <p>Corsi for (on-ice), e.g, 5</p> <code>ca</code> <code>int</code> <p>Corsi against (on-ice), e.g, 0</p> <code>bsf</code> <code>int</code> <p>Shots taken that were blocked (on-ice), e.g, 0</p> <code>bsa</code> <code>int</code> <p>Shots blocked (on-ice), e.g, 0</p> <code>msf</code> <code>int</code> <p>Missed shots taken (on-ice), e.g, 0</p> <code>msa</code> <code>int</code> <p>Missed shots against (on-ice), e.g, 0</p> <code>hdmsf</code> <code>int</code> <p>High-danger missed shots taken (on-ice), e.g, 0</p> <code>hdmsa</code> <code>int</code> <p>High-danger missed shots against (on-ice), e.g, 0</p> <code>teammate_block</code> <code>int</code> <p>Shots blocked by teammates (on-ice), e.g, 0</p> <code>hf</code> <code>int</code> <p>Hits for (on-ice), e.g, 0</p> <code>ht</code> <code>int</code> <p>Hits taken (on-ice), e.g, 0</p> <code>give</code> <code>int</code> <p>Giveaways (on-ice), e.g, 0</p> <code>take</code> <code>int</code> <p>Takeaways (on-ice), e.g, 0</p> <code>ozf</code> <code>int</code> <p>Offensive zone faceoffs (on-ice), e.g, 0</p> <code>nzf</code> <code>int</code> <p>Neutral zone faceoffs (on-ice), e.g, 4</p> <code>dzf</code> <code>int</code> <p>Defensive zone faceoffs (on-ice), e.g, 0</p> <code>fow</code> <code>int</code> <p>Faceoffs won (on-ice), e.g, 2</p> <code>fol</code> <code>int</code> <p>Faceoffs lost (on-ice), e.g, 0</p> <code>ozfw</code> <code>int</code> <p>Offensive zone faceoffs won (on-ice), e.g, 0</p> <code>ozfl</code> <code>int</code> <p>Offensive zone faceoffs lost (on-ice), e.g, 0</p> <code>nzfw</code> <code>int</code> <p>Neutral zone faceoffs won (on-ice), e.g, 2</p> <code>nzfl</code> <code>int</code> <p>Neutral zone faceoffs lost (on-ice), e.g, 1</p> <code>dzfw</code> <code>int</code> <p>Defensive zone faceoffs won (on-ice), e.g, 0</p> <code>dzfl</code> <code>int</code> <p>Defensive zone faceoffs lost (on-ice), e.g, 1</p> <code>pent0</code> <code>int</code> <p>Penalty shots allowed (on-ice), e.g, 0</p> <code>pent2</code> <code>int</code> <p>Minor penalties taken (on-ice), e.g, 1</p> <code>pent4</code> <code>int</code> <p>Double minor penalties taken (on-ice), e.g, 0</p> <code>pent5</code> <code>int</code> <p>Major penalties taken (on-ice), e.g, 0</p> <code>pent10</code> <code>int</code> <p>Game misconduct penalties taken (on-ice), e.g, 0</p> <code>pend0</code> <code>int</code> <p>Penalty shots drawn (on-ice), e.g, 0</p> <code>pend2</code> <code>int</code> <p>Minor penalties drawn (on-ice), e.g, 0</p> <code>pend4</code> <code>int</code> <p>Double minor penalties drawn (on-ice), e.g, 0</p> <code>pend5</code> <code>int</code> <p>Major penalties drawn (on-ice), e.g, 0</p> <code>pend10</code> <code>int</code> <p>Game misconduct penalties drawn (on-ice), e.g, 0</p> <code>gf_p60</code> <code>float</code> <p>Goals for (on-ice) per 60 minutes</p> <code>ga_p60</code> <code>float</code> <p>Goals against (on-ice) per 60 minutes</p> <code>hdgf_p60</code> <code>float</code> <p>High-danger goals for (on-ice) per 60 minutes</p> <code>hdga_p60</code> <code>float</code> <p>High-danger goals against (on-ice) per 60 minutes</p> <code>xgf_p60</code> <code>float</code> <p>xG for (on-ice) per 60 minutes</p> <code>xga_p60</code> <code>float</code> <p>xG against (on-ice) per 60 minutes</p> <code>sf_p60</code> <code>float</code> <p>Shots for (on-ice) per 60 minutes</p> <code>sa_p60</code> <code>float</code> <p>Shots against (on-ice) per 60 minutes</p> <code>hdsf_p60</code> <code>float</code> <p>High-danger shots for (on-ice) per 60 minutes</p> <code>hdsa_p60</code> <code>float</code> <p>High danger shots against (on-ice) per 60 minutes</p> <code>ff_p60</code> <code>float</code> <p>Fenwick for (on-ice) per 60 minutes</p> <code>fa_p60</code> <code>float</code> <p>Fenwick against (on-ice) per 60 minutes</p> <code>hdff_p60</code> <code>float</code> <p>High-danger fenwick for (on-ice) per 60 minutes</p> <code>hdfa_p60</code> <code>float</code> <p>High-danger fenwick against (on-ice) per 60 minutes</p> <code>cf_p60</code> <code>float</code> <p>Corsi for (on-ice) per 60 minutes</p> <code>ca_p60</code> <code>float</code> <p>Corsi against (on-ice) per 60 minutes</p> <code>bsf_p60</code> <code>float</code> <p>Blocked shots for (on-ice) per 60 minutes</p> <code>bsa_p60</code> <code>float</code> <p>Blocked shots against (on-ice) per 60 minutes</p> <code>msf_p60</code> <code>float</code> <p>Missed shots for (on-ice) per 60 minutes</p> <code>msa_p60</code> <code>float</code> <p>Missed shots against (on-ice) per 60 minutes</p> <code>hdmsf_p60</code> <code>float</code> <p>High-danger missed shots for (on-ice) per 60 minutes</p> <code>hdmsa_p60</code> <code>float</code> <p>High-danger missed shots against (on-ice) per 60 minutes</p> <code>teammate_block_p60</code> <code>float</code> <p>Shots blocked by teammates (on-ice) per 60 minutes</p> <code>hf_p60</code> <code>float</code> <p>Hits  for (on-ice) per 60 minutes</p> <code>ht_p60</code> <code>float</code> <p>Hits taken (on-ice) per 60 minutes</p> <code>give_p60</code> <code>float</code> <p>Giveaways (on-ice) per 60 minutes</p> <code>take_p60</code> <code>float</code> <p>Takeaways (on-ice) per 60 minutes</p> <code>pent0_p60</code> <code>float</code> <p>Penalty shots taken (on-ice) per 60 minutes</p> <code>pent2_p60</code> <code>float</code> <p>Minor penalties taken (on-ice) per 60 minutes</p> <code>pent4_p60</code> <code>float</code> <p>Double minor penalties taken (on-ice) per 60 minutes</p> <code>pent5_p60</code> <code>float</code> <p>Major penalties taken (on-ice) per 60 minutes</p> <code>pent10_p60</code> <code>float</code> <p>Game misconduct pentalties taken (on-ice) per 60 minutes</p> <code>pend0_p60</code> <code>float</code> <p>Penalty shots drawn (on-ice) per 60 minutes</p> <code>pend2_p60</code> <code>float</code> <p>Minor penalties drawn (on-ice) per 60 minutes</p> <code>pend4_p60</code> <code>float</code> <p>Double minor penalties drawn (on-ice) per 60 minutes</p> <code>pend5_p60</code> <code>float</code> <p>Major penalties drawn (on-ice) per 60 minutes</p> <code>pend10_p60</code> <code>float</code> <p>Game misconduct penalties drawn (on-ice) per 60 minutes</p> <code>gf_percent</code> <code>float</code> <p>On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)</p> <code>hdgf_percent</code> <code>float</code> <p>On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF / (HDGF + HDGA)</p> <code>xgf_percent</code> <code>float</code> <p>On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)</p> <code>sf_percent</code> <code>float</code> <p>On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)</p> <code>hdsf_percent</code> <code>float</code> <p>On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF / (HDSF + HDSA)</p> <code>ff_percent</code> <code>float</code> <p>On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)</p> <code>hdff_percent</code> <code>float</code> <p>On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF / (HDFF + HDFA)</p> <code>cf_percent</code> <code>float</code> <p>On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)</p> <code>bsf_percent</code> <code>float</code> <p>On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)</p> <code>msf_percent</code> <code>float</code> <p>On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)</p> <code>hdmsf_percent</code> <code>float</code> <p>On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e., HDMSF / (HDMSF + HDMSA)</p> <code>hf_percent</code> <code>float</code> <p>On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)</p> <code>take_percent</code> <code>float</code> <p>On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2023020001\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Team dataframe with default options</p> <pre><code>&gt;&gt;&gt; scraper._prep_team_stats()\n</code></pre> <p>Team statistics, aggregated to season level</p> <pre><code>&gt;&gt;&gt; scraper._prep_team_stats(level=\"season\")\n</code></pre> <p>Team statistics, aggregated to game level, accounting for teammates</p> <pre><code>&gt;&gt;&gt; scraper._prep_team_stats(level=\"game\", teammates=True)\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _prep_team_stats(\n    self,\n    level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n    strengths: bool = True,\n    opposition: bool = False,\n    score: bool = False,\n) -&gt; None:\n    \"\"\"Prepares DataFrame of team stats from play-by-play data.\n\n    Nested within `prep_team_stats` method.\n\n    Parameters:\n        level (str):\n            Determines the level of aggregation. One of season, session, game, period\n        score (bool):\n            Determines if stats account  for score state\n        strengths (bool):\n            Determines if stats account  for strength state\n        opposition (bool):\n            Determines if stats account  for opponents on ice\n\n    Returns:\n        season (int):\n            Season as 8-digit number, e.g., 2023 for 2023-24 season\n        session (str):\n            Whether game is regular season, playoffs, or pre-season, e.g., R\n        game_id (int):\n            Unique game ID assigned by the NHL, e.g., 2023020001\n        team (str):\n            Player's team, e.g., NSH\n        opp_team (str):\n            Opposing team, e.g., TBL\n        strength_state (str):\n            Strength state, e.g., 5v5\n        period (int):\n            Period, e.g., 3\n        score_state (str):\n            Score state, e.g., 2v1\n        toi (float):\n            Time on-ice, in minutes, e.g, 1.100000\n        gf (int):\n            Goals for (on-ice), e.g, 0\n        hdgf (int):\n            High-danger goals for (on-ice), e.g, 0\n        ga (int):\n            Goals against (on-ice), e.g, 0\n        hdga (int):\n            High-danger goals against (on-ice), e.g, 0\n        xgf (float):\n            xG for (on-ice), e.g., 1.271583\n        xga (float):\n            xG against (on-ice), e.g, 0.000000\n        sf (int):\n            Shots for (on-ice), e.g, 5\n        sa (int):\n            Shots against (on-ice), e.g, 0\n        hdsf (int):\n            High-danger shots for (on-ice), e.g, 3\n        hdsa (int):\n            High-danger shots against (on-ice), e.g, 0\n        ff (int):\n            Fenwick for (on-ice), e.g, 5\n        fa (int):\n            Fenwick against (on-ice), e.g, 0\n        hdff (int):\n            High-danger fenwick for (on-ice), e.g, 3\n        hdfa (int):\n            High-danger fenwick against (on-ice), e.g, 0\n        cf (int):\n            Corsi for (on-ice), e.g, 5\n        ca (int):\n            Corsi against (on-ice), e.g, 0\n        bsf (int):\n            Shots taken that were blocked (on-ice), e.g, 0\n        bsa (int):\n            Shots blocked (on-ice), e.g, 0\n        msf (int):\n            Missed shots taken (on-ice), e.g, 0\n        msa (int):\n            Missed shots against (on-ice), e.g, 0\n        hdmsf (int):\n            High-danger missed shots taken (on-ice), e.g, 0\n        hdmsa (int):\n            High-danger missed shots against (on-ice), e.g, 0\n        teammate_block (int):\n            Shots blocked by teammates (on-ice), e.g, 0\n        hf (int):\n            Hits for (on-ice), e.g, 0\n        ht (int):\n            Hits taken (on-ice), e.g, 0\n        give (int):\n            Giveaways (on-ice), e.g, 0\n        take (int):\n            Takeaways (on-ice), e.g, 0\n        ozf (int):\n            Offensive zone faceoffs (on-ice), e.g, 0\n        nzf (int):\n            Neutral zone faceoffs (on-ice), e.g, 4\n        dzf (int):\n            Defensive zone faceoffs (on-ice), e.g, 0\n        fow (int):\n            Faceoffs won (on-ice), e.g, 2\n        fol (int):\n            Faceoffs lost (on-ice), e.g, 0\n        ozfw (int):\n            Offensive zone faceoffs won (on-ice), e.g, 0\n        ozfl (int):\n            Offensive zone faceoffs lost (on-ice), e.g, 0\n        nzfw (int):\n            Neutral zone faceoffs won (on-ice), e.g, 2\n        nzfl (int):\n            Neutral zone faceoffs lost (on-ice), e.g, 1\n        dzfw (int):\n            Defensive zone faceoffs won (on-ice), e.g, 0\n        dzfl (int):\n            Defensive zone faceoffs lost (on-ice), e.g, 1\n        pent0 (int):\n            Penalty shots allowed (on-ice), e.g, 0\n        pent2 (int):\n            Minor penalties taken (on-ice), e.g, 1\n        pent4 (int):\n            Double minor penalties taken (on-ice), e.g, 0\n        pent5 (int):\n            Major penalties taken (on-ice), e.g, 0\n        pent10 (int):\n            Game misconduct penalties taken (on-ice), e.g, 0\n        pend0 (int):\n            Penalty shots drawn (on-ice), e.g, 0\n        pend2 (int):\n            Minor penalties drawn (on-ice), e.g, 0\n        pend4 (int):\n            Double minor penalties drawn (on-ice), e.g, 0\n        pend5 (int):\n            Major penalties drawn (on-ice), e.g, 0\n        pend10 (int):\n            Game misconduct penalties drawn (on-ice), e.g, 0\n        gf_p60 (float):\n            Goals for (on-ice) per 60 minutes\n        ga_p60 (float):\n            Goals against (on-ice) per 60 minutes\n        hdgf_p60 (float):\n            High-danger goals for (on-ice) per 60 minutes\n        hdga_p60 (float):\n            High-danger goals against (on-ice) per 60 minutes\n        xgf_p60 (float):\n            xG for (on-ice) per 60 minutes\n        xga_p60 (float):\n            xG against (on-ice) per 60 minutes\n        sf_p60 (float):\n            Shots for (on-ice) per 60 minutes\n        sa_p60 (float):\n            Shots against (on-ice) per 60 minutes\n        hdsf_p60 (float):\n            High-danger shots for (on-ice) per 60 minutes\n        hdsa_p60 (float):\n            High danger shots against (on-ice) per 60 minutes\n        ff_p60 (float):\n            Fenwick for (on-ice) per 60 minutes\n        fa_p60 (float):\n            Fenwick against (on-ice) per 60 minutes\n        hdff_p60 (float):\n            High-danger fenwick for (on-ice) per 60 minutes\n        hdfa_p60 (float):\n            High-danger fenwick against (on-ice) per 60 minutes\n        cf_p60 (float):\n            Corsi for (on-ice) per 60 minutes\n        ca_p60 (float):\n            Corsi against (on-ice) per 60 minutes\n        bsf_p60 (float):\n            Blocked shots for (on-ice) per 60 minutes\n        bsa_p60 (float):\n            Blocked shots against (on-ice) per 60 minutes\n        msf_p60 (float):\n            Missed shots for (on-ice) per 60 minutes\n        msa_p60 (float):\n            Missed shots against (on-ice) per 60 minutes\n        hdmsf_p60 (float):\n            High-danger missed shots for (on-ice) per 60 minutes\n        hdmsa_p60 (float):\n            High-danger missed shots against (on-ice) per 60 minutes\n        teammate_block_p60 (float):\n            Shots blocked by teammates (on-ice) per 60 minutes\n        hf_p60 (float):\n            Hits  for (on-ice) per 60 minutes\n        ht_p60 (float):\n            Hits taken (on-ice) per 60 minutes\n        give_p60 (float):\n            Giveaways (on-ice) per 60 minutes\n        take_p60 (float):\n            Takeaways (on-ice) per 60 minutes\n        pent0_p60 (float):\n            Penalty shots taken (on-ice) per 60 minutes\n        pent2_p60 (float):\n            Minor penalties taken (on-ice) per 60 minutes\n        pent4_p60 (float):\n            Double minor penalties taken (on-ice) per 60 minutes\n        pent5_p60 (float):\n            Major penalties taken (on-ice) per 60 minutes\n        pent10_p60 (float):\n            Game misconduct pentalties taken (on-ice) per 60 minutes\n        pend0_p60 (float):\n            Penalty shots drawn (on-ice) per 60 minutes\n        pend2_p60 (float):\n            Minor penalties drawn (on-ice) per 60 minutes\n        pend4_p60 (float):\n            Double minor penalties drawn (on-ice) per 60 minutes\n        pend5_p60 (float):\n            Major penalties drawn (on-ice) per 60 minutes\n        pend10_p60 (float):\n            Game misconduct penalties drawn (on-ice) per 60 minutes\n        gf_percent (float):\n            On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)\n        hdgf_percent (float):\n            On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF /\n            (HDGF + HDGA)\n        xgf_percent (float):\n            On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)\n        sf_percent (float):\n            On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)\n        hdsf_percent (float):\n            On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF /\n            (HDSF + HDSA)\n        ff_percent (float):\n            On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)\n        hdff_percent (float):\n            On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF /\n            (HDFF + HDFA)\n        cf_percent (float):\n            On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)\n        bsf_percent (float):\n            On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)\n        msf_percent (float):\n            On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)\n        hdmsf_percent (float):\n            On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e.,\n            HDMSF / (HDMSF + HDMSA)\n        hf_percent (float):\n            On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)\n        take_percent (float):\n            On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)\n\n    Examples:\n        First, instantiate the class with a game ID\n        &gt;&gt;&gt; game_id = 2023020001\n        &gt;&gt;&gt; scraper = Scraper(game_id)\n\n        Team dataframe with default options\n        &gt;&gt;&gt; scraper._prep_team_stats()\n\n        Team statistics, aggregated to season level\n        &gt;&gt;&gt; scraper._prep_team_stats(level=\"season\")\n\n        Team statistics, aggregated to game level, accounting for teammates\n        &gt;&gt;&gt; scraper._prep_team_stats(level=\"game\", teammates=True)\n\n    \"\"\"\n    merge_cols = [\"id\", \"event_idx\"]\n\n    data = self.play_by_play.merge(self.play_by_play_ext, how=\"left\", on=merge_cols)\n\n    # Getting the \"for\" stats\n\n    group_list = [\"season\", \"session\", \"event_team\"]\n\n    if strengths is True:\n        group_list.append(\"strength_state\")\n\n    if level == \"game\" or level == \"period\" or opposition:\n        group_list.insert(3, \"opp_team\")\n\n        group_list[2:2] = [\"game_id\", \"game_date\"]\n\n    if level == \"period\":\n        group_list.append(\"period\")\n\n    if score is True:\n        group_list.append(\"score_state\")\n\n    agg_stats = [\n        \"pred_goal\",\n        \"pred_goal_adj\",\n        \"shot\",\n        \"shot_adj\",\n        \"miss\",\n        \"miss_adj\",\n        \"block\",\n        \"block_adj\",\n        \"teammate_block\",\n        \"teammate_block_adj\",\n        \"fenwick\",\n        \"fenwick_adj\",\n        \"goal\",\n        \"goal_adj\",\n        \"give\",\n        \"take\",\n        \"hd_goal\",\n        \"hd_shot\",\n        \"hd_fenwick\",\n        \"hd_miss\",\n        \"hit\",\n        \"pen0\",\n        \"pen2\",\n        \"pen4\",\n        \"pen5\",\n        \"pen10\",\n        \"fac\",\n        \"ozf\",\n        \"nzf\",\n        \"dzf\",\n        \"event_length\",\n    ]\n\n    agg_dict = {x: \"sum\" for x in agg_stats if x in data.columns}\n\n    new_cols = [\n        \"xgf\",\n        \"xgf_adj\",\n        \"sf\",\n        \"sf_adj\",\n        \"msf\",\n        \"msf_adj\",\n        \"bsa\",\n        \"bsa_adj\",\n        \"teammate_block\",\n        \"teammate_block_adj\",\n        \"ff\",\n        \"ff_adj\",\n        \"gf\",\n        \"gf_adj\",\n        \"give\",\n        \"take\",\n        \"hdgf\",\n        \"hdsf\",\n        \"hdff\",\n        \"hdmsf\",\n        \"hf\",\n        \"pent0\",\n        \"pent2\",\n        \"pent4\",\n        \"pent5\",\n        \"pent10\",\n        \"fow\",\n        \"ozfw\",\n        \"nzfw\",\n        \"dzfw\",\n        \"toi\",\n    ]\n\n    new_cols = dict(zip(agg_stats, new_cols, strict=False))\n\n    new_cols.update({\"event_team\": \"team\"})\n\n    stats_for = data.groupby(group_list, as_index=False).agg(agg_dict).rename(columns=new_cols)\n\n    # Getting the \"against\" stats\n\n    group_list = [\"season\", \"session\", \"opp_team\"]\n\n    if strengths is True:\n        group_list.append(\"opp_strength_state\")\n\n    if level == \"game\" or level == \"period\":\n        group_list.insert(3, \"event_team\")\n\n        group_list[2:2] = [\"game_id\", \"game_date\"]\n\n    if level == \"period\":\n        group_list.append(\"period\")\n\n    if score is True:\n        group_list.append(\"opp_score_state\")\n\n    agg_stats = [\n        \"pred_goal\",\n        \"pred_goal_adj\",\n        \"shot\",\n        \"shot_adj\",\n        \"miss\",\n        \"miss_adj\",\n        \"block\",\n        \"block_adj\",\n        \"fenwick\",\n        \"fenwick_adj\",\n        \"goal\",\n        \"goal_adj\",\n        \"hd_goal\",\n        \"hd_shot\",\n        \"hd_fenwick\",\n        \"hd_miss\",\n        \"hit\",\n        \"pen0\",\n        \"pen2\",\n        \"pen4\",\n        \"pen5\",\n        \"pen10\",\n        \"fac\",\n        \"ozf\",\n        \"nzf\",\n        \"dzf\",\n        \"event_length\",\n    ]\n\n    agg_dict = {x: \"sum\" for x in agg_stats if x in data.columns}\n\n    new_cols = [\n        \"xga\",\n        \"xga_adj\",\n        \"sa\",\n        \"sa_adj\",\n        \"msa\",\n        \"msa_adj\",\n        \"bsf\",\n        \"bsf_adj\",\n        \"fa\",\n        \"fa_adj\",\n        \"ga\",\n        \"ga_adj\",\n        \"hdga\",\n        \"hdsa\",\n        \"hdfa\",\n        \"hdmsa\",\n        \"ht\",\n        \"pend0\",\n        \"pend2\",\n        \"pend4\",\n        \"pend5\",\n        \"pend10\",\n        \"fol\",\n        \"ozfl\",\n        \"nzfl\",\n        \"dzfl\",\n        \"toi\",\n    ]\n\n    new_cols = dict(zip(agg_stats, new_cols, strict=False))\n\n    new_cols.update(\n        {\n            \"opp_team\": \"team\",\n            \"opp_score_state\": \"score_state\",\n            \"opp_strength_state\": \"strength_state\",\n            \"event_team\": \"opp_team\",\n        }\n    )\n\n    stats_against = data.groupby(group_list, as_index=False).agg(agg_dict).rename(columns=new_cols)\n\n    merge_list = [\n        \"season\",\n        \"session\",\n        \"game_id\",\n        \"game_date\",\n        \"team\",\n        \"opp_team\",\n        \"strength_state\",\n        \"score_state\",\n        \"period\",\n    ]\n\n    merge_list = [x for x in merge_list if x in stats_for.columns and x in stats_against.columns]\n\n    team_stats = stats_for.merge(stats_against, on=merge_list, how=\"outer\")\n\n    team_stats[\"toi\"] = (team_stats.toi_x + team_stats.toi_y) / 60\n\n    fos = [\"ozf\", \"nzf\", \"dzf\"]\n\n    for fo in fos:\n        team_stats[fo] = team_stats[f\"{fo}w\"] + team_stats[f\"{fo}w\"]\n\n    team_stats = team_stats.dropna(subset=\"toi\").reset_index(drop=True)\n\n    cols = [x for x in list(TeamStatSchema.dtypes.keys()) if x in team_stats]\n\n    team_stats = team_stats[cols]\n\n    team_stats = prep_p60(team_stats)\n\n    team_stats = prep_oi_percent(team_stats)\n\n    team_stats = TeamStatSchema.validate(team_stats)\n\n    self._team_stats = team_stats\n</code></pre>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Game","title":"Game","text":"<p>Class instance for scraping play-by-play and other data for individual games. Utilized within Scraper.</p> <p>Parameters:</p> Name Type Description Default <code>game_id</code> <code>int or float or str</code> <p>10-digit game identifier, e.g., 2023020001</p> required <code>requests_session</code> <code>Session</code> <p>If scraping multiple games, can provide single Session object to reduce stress on the API / HTML endpoints</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>game_id</code> <code>int</code> <p>10-digit game identifier, e.g., 2019020684</p> <code>game_state</code> <code>str</code> <p>Whether game is scheduled, started, finished, or official, e.g., OFF</p> <code>game_schedule_state</code> <code>str</code> <p>Whether the game has been scheduled, e.g., OK</p> <code>current_period</code> <code>int</code> <p>Current period, or if game has finished, then latest period, e.g., 3</p> <code>current_period_type</code> <code>str</code> <p>Whether period is regular or overtime, e.g., REG</p> <code>time_remaining</code> <code>str</code> <p>Amount of time remaining in the game, e.g., '00:00'</p> <code>seconds_remaining</code> <code>int</code> <p>Amounting of time remaining in the game in seconds, e.g., 0</p> <code>running</code> <code>bool</code> <p>Whether the game is currently running, e.g., False</p> <code>in_intermission</code> <code>bool</code> <p>Whether the game is currently in intermission, e.g., False</p> <code>season</code> <code>int</code> <p>Season in which the game was played, e.g., 20192020</p> <code>session</code> <code>str</code> <p>Whether the game is regular season, playoffs, or pre-season, e.g., R</p> <code>html_id</code> <code>str</code> <p>Game ID used for scraping HTML endpoints, e.g., 020684</p> <code>game_date</code> <code>str</code> <p>Date game was played, e.g., 2020-01-09</p> <code>start_time_et</code> <code>str</code> <p>Start time in Eastern timezone, regardless of venue, e.g., 20:30</p> <code>venue</code> <code>str</code> <p>Venue name, e.g., UNITED CENTER</p> <code>tv_broadcasts</code> <code>dict</code> <p>TV broadcasts information, e.g., {141: {'market': 'A', 'countryCode': 'US', 'network': 'FS-TN'}, ...}</p> <code>home_team</code> <code>dict</code> <p>Home team information, e.g., {'id': 16, 'name': 'BLACKHAWKS', 'abbrev': 'CHI', ...}</p> <code>away_team</code> <code>dict</code> <p>Away team information, e.g., {'id': 18, 'name': 'PREDATORS', 'abbrev': 'NSH', ...}</p> <code>api_endpoint</code> <code>str</code> <p>URL for accessing play-by-play and API rosters, e.g., 'https://api-web.nhle.com/v1/gamecenter/2019020684/play-by-play'</p> <code>api_endpoint_other</code> <code>str</code> <p>URL for accessing other game information, e.g., 'https://api-web.nhle.com/v1/gamecenter/2019020684/landing'</p> <code>html_rosters_endpoint</code> <code>str</code> <p>URL for accessing rosters from HTML endpoint, e.g., 'https://www.nhl.com/scores/htmlreports/20192020/RO020684.HTM'</p> <code>home_shifts_endpoint</code> <code>str</code> <p>URL for accessing home shifts from HTML endpoint, e.g., 'https://www.nhl.com/scores/htmlreports/20192020/TH020684.HTM'</p> <code>away_shifts_endpoint</code> <code>str</code> <p>URL for accessing away shifts from HTML endpoint, e.g., 'https://www.nhl.com/scores/htmlreports/20192020/TV020684.HTM'</p> <code>html_events_endpoint</code> <code>str</code> <p>URL for accessing events from HTML endpoint, e.g., 'https://www.nhl.com/scores/htmlreports/20192020/PL020684.HTM'</p> Note <p>You can return any of the properties as a Pandas DataFrame by appending '_df' to the property</p> <p>Examples:</p> <p>First, instantiate the Game object</p> <pre><code>&gt;&gt;&gt; game = Game(2023020001)\n</code></pre> <p>Scrape play-by-play information</p> <pre><code>&gt;&gt;&gt; pbp = game.play_by_play  # Returns the data as a list\n</code></pre> <p>Get play-by-play as a Pandas DataFrame</p> <pre><code>&gt;&gt;&gt; pbp_df = game.play_by_play_df  # Returns the data as a Pandas DataFrame\n</code></pre> <p>The object stores information from each component of the play-by-play data</p> <pre><code>&gt;&gt;&gt; shifts = game.shifts  # Returns a list of shifts\n&gt;&gt;&gt; rosters = game.rosters  # Returns a list of players from both API &amp; HTML endpoints\n&gt;&gt;&gt; changes = game.changes  # Returns a list of changes constructed from shifts &amp; roster data\n</code></pre> <p>Data can also be returned as a Pandas DataFrame, rather than a list</p> <pre><code>&gt;&gt;&gt; shifts_df = game.shifts_df  # Same as above, but as Pandas DataFrame\n</code></pre> <p>Access data from API or HTML endpoints, or both</p> <pre><code>&gt;&gt;&gt; api_events = game.api_events\n&gt;&gt;&gt; api_rosters = game.api_rosters\n&gt;&gt;&gt; html_events = game.html_events\n&gt;&gt;&gt; html_rosters = game.html_rosters\n</code></pre> <p>The Game object is fairly rich with information</p> <pre><code>&gt;&gt;&gt; game_date = game.game_date\n&gt;&gt;&gt; home_team = game.home_team\n&gt;&gt;&gt; game_state = game.game_state\n&gt;&gt;&gt; seconds_remaining = game.seconds_remaining\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>class Game:\n    \"\"\"Class instance for scraping play-by-play and other data for individual games. Utilized within Scraper.\n\n    Parameters:\n        game_id (int or float or str):\n            10-digit game identifier, e.g., 2023020001\n        requests_session (requests.Session, optional):\n            If scraping multiple games, can provide single Session object to reduce stress on the API / HTML endpoints\n\n    Attributes:\n        game_id (int):\n            10-digit game identifier, e.g., 2019020684\n        game_state (str):\n            Whether game is scheduled, started, finished, or official, e.g., OFF\n        game_schedule_state (str):\n            Whether the game has been scheduled, e.g., OK\n        current_period (int):\n            Current period, or if game has finished, then latest period, e.g., 3\n        current_period_type (str):\n            Whether period is regular or overtime, e.g., REG\n        time_remaining (str):\n            Amount of time remaining in the game, e.g., '00:00'\n        seconds_remaining (int):\n            Amounting of time remaining in the game in seconds, e.g., 0\n        running (bool):\n            Whether the game is currently running, e.g., False\n        in_intermission (bool):\n            Whether the game is currently in intermission, e.g., False\n        season (int):\n            Season in which the game was played, e.g., 20192020\n        session (str):\n            Whether the game is regular season, playoffs, or pre-season, e.g., R\n        html_id (str):\n            Game ID used for scraping HTML endpoints, e.g., 020684\n        game_date (str):\n            Date game was played, e.g., 2020-01-09\n        start_time_et (str):\n            Start time in Eastern timezone, regardless of venue, e.g., 20:30\n        venue (str):\n            Venue name, e.g., UNITED CENTER\n        tv_broadcasts (dict):\n            TV broadcasts information, e.g., {141: {'market': 'A', 'countryCode': 'US', 'network': 'FS-TN'}, ...}\n        home_team (dict):\n            Home team information, e.g., {'id': 16, 'name': 'BLACKHAWKS', 'abbrev': 'CHI', ...}\n        away_team (dict):\n            Away team information, e.g., {'id': 18, 'name': 'PREDATORS', 'abbrev': 'NSH', ...}\n        api_endpoint (str):\n            URL for accessing play-by-play and API rosters, e.g.,\n            'https://api-web.nhle.com/v1/gamecenter/2019020684/play-by-play'\n        api_endpoint_other (str):\n            URL for accessing other game information, e.g.,\n            'https://api-web.nhle.com/v1/gamecenter/2019020684/landing'\n        html_rosters_endpoint (str):\n            URL for accessing rosters from HTML endpoint, e.g.,\n            'https://www.nhl.com/scores/htmlreports/20192020/RO020684.HTM'\n        home_shifts_endpoint (str):\n            URL for accessing home shifts from HTML endpoint, e.g.,\n            'https://www.nhl.com/scores/htmlreports/20192020/TH020684.HTM'\n        away_shifts_endpoint (str):\n            URL for accessing away shifts from HTML endpoint, e.g.,\n            'https://www.nhl.com/scores/htmlreports/20192020/TV020684.HTM'\n        html_events_endpoint (str):\n            URL for accessing events from HTML endpoint, e.g.,\n            'https://www.nhl.com/scores/htmlreports/20192020/PL020684.HTM'\n\n    Note:\n        You can return any of the properties as a Pandas DataFrame by appending '_df' to the property\n\n    Examples:\n        First, instantiate the Game object\n        &gt;&gt;&gt; game = Game(2023020001)\n\n        Scrape play-by-play information\n        &gt;&gt;&gt; pbp = game.play_by_play  # Returns the data as a list\n\n        Get play-by-play as a Pandas DataFrame\n        &gt;&gt;&gt; pbp_df = game.play_by_play_df  # Returns the data as a Pandas DataFrame\n\n        The object stores information from each component of the play-by-play data\n        &gt;&gt;&gt; shifts = game.shifts  # Returns a list of shifts\n        &gt;&gt;&gt; rosters = game.rosters  # Returns a list of players from both API &amp; HTML endpoints\n        &gt;&gt;&gt; changes = game.changes  # Returns a list of changes constructed from shifts &amp; roster data\n\n        Data can also be returned as a Pandas DataFrame, rather than a list\n        &gt;&gt;&gt; shifts_df = game.shifts_df  # Same as above, but as Pandas DataFrame\n\n        Access data from API or HTML endpoints, or both\n        &gt;&gt;&gt; api_events = game.api_events\n        &gt;&gt;&gt; api_rosters = game.api_rosters\n        &gt;&gt;&gt; html_events = game.html_events\n        &gt;&gt;&gt; html_rosters = game.html_rosters\n\n        The Game object is fairly rich with information\n        &gt;&gt;&gt; game_date = game.game_date\n        &gt;&gt;&gt; home_team = game.home_team\n        &gt;&gt;&gt; game_state = game.game_state\n        &gt;&gt;&gt; seconds_remaining = game.seconds_remaining\n\n    \"\"\"\n\n    # TODO: Add play_by_play_ext information to documentation\n    # TODO: Check that documentation reflects roster changes\n\n    def __init__(self, game_id: str | int | float, requests_session: requests.Session | None = None):\n        \"\"\"Instantiates a Game object for a given game ID.\n\n        If nested, you can provide a requests.Session object to optimize speed.\n        \"\"\"\n        if str(game_id).isdigit() is False or len(str(game_id)) != 10:\n            raise Exception(f\"{game_id} IS NOT A VALID GAME ID\")\n\n        # Game ID\n        self.game_id: int = int(game_id)\n\n        # season\n        year = int(str(self.game_id)[0:4])\n        self.season: int = int(f\"{year}{year + 1}\")\n\n        # game session\n        game_sessions = {\"01\": \"PR\", \"02\": \"R\", \"03\": \"P\"}\n        game_session = str(self.game_id)[4:6]\n        self.session: str = game_sessions[game_session]\n\n        # HTML game ID\n        self.html_id: str = str(game_id)[4:]\n\n        # Live endpoint for many things\n        url = f\"https://api-web.nhle.com/v1/gamecenter/{self.game_id}/play-by-play\"\n        self.api_endpoint: str = url\n\n        # Alternative live endpoint\n        url = f\"https://api-web.nhle.com/v1/gamecenter/{self.game_id}/landing\"\n        self.api_endpoint_other = url\n\n        # HTML rosters endpoint\n        url = f\"https://www.nhl.com/scores/htmlreports/{self.season}/RO{self.html_id}.HTM\"\n        self.html_rosters_endpoint: str = url\n\n        # shifts endpoints\n        home_url = f\"https://www.nhl.com/scores/htmlreports/{self.season}/TH{self.html_id}.HTM\"\n        self.home_shifts_endpoint: str = home_url\n\n        away_url = f\"https://www.nhl.com/scores/htmlreports/{self.season}/TV{self.html_id}.HTM\"\n        self.away_shifts_endpoint: str = away_url\n\n        # HTML events endpoint\n        url = f\"https://www.nhl.com/scores/htmlreports/{self.season}/PL{self.html_id}.HTM\"\n        self.html_events_endpoint: str = url\n\n        # requests session\n        if requests_session is None:\n            self._requests_session = ChickenSession()\n        else:\n            self._requests_session = requests_session\n\n        # Downloading information from NHL api\n        response: dict = self._requests_session.get(self.api_endpoint).json()\n        self.api_response: dict = response\n\n        # Away team information\n        away_team = response[\"awayTeam\"]\n\n        if away_team[\"abbrev\"] == \"PHX\":\n            away_team[\"abbrev\"] = \"ARI\"\n\n        self.away_team = {\n            \"id\": away_team[\"id\"],\n            \"name\": away_team[\"commonName\"][\"default\"].upper(),\n            \"abbrev\": away_team[\"abbrev\"],\n            \"logo\": away_team[\"logo\"],\n        }\n\n        # Home team information\n        home_team = response[\"homeTeam\"]\n\n        if home_team[\"abbrev\"] == \"PHX\":\n            home_team[\"abbrev\"] = \"ARI\"\n\n        self.home_team = {\n            \"id\": home_team[\"id\"],\n            \"name\": home_team[\"commonName\"][\"default\"].upper(),\n            \"abbrev\": home_team[\"abbrev\"],\n            \"logo\": home_team[\"logo\"],\n        }\n\n        # Venue information\n        self.venue: str = response[\"venue\"][\"default\"].upper()\n\n        est = pytz.timezone(\"US/Eastern\")\n\n        if \"Z\" in response[\"startTimeUTC\"]:\n            response[\"startTimeUTC\"] = response[\"startTimeUTC\"][:-1] + \"+00:00\"\n\n        self._start_time_utc_dt: dt = dt.fromisoformat(response[\"startTimeUTC\"]).astimezone(UTC)\n        self._start_time_et_dt: dt = self._start_time_utc_dt.astimezone(est)\n\n        # Game date and start time as strings\n        self.game_date = self._start_time_et_dt.strftime(\"%Y-%m-%d\")\n        self.start_time_et = self._start_time_et_dt.strftime(\"%H:%M\")  # Consider start time local?\n\n        # Broadcast information\n        broadcasts = {x[\"id\"]: {k: v for k, v in x.items() if k != \"id\"} for x in response[\"tvBroadcasts\"]}\n        self.tv_broadcasts = broadcasts\n\n        # Game status\n        self.game_state = response[\"gameState\"]\n\n        # Whether game is finalized in the schedule or not\n        self.game_schedule_state = response[\"gameScheduleState\"]\n\n        # Clock information\n        clock = response[\"clock\"]\n\n        self.time_remaining = clock.get(\"timeRemaining\")\n        self.seconds_remaining = clock.get(\"secondsRemaining\")\n        self.running = clock[\"running\"]\n        self.in_intermission = clock[\"inIntermission\"]\n\n        # Period information\n        if response[\"gameState\"] != \"FUT\":\n            self.current_period = response[\"periodDescriptor\"][\"number\"]\n            self.current_period_type = response[\"periodDescriptor\"][\"periodType\"]\n\n        self._es_model = es_model\n        self._pp_model = pp_model\n        self._sh_model = sh_model\n        self._ef_model = ef_model\n        self._ea_model = ea_model\n\n        # Setting up placeholders for data storage\n        self._api_events = None\n        self._api_rosters = None\n        self._changes = None\n        self._html_events = None\n        self._html_rosters = None\n        self._play_by_play = None\n        self._play_by_play_ext = None\n        self._pred_goal = None\n        self._rosters = None\n        self._shifts = None\n\n        self._xg_fields = {}\n\n    def _munge_api_events(self) -&gt; None:\n        \"\"\"Method to munge events from API endpoint. Updates self._api_events.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Game object\n            &gt;&gt;&gt; game = Game(2023020001)\n\n            Before cleaning the data, game._api_events is None\n            &gt;&gt;&gt; game._api_events  # Returns None\n\n            However, you can access the raw events from the API feed\n            &gt;&gt;&gt; game.api_response[\"plays\"]\n\n            Once you've cleaned the data using `_munge_api_events`, it's then available from\n            game._api_events, or game.api_events, which is the preferred method of accessing the data\n\n            &gt;&gt;&gt; game._munge_api_events()  # Cleans the raw data from game.api_response['plays']\n            &gt;&gt;&gt; game._api_events  # Returns clean API events data\n            &gt;&gt;&gt; game.api_events  # Also returns clean API events data, preferred method of accessing\n        \"\"\"\n        self._api_events = [x for x in self.api_response[\"plays\"]]\n\n        rosters = {x[\"api_id\"]: x for x in self._api_rosters}\n\n        teams_dict = {self.home_team[\"id\"]: self.home_team[\"abbrev\"], self.away_team[\"id\"]: self.away_team[\"abbrev\"]}\n\n        event_list = []\n\n        for event in self._api_events:\n            time_split = event[\"timeInPeriod\"].split(\":\")\n\n            period = int(event[\"periodDescriptor\"][\"number\"])\n            period_type = event[\"periodDescriptor\"][\"periodType\"]\n            period_seconds = (int(time_split[0]) * 60) + int(time_split[1])\n\n            if self.session == \"R\" and period == 5:\n                game_seconds = 3900\n\n            else:\n                game_seconds = ((period - 1) * 1200) + period_seconds\n\n            event_info = {}\n\n            new_values = {\n                \"season\": self.season,\n                \"session\": self.session,\n                \"game_id\": self.game_id,\n                \"event_idx\": event[\"sortOrder\"],\n                \"period\": period,\n                \"period_type\": period_type,\n                \"period_seconds\": period_seconds,\n                \"game_seconds\": game_seconds,\n                \"event\": event[\"typeDescKey\"],\n                \"event_code\": event[\"typeCode\"],\n                \"strength\": event.get(\"situationCode\"),\n                \"home_team_defending_side\": event.get(\"homeTeamDefendingSide\"),\n            }\n\n            event_info.update(new_values)\n\n            if event_info[\"event\"] == \"period-start\":\n                event_info[\"event\"] = \"PSTR\"\n\n            if event_info[\"event\"] == \"period-end\":\n                event_info[\"event\"] = \"PEND\"\n\n            if event_info[\"event\"] == \"game-end\":\n                event_info[\"event\"] = \"GEND\"\n\n            if event_info[\"event\"] == \"shootout-complete\":\n                event_info[\"event\"] = \"SOC\"\n\n            if event.get(\"details\"):\n                new_values = {\n                    \"event_team\": teams_dict.get(event[\"details\"].get(\"eventOwnerTeamId\")),\n                    \"coords_x\": event[\"details\"].get(\"xCoord\"),\n                    \"coords_y\": event[\"details\"].get(\"yCoord\"),\n                    \"zone\": event[\"details\"].get(\"zoneCode\"),\n                    \"event_team_id\": event[\"details\"].get(\"eventOwnerTeamId\"),\n                }\n\n                event_info.update(new_values)\n\n                if event_info[\"event\"] == \"faceoff\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"winningPlayerId\"]\n                    event_info[\"player_1_type\"] = \"WINNER\"\n                    event_info[\"player_2_api_id\"] = event[\"details\"][\"losingPlayerId\"]\n                    event_info[\"player_2_type\"] = \"LOSER\"\n\n                    event_info[\"event\"] = \"FAC\"\n\n                if event_info[\"event\"] == \"stoppage\":\n                    event_info[\"stoppage_reason\"] = event[\"details\"][\"reason\"].replace(\"-\", \" \").upper()\n                    event_info[\"stoppage_reason_secondary\"] = (\n                        event[\"details\"].get(\"secondaryReason\", \"\").replace(\"-\", \" \").upper()\n                    )\n\n                    event_info[\"event\"] = \"STOP\"\n\n                if event_info[\"event\"] == \"hit\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"hittingPlayerId\"]\n                    event_info[\"player_1_type\"] = \"HITTER\"\n                    event_info[\"player_2_api_id\"] = event[\"details\"][\"hitteePlayerId\"]\n                    event_info[\"player_2_type\"] = \"HITTEE\"\n\n                    event_info[\"event\"] = \"HIT\"\n\n                if event_info[\"event\"] == \"giveaway\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"playerId\"]\n                    event_info[\"player_1_type\"] = \"GIVER\"\n\n                    event_info[\"event\"] = \"GIVE\"\n\n                if event_info[\"event\"] == \"shot-on-goal\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"shootingPlayerId\"]\n                    event_info[\"player_1_type\"] = \"SHOOTER\"\n                    event_info[\"opp_goalie_api_id\"] = event[\"details\"].get(\"goalieInNetId\", \"EMPTY_NET\")\n                    event_info[\"shot_type\"] = event[\"details\"].get(\"shotType\", \"WRIST\").upper()\n\n                    event_info[\"event\"] = \"SHOT\"\n\n                if event_info[\"event\"] == \"takeaway\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"playerId\"]\n                    event_info[\"player_1_type\"] = \"TAKER\"\n\n                    event_info[\"event\"] = \"TAKE\"\n\n                if event_info[\"event\"] == \"missed-shot\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"shootingPlayerId\"]\n                    event_info[\"player_1_type\"] = \"SHOOTER\"\n                    event_info[\"opp_goalie_api_id\"] = event[\"details\"].get(\"goalieInNetId\", \"EMPTY NET\")\n                    event_info[\"shot_type\"] = event[\"details\"].get(\"shotType\", \"WRIST\").upper()\n                    event_info[\"miss_reason\"] = event[\"details\"].get(\"reason\", \"\").replace(\"-\", \" \").upper()\n\n                    event_info[\"event\"] = \"MISS\"\n\n                if event_info[\"event\"] == \"blocked-shot\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"].get(\"blockingPlayerId\")\n                    event_info[\"player_1_type\"] = \"BLOCKER\"\n\n                    if event_info[\"player_1_api_id\"] is None:  # Not covered by tests\n                        event_info[\"event_team\"] = \"OTHER\"\n                        event_info[\"player_1\"] = \"REFEREE\"\n                        event_info[\"player_1_api_id\"] = None\n                        event_info[\"player_1_eh_id\"] = \"REFEREE\"\n\n                    event_info[\"player_2_api_id\"] = event[\"details\"][\"shootingPlayerId\"]\n                    event_info[\"player_2_type\"] = \"SHOOTER\"\n\n                    event_info[\"event\"] = \"BLOCK\"\n\n                if event_info[\"event\"] == \"goal\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"scoringPlayerId\"]\n                    event_info[\"player_1_type\"] = \"GOAL SCORER\"\n                    event_info[\"player_2_api_id\"] = event[\"details\"].get(\"assist1PlayerId\")\n\n                    if event_info[\"player_2_api_id\"] is not None:\n                        event_info[\"player_2_type\"] = \"PRIMARY ASSIST\"\n\n                    event_info[\"player_3_api_id\"] = event[\"details\"].get(\"assist2PlayerId\")\n\n                    if event_info[\"player_3_api_id\"] is not None:\n                        event_info[\"player_3_type\"] = \"SECONDARY ASSIST\"\n\n                    event_info[\"opp_goalie_api_id\"] = event[\"details\"].get(\"goalieInNetId\", \"EMPTY NET\")\n                    event_info[\"shot_type\"] = event[\"details\"].get(\"shotType\", \"WRIST\").upper()\n\n                    event_info[\"event\"] = \"GOAL\"\n\n                if event_info[\"event\"] == \"penalty\":\n                    event_info[\"penalty_type\"] = event[\"details\"][\"typeCode\"]\n                    event_info[\"penalty_reason\"] = event[\"details\"][\"descKey\"].upper()\n                    event_info[\"penalty_duration\"] = event[\"details\"].get(\"duration\")\n\n                    if (\n                        (event_info[\"penalty_type\"] == \"BEN\" and event[\"details\"].get(\"committedByPlayerId\") is None)\n                        or (\n                            \"HEAD-COACH\" in event_info[\"penalty_reason\"] or \"TEAM-STAFF\" in event_info[\"penalty_reason\"]\n                        )\n                        and event[\"details\"].get(\"committedByPlayerId\") is None\n                    ):\n                        event_info[\"player_1\"] = \"BENCH\"\n                        event_info[\"player_1_api_id\"] = None\n                        event_info[\"player_1_eh_id\"] = \"BENCH\"\n                        event_info[\"player_1_type\"] = \"COMMITTED BY\"\n                        event_info[\"player_2_api_id\"] = event[\"details\"].get(\"servedByPlayerId\")\n                        event_info[\"player_2_type\"] = \"SERVED BY\"\n\n                    else:\n                        event_info[\"player_1_api_id\"] = event[\"details\"].get(\"committedByPlayerId\")\n                        event_info[\"player_1_type\"] = \"COMMITTED BY\"\n                        event_info[\"player_2_api_id\"] = event[\"details\"].get(\"drawnByPlayerId\")\n                        event_info[\"player_2_type\"] = \"DRAWN BY\"\n\n                        if event_info[\"player_2_api_id\"] is None:\n                            event_info[\"player_2_api_id\"] = event[\"details\"].get(\"servedByPlayerId\")\n                            event_info[\"player_2_type\"] = \"SERVED BY\"\n\n                        else:\n                            event_info[\"player_3_api_id\"] = event[\"details\"].get(\"servedByPlayerId\")\n                            event_info[\"player_3_type\"] = \"SERVED BY\"\n\n                    event_info[\"event\"] = \"PENL\"\n\n                if event_info[\"event\"] == \"delayed-penalty\":\n                    event_info[\"event\"] = \"DELPEN\"\n\n                if event_info[\"event\"] == \"failed-shot-attempt\":  # Not covered by tests\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"shootingPlayerId\"]\n                    event_info[\"player_1_type\"] = \"SHOOTER\"\n                    event_info[\"opp_goalie_api_id\"] = event[\"details\"].get(\"goalieInNetId\", \"EMPTY NET\")\n\n                    event_info[\"event\"] = \"MISS\"\n\n            event_info = api_events_fixes(self.game_id, event_info)\n\n            player_cols = [\"player_1_api_id\", \"player_2_api_id\", \"player_3_api_id\", \"opp_goalie_api_id\"]\n\n            for player_col in player_cols:\n                if (\n                    player_col not in event_info\n                    or event_info[player_col] is None\n                    or event_info[player_col] == \"BENCH\"\n                    or event_info[player_col] == \"REFEREE\"\n                ):\n                    continue\n\n                else:\n                    player_info = rosters.get(event_info[player_col], {})\n\n                    new_cols = {\n                        player_col.replace(\"_api_id\", \"\"): player_info.get(\"player_name\"),\n                        player_col.replace(\"_api_id\", \"_eh_id\"): player_info.get(\"eh_id\"),\n                        player_col.replace(\"_api_id\", \"_team_jersey\"): player_info.get(\"team_jersey\"),\n                        player_col.replace(\"_api_id\", \"_position\"): player_info.get(\"position\"),\n                    }\n\n                    event_info.update(new_cols)\n\n            if event_info[\"event\"] == \"BLOCK\":\n                player_1_team = event_info.get(\"player_1_team_jersey\")\n\n                if player_1_team:\n                    player_1_team = player_1_team[:3]\n                    event_info[\"event_team\"] = player_1_team\n\n            event_list.append(event_info)\n\n        final_events = []\n\n        for event in event_list:\n            other_events = [\n                x\n                for x in event_list\n                # if x != event\n                if x[\"event\"] == event[\"event\"]\n                and x[\"game_seconds\"] == event[\"game_seconds\"]\n                and x.get(\"player_1\") is not None\n                and x[\"period\"] == event[\"period\"]\n                and x.get(\"player_1_api_id\") == event.get(\"player_1_api_id\")\n            ]\n\n            event[\"version\"] = 1\n\n            if len(other_events) &gt; 0:\n                for idx, _other_event in enumerate(other_events):\n                    if event == other_events[0]:\n                        continue\n\n                    version = idx + 1\n                    event[\"version\"] = version\n\n            final_events.append(APIEvent.model_validate(event).model_dump())\n\n        self._api_events = final_events\n\n    @property\n    def api_events(self) -&gt; list:\n        \"\"\"List of events scraped from API endpoint. Each event is a dictionary with the below keys.\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).api_events_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_idx (int):\n                Index ID for event, e.g., 689\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            event_code (str):\n                Code to indicate type of event that occured, e.g., 505\n            description (str | None):\n                Description of the event, e.g., None\n            coords_x (int):\n                x-coordinates where the event occurred, e.g, -96\n            coords_y (int):\n                y-coordinates where the event occurred, e.g., 11\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., D\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_1_type (str):\n                Type of player, e.g., GOAL SCORER\n            player_1_api_id (int):\n                NHL API ID for player_1, e.g., 8471469\n            player_1_team_jersey (str):\n                Combination of team and jersey used for player identification purposes, e.g, NSH35\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_2_type (str | None):\n                Type of player, e.g., None\n            player_2_api_id (str | None):\n                NHL API ID for player_2, e.g., None\n            player_2_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            player_3_type (str | None):\n                Type of player, e.g., None\n            player_3_api_id (str | None):\n                NHL API ID for player_3, e.g., None\n            player_3_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            strength (int):\n                Code to indication strength state, e.g., 1560\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            miss_reason (str | None):\n                Reason shot missed, e.g., None\n            opp_goalie (str | None):\n                Opposing goalie, e.g., None\n            opp_goalie_eh_id (str | None):\n                Evolving Hockey ID for opposing goalie, e.g., None\n            opp_goalie_api_id (str | None):\n                NHL API ID for opposing goalie, e.g., None\n            opp_goalie_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            event_team_id (int):\n                NHL ID for the event team, e.g., 18\n            stoppage_reason (str | None):\n                Reason the play was stopped, e.g., None\n            stoppage_reason_secondary (str | None):\n                Secondary reason play was stopped, e.g., None\n            penalty_type (str | None):\n                Type of penalty taken, e.g., None\n            penalty_reason (str | None):\n                Reason for the penalty, e.g., None\n            penalty_duration (int | None):\n                Duration of the penalty, e.g., None\n            home_team_defending_side (str):\n                Side of the ice the home team is defending, e.g., right\n            version (int):\n                Increases with simultaneous events, used for combining events in the scraper, e.g., 1\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.api_events\n\n        \"\"\"\n        if self._api_events is None:\n            if self._api_rosters is None:\n                self._munge_api_rosters()\n\n            self._munge_api_events()\n\n        return self._api_events\n\n    @property\n    def api_events_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of events scraped from API endpoint.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_idx (int):\n                Index ID for event, e.g., 689\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            event_code (str):\n                Code to indicate type of event that occured, e.g., 505\n            description (str | None):\n                Description of the event, e.g., None\n            coords_x (int):\n                x-coordinates where the event occurred, e.g, -96\n            coords_y (int):\n                y-coordinates where the event occurred, e.g., 11\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., D\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_1_type (str):\n                Type of player, e.g., GOAL SCORER\n            player_1_api_id (int):\n                NHL API ID for player_1, e.g., 8471469\n            player_1_team_jersey (str):\n                Combination of team and jersey used for player identification purposes, e.g, NSH35\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_2_type (str | None):\n                Type of player, e.g., None\n            player_2_api_id (str | None):\n                NHL API ID for player_2, e.g., None\n            player_2_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            player_3_type (str | None):\n                Type of player, e.g., None\n            player_3_api_id (str | None):\n                NHL API ID for player_3, e.g., None\n            player_3_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            strength (int):\n                Code to indication strength state, e.g., 1560\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            miss_reason (str | None):\n                Reason shot missed, e.g., None\n            opp_goalie (str | None):\n                Opposing goalie, e.g., None\n            opp_goalie_eh_id (str | None):\n                Evolving Hockey ID for opposing goalie, e.g., None\n            opp_goalie_api_id (str | None):\n                NHL API ID for opposing goalie, e.g., None\n            opp_goalie_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            event_team_id (int):\n                NHL ID for the event team, e.g., 18\n            stoppage_reason (str | None):\n                Reason the play was stopped, e.g., None\n            stoppage_reason_secondary (str | None):\n                Secondary reason play was stopped, e.g., None\n            penalty_type (str | None):\n                Type of penalty taken, e.g., None\n            penalty_reason (str | None):\n                Reason for the penalty, e.g., None\n            penalty_duration (int | None):\n                Duration of the penalty, e.g., None\n            home_team_defending_side (str):\n                Side of the ice the home team is defending, e.g., right\n            version (int):\n                Increases with simultaneous events, used for combining events in the scraper, e.g., 1\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.api_events_df\n        \"\"\"\n        if self._api_events is None:\n            if self._api_rosters is None:\n                self._munge_api_rosters()\n\n            self._munge_api_events()\n\n        return pd.DataFrame(self._api_events)\n\n    def _munge_api_rosters(self) -&gt; None:\n        \"\"\"Method to munge list of players from API  endpoint. Updates self._api_rosters.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Game object\n            &gt;&gt;&gt; game = Game(2023020001)\n\n            Before cleaning the data, game._api_rosters is None\n            &gt;&gt;&gt; game._rosters  # Returns None\n\n            However, you can access the raw roster data from the API feed\n            &gt;&gt;&gt; game.api_response[\"rosterSpots\"]\n\n            Once you've cleaned the data using `_munge_api_rosters`, it's then available from\n            game._api_rosters, or game.api_rosters, which is the preferred method of accesing the data\n\n            &gt;&gt;&gt; game._munge_api_rosters()  # Cleans the raw data from game.api_response['plays']\n            &gt;&gt;&gt; game._api_rosters  # Returns clean API rosters data\n            &gt;&gt;&gt; game.api_rosters  # Also returns clean API rosters data, preferred method of accessing\n        \"\"\"\n        players = []\n\n        team_info = {\n            self.home_team[\"id\"]: {\"venue\": \"HOME\", \"team\": self.home_team[\"abbrev\"]},\n            self.away_team[\"id\"]: {\"venue\": \"AWAY\", \"team\": self.away_team[\"abbrev\"]},\n        }\n\n        for player in self.api_response[\"rosterSpots\"]:\n            first_name = unidecode(player[\"firstName\"][\"default\"]).encode(\"latin\").decode(\"utf=8\").upper().strip()\n\n            last_name = unidecode(player[\"lastName\"][\"default\"]).encode(\"latin\").decode(\"utf=8\").upper().strip()\n\n            player_name = first_name + \" \" + last_name\n\n            player_name = (\n                player_name.replace(\"ALEXANDRE\", \"ALEX\").replace(\"ALEXANDER\", \"ALEX\").replace(\"CHRISTOPHER\", \"CHRIS\")\n            )\n\n            player_name = correct_names_dict.get(player_name, player_name)\n\n            eh_id = (player_name.split(\" \", 1)[0] + \".\" + player_name.split(\" \", 1)[1]).replace(\"..\", \".\")\n\n            eh_id = correct_api_names_dict.get(player[\"playerId\"], eh_id)\n\n            team = team_info[player[\"teamId\"]]\n\n            player_info = {\n                \"season\": self.season,\n                \"session\": self.session,\n                \"game_id\": self.game_id,\n                \"team\": team[\"team\"],\n                \"team_venue\": team[\"venue\"],\n                \"player_name\": player_name,\n                \"first_name\": first_name,\n                \"last_name\": last_name,\n                \"api_id\": player[\"playerId\"],\n                \"eh_id\": correct_api_names_dict.get(player[\"playerId\"], eh_id),\n                \"team_jersey\": team[\"team\"] + str(player[\"sweaterNumber\"]),\n                \"jersey\": player[\"sweaterNumber\"],\n                \"position\": player[\"positionCode\"],\n                \"headshot_url\": player.get(\"headshot\", \"\"),\n            }\n\n            players.append(APIRosterPlayer.model_validate(player_info).model_dump())\n\n        if self.game_id == 2013020971:\n            new_player = {\n                \"season\": self.season,\n                \"session\": self.session,\n                \"game_id\": self.game_id,\n                \"team\": \"CBJ\",\n                \"team_venue\": \"AWAY\",\n                \"player_name\": \"NATHAN HORTON\",\n                \"first_name\": \"NATHAN\",\n                \"last_name\": \"HORTON\",\n                \"api_id\": 8470596,\n                \"eh_id\": \"NATHAN.HORTON\",\n                \"team_jersey\": \"CBJ8\",\n                \"jersey\": 8,\n                \"position\": \"R\",\n                \"headshot_url\": \"\",\n            }\n\n            players.append(APIRosterPlayer.model_validate(new_player).model_dump())\n\n        players = sorted(players, key=lambda k: (k[\"team_venue\"], k[\"player_name\"]))\n\n        self._api_rosters = players\n\n    @property\n    def api_rosters(self) -&gt; list:\n        \"\"\"List of players scraped from API endpoint. Returns a dictionary of players with the below keys.\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).api_rosters_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            api_id (str):\n                NHL API ID for the player, e.g., 8476887\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            position (str):\n                Player's position, e.g., L\n            first_name (str):\n                Player's first name, e.g., FILIP\n            last_name (str):\n                Player's last name, e.g., FORSBERG\n            headshot_url (str):\n                URL to retreive player's headshot\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.api_rosters\n        \"\"\"\n        if self._api_rosters is None:\n            self._munge_api_rosters()\n\n        return self._api_rosters\n\n    @property\n    def api_rosters_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of players scraped from API endpoint.\n\n        Returns:\n            Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            api_id (str):\n                NHL API ID for the player, e.g., 8476887\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            position (str):\n                Player's position, e.g., L\n            first_name (str):\n                Player's first name, e.g., FILIP\n            last_name (str):\n                Player's last name, e.g., FORSBERG\n            headshot_url (str):\n                URL to retreive player's headshot\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.api_rosters_df\n        \"\"\"\n        if self._api_rosters is None:\n            self._munge_api_rosters()\n\n        return pd.DataFrame(self._api_rosters)\n\n    def _munge_changes(self) -&gt; None:\n        \"\"\"Method to munge list of changes from HTML shifts &amp; rosters endpoints. Updates self._changes.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Game object\n            &gt;&gt;&gt; game = Game(2023020001)\n\n            Before cleaning the data, game._changes is None\n            &gt;&gt;&gt; game._changes  # Returns None\n\n            Once you scrape the shifts data, you can access it in raw form, prior to any processing\n            &gt;&gt;&gt; game._scrape_shifts()  # Scrapes raw data and adds it to game._shifts\n            &gt;&gt;&gt; game.shifts  # Returns cleaned shifts data\n            &gt;&gt;&gt; game.shifts_df  # Same, but a Pandas DataFrame\n\n            You then have to manually clean the data to convert it to changes\n            &gt;&gt;&gt; game._munge_shifts()  # Necessary before munging the changes\n            &gt;&gt;&gt; game._munge_changes()\n            &gt;&gt;&gt; game.changes  # Returns cleaned changes data\n            &gt;&gt;&gt; game.changes_df  # Same but a Pandas DataFrame\n        \"\"\"\n        game_id = self.game_id\n        season = self.season\n        game_session = self.session\n        shifts = self._shifts\n\n        game_list = []\n\n        periods = np.unique([x[\"period\"] for x in shifts]).tolist()\n\n        teams = [\"HOME\", \"AWAY\"]\n\n        for period in periods:\n            max([x[\"end_time_seconds\"] for x in shifts if x[\"period\"] == period])\n\n            for team in teams:\n                changes_dict = {}\n\n                changes_on = np.unique(\n                    [x[\"start_time_seconds\"] for x in shifts if x[\"period\"] == period and x[\"team_venue\"] == team]\n                ).tolist()\n\n                for change_on in changes_on:\n                    players_on = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period and x[\"start_time_seconds\"] == change_on and x[\"team_venue\"] == team\n                    ]\n\n                    players_on = sorted(players_on, key=lambda k: (k[\"jersey\"]))\n\n                    f_positions = [\"L\", \"C\", \"R\"]\n\n                    forwards_on = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"start_time_seconds\"] == change_on\n                        and x[\"team_venue\"] == team\n                        and x[\"position\"] in f_positions\n                    ]\n\n                    forwards_on = sorted(forwards_on, key=lambda k: (k[\"jersey\"]))\n\n                    defense_on = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"start_time_seconds\"] == change_on\n                        and x[\"team_venue\"] == team\n                        and x[\"position\"] == \"D\"\n                    ]\n\n                    defense_on = sorted(defense_on, key=lambda k: (k[\"jersey\"]))\n\n                    goalies_on = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"start_time_seconds\"] == change_on\n                        and x[\"team_venue\"] == team\n                        and x[\"position\"] == \"G\"\n                    ]\n\n                    goalies_on = sorted(goalies_on, key=lambda k: (k[\"jersey\"]))\n\n                    new_values = {\n                        \"season\": season,\n                        \"session\": game_session,\n                        \"game_id\": game_id,\n                        \"event\": \"CHANGE\",\n                        \"event_team\": players_on[0][\"team\"],\n                        \"is_home\": players_on[0][\"is_home\"],\n                        \"is_away\": players_on[0][\"is_away\"],\n                        \"team_venue\": team,\n                        \"period\": period,\n                        \"period_time\": players_on[0][\"start_time\"],\n                        \"period_seconds\": players_on[0][\"start_time_seconds\"],\n                        \"change_on_count\": len(players_on),\n                        \"change_off_count\": 0,\n                        \"change_on_jersey\": [x[\"team_jersey\"] for x in players_on],\n                        \"change_on\": [x[\"player_name\"] for x in players_on],\n                        \"change_on_eh_id\": [x[\"eh_id\"] for x in players_on],\n                        \"change_on_api_id\": [str(x[\"api_id\"]) for x in players_on],\n                        \"change_on_positions\": [x[\"position\"] for x in players_on],\n                        \"change_off_jersey\": \"\",\n                        \"change_off\": \"\",\n                        \"change_off_eh_id\": \"\",\n                        \"change_off_api_id\": \"\",\n                        \"change_off_positions\": \"\",\n                        \"change_on_forwards_count\": len(forwards_on),\n                        \"change_off_forwards_count\": 0,\n                        \"change_on_forwards_jersey\": [x[\"team_jersey\"] for x in forwards_on],\n                        \"change_on_forwards\": [x[\"player_name\"] for x in forwards_on],\n                        \"change_on_forwards_eh_id\": [x[\"eh_id\"] for x in forwards_on],\n                        \"change_on_forwards_api_id\": [str(x[\"api_id\"]) for x in forwards_on],\n                        \"change_off_forwards_jersey\": \"\",\n                        \"change_off_forwards\": \"\",\n                        \"change_off_forwards_eh_id\": \"\",\n                        \"change_off_forwards_api_id\": \"\",\n                        \"change_on_defense_count\": len(defense_on),\n                        \"change_off_defense_count\": 0,\n                        \"change_on_defense_jersey\": [x[\"team_jersey\"] for x in defense_on],\n                        \"change_on_defense\": [x[\"player_name\"] for x in defense_on],\n                        \"change_on_defense_eh_id\": [x[\"eh_id\"] for x in defense_on],\n                        \"change_on_defense_api_id\": [str(x[\"api_id\"]) for x in defense_on],\n                        \"change_off_defense_jersey\": \"\",\n                        \"change_off_defense\": \"\",\n                        \"change_off_defense_eh_id\": \"\",\n                        \"change_off_defense_api_id\": \"\",\n                        \"change_on_goalie_count\": len(goalies_on),\n                        \"change_off_goalie_count\": 0,\n                        \"change_on_goalie_jersey\": [x[\"team_jersey\"] for x in goalies_on],\n                        \"change_on_goalie\": [x[\"player_name\"] for x in goalies_on],\n                        \"change_on_goalie_eh_id\": [x[\"eh_id\"] for x in goalies_on],\n                        \"change_on_goalie_api_id\": [str(x[\"api_id\"]) for x in goalies_on],\n                        \"change_off_goalie_jersey\": \"\",\n                        \"change_off_goalie\": \"\",\n                        \"change_off_goalie_eh_id\": \"\",\n                        \"change_off_goalie_api_id\": \"\",\n                    }\n\n                    changes_dict.update({change_on: new_values})\n\n                changes_off = np.unique(\n                    [x[\"end_time_seconds\"] for x in shifts if x[\"period\"] == period and x[\"team_venue\"] == team]\n                ).tolist()\n\n                for change_off in changes_off:\n                    players_off = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period and x[\"end_time_seconds\"] == change_off and x[\"team_venue\"] == team\n                    ]\n\n                    players_off = sorted(players_off, key=lambda k: (k[\"jersey\"]))\n\n                    f_positions = [\"L\", \"C\", \"R\"]\n\n                    forwards_off = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"end_time_seconds\"] == change_off\n                        and x[\"team_venue\"] == team\n                        and x[\"position\"] in f_positions\n                    ]\n\n                    forwards_off = sorted(forwards_off, key=lambda k: (k[\"jersey\"]))\n\n                    defense_off = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"end_time_seconds\"] == change_off\n                        and x[\"team_venue\"] == team\n                        and x[\"position\"] == \"D\"\n                    ]\n\n                    defense_off = sorted(defense_off, key=lambda k: (k[\"jersey\"]))\n\n                    goalies_off = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"end_time_seconds\"] == change_off\n                        and x[\"team_venue\"] == team\n                        and x[\"position\"] == \"G\"\n                    ]\n\n                    goalies_off = sorted(goalies_off, key=lambda k: (k[\"jersey\"]))\n\n                    new_values = {\n                        \"season\": season,\n                        \"session\": game_session,\n                        \"game_id\": game_id,\n                        \"event\": \"CHANGE\",\n                        \"event_team\": players_off[0][\"team\"],\n                        \"team_venue\": team,\n                        \"is_home\": players_off[0][\"is_home\"],\n                        \"is_away\": players_off[0][\"is_away\"],\n                        \"period\": period,\n                        \"period_time\": players_off[0][\"end_time\"],\n                        \"period_seconds\": players_off[0][\"end_time_seconds\"],\n                        \"change_off_count\": len(players_off),\n                        \"change_off_jersey\": [x[\"team_jersey\"] for x in players_off],\n                        \"change_off\": [x[\"player_name\"] for x in players_off],\n                        \"change_off_eh_id\": [x[\"eh_id\"] for x in players_off],\n                        \"change_off_api_id\": [str(x[\"api_id\"]) for x in players_off],\n                        \"change_off_positions\": [x[\"position\"] for x in players_off],\n                        \"change_off_forwards_count\": len(forwards_off),\n                        \"change_off_forwards_jersey\": [x[\"team_jersey\"] for x in forwards_off],\n                        \"change_off_forwards\": [x[\"player_name\"] for x in forwards_off],\n                        \"change_off_forwards_eh_id\": [x[\"eh_id\"] for x in forwards_off],\n                        \"change_off_forwards_api_id\": [str(x[\"api_id\"]) for x in forwards_off],\n                        \"change_off_defense_count\": len(defense_off),\n                        \"change_off_defense_jersey\": [x[\"team_jersey\"] for x in defense_off],\n                        \"change_off_defense\": [x[\"player_name\"] for x in defense_off],\n                        \"change_off_defense_eh_id\": [x[\"eh_id\"] for x in defense_off],\n                        \"change_off_defense_api_id\": [str(x[\"api_id\"]) for x in defense_off],\n                        \"change_off_goalie_count\": len(goalies_off),\n                        \"change_off_goalie_jersey\": [x[\"team_jersey\"] for x in goalies_off],\n                        \"change_off_goalie\": [x[\"player_name\"] for x in goalies_off],\n                        \"change_off_goalie_eh_id\": [x[\"eh_id\"] for x in goalies_off],\n                        \"change_off_goalie_api_id\": [str(x[\"api_id\"]) for x in goalies_off],\n                    }\n\n                    if change_off in changes_on:\n                        changes_dict[change_off].update(new_values)\n\n                    else:\n                        new_values.update(\n                            {\n                                \"change_on_count\": 0,\n                                \"change_on_forwards_count\": 0,\n                                \"change_on_defense_count\": 0,\n                                \"change_on_goalie_count\": 0,\n                            }\n                        )\n\n                        changes_dict[change_off] = new_values\n\n                game_list.extend(list(changes_dict.values()))\n\n        game_list = sorted(game_list, key=lambda k: (k[\"period\"], k[\"period_seconds\"], k[\"is_away\"]))\n\n        final_changes = []\n\n        for change in game_list:\n            players_on = \", \".join(change.get(\"change_on\", []))\n\n            players_off = \", \".join(change.get(\"change_off\", []))\n\n            on_num = len(change.get(\"change_on\", []))\n\n            off_num = len(change.get(\"change_off\", []))\n\n            if on_num &gt; 0 and off_num &gt; 0:\n                change[\"description\"] = f\"PLAYERS ON: {players_on} / PLAYERS OFF: {players_off}\"\n\n            if on_num &gt; 0 and off_num == 0:\n                change[\"description\"] = f\"PLAYERS ON: {players_on}\"\n\n            if off_num &gt; 0 and on_num == 0:\n                change[\"description\"] = f\"PLAYERS OFF: {players_off}\"\n\n            if change[\"period\"] == 5 and game_session == \"R\":  # Not covered by tests\n                change[\"game_seconds\"] = 3900 + change[\"period_seconds\"]\n\n            else:\n                change[\"game_seconds\"] = (int(change[\"period\"]) - 1) * 1200 + change[\"period_seconds\"]\n\n            if change[\"is_home\"] == 1:\n                change[\"event_type\"] = \"HOME CHANGE\"\n\n            else:\n                change[\"event_type\"] = \"AWAY CHANGE\"\n\n            final_changes.append(ChangeEvent.model_validate(change).model_dump())\n\n        self._changes = final_changes\n\n    @property\n    def changes(self) -&gt; list:\n        \"\"\"List of changes scraped from API endpoint. Each change is a dictionary with the below keys.\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).changes_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., CHANGE\n            event_type (str):\n                Type of change that occurred, e.g., AWAY CHANGE\n            description (str | None):\n                Description of the event, e.g.,\n                PLAYERS ON: MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n                / PLAYERS OFF: YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            change_on_count (int):\n                Number of players on, e.g., 4\n            change_off_count (int):\n                Number of players off, e.g., 4\n            change_on (str):\n                Names of players on, e.g., MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n            change_on_jersey (str):\n                Combination of jerseys and numbers for the players on, e.g., NSH14, NSH19, NSH64, NSH95\n            change_on_eh_id (str):\n                Evolving Hockey IDs of the players on, e.g.,\n                MATTIAS.EKHOLM, CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE\n            change_on_positions (str):\n                Positions of the players on, e.g., D, C, C, C\n            change_off (str):\n                Names of players off, e.g., YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            change_off_jersey (str):\n                Combination of jerseys and numbers for the players off, e.g., NSH7, NSH9, NSH33, NSH92\n            change_off_eh_id (str):\n                Evolving Hockey IDs of the players off, e.g.,\n                YANNICK.WEBER, FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN\n            change_off_positions (str):\n                Positions of the players off, e.g., D, L, L, C\n            change_on_forwards_count (int):\n                Number of forwards on, e.g.,\n            change_off_forwards_count (int):\n                Number of forwards off, e.g., 3\n            change_on_forwards (str):\n                Names of forwards on, e.g., CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n            change_on_forwards_jersey (str):\n                Combination of jerseys and numbers for the forwards on, e.g., NSH19, NSH64, NSH95\n            change_on_forwards_eh_id (str):\n                Evolving Hockey IDs of the forwards on, e.g.,\n                CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE\n            change_off_forwards (str):\n                Names of forwards off, e.g., FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            change_off_forwards_jersey (str):\n                Combination of jerseys and numbers for the forwards off, e.g., NSH9, NSH33, NSH92\n            change_off_forwards_eh_id (str):\n                Evolving Hockey IDs of the forwards off, e.g.,\n                FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN\n            change_on_defense_count (int):\n                Number of defense on, e.g., 1\n            change_off_defense_count (int):\n                Number of defense off, e.g., 1\n            change_on_defense (str):\n                Names of defense on, e.g., MATTIAS EKHOLM\n            change_on_defense_jersey (str):\n                Combination of jerseys and numbers for the defense on, e.g., NSH14\n            change_on_defense_eh_id (str):\n                Evolving Hockey IDs of the defense on, e.g., MATTIAS.EKHOLM\n            change_off_defense (str):\n                Names of defense off, e.g., YANNICK WEBER\n            change_off_defense_jersey (str):\n                Combination of jerseys and numbers for the defense off, e.g., NSH7\n            change_off_defebse_eh_id (str):\n                Evolving Hockey IDs of the defebse off, e.g., YANNICK.WEBER\n            change_on_goalie_count (int):\n                Number of goalies on, e.g., 0\n            change_off_goalie_count (int):\n                Number of goalies off, e.g., 0\n            change_on_goalies (str):\n                Names of goalies on, e.g., None\n            change_on_goalies_jersey (str):\n                Combination of jerseys and numbers for the goalies on, e.g., None\n            change_on_goalies_eh_id (str):\n                Evolving Hockey IDs of the goalies on, e.g., None\n            change_off_goalies (str):\n                Names of goalies off, e.g., None\n            change_off_goalies_jersey (str):\n                Combination of jerseys and numbers for the goalies off, e.g., None\n            change_off_goalies_eh_id (str):\n                Evolving Hockey IDs of the goalies off, e.g., None\n            is_home (int):\n                Dummy indicator whether change team is home, e.g., 0\n            is_away (int):\n                Dummy indicator whether change team is away, e.g., 1\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.changes\n\n        \"\"\"\n        # TODO: Add API ID columns to documentation\n\n        if self._changes is None:\n            if self._rosters is None:\n                if self._html_rosters is None:\n                    self._scrape_html_rosters()\n                    self._munge_html_rosters()\n\n                if self._api_rosters is None:\n                    self._munge_api_rosters()\n\n                self._combine_rosters()\n\n            if self._shifts is None:\n                self._scrape_shifts()\n                self._munge_shifts()\n\n            self._munge_changes()\n\n        return self._changes\n\n    @property\n    def changes_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of changes scraped from HTML shifts &amp; roster endpoints.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., CHANGE\n            event_type (str):\n                Type of change that occurred, e.g., AWAY CHANGE\n            description (str | None):\n                Description of the event, e.g.,\n                PLAYERS ON: MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n                / PLAYERS OFF: YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            change_on_count (int):\n                Number of players on, e.g., 4\n            change_off_count (int):\n                Number of players off, e.g., 4\n            change_on (str):\n                Names of players on, e.g., MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n            change_on_jersey (str):\n                Combination of jerseys and numbers for the players on, e.g., NSH14, NSH19, NSH64, NSH95\n            change_on_eh_id (str):\n                Evolving Hockey IDs of the players on, e.g.,\n                MATTIAS.EKHOLM, CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE\n            change_on_positions (str):\n                Positions of the players on, e.g., D, C, C, C\n            change_off (str):\n                Names of players off, e.g., YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            change_off_jersey (str):\n                Combination of jerseys and numbers for the players off, e.g., NSH7, NSH9, NSH33, NSH92\n            change_off_eh_id (str):\n                Evolving Hockey IDs of the players off, e.g.,\n                YANNICK.WEBER, FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN\n            change_off_positions (str):\n                Positions of the players off, e.g., D, L, L, C\n            change_on_forwards_count (int):\n                Number of forwards on, e.g.,\n            change_off_forwards_count (int):\n                Number of forwards off, e.g., 3\n            change_on_forwards (str):\n                Names of forwards on, e.g., CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n            change_on_forwards_jersey (str):\n                Combination of jerseys and numbers for the forwards on, e.g., NSH19, NSH64, NSH95\n            change_on_forwards_eh_id (str):\n                Evolving Hockey IDs of the forwards on, e.g.,\n                CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE\n            change_off_forwards (str):\n                Names of forwards off, e.g., FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            change_off_forwards_jersey (str):\n                Combination of jerseys and numbers for the forwards off, e.g., NSH9, NSH33, NSH92\n            change_off_forwards_eh_id (str):\n                Evolving Hockey IDs of the forwards off, e.g.,\n                FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN\n            change_on_defense_count (int):\n                Number of defense on, e.g., 1\n            change_off_defense_count (int):\n                Number of defense off, e.g., 1\n            change_on_defense (str):\n                Names of defense on, e.g., MATTIAS EKHOLM\n            change_on_defense_jersey (str):\n                Combination of jerseys and numbers for the defense on, e.g., NSH14\n            change_on_defense_eh_id (str):\n                Evolving Hockey IDs of the defense on, e.g., MATTIAS.EKHOLM\n            change_off_defense (str):\n                Names of defense off, e.g., YANNICK WEBER\n            change_off_defense_jersey (str):\n                Combination of jerseys and numbers for the defense off, e.g., NSH7\n            change_off_defebse_eh_id (str):\n                Evolving Hockey IDs of the defebse off, e.g., YANNICK.WEBER\n            change_on_goalie_count (int):\n                Number of goalies on, e.g., 0\n            change_off_goalie_count (int):\n                Number of goalies off, e.g., 0\n            change_on_goalies (str):\n                Names of goalies on, e.g., None\n            change_on_goalies_jersey (str):\n                Combination of jerseys and numbers for the goalies on, e.g., None\n            change_on_goalies_eh_id (str):\n                Evolving Hockey IDs of the goalies on, e.g., None\n            change_off_goalies (str):\n                Names of goalies off, e.g., None\n            change_off_goalies_jersey (str):\n                Combination of jerseys and numbers for the goalies off, e.g., None\n            change_off_goalies_eh_id (str):\n                Evolving Hockey IDs of the goalies off, e.g., None\n            is_home (int):\n                Dummy indicator whether change team is home, e.g., 0\n            is_away (int):\n                Dummy indicator whether change team is away, e.g., 1\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.changes_df\n\n        \"\"\"\n        # TODO: Add API ID columns to documentation\n\n        if self._changes is None:\n            if self._rosters is None:\n                if self._html_rosters is None:\n                    self._scrape_html_rosters()\n                    self._munge_html_rosters()\n\n                if self._api_rosters is None:\n                    self._munge_api_rosters()\n\n                self._combine_rosters()\n\n            if self._shifts is None:\n                self._scrape_shifts()\n                self._munge_shifts()\n\n            self._munge_changes()\n\n        return pd.DataFrame(self._changes)\n\n    def _scrape_html_events(self) -&gt; None:\n        \"\"\"Method for scraping events from HTML endpoint. Updates self._html_events.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Game object\n            &gt;&gt;&gt; game = Game(2023020001)\n\n            Before cleaning the data, game._html_events is None\n            &gt;&gt;&gt; game._html_events  # Returns None\n\n            Once you scrape the data, you can access it in raw form, prior to any processing\n            &gt;&gt;&gt; game._scrape_html_events()  # Scrapes raw data and adds it to game._html_events\n            &gt;&gt;&gt; game.html_events  # Returns raw events, prior to processing\n            &gt;&gt;&gt; game.html_events_df  # Same, but a Pandas DataFrame\n\n            You then have to manually clean the data\n            &gt;&gt;&gt; game._munge_html_events()\n            &gt;&gt;&gt; game.html_events  # Returns cleaned events data\n            &gt;&gt;&gt; game.html_events_df  # Same but a Pandas DataFrame\n        \"\"\"\n        url = self.html_events_endpoint\n\n        s = self._requests_session\n\n        try:\n            response = s.get(url)\n        except RetryError:  # Not covered by tests\n            return None\n\n        soup = BeautifulSoup(response.content.decode(\"ISO-8859-1\"), \"lxml\")\n\n        events = []\n\n        if soup.find(\"html\") is None:  # Not covered by tests\n            return None\n\n        tds = soup.find_all(\"td\", {\"class\": re.compile(\".*bborder.*\")})\n\n        events_data = hs_strip_html(tds)\n\n        events_data = [unidecode(x).replace(\"\\n \", \", \").replace(\"\\n\", \"\") for x in events_data]\n\n        length = int(len(events_data) / 8)\n\n        events_data = np.array(events_data).reshape(length, 8)\n\n        for _idx, event in enumerate(events_data):\n            column_names = [\n                \"event_idx\",\n                \"period\",\n                \"strength\",\n                \"time\",\n                \"event\",\n                \"description\",\n                \"away_skaters\",\n                \"home_skaters\",\n            ]\n\n            if \"#\" in event:\n                continue\n\n            else:\n                event = dict(zip(column_names, event, strict=False))\n\n                new_values = {\n                    \"season\": self.season,\n                    \"session\": self.session,\n                    \"game_id\": self.game_id,\n                    \"event_idx\": int(event[\"event_idx\"]),\n                    \"description\": unidecode(event[\"description\"]).upper(),\n                    \"period\": event[\"period\"],\n                }\n\n                event.update(new_values)\n\n                # This event is missing from the API and doesn't have a player in the HTML endpoint\n\n                if self.game_id == 2022020194 and event[\"event_idx\"] == 134:\n                    continue\n\n                if self.game_id == 2022020673 and event[\"event_idx\"] == 208:\n                    continue\n\n                events.append(event)\n\n        self._html_events = events\n\n    def _munge_html_events(self) -&gt; None:\n        \"\"\"Method to munge list of events from HTML endpoint. Updates self._html_events.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Game object\n            &gt;&gt;&gt; game = Game(2023020001)\n\n            Before cleaning the data, game._html_events is None\n            &gt;&gt;&gt; game._html_events  # Returns None\n\n            Once you scrape the data, you can access it in raw form, prior to any processing\n            &gt;&gt;&gt; game._scrape_html_events()  # Scrapes raw data and adds it to game._html_events\n            &gt;&gt;&gt; game.html_events  # Returns raw events, prior to processing\n            &gt;&gt;&gt; game.html_events_df  # Same, but a Pandas DataFrame\n\n            You then have to manually clean the data\n            &gt;&gt;&gt; game._munge_html_events()\n            &gt;&gt;&gt; game.html_events  # Returns cleaned events data\n            &gt;&gt;&gt; game.html_events_df  # Same but a Pandas DataFrame\n        \"\"\"\n        game_session = self.session\n\n        if self._html_rosters is None:  # Not covered by tests\n            self._scrape_html_rosters()\n            self._munge_html_rosters()\n\n        roster = self._html_rosters\n\n        # Compiling regex expressions to save time later\n\n        event_team_re = re.compile(r\"^([A-Z]{3}|[A-Z]\\.[A-Z])\")\n        numbers_re = re.compile(r\"#([0-9]{1,2})\")\n        event_players_re = re.compile(r\"([A-Z]{3}\\s+#[0-9]{1,2})\")\n        re.compile(r\"([A-Z]{1,2})\")\n        fo_team_re = re.compile(r\"([A-Z]{3}) WON\")\n        block_team_re = re.compile(r\"BLOCKED BY\\s+([A-Z]{3})\")\n        re.compile(r\"(\\d+)\")\n        zone_re = re.compile(r\"([A-Za-z]{3}). ZONE\")\n        penalty_re = re.compile(r\"([A-Za-z]*|[A-Za-z]*-[A-Za-z]*|[A-Za-z]*\\s+\\(.*\\))\\s*\\(\")\n        penalty_length_re = re.compile(r\"(\\d+) MIN\")\n        shot_re = re.compile(r\",\\s+([A-Za-z]*|[A-Za-z]*-[A-Za-z]*)\\s*,\")\n        distance_re = re.compile(r\"(\\d+) FT\")\n        served_re = re.compile(r\"([A-Z]{3})\\s.+SERVED BY: #([0-9]+)\")\n        # served_drawn_re = re.compile('([A-Z]{3})\\s#.*\\sSERVED BY: #([0-9]+)')\n        drawn_re = re.compile(r\"DRAWN BY: ([A-Z]{3}) #([0-9]+)\")\n\n        actives = {player[\"team_jersey\"]: player for player in roster if player[\"status\"] == \"ACTIVE\"}\n\n        scratches = {player[\"team_jersey\"]: player for player in roster if player[\"status\"] == \"SCRATCH\"}\n\n        for event in self._html_events:\n            non_descripts = {\n                \"PGSTR\": \"PRE-GAME START\",\n                \"PGEND\": \"PRE-GAME END\",\n                \"ANTHEM\": \"NATIONAL ANTHEM\",\n                \"EISTR\": \"EARLY INTERMISSION START\",\n                \"EIEND\": \"EARLY INTERMISSION END\",\n                \"SPC\": \"PUCK IN CROWD\",\n                \"GOFF\": \"GAME OFFICIAL\",\n                \"EGT\": \"EMERGENCY GOALTENDER\",\n            }\n\n            if event[\"event\"] in list(non_descripts.keys()):\n                event[\"description\"] = non_descripts[event[\"event\"]]\n\n                if event[\"event\"] == \"SPC\":\n                    event[\"event\"] = \"STOP\"\n\n            # Replacing the team names with three-letter codes from API endpoint\n\n            new_team_names = {\"L.A\": \"LAK\", \"N.J\": \"NJD\", \"S.J\": \"SJS\", \"T.B\": \"TBL\", \"PHX\": \"ARI\"}\n\n            for old_name, new_name in new_team_names.items():\n                event[\"description\"] = event[\"description\"].replace(old_name, new_name).upper()\n\n            event = html_events_fixes(self.game_id, event)\n\n            if event[\"event\"] == \"PEND\" and event[\"time\"] == \"-16:0-120:00\":  # Not covered by tests\n                goals = [x for x in self._html_events if x[\"period\"] == event[\"period\"] and x[\"event\"] == \"GOAL\"]\n\n                if len(goals) == 0:\n                    if int(event[\"period\"]) == 4 and event[\"session\"] == \"R\":\n                        event[\"time\"] = event[\"time\"].replace(\"-16:0-120:00\", \"5:000:00\")\n\n                    else:\n                        event[\"time\"] = event[\"time\"].replace(\"-16:0-120:00\", \"20:000:00\")\n\n                elif len(goals) &gt; 0:\n                    goal = goals[-1]\n\n                    event[\"time\"] = event[\"time\"].replace(\"-16:0-120:00\", goal[\"time\"])\n\n            non_team_events = [\n                \"STOP\",\n                \"ANTHEM\",\n                \"PGSTR\",\n                \"PGEND\",\n                \"PSTR\",\n                \"PEND\",\n                \"EISTR\",\n                \"EIEND\",\n                \"GEND\",\n                \"SOC\",\n                \"PBOX\",\n            ]\n\n            if event[\"event\"] not in non_team_events:\n                try:\n                    event[\"event_team\"] = re.search(event_team_re, event[\"description\"]).group(1)\n\n                    if event[\"event_team\"] == \"LEA\":  # Not covered by tests\n                        event[\"event_team\"] = \"\"\n\n                except AttributeError:\n                    continue\n\n            if event[\"event\"] == \"FAC\":\n                try:\n                    event[\"event_team\"] = re.search(fo_team_re, event[\"description\"]).group(1)\n\n                except AttributeError:\n                    event[\"event_team\"] = None\n\n            if event[\"event\"] == \"BLOCK\" and \"BLOCKED BY\" in event[\"description\"]:\n                event[\"event_team\"] = re.search(block_team_re, event[\"description\"]).group(1)\n\n            event[\"period\"] = int(event[\"period\"])\n\n            time_split = event[\"time\"].split(\":\")\n\n            event[\"period_time\"] = time_split[0] + \":\" + time_split[1][:2]\n\n            event[\"period_seconds\"] = (60 * int(event[\"period_time\"].split(\":\")[0])) + int(\n                event[\"period_time\"].split(\":\")[1]\n            )\n\n            event[\"game_seconds\"] = (int(event[\"period\"]) - 1) * 1200 + event[\"period_seconds\"]\n\n            if event[\"period\"] == 5 and game_session == \"R\":\n                event[\"game_seconds\"] = 3900 + event[\"period_seconds\"]\n\n            event_list = [\"GOAL\", \"SHOT\", \"TAKE\", \"GIVE\"]\n\n            if event[\"event\"] in event_list:\n                event_players = [event[\"event_team\"] + num for num in re.findall(numbers_re, event[\"description\"])]\n\n            else:\n                event_players = re.findall(event_players_re, event[\"description\"])\n\n            if event[\"event\"] == \"FAC\" and event[\"event_team\"] not in event_players[0]:\n                event_players[0], event_players[1] = event_players[1], event_players[0]\n\n            if event[\"event\"] == \"BLOCK\" and \"TEAMMATE\" in event[\"description\"]:\n                event[\"event_team\"] = event[\"description\"][:3]\n\n                event_players.insert(0, \"TEAMMATE\")\n\n            elif event[\"event\"] == \"BLOCK\" and \"BLOCKED BY OTHER\" in event[\"description\"]:  # Not covered by tests\n                event[\"event_team\"] = \"OTHER\"\n\n                event_players.insert(0, \"REFEREE\")\n\n            elif event[\"event\"] == \"BLOCK\" and event[\"event_team\"] not in event_players[0]:\n                event_players[0], event_players[1] = event_players[1], event_players[0]\n\n            for idx, event_player in enumerate(event_players):\n                num = idx + 1\n\n                event_player = event_player.replace(\" #\", \"\")\n\n                if event_player == \"TEAMMATE\":\n                    player_name = \"TEAMMATE\"\n                    eh_id = \"TEAMMATE\"\n                    position = None\n\n                elif event_player == \"REFEREE\":  # Not covered by tests\n                    player_name = \"REFEREE\"\n                    eh_id = \"REFEREE\"\n                    position = None\n\n                else:\n                    try:\n                        player_name = actives[event_player][\"player_name\"]\n                        eh_id = actives[event_player][\"eh_id\"]\n                        position = actives[event_player][\"position\"]\n\n                    except KeyError:\n                        player_name = scratches[event_player][\"player_name\"]\n                        eh_id = scratches[event_player][\"eh_id\"]\n                        position = scratches[event_player][\"position\"]\n\n                new_values = {\n                    f\"player_{num}\": player_name,\n                    f\"player_{num}_eh_id\": eh_id,\n                    f\"player_{num}_position\": position,\n                }\n\n                event.update(new_values)\n\n            try:\n                event[\"zone\"] = re.search(zone_re, event[\"description\"]).group(1).upper()\n\n                if \"BLOCK\" in event[\"event\"] and event[\"zone\"] == \"DEF\":\n                    event[\"zone\"] = \"OFF\"\n\n            except AttributeError:\n                pass\n\n            if event[\"event\"] == \"PENL\":\n                if (\"TEAM\" in event[\"description\"] and \"SERVED BY\" in event[\"description\"]) or (\n                    \"HEAD COACH\" in event[\"description\"]\n                ):\n                    event[\"player_1\"] = \"BENCH\"\n\n                    event[\"player_1_eh_id\"] = \"BENCH\"\n\n                    event[\"player_1_position\"] = None\n\n                    try:\n                        served_by = re.search(served_re, event[\"description\"])\n\n                        name = served_by.group(1) + str(served_by.group(2))\n\n                    except AttributeError:  # Not covered by tests\n                        try:\n                            drawn_by = re.search(drawn_re, event[\"description\"])\n\n                            name = drawn_by.group(1) + str(drawn_by.group(2))\n\n                        except AttributeError:\n                            continue\n\n                    event[\"player_2\"] = actives[name][\"player_name\"]\n\n                    event[\"player_2_eh_id\"] = actives[name][\"eh_id\"]\n\n                    event[\"player_2_position\"] = actives[name][\"position\"]\n\n                if \"SERVED BY\" in event[\"description\"] and \"DRAWN BY\" in event[\"description\"]:\n                    try:\n                        drawn_by = re.search(drawn_re, event[\"description\"])\n\n                        drawn_name = drawn_by.group(1) + str(drawn_by.group(2))\n\n                        event[\"player_2\"] = actives[drawn_name][\"player_name\"]\n\n                        event[\"player_2_eh_id\"] = actives[drawn_name][\"eh_id\"]\n\n                        event[\"player_2_position\"] = actives[drawn_name][\"position\"]\n\n                        if event[\"player_1_eh_id\"] == event[\"player_2_eh_id\"]:\n                            event[\"player_1\"] = \"BENCH\"\n                            event[\"player_1_eh_id\"] = \"BENCH\"\n                            event[\"player_1_position\"] = None\n\n                        served_by = re.search(served_re, event[\"description\"])\n\n                        served_name = served_by.group(1) + str(served_by.group(2))\n\n                        event[\"player_3\"] = actives[served_name][\"player_name\"]\n\n                        event[\"player_3_eh_id\"] = actives[served_name][\"eh_id\"]\n\n                        event[\"player_3_position\"] = actives[served_name][\"position\"]\n\n                        if \"TEAM\" in event[\"description\"] or \"HEAD COACH\" in event[\"description\"]:\n                            event[\"player_2\"], event[\"player_3\"] = (event[\"player_3\"], event[\"player_2\"])\n\n                            event[\"player_2_eh_id\"], event[\"player_3_eh_id\"] = (\n                                event[\"player_3_eh_id\"],\n                                event[\"player_2_eh_id\"],\n                            )\n\n                            event[\"player_2_position\"], event[\"player_3_position\"] = (\n                                event[\"player_3_position\"],\n                                event[\"player_2_position\"],\n                            )\n\n                    except AttributeError:  # Not covered by tests\n                        pass\n\n                elif \"SERVED BY\" in event[\"description\"]:\n                    try:\n                        served_by = re.search(served_re, event[\"description\"])\n\n                        served_name = served_by.group(1) + str(served_by.group(2))\n\n                        event[\"player_2\"] = actives[served_name][\"player_name\"]\n\n                        event[\"player_2_eh_id\"] = actives[served_name][\"eh_id\"]\n\n                        event[\"player_2_position\"] = actives[served_name][\"position\"]\n\n                    except AttributeError:  # Not covered by tests\n                        pass\n\n                elif \"DRAWN BY\" in event[\"description\"]:\n                    try:\n                        drawn_by = re.search(drawn_re, event[\"description\"])\n\n                        drawn_name = drawn_by.group(1) + str(drawn_by.group(2))\n\n                        event[\"player_2\"] = actives[drawn_name][\"player_name\"]\n\n                        event[\"player_2_eh_id\"] = actives[drawn_name][\"eh_id\"]\n\n                        event[\"player_2_position\"] = actives[drawn_name][\"position\"]\n\n                    except AttributeError:  # Not covered by tests\n                        pass\n\n                if \"player_1\" not in event:  # Not covered by tests\n                    new_values = {\"player_1\": \"BENCH\", \"player_1_eh_id\": \"BENCH\", \"player_1_position\": \"\"}\n\n                    event.update(new_values)\n\n                try:\n                    event[\"penalty_length\"] = int(re.search(penalty_length_re, event[\"description\"]).group(1))\n\n                except TypeError:  # Not covered by tests\n                    pass\n\n                try:\n                    event[\"penalty\"] = re.search(penalty_re, event[\"description\"]).group(1).upper()\n\n                except AttributeError:  # Not covered by tests\n                    continue\n\n                if \"INTERFERENCE\" in event[\"description\"] and \"GOALKEEPER\" in event[\"description\"]:\n                    event[\"penalty\"] = \"GOALKEEPER INTERFERENCE\"\n\n                elif \"CROSS\" in event[\"description\"] and \"CHECKING\" in event[\"description\"]:\n                    event[\"penalty\"] = \"CROSS-CHECKING\"\n\n                elif (\n                    \"DELAY\" in event[\"description\"]\n                    and \"GAME\" in event[\"description\"]\n                    and \"PUCK OVER\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"DELAY OF GAME - PUCK OVER GLASS\"\n\n                elif (\n                    \"DELAY\" in event[\"description\"]\n                    and \"GAME\" in event[\"description\"]\n                    and \"FO VIOL\" in event[\"description\"]\n                ):  # Not covered by tests\n                    event[\"penalty\"] = \"DELAY OF GAME - FACEOFF VIOLATION\"\n\n                elif (\n                    \"DELAY\" in event[\"description\"]\n                    and \"GAME\" in event[\"description\"]\n                    and \"EQUIPMENT\" in event[\"description\"]\n                ):  # Not covered by tests\n                    event[\"penalty\"] = \"DELAY OF GAME - EQUIPMENT\"\n\n                elif (\n                    \"DELAY\" in event[\"description\"]\n                    and \"GAME\" in event[\"description\"]\n                    and \"UNSUCC\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"DELAY OF GAME - UNSUCCESSFUL CHALLENGE\"\n\n                elif (\n                    \"DELAY\" in event[\"description\"]\n                    and \"GAME\" in event[\"description\"]\n                    and \"SMOTHERING\" in event[\"description\"]\n                ):  # Not covered by tests\n                    event[\"penalty\"] = \"DELAY OF GAME - SMOTHERING THE PUCK\"\n\n                elif (\n                    \"ILLEGAL\" in event[\"description\"]\n                    and \"CHECK\" in event[\"description\"]\n                    and \"HEAD\" in event[\"description\"]\n                ):  # Not covered by tests\n                    event[\"penalty\"] = \"ILLEGAL CHECK TO HEAD\"\n\n                elif (\n                    \"HIGH-STICKING\" in event[\"description\"] and \"- DOUBLE\" in event[\"description\"]\n                ):  # Not covered by tests\n                    event[\"penalty\"] = \"HIGH-STICKING - DOUBLE MINOR\"\n\n                elif \"GAME MISCONDUCT\" in event[\"description\"]:\n                    event[\"penalty\"] = \"GAME MISCONDUCT\"\n\n                elif \"MATCH PENALTY\" in event[\"description\"]:\n                    event[\"penalty\"] = \"MATCH PENALTY\"\n\n                elif \"NET\" in event[\"description\"] and \"DISPLACED\" in event[\"description\"]:  # Not covered by tests\n                    event[\"penalty\"] = \"DISPLACED NET\"\n\n                elif (\n                    \"THROW\" in event[\"description\"]\n                    and \"OBJECT\" in event[\"description\"]\n                    and \"AT PUCK\" in event[\"description\"]\n                ):  # Not covered by tests\n                    event[\"penalty\"] = \"THROWING OBJECT AT PUCK\"\n\n                elif (\n                    \"INSTIGATOR\" in event[\"description\"] and \"FACE SHIELD\" in event[\"description\"]\n                ):  # Not covered by tests\n                    event[\"penalty\"] = \"INSTIGATOR - FACE SHIELD\"\n\n                elif \"GOALIE LEAVE CREASE\" in event[\"description\"]:\n                    event[\"penalty\"] = \"LEAVING THE CREASE\"\n\n                elif \"REMOVING\" in event[\"description\"] and \"HELMET\" in event[\"description\"]:  # Not covered by tests\n                    event[\"penalty\"] = \"REMOVING OPPONENT HELMET\"\n\n                elif \"BROKEN\" in event[\"description\"] and \"STICK\" in event[\"description\"]:  # Not covered by tests\n                    event[\"penalty\"] = \"HOLDING BROKEN STICK\"\n\n                elif \"HOOKING\" in event[\"description\"] and \"BREAKAWAY\" in event[\"description\"]:\n                    event[\"penalty\"] = \"HOOKING - BREAKAWAY\"\n\n                elif \"HOLDING\" in event[\"description\"] and \"BREAKAWAY\" in event[\"description\"]:\n                    event[\"penalty\"] = \"HOLDING - BREAKAWAY\"\n\n                elif \"TRIPPING\" in event[\"description\"] and \"BREAKAWAY\" in event[\"description\"]:  # Not covered by tests\n                    event[\"penalty\"] = \"TRIPPING - BREAKAWAY\"\n\n                elif \"SLASH\" in event[\"description\"] and \"BREAKAWAY\" in event[\"description\"]:  # Not covered by tests\n                    event[\"penalty\"] = \"SLASHING - BREAKAWAY\"\n\n                elif \"TEAM TOO MANY\" in event[\"description\"]:\n                    event[\"penalty\"] = \"TOO MANY MEN ON THE ICE\"\n\n                elif \"HOLDING\" in event[\"description\"] and \"STICK\" in event[\"description\"]:\n                    event[\"penalty\"] = \"HOLDING THE STICK\"\n\n                elif \"THROWING\" in event[\"description\"] and \"STICK\" in event[\"description\"]:  # Not covered by tests\n                    event[\"penalty\"] = \"THROWING STICK\"\n\n                elif \"CLOSING\" in event[\"description\"] and \"HAND\" in event[\"description\"]:\n                    event[\"penalty\"] = \"CLOSING HAND ON PUCK\"\n\n                elif \"ABUSE\" in event[\"description\"] and \"OFFICIALS\" in event[\"description\"]:\n                    event[\"penalty\"] = \"ABUSE OF OFFICIALS\"\n\n                elif \"UNSPORTSMANLIKE CONDUCT\" in event[\"description\"]:\n                    event[\"penalty\"] = \"UNSPORTSMANLIKE CONDUCT\"\n\n                elif (\n                    \"PUCK\" in event[\"description\"]\n                    and \"THROWN\" in event[\"description\"]\n                    and \"FWD\" in event[\"description\"]\n                ):  # Not covered by tests\n                    event[\"penalty\"] = \"PUCK THROWN FORWARD - GOALKEEPER\"\n\n                elif \"DELAY\" in event[\"description\"] and \"GAME\" in event[\"description\"]:\n                    event[\"penalty\"] = \"DELAY OF GAME\"\n\n                elif event[\"penalty\"] == \"MISCONDUCT\":\n                    event[\"penalty\"] = \"GAME MISCONDUCT\"\n\n            shot_events = [\"GOAL\", \"SHOT\", \"MISS\", \"BLOCK\"]\n\n            if event[\"event\"] in shot_events:\n                try:\n                    event[\"shot_type\"] = re.search(shot_re, event[\"description\"]).group(1).upper()\n\n                except AttributeError:\n                    event[\"shot_type\"] = \"WRIST\"\n\n                    pass\n\n                if \"BETWEEN LEGS\" in event[\"description\"]:  # Not covered by tests\n                    event[\"shot_type\"] = \"BETWEEN LEGS\"\n\n            try:\n                event[\"pbp_distance\"] = int(re.search(distance_re, event[\"description\"]).group(1))\n\n            except AttributeError:\n                if event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]:\n                    event[\"pbp_distance\"] = 0\n\n                pass\n\n        self._html_events = sorted(self._html_events, key=lambda k: (k[\"event_idx\"]))\n\n        final_events = []\n\n        for event in self._html_events:\n            if \"period_seconds\" not in event and \"time\" in event:\n                event[\"period\"] = int(event[\"period\"])\n\n                time_split = event[\"time\"].split(\":\")\n\n                event[\"period_time\"] = time_split[0] + \":\" + time_split[1][:2]\n\n                event[\"period_seconds\"] = (60 * int(event[\"period_time\"].split(\":\")[0])) + int(\n                    event[\"period_time\"].split(\":\")[1]\n                )\n\n            if \"game_seconds\" not in event:\n                event[\"game_seconds\"] = (int(event[\"period\"]) - 1) * 1200 + event[\"period_seconds\"]\n\n                if event[\"period\"] == 5 and event[\"session\"] == \"R\":\n                    event[\"game_seconds\"] = 3900 + event[\"period_seconds\"]\n\n            if \"version\" not in event:\n                other_events = [\n                    x\n                    for x in self._html_events\n                    # if x != event\n                    if x[\"event\"] == event[\"event\"]\n                    and x.get(\"game_seconds\") == event[\"game_seconds\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x.get(\"player_1_eh_id\") is not None\n                    and event.get(\"player_1_eh_id\") is not None\n                    and x[\"player_1_eh_id\"] == event[\"player_1_eh_id\"]\n                ]\n\n                version = 1\n\n                event[\"version\"] = version\n\n                if len(other_events) &gt; 0:\n                    for idx, _other_event in enumerate(other_events):\n                        if event == other_events[0]:\n                            continue\n\n                        version = idx + 1\n                        event[\"version\"] = version\n\n            final_events.append(HTMLEvent.model_validate(event).model_dump())\n\n        self._html_events = final_events\n\n    @property\n    def html_events(self) -&gt; list:\n        \"\"\"List of events scraped from HTML endpoint. Each event is a dictionary with the below keys.\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).html_events_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_idx (int):\n                Index ID for event, e.g., 331\n            period (int):\n                Period number of the event, e.g., 3\n            period_time (str):\n                Time elapsed in the period, e.g., 19:38\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            description (str | None):\n                Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., DEF\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            penalty_length (str | None):\n                Duration of the penalty, e.g., None\n            penalty (str | None):\n                Reason for the penalty, e.g., None\n            strength (str | None):\n                Code to indication strength state, e.g., EV\n            away_skaters (str):\n                Away skaters on-ice, e.g., 13C, 19C, 64C, 14D, 59D, 35G\n            home_skaters (str):\n                Home skaters on-ice, e.g., 19C, 77C, 12R, 88R, 2D, 56D\n            version (int):\n                Increases with simultaneous events, used for combining events in the scraper, e.g., 1\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.html_events\n\n        \"\"\"\n        if self._html_events is None:\n            if self._html_rosters is None:\n                self._scrape_html_rosters()\n                self._munge_html_rosters()\n\n            self._scrape_html_events()\n            self._munge_html_events()\n\n        return self._html_events\n\n    @property\n    def html_events_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of events scraped from HTML endpoint.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_idx (int):\n                Index ID for event, e.g., 331\n            period (int):\n                Period number of the event, e.g., 3\n            period_time (str):\n                Time elapsed in the period, e.g., 19:38\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            description (str | None):\n                Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., DEF\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            penalty_length (str | None):\n                Duration of the penalty, e.g., None\n            penalty (str | None):\n                Reason for the penalty, e.g., None\n            strength (str | None):\n                Code to indication strength state, e.g., EV\n            away_skaters (str):\n                Away skaters on-ice, e.g., 13C, 19C, 64C, 14D, 59D, 35G\n            home_skaters (str):\n                Home skaters on-ice, e.g., 19C, 77C, 12R, 88R, 2D, 56D\n            version (int):\n                Increases with simultaneous events, used for combining events in the scraper, e.g., 1\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.html_events_df\n\n        \"\"\"\n        if self._html_events is None:\n            if self._html_rosters is None:\n                self._scrape_html_rosters()\n                self._munge_html_rosters()\n\n            self._scrape_html_events()\n            self._munge_html_events()\n\n        return pd.DataFrame(self._html_events)\n\n    def _scrape_html_rosters(self) -&gt; None:\n        \"\"\"Method for scraping players from HTML endpoint. Updates self._html_rosters.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Game object\n            &gt;&gt;&gt; game = Game(2023020001)\n\n            Before cleaning the data, game._html_rosters is None\n            &gt;&gt;&gt; game._html_rosters  # Returns None\n\n            Once you scrape the data, you can access it in raw form, prior to any processing\n            &gt;&gt;&gt; game._scrape_html_rosters()  # Scrapes raw data and adds it to game._html_rosters\n            &gt;&gt;&gt; game.html_rosters  # Returns raw rosters, prior to processing\n            &gt;&gt;&gt; game.html_rosters_df  # Same, but a Pandas DataFrame\n\n            You then have to manually clean the data\n            &gt;&gt;&gt; game._munge_html_rosters()\n            &gt;&gt;&gt; game.html_rosters  # Returns cleaned rosters data\n            &gt;&gt;&gt; game.html_rosters_df  # Same but a Pandas DataFrame\n        \"\"\"\n        # URL and scraping url\n\n        url = self.html_rosters_endpoint\n\n        s = self._requests_session\n\n        try:\n            page = s.get(url)\n        except RetryError:  # Not covered by tests\n            return None\n\n        # Continue if status code is bad\n\n        if page.status_code == 404:  # Not covered by tests\n            return None\n\n        # Reading the HTML file using beautiful soup package\n\n        soup = BeautifulSoup(page.content.decode(\"ISO-8859-1\"), \"lxml\", multi_valued_attributes=None)\n\n        # Information for reading the HTML data\n\n        td_dict = {\"align\": \"center\", \"class\": [\"teamHeading + border\", \"teamHeading + border \"], \"width\": \"50%\"}\n\n        # Finding all active players in the html file\n\n        teamsoup = soup.find_all(\"td\", td_dict)\n\n        # Dictionary for finding each team's table in the HTML file\n\n        table_dict = {\n            \"align\": \"center\",\n            \"border\": \"0\",\n            \"cellpadding\": \"0\",\n            \"cellspacing\": \"0\",\n            \"width\": \"100%\",\n            \"xmlns:ext\": \"\",\n        }\n\n        # Dictionary to collect the team names\n\n        team_names = {}\n\n        # Dictionary to collect the team tables from the HTML data for iterating\n\n        team_soup_list = []\n\n        # List of teams for iterating\n\n        team_list = [\"away\", \"home\"]\n\n        # List to collect the player dictionaries during iteration\n\n        player_list = []\n\n        # Iterating through the home and away teams to collect names and tables\n\n        for idx, team in enumerate(team_list):\n            # Collecting team names\n\n            team_name = unidecode(teamsoup[idx].get_text().encode(\"latin-1\").decode(\"utf-8\")).upper()\n\n            # Correcting the Coyotes team name\n\n            if team_name == \"PHOENIX COYOTES\":\n                team_name = \"ARIZONA COYOTES\"\n\n            team_names.update({team: team_name})\n\n            # Collecting tables of active players\n\n            team_soup_list.append((soup.find_all(\"table\", table_dict))[idx].find_all(\"td\"))\n\n        # Iterating through the team's tables of active players\n\n        for idx, team_soup in enumerate(team_soup_list):\n            table_dict = {\n                \"align\": \"center\",\n                \"border\": \"0\",\n                \"cellpadding\": \"0\",\n                \"cellspacing\": \"0\",\n                \"width\": \"100%\",\n                \"xmlns:ext\": \"\",\n            }\n\n            stuff = soup.find_all(\"table\", table_dict)[idx].find_all(\"td\", {\"class\": \"bold\"})\n\n            starters = list(np.reshape(stuff, (int(len(stuff) / 3), 3))[:, 2])\n\n            # Getting length to create numpy array\n\n            length = int(len(team_soup) / 3)\n\n            # Creating a numpy array from the data, chopping off the headers to create my own\n\n            active_array = np.array(team_soup).reshape(length, 3)\n\n            # Getting original headers\n\n            og_headers = active_array[0]\n\n            if \"Name\" not in og_headers and \"Nom/Name\" not in og_headers:  # Not covered by tests\n                continue\n\n            # Chop off the headers to create my own\n\n            actives = active_array[1:]\n\n            # Iterating through each player, or row in the array\n\n            for player in actives:\n                # New headers for the data. Original headers | ['#', 'Pos', 'Name']\n\n                if len(player) == 3:\n                    headers = [\"jersey\", \"position\", \"player_name\"]\n\n                # Sometimes headers are missing\n\n                else:  # Not covered by tests\n                    headers = [\"jersey\", \"player_name\"]\n\n                # Creating dictionary with headers as keys from the player data\n\n                player = dict(zip(headers, player, strict=False))\n\n                # Adding new values to the player dictionary\n\n                new_values = {\n                    \"team_name\": team_names.get(team_list[idx]),\n                    \"team_venue\": team_list[idx].upper(),\n                    \"status\": \"ACTIVE\",\n                }\n\n                if player[\"player_name\"] in starters:\n                    player[\"starter\"] = 1\n\n                else:\n                    player[\"starter\"] = 0\n\n                player[\"player_name\"] = (\n                    re.sub(r\"\\(\\s?(.*)\\)\", \"\", player[\"player_name\"]).strip().encode(\"latin-1\").decode(\"utf-8\").upper()\n                )\n\n                player[\"player_name\"] = unidecode(player[\"player_name\"])\n\n                if \"position\" not in headers:  # Not covered by tests\n                    player[\"position\"] = None\n\n                # Update the player's dictionary with new values\n\n                player.update(new_values)\n\n                # Append player dictionary to list of players\n\n                player_list.append(player)\n\n        # Check if scratches are present\n\n        if len(soup.find_all(\"table\", table_dict)) &gt; 2:\n            # If scratches are present, iterate through the team's scratch tables\n\n            for idx, team in enumerate(team_list):\n                # Getting team's scratches from HTML\n\n                scratch_soup = (soup.find_all(\"table\", table_dict))[idx + 2].find_all(\"td\")\n\n                # Checking to see if there is at least one set of scratches (first row are headers)\n\n                if len(scratch_soup) &gt; 1:\n                    # Getting the number of scratches\n\n                    length = int(len(scratch_soup) / 3)\n\n                    # Creating numpy array of scratches, removing headers\n\n                    scratches = np.array(scratch_soup).reshape(length, 3)[1:]\n\n                    # Iterating through the array\n\n                    for player in scratches:\n                        # New headers for the data. Original headers | ['#', 'Pos', 'Name']\n\n                        if len(player) == 3:\n                            headers = [\"jersey\", \"position\", \"player_name\"]\n\n                        # Sometimes headers are missing\n\n                        else:  # Not covered by tests\n                            headers = [\"jersey\", \"player_name\"]\n\n                        # Creating dictionary with headers as keys from the player data\n\n                        player = dict(zip(headers, player, strict=False))\n\n                        # Adding new values to the player dictionary\n\n                        new_values = {\n                            \"team_name\": team_names.get(team_list[idx]),\n                            \"team_venue\": team_list[idx].upper(),\n                            \"starter\": 0,\n                            \"status\": \"SCRATCH\",\n                        }\n\n                        if \"position\" not in headers:  # Not covered by tests\n                            player[\"position\"] = None\n\n                        player[\"player_name\"] = (\n                            re.sub(r\"\\(\\s?(.*)\\)\", \"\", player[\"player_name\"])\n                            .strip()\n                            .encode(\"latin-1\")\n                            .decode(\"utf-8\")\n                            .upper()\n                        )\n\n                        player[\"player_name\"] = unidecode(player[\"player_name\"])\n\n                        # Updating player dictionary\n\n                        player.update(new_values)\n\n                        # Appending the player dictionary to the player list\n\n                        player_list.append(player)\n\n        self._html_rosters = player_list\n\n    def _munge_html_rosters(self) -&gt; None:\n        \"\"\"Method to munge list of players from HTML endpoint. Updates self._html_rosters.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Game object\n            &gt;&gt;&gt; game = Game(2023020001)\n\n            Before cleaning the data, game._html_rosters is None\n            &gt;&gt;&gt; game._html_rosters  # Returns None\n\n            Once you scrape the data, you can access it in raw form, prior to any processing\n            &gt;&gt;&gt; game._scrape_html_rosters()  # Scrapes raw data and adds it to game._html_rosters\n            &gt;&gt;&gt; game.html_rosters  # Returns raw rosters, prior to processing\n            &gt;&gt;&gt; game.html_rosters_df  # Same, but a Pandas DataFrame\n\n            You then have to manually clean the data\n            &gt;&gt;&gt; game._munge_html_rosters()\n            &gt;&gt;&gt; game.html_rosters  # Returns cleaned rosters data\n            &gt;&gt;&gt; game.html_rosters_df  # Same but a Pandas DataFrame\n        \"\"\"\n        season = self.season\n        game_session = self.session\n\n        # Iterating through each player to change information\n\n        final_rosters = []\n\n        for player in self._html_rosters:\n            # Fixing jersey data type\n\n            player = html_rosters_fixes(self.game_id, player)\n\n            player[\"jersey\"] = int(player[\"jersey\"])\n\n            # Adding new values in a batch\n\n            new_values = {\"season\": int(season), \"session\": game_session, \"game_id\": self.game_id}\n\n            player.update(new_values)\n\n            player[\"player_name\"] = (\n                player[\"player_name\"]\n                .replace(\"ALEXANDRE\", \"ALEX\")\n                .replace(\"ALEXANDER\", \"ALEX\")\n                .replace(\"CHRISTOPHER\", \"CHRIS\")\n            )\n\n            player[\"player_name\"] = correct_names_dict.get(player[\"player_name\"], player[\"player_name\"])\n\n            # Creating Evolving Hockey ID\n\n            player[\"eh_id\"] = unidecode(player[\"player_name\"])\n\n            name_split = player[\"eh_id\"].split(\" \", maxsplit=1)\n\n            player[\"eh_id\"] = f\"{name_split[0]}.{name_split[1]}\"\n\n            player[\"eh_id\"] = player[\"eh_id\"].replace(\"..\", \".\")\n\n            # Correcting Evolving Hockey IDs for duplicates\n\n            duplicates = {\n                \"SEBASTIAN.AHO\": player[\"position\"] == \"D\",\n                \"COLIN.WHITE\": player[\"season\"] &gt;= 20162017,\n                \"SEAN.COLLINS\": player[\"position\"] != \"D\",\n                \"ALEX.PICARD\": player[\"position\"] != \"D\",\n                \"ERIK.GUSTAFSSON\": player[\"season\"] &gt;= 20152016,\n                \"MIKKO.LEHTONEN\": player[\"season\"] &gt;= 20202021,\n                \"NATHAN.SMITH\": player[\"season\"] &gt;= 20212022,\n                \"DANIIL.TARASOV\": player[\"position\"] == \"G\",\n            }\n\n            # Iterating through the duplicate names and conditions\n\n            for duplicate_name, condition in duplicates.items():\n                if player[\"eh_id\"] == duplicate_name and condition:\n                    player[\"eh_id\"] = f\"{duplicate_name}2\"\n\n            # Something weird with Colin White\n\n            if player[\"eh_id\"] == \"COLIN.\":  # Not covered by tests\n                player[\"eh_id\"] = \"COLIN.WHITE2\"\n\n            player[\"team\"] = team_codes.get(player[\"team_name\"])\n\n            player[\"team_jersey\"] = f\"{player['team']}{player['jersey']}\"\n\n            final_rosters.append(HTMLRosterPlayer.model_validate(player).model_dump())\n\n        self._html_rosters = final_rosters\n\n        self._html_rosters = sorted(self._html_rosters, key=lambda k: (k[\"team_venue\"], k[\"status\"], k[\"player_name\"]))\n\n    @property\n    def html_rosters(self) -&gt; list:\n        \"\"\"List of players scraped from HTML endpoint. Returns a dictionary of players with the below keys.\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).html_rosters_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            jersey (int):\n                Player's jersey number, e.g., 9\n            position (str):\n                Player's position, e.g., L\n            starter (int):\n                Whether the player started the game, e.g., 0\n            status (str):\n                Whether player is active or scratched, e.g., ACTIVE\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.html_rosters\n\n        \"\"\"\n        if self._html_rosters is None:\n            self._scrape_html_rosters()\n            self._munge_html_rosters()\n\n        return self._html_rosters\n\n    @property\n    def html_rosters_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of players scraped from HTML endpoint.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            jersey (int):\n                Player's jersey number, e.g., 9\n            position (str):\n                Player's position, e.g., L\n            starter (int):\n                Whether the player started the game, e.g., 0\n            status (str):\n                Whether player is active or scratched, e.g., ACTIVE\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.html_rosters_df\n\n        \"\"\"\n        if self._html_rosters is None:\n            self._scrape_html_rosters()\n            self._munge_html_rosters()\n\n        return pd.DataFrame(self._html_rosters)\n\n    def _combine_events(self) -&gt; None:\n        \"\"\"Method to combine API and HTML events. Updates self._play_by_play.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First instantiate the Game object\n            &gt;&gt;&gt; game = Game(2023020001)\n\n            Requires all other data sources to be clean\n\n            HTML rosters\n            &gt;&gt;&gt; game._scrape_html_rosters()\n            &gt;&gt;&gt; game._munge_html_rosters()\n\n            API rosters\n            &gt;&gt;&gt; game._munge_api_rosters()\n\n            Combined rosters\n            &gt;&gt;&gt; game._combine_rosters()\n\n            HTML events\n            &gt;&gt;&gt; game._scrape_html_events()  # Scrapes events from HTML feed\n            &gt;&gt;&gt; game._munge_html_events()  # Preps raw events, updates game._html_events\n\n            API events\n            &gt;&gt;&gt; game._munge_api_events()  # Preps raw events, updates game._api_events\n\n            Shifts and changes\n            &gt;&gt;&gt; game._scrape_html_events()  # Scrapes shifts from HTML feed\n            &gt;&gt;&gt; game._munge_shifts()  # Preps raw shifts, updates game._shifts\n            &gt;&gt;&gt; game._munge_changes()  # Preps changes\n\n            Combines them all\n            &gt;&gt;&gt; game._combine_events()  # Combines raw events, into game._play_by_play\n\n            Data can then be manually cleaned\n            &gt;&gt;&gt; game._munge_play_by_play()\n            &gt;&gt;&gt; game._prep_xg()\n            &gt;&gt;&gt; game._play_by_play  # Returns cleaned data\n        \"\"\"\n        html_events = self._html_events\n        api_events = self._api_events\n\n        game_list = []\n\n        for event in html_events:\n            if event[\"event\"] == \"EGPID\":  # Not covered by tests\n                continue\n\n            event_data = {}\n\n            event_data.update(event)\n\n            non_team_events = [\n                \"STOP\",\n                \"ANTHEM\",\n                \"PGSTR\",\n                \"PGEND\",\n                \"PSTR\",\n                \"PEND\",\n                \"EISTR\",\n                \"EIEND\",\n                \"GEND\",\n                \"SOC\",\n                \"EGT\",\n                \"PBOX\",\n                \"PRDY\",\n                \"POFF\",\n                \"GOFF\",\n            ]\n\n            if event[\"event\"] in non_team_events:\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                    and x[\"version\"] == event[\"version\"]\n                ]\n\n            elif event[\"event\"] == \"CHL\" and event.get(\"event_team\") is None:  # Not covered by tests\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                    and x[\"version\"] == event[\"version\"]\n                ]\n\n            elif event[\"event\"] == \"CHL\" and event.get(\"event_team\") is not None:\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x.get(\"event_team\") is not None\n                    and event.get(\"event_team\") is not None\n                    and x[\"event_team\"] == event[\"event_team\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                    and x[\"version\"] == event[\"version\"]\n                ]\n\n            elif event[\"event\"] == \"PENL\":\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x[\"event_team\"] == event[\"event_team\"]\n                    and x[\"player_1_eh_id\"] == event[\"player_1_eh_id\"]\n                    and x.get(\"player_2_eh_id\") == event.get(\"player_2_eh_id\")\n                    and x.get(\"player_3_eh_id\") == event.get(\"player_3_eh_id\")\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                ]\n\n            elif event[\"event\"] == \"BLOCK\" and event[\"player_1\"] == \"TEAMMATE\":  # Not covered by tests\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x.get(\"event_team\") is not None\n                    and event.get(\"event_team\") is not None\n                    and x[\"event_team\"] == event[\"event_team\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                    and x[\"version\"] == event[\"version\"]\n                ]\n\n            else:\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x.get(\"event_team\") is not None\n                    and event.get(\"event_team\") is not None\n                    and x[\"event_team\"] == event[\"event_team\"]\n                    and x.get(\"player_1_eh_id\") is not None\n                    and event.get(\"player_1_eh_id\") is not None\n                    and x[\"player_1_eh_id\"] == event[\"player_1_eh_id\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                    and x[\"version\"] == event[\"version\"]\n                ]\n\n            if event[\"event\"] == \"FAC\" and len(api_matches) == 0:  # Not covered by tests\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                    and x[\"version\"] == event[\"version\"]\n                ]\n\n            if len(api_matches) == 0:\n                game_list.append(event_data)\n\n                continue\n\n            elif len(api_matches) == 1:\n                api_match = api_matches[0]\n\n                new_values = {\n                    \"event_idx_api\": api_match.get(\"event_idx\"),\n                    \"coords_x\": api_match.get(\"coords_x\"),\n                    \"coords_y\": api_match.get(\"coords_y\"),\n                    \"player_1_eh_id_api\": api_match.get(\"player_1_eh_id\"),\n                    \"player_1_api_id\": api_match.get(\"player_1_api_id\"),\n                    \"player_1_type\": api_match.get(\"player_1_type\"),\n                    \"player_2_eh_id_api\": api_match.get(\"player_2_eh_id\"),\n                    \"player_2_api_id\": api_match.get(\"player_2_api_id\"),\n                    \"player_2_type\": api_match.get(\"player_2_type\"),\n                    \"player_3_eh_id_api\": api_match.get(\"player_3_eh_id\"),\n                    \"player_3_api_id\": api_match.get(\"player_3_api_id\"),\n                    \"player_3_type\": api_match.get(\"player_3_type\"),\n                    \"version_api\": api_match.get(\"version\", 1),\n                }\n\n                event_data.update(new_values)\n\n                if event[\"event\"] == \"BLOCK\" and event[\"player_1\"] == \"TEAMMATE\":  # Not covered by tests\n                    new_values = {\n                        \"player_1\": api_match.get(\"player_1\", event[\"player_1\"]),\n                        \"player_1_eh_id\": api_match.get(\"player_1_eh_id\", event[\"player_1_eh_id\"]),\n                        \"player_1_position\": api_match.get(\"player_1_position\", event[\"player_1_position\"]),\n                    }\n\n                    event_data.update(new_values)\n\n                game_list.append(event_data)\n\n        game_list.extend(self._changes)\n\n        for event in game_list:\n            new_values = {\n                \"game_date\": self.game_date,\n                \"home_team\": self.home_team[\"abbrev\"],\n                \"away_team\": self.away_team[\"abbrev\"],\n            }\n\n            event.update(new_values)\n\n            if \"version\" not in event:\n                event[\"version\"] = 1\n\n            if event[\"period\"] == 5 and event[\"session\"] == \"R\":  # Not covered by tests\n                event[\"sort_value\"] = event[\"event_idx\"]\n\n            else:\n                sort_dict = {\n                    \"PGSTR\": 1,\n                    \"PGEND\": 2,\n                    \"ANTHEM\": 3,\n                    \"EGT\": 3,\n                    \"CHL\": 3,\n                    \"DELPEN\": 3,\n                    \"BLOCK\": 3,\n                    \"GIVE\": 3,\n                    \"HIT\": 3,\n                    \"MISS\": 3,\n                    \"SHOT\": 3,\n                    \"TAKE\": 3,\n                    \"GOAL\": 5,\n                    \"STOP\": 6,\n                    \"PENL\": 7,\n                    \"PBOX\": 7,\n                    \"PSTR\": 7,\n                    \"CHANGE\": 8,\n                    \"EISTR\": 9,\n                    \"EIEND\": 10,\n                    \"FAC\": 12,\n                    \"PEND\": 13,\n                    \"SOC\": 14,\n                    \"GEND\": 15,\n                    \"GOFF\": 16,\n                }\n\n                event[\"sort_value\"] = sort_dict[event[\"event\"]]\n\n        game_list = sorted(\n            game_list, key=lambda k: (k[\"period\"], k[\"period_seconds\"], k[\"sort_value\"])\n        )  # , k['version']\n\n        self._play_by_play = game_list\n\n    def _munge_play_by_play(self) -&gt; None:\n        \"\"\"Method to munge list of events and changes for play-by-play. Updates self._play_by_play.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Game object\n            &gt;&gt;&gt; game = Game(2023020001)\n\n            Requires clean events from the shifts, API events, and HTML events feeds\n\n            HTML events\n            &gt;&gt;&gt; game._scrape_html_events()  # Scrapes events from HTML feed\n            &gt;&gt;&gt; game._munge_html_events()  # Preps raw events, updates game._html_events\n\n            API events\n            &gt;&gt;&gt; game._munge_api_events()  # Preps raw events, updates game._api_events\n\n            Shifts and changes\n            &gt;&gt;&gt; game._scrape_html_events()  # Scrapes shifts from HTML feed\n            &gt;&gt;&gt; game._munge_shifts()  # Preps raw shifts, updates game._shifts\n            &gt;&gt;&gt; game._munge_changes()  # Preps changes\n\n            Combines them all\n            &gt;&gt;&gt; game._combine_events()  # Combines raw events, into game._play_by_play\n\n            Data can then be manually cleaned\n            &gt;&gt;&gt; game._munge_play_by_play()\n            &gt;&gt;&gt; game._prep_xg()\n            &gt;&gt;&gt; game._play_by_play  # Returns cleaned data\n        \"\"\"\n        game_session = self.session\n\n        home_score = 0\n\n        away_score = 0\n\n        for idx, event in enumerate(self._play_by_play):\n            if event.get(\"event_team\") == event[\"home_team\"]:\n                event[\"opp_team\"] = event[\"away_team\"]\n\n            elif event.get(\"event_team\") == event[\"away_team\"]:\n                event[\"opp_team\"] = event[\"home_team\"]\n\n            else:\n                event[\"event_team\"] = event[\"home_team\"]\n                event[\"opp_team\"] = event[\"away_team\"]\n\n            event[\"home_forwards_eh_id\"] = []\n            event[\"home_forwards_api_id\"] = []\n            event[\"home_forwards\"] = []\n            event[\"home_forwards_positions\"] = []\n\n            event[\"home_defense_eh_id\"] = []\n            event[\"home_defense_api_id\"] = []\n            event[\"home_defense\"] = []\n            event[\"home_defense_positions\"] = []\n\n            event[\"home_goalie_eh_id\"] = []\n            event[\"home_goalie_api_id\"] = []\n            event[\"home_goalie\"] = []\n\n            event[\"away_forwards_eh_id\"] = []\n            event[\"away_forwards_api_id\"] = []\n            event[\"away_forwards\"] = []\n            event[\"away_forwards_positions\"] = []\n\n            event[\"away_defense_eh_id\"] = []\n            event[\"away_defense_api_id\"] = []\n            event[\"away_defense\"] = []\n            event[\"away_defense_positions\"] = []\n\n            event[\"away_goalie_eh_id\"] = []\n            event[\"away_goalie_api_id\"] = []\n            event[\"away_goalie\"] = []\n\n            if (\n                self._play_by_play[(idx - 1)][\"event\"] == \"GOAL\"\n                and self._play_by_play[(idx - 1)][\"event_team\"] == event[\"home_team\"]\n            ):\n                if game_session == \"R\" and event[\"period\"] != 5:\n                    home_score += 1\n\n                elif game_session == \"R\" and event[\"period\"] == 5:  # Not covered by tests\n                    ot_events = [\n                        x for x in self._play_by_play if x[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"] and x[\"period\"] == 5\n                    ]\n\n                    home_goals = [\n                        x\n                        for x in self._play_by_play\n                        if x[\"event\"] == \"GOAL\" and x[\"period\"] == 5 and x[\"event_team\"] == event[\"home_team\"]\n                    ]\n\n                    away_goals = [\n                        x\n                        for x in self._play_by_play\n                        if x[\"event\"] == \"GOAL\" and x[\"period\"] == 5 and x[\"event_team\"] == event[\"away_team\"]\n                    ]\n\n                    if event == ot_events[-1] and len(home_goals) &gt; len(away_goals):\n                        home_score += 1\n\n                else:\n                    home_score += 1\n\n            elif (\n                self._play_by_play[(idx - 1)][\"event\"] == \"GOAL\"\n                and self._play_by_play[(idx - 1)][\"event_team\"] == event[\"away_team\"]\n            ):\n                if game_session == \"R\" and event[\"period\"] != 5:\n                    away_score += 1\n\n                elif game_session == \"R\" and event[\"period\"] == 5:  # Not covered by tests\n                    ot_events = [\n                        x for x in self._play_by_play if x[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"] and x[\"period\"] == 5\n                    ]\n\n                    home_goals = [\n                        x\n                        for x in self._play_by_play\n                        if x[\"event\"] == \"GOAL\" and x[\"period\"] == 5 and x[\"event_team\"] == event[\"home_team\"]\n                    ]\n\n                    away_goals = [\n                        x\n                        for x in self._play_by_play\n                        if x[\"event\"] == \"GOAL\" and x[\"period\"] == 5 and x[\"event_team\"] == event[\"away_team\"]\n                    ]\n\n                    if event == ot_events[-1] and len(away_goals) &gt; len(home_goals):\n                        away_score += 1\n\n                else:\n                    away_score += 1\n\n            event[\"home_score\"] = home_score\n            event[\"home_score_diff\"] = home_score - away_score\n\n            event[\"away_score\"] = away_score\n            event[\"away_score_diff\"] = away_score - home_score\n\n            event[\"score_state\"] = f\"{home_score}v{away_score}\"\n            event[\"score_diff\"] = home_score - away_score\n\n        roster = [x for x in self._rosters if x[\"status\"] == \"ACTIVE\"]\n\n        roster = sorted(roster, key=lambda k: (k[\"team_venue\"], k[\"jersey\"]))\n\n        for player in roster:\n            counter = 0\n\n            for event in self._play_by_play:\n                if (\n                    event.get(\"event_team\", \"NaN\") in player[\"team_jersey\"]\n                    and event[\"event\"] == \"CHANGE\"\n                    and event.get(\"change_on\") is not None\n                ):\n                    players_on = [x for x in event[\"change_on_jersey\"].split(\", \") if x == player[\"team_jersey\"]]\n\n                    if len(players_on) &gt; 0:\n                        counter += 1\n\n                if (\n                    event.get(\"event_team\", \"NaN\") in player[\"team_jersey\"]\n                    and event[\"event\"] == \"CHANGE\"\n                    and event.get(\"change_off\") is not None\n                ):\n                    players_off = [x for x in event[\"change_off_jersey\"].split(\", \") if x == player[\"team_jersey\"]]\n\n                    if len(players_off) &gt; 0:\n                        counter -= 1\n\n                if counter &gt; 0:\n                    forwards = [\"L\", \"C\", \"R\"]\n\n                    if player[\"team_venue\"] == \"HOME\":\n                        if player[\"position\"] in forwards:\n                            event[\"home_forwards_eh_id\"].append(player[\"eh_id\"])\n                            event[\"home_forwards_api_id\"].append(str(player[\"api_id\"]))\n                            event[\"home_forwards\"].append(player[\"player_name\"])\n                            event[\"home_forwards_positions\"].append(player[\"position\"])\n\n                        elif player[\"position\"] == \"D\":\n                            event[\"home_defense_eh_id\"].append(player[\"eh_id\"])\n                            event[\"home_defense_api_id\"].append(str(player[\"api_id\"]))\n                            event[\"home_defense\"].append(player[\"player_name\"])\n                            event[\"home_defense_positions\"].append(player[\"position\"])\n\n                        elif player[\"position\"] == \"G\":\n                            event[\"home_goalie_eh_id\"].append(player[\"eh_id\"])\n                            event[\"home_goalie_api_id\"].append(str(player[\"api_id\"]))\n                            event[\"home_goalie\"].append(player[\"player_name\"])\n\n                    else:\n                        if player[\"position\"] in forwards:\n                            event[\"away_forwards_eh_id\"].append(player[\"eh_id\"])\n                            event[\"away_forwards_api_id\"].append(str(player[\"api_id\"]))\n                            event[\"away_forwards\"].append(player[\"player_name\"])\n                            event[\"away_forwards_positions\"].append(player[\"position\"])\n\n                        elif player[\"position\"] == \"D\":\n                            event[\"away_defense_eh_id\"].append(player[\"eh_id\"])\n                            event[\"away_defense_api_id\"].append(str(player[\"api_id\"]))\n                            event[\"away_defense\"].append(player[\"player_name\"])\n                            event[\"away_defense_positions\"].append(player[\"position\"])\n\n                        elif player[\"position\"] == \"G\":\n                            event[\"away_goalie_eh_id\"].append(player[\"eh_id\"])\n                            event[\"away_goalie_api_id\"].append(str(player[\"api_id\"]))\n                            event[\"away_goalie\"].append(player[\"player_name\"])\n\n        # Instantiating shapely objects for high-danger and danger area computations\n\n        high_danger1 = Polygon(np.array([[69, -9], [89, -9], [89, 9], [69, 9]]))\n        high_danger2 = Polygon(np.array([[-69, -9], [-89, -9], [-89, 9], [-69, 9]]))\n\n        danger1 = Polygon(\n            np.array(\n                [[89, 9], [89, -9], [69, -22], [54, -22], [54, -9], [44, -9], [44, 9], [54, 9], [54, 22], [69, 22]]\n            )\n        )\n        danger2 = Polygon(\n            np.array(\n                [\n                    [-89, 9],\n                    [-89, -9],\n                    [-69, -22],\n                    [-54, -22],\n                    [-54, -9],\n                    [-44, -9],\n                    [-44, 9],\n                    [-54, 9],\n                    [-54, 22],\n                    [-69, 22],\n                ]\n            )\n        )\n\n        final_events = []\n        final_events_ext = []\n\n        for idx, event in enumerate(self._play_by_play):\n            event_length_idx = idx if event == self._play_by_play[-1] else idx + 1\n\n            new_values = {\n                \"event_idx\": idx + 1,\n                \"event_length\": self._play_by_play[event_length_idx][\"game_seconds\"] - event[\"game_seconds\"],\n                \"home_on_eh_id\": event[\"home_forwards_eh_id\"] + event[\"home_defense_eh_id\"],\n                \"home_on_api_id\": event[\"home_forwards_api_id\"] + event[\"home_defense_api_id\"],\n                \"home_on\": event[\"home_forwards\"] + event[\"home_defense\"],\n                \"home_on_positions\": event[\"home_forwards_positions\"] + event[\"home_defense_positions\"],\n                \"away_on_eh_id\": event[\"away_forwards_eh_id\"] + event[\"away_defense_eh_id\"],\n                \"away_on_api_id\": event[\"away_forwards_api_id\"] + event[\"away_defense_api_id\"],\n                \"away_on\": event[\"away_forwards\"] + event[\"away_defense\"],\n                \"away_on_positions\": event[\"away_forwards_positions\"] + event[\"away_defense_positions\"],\n            }\n\n            event.update(new_values)\n\n            if event.get(\"event_team\") == event[\"home_team\"]:\n                event[\"is_home\"] = 1\n\n            else:\n                event[\"is_home\"] = 0\n\n            if event.get(\"event_team\") == event[\"away_team\"]:\n                event[\"is_away\"] = 1\n\n            else:\n                event[\"is_away\"] = 0\n\n            if (\n                event.get(\"coords_x\") is not None\n                and event.get(\"coords_x\") != \"\"\n                and event.get(\"coords_y\") is not None\n                and event.get(\"coords_y\") != \"\"\n            ):\n                # Fixing event angle and distance for errors\n\n                is_fenwick = event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]\n                is_long_distance = event[\"pbp_distance\"] is not None and event.get(\"pbp_distance\", 0) &gt; 89\n                x_is_neg = event.get(\"coords_x\", 0) &lt; 0\n                x_is_pos = event.get(\"coords_x\", 0) &gt; 0\n                bad_shots = event.get(\"shot_type\", \"WRIST\") not in [\n                    \"TIP-IN\",\n                    \"WRAP-AROUND\",\n                    \"WRAP\",\n                    \"DEFLECTED\",\n                    \"BAT\",\n                    \"BETWEEN LEGS\",\n                    \"POKE\",\n                ]\n\n                zone_cond = event.get(\"zone\") != \"OFF\"\n\n                x_is_neg_conds = is_fenwick &amp; is_long_distance &amp; x_is_neg &amp; bad_shots &amp; zone_cond\n\n                x_is_pos_conds = is_fenwick &amp; is_long_distance &amp; x_is_pos &amp; bad_shots &amp; zone_cond\n\n                if x_is_neg_conds is True:\n                    event[\"event_distance\"] = ((abs(event[\"coords_x\"]) + 89) ** 2 + event[\"coords_y\"] ** 2) ** (1 / 2)\n\n                    try:\n                        event[\"event_angle\"] = np.degrees(\n                            abs(np.arctan(event[\"coords_y\"] / (abs(event[\"coords_x\"] + 89))))\n                        )\n\n                    except ZeroDivisionError:  # Not covered by tests\n                        event[\"event_angle\"] = np.degrees(abs(np.arctan(np.nan)))\n\n                elif x_is_pos_conds is True:\n                    event[\"event_distance\"] = ((event[\"coords_x\"] + 89) ** 2 + event[\"coords_y\"] ** 2) ** (1 / 2)\n\n                    try:\n                        event[\"event_angle\"] = np.degrees(abs(np.arctan(event[\"coords_y\"] / (event[\"coords_x\"] + 89))))\n\n                    except ZeroDivisionError:  # Not covered by tests\n                        event[\"event_angle\"] = np.degrees(abs(np.arctan(np.nan)))\n\n                else:\n                    event[\"event_distance\"] = ((89 - abs(event[\"coords_x\"])) ** 2 + event[\"coords_y\"] ** 2) ** (1 / 2)\n\n                    try:\n                        event[\"event_angle\"] = np.degrees(\n                            abs(np.arctan(event[\"coords_y\"] / (89 - abs(event[\"coords_x\"]))))\n                        )\n\n                    except ZeroDivisionError:\n                        event[\"event_angle\"] = np.degrees(abs(np.arctan(np.nan)))\n\n            if (\n                event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]\n                and event.get(\"zone\") == \"DEF\"\n                and event.get(\"event_distance\", 0) &lt;= 64\n            ):  # Not covered by tests\n                event[\"zone\"] = \"OFF\"\n\n            if event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]:\n                if event.get(\"zone\") == \"OFF\":\n                    if event.get(\"coords_x\") is not None and event.get(\"coords_y\") is not None:\n                        shot_coords = Point(event[\"coords_x\"], event[\"coords_y\"])\n\n                        if danger1.contains(shot_coords) or danger2.contains(shot_coords):\n                            event[\"danger\"] = 1\n\n                        else:\n                            event[\"danger\"] = 0\n\n                        if high_danger1.contains(shot_coords) or high_danger2.contains(shot_coords):\n                            event[\"high_danger\"] = 1\n\n                            event[\"danger\"] = 0\n\n                        else:\n                            event[\"high_danger\"] = 0\n\n                    else:\n                        event[\"high_danger\"] = 0\n\n                        event[\"danger\"] = 0\n\n                else:\n                    event[\"high_danger\"] = 0\n\n                    event[\"danger\"] = 0\n\n            event[\"home_skaters\"] = len(event[\"home_on_eh_id\"])\n            event[\"away_skaters\"] = len(event[\"away_on_eh_id\"])\n\n            event[\"home_forwards_count\"] = len(event[\"home_forwards\"])\n            event[\"home_defense_count\"] = len(event[\"home_defense\"])\n\n            if event[\"home_skaters\"] &gt; 0:\n                event[\"home_forwards_percent\"] = event[\"home_forwards_count\"] / event[\"home_skaters\"]\n\n            else:\n                event[\"home_forwards_percent\"] = 0\n\n            event[\"away_forwards_count\"] = len(event[\"away_forwards\"])\n            event[\"away_defense_count\"] = len(event[\"away_defense\"])\n\n            if event[\"away_skaters\"] &gt; 0:\n                event[\"away_forwards_percent\"] = event[\"away_forwards_count\"] / event[\"away_skaters\"]\n\n            else:\n                event[\"away_forwards_percent\"] = 0\n\n            home_on = \"E\" if not event[\"home_goalie\"] else event[\"home_skaters\"]\n\n            away_on = \"E\" if not event[\"away_goalie\"] else event[\"away_skaters\"]\n\n            event[\"strength_state\"] = f\"{home_on}v{away_on}\"\n\n            if event.get(\"event_team\") == event[\"home_team\"] or not event.get(\"event_team\"):\n                new_values = {\n                    \"strength_state\": f\"{home_on}v{away_on}\",\n                    \"score_state\": f\"{event['home_score']}v{event['away_score']}\",\n                    \"score_diff\": event[\"home_score_diff\"],\n                    \"event_team_skaters\": event[\"home_skaters\"],\n                    \"teammates_eh_id\": event[\"home_on_eh_id\"],\n                    \"teammates_api_id\": event[\"home_on_api_id\"],\n                    \"teammates\": event[\"home_on\"],\n                    \"teammates_positions\": event[\"home_on_positions\"],\n                    \"forwards_eh_id\": event[\"home_forwards_eh_id\"],\n                    \"forwards_api_id\": event[\"home_forwards_api_id\"],\n                    \"forwards\": event[\"home_forwards\"],\n                    \"forwards_count\": event[\"home_forwards_count\"],\n                    \"forwards_percent\": event[\"home_forwards_percent\"],\n                    \"defense_eh_id\": event[\"home_defense_eh_id\"],\n                    \"defense_api_id\": event[\"home_defense_api_id\"],\n                    \"defense\": event[\"home_defense\"],\n                    \"defense_count\": event[\"home_defense_count\"],\n                    \"own_goalie_eh_id\": event[\"home_goalie_eh_id\"],\n                    \"own_goalie_api_id\": event[\"home_goalie_api_id\"],\n                    \"own_goalie\": event[\"home_goalie\"],\n                    \"opp_strength_state\": f\"{away_on}v{home_on}\",\n                    \"opp_score_state\": f\"{event['away_score']}v{event['home_score']}\",\n                    \"opp_score_diff\": event[\"away_score_diff\"],\n                    \"opp_team_skaters\": event[\"away_skaters\"],\n                    \"opp_team_on_eh_id\": event[\"away_on_eh_id\"],\n                    \"opp_team_on_api_id\": event[\"away_on_api_id\"],\n                    \"opp_team_on\": event[\"away_on\"],\n                    \"opp_team_on_positions\": event[\"away_on_positions\"],\n                    \"opp_forwards_eh_id\": event[\"away_forwards_eh_id\"],\n                    \"opp_forwards_api_id\": event[\"away_forwards_api_id\"],\n                    \"opp_forwards\": event[\"away_forwards\"],\n                    \"opp_forwards_count\": event[\"away_forwards_count\"],\n                    \"opp_forwards_percent\": event[\"away_forwards_percent\"],\n                    \"opp_defense_eh_id\": event[\"away_defense_eh_id\"],\n                    \"opp_defense_api_id\": event[\"away_defense_api_id\"],\n                    \"opp_defense\": event[\"away_defense\"],\n                    \"opp_defense_count\": event[\"away_defense_count\"],\n                    \"opp_goalie_eh_id\": event[\"away_goalie_eh_id\"],\n                    \"opp_goalie_api_id\": event[\"away_goalie_api_id\"],\n                    \"opp_goalie\": event[\"away_goalie\"],\n                }\n\n            elif event.get(\"event_team\") == event[\"away_team\"]:\n                new_values = {\n                    \"strength_state\": f\"{away_on}v{home_on}\",\n                    \"score_state\": f\"{event['away_score']}v{event['home_score']}\",\n                    \"score_diff\": event[\"away_score_diff\"],\n                    \"event_team_skaters\": event[\"away_skaters\"],\n                    \"teammates_eh_id\": event[\"away_on_eh_id\"],\n                    \"teammates_api_id\": event[\"away_on_api_id\"],\n                    \"teammates\": event[\"away_on\"],\n                    \"teammates_positions\": event[\"away_on_positions\"],\n                    \"forwards_eh_id\": event[\"away_forwards_eh_id\"],\n                    \"forwards_api_id\": event[\"away_forwards_api_id\"],\n                    \"forwards\": event[\"away_forwards\"],\n                    \"forwards_count\": event[\"away_forwards_count\"],\n                    \"forwards_percent\": event[\"away_forwards_percent\"],\n                    \"defense_eh_id\": event[\"away_defense_eh_id\"],\n                    \"defense_api_id\": event[\"away_defense_api_id\"],\n                    \"defense\": event[\"away_defense\"],\n                    \"defense_count\": event[\"away_defense_count\"],\n                    \"own_goalie_eh_id\": event[\"away_goalie_eh_id\"],\n                    \"own_goalie_api_id\": event[\"away_goalie_api_id\"],\n                    \"own_goalie\": event[\"away_goalie\"],\n                    \"opp_strength_state\": f\"{home_on}v{away_on}\",\n                    \"opp_score_state\": f\"{event['home_score']}v{event['away_score']}\",\n                    \"opp_score_diff\": event[\"home_score_diff\"],\n                    \"opp_team_skaters\": event[\"home_skaters\"],\n                    \"opp_team_on_eh_id\": event[\"home_on_eh_id\"],\n                    \"opp_team_on_api_id\": event[\"home_on_api_id\"],\n                    \"opp_team_on\": event[\"home_on\"],\n                    \"opp_team_on_positions\": event[\"home_on_positions\"],\n                    \"opp_forwards_eh_id\": event[\"home_forwards_eh_id\"],\n                    \"opp_forwards_api_id\": event[\"home_forwards_api_id\"],\n                    \"opp_forwards\": event[\"home_forwards\"],\n                    \"opp_forwards_count\": event[\"home_forwards_count\"],\n                    \"opp_forwards_percent\": event[\"home_forwards_percent\"],\n                    \"opp_defense_eh_id\": event[\"home_defense_eh_id\"],\n                    \"opp_defense_api_id\": event[\"home_defense_api_id\"],\n                    \"opp_defense\": event[\"home_defense\"],\n                    \"opp_defense_count\": event[\"home_defense_count\"],\n                    \"opp_goalie_eh_id\": event[\"home_goalie_eh_id\"],\n                    \"opp_goalie_api_id\": event[\"home_goalie_api_id\"],\n                    \"opp_goalie\": event[\"home_goalie\"],\n                }\n\n            event.update(new_values)\n\n            event_team_lists = {\n                \"event_on_x\": event.get(\"teammates\", []),\n                \"event_on_x_eh_id\": event.get(\"teammates_eh_id\", []),\n                \"event_on_x_api_id\": event.get(\"teammates_api_id\", []),\n                \"event_on_x_pos\": event.get(\"teammates_positions\", []),\n            }\n\n            if event.get(\"own_goalie\"):\n                event_team_lists.update(\n                    {\n                        \"event_on_x\": event[\"teammates\"] + event[\"own_goalie\"],\n                        \"event_on_x_eh_id\": event[\"teammates_eh_id\"] + event[\"own_goalie_eh_id\"],\n                        \"event_on_x_api_id\": event[\"teammates_api_id\"] + event[\"own_goalie_api_id\"],\n                        \"event_on_x_pos\": event[\"teammates_positions\"] + [\"G\"],\n                    }\n                )\n\n            for list_name, event_team_list in event_team_lists.items():\n                for player_num, player in enumerate(event_team_list):\n                    col_name = list_name.replace(\"x\", str(player_num + 1))\n                    event[col_name] = player\n\n            opp_team_lists = {\n                \"opp_on_x\": event.get(\"opp_team_on\", []),\n                \"opp_on_x_eh_id\": event.get(\"opp_team_on_eh_id\", []),\n                \"opp_on_x_api_id\": event.get(\"opp_team_on_api_id\", []),\n                \"opp_on_x_pos\": event.get(\"opp_team_on_positions\", []),\n            }\n\n            if event.get(\"opp_goalie\"):\n                opp_team_lists.update(\n                    {\n                        \"opp_on_x\": event[\"opp_team_on\"] + event[\"opp_goalie\"],\n                        \"opp_on_x_eh_id\": event[\"opp_team_on_eh_id\"] + event[\"opp_goalie_eh_id\"],\n                        \"opp_on_x_api_id\": event[\"opp_team_on_api_id\"] + event[\"opp_goalie_api_id\"],\n                        \"opp_on_x_pos\": event[\"opp_team_on_positions\"] + [\"G\"],\n                    }\n                )\n\n            for list_name, opp_team_list in opp_team_lists.items():\n                for player_num, player in enumerate(opp_team_list):\n                    col_name = list_name.replace(\"x\", str(player_num + 1))\n                    event[col_name] = player\n\n            if event[\"event\"] == \"CHANGE\":\n                if event[\"change_on\"]:\n                    change_on_lists = {\n                        \"change_on_x\": event.get(\"change_on\", \"\").split(\", \"),\n                        \"change_on_x_eh_id\": event.get(\"change_on_eh_id\", \"\").split(\", \"),\n                        \"change_on_x_api_id\": event.get(\"change_on_api_id\", \"\").split(\", \"),\n                        \"change_on_x_pos\": event.get(\"change_on_positions\", \"\").split(\", \"),\n                    }\n\n                    for list_name, change_on_list in change_on_lists.items():\n                        for player_num, player in enumerate(change_on_list):\n                            col_name = list_name.replace(\"x\", str(player_num + 1))\n                            event[col_name] = player\n\n                if event[\"change_off\"]:\n                    change_off_lists = {\n                        \"change_off_x\": event.get(\"change_off\", \"\").split(\", \"),\n                        \"change_off_x_eh_id\": event.get(\"change_off_eh_id\", \"\").split(\", \"),\n                        \"change_off_x_api_id\": event.get(\"change_off_api_id\", \"\").split(\", \"),\n                        \"change_off_x_pos\": event.get(\"change_off_positions\", \"\").split(\", \"),\n                    }\n\n                    for list_name, change_off_list in change_off_lists.items():\n                        for player_num, player in enumerate(change_off_list):\n                            col_name = list_name.replace(\"x\", str(player_num + 1))\n                            event[col_name] = player\n\n            if \"PENALTY SHOT\" in event[\"description\"]:\n                event[\"strength_state\"] = \"1v0\"\n\n            if (event[\"home_skaters\"] &gt; 5 and event[\"home_goalie\"] != []) or (\n                event[\"away_skaters\"] &gt; 5 and event[\"away_goalie\"] != []\n            ):\n                event[\"strength_state\"] = \"ILLEGAL\"\n\n                event[\"opp_strength_state\"] = \"ILLEGAL\"\n\n            if event[\"period\"] == 5 and event[\"session\"] == \"R\":  # Not covered by tests\n                event[\"strength_state\"] = \"1v0\"\n\n            if event[\"event\"] == \"CHANGE\":\n                faceoffs = [\n                    x\n                    for x in self._play_by_play\n                    if (\n                        x[\"event\"] == \"FAC\"\n                        and x[\"game_seconds\"] == event[\"game_seconds\"]\n                        and x[\"period\"] == event[\"period\"]\n                    )\n                ]\n\n                if len(faceoffs) &gt; 0:\n                    # game_seconds_list = [x[\"game_seconds\"] for x in self._play_by_play]\n\n                    # max_seconds = max(game_seconds_list)\n\n                    bad_seconds = []  # [0, 1200, 2400, 3600, 3900, max_seconds]\n\n                    if event[\"game_seconds\"] not in bad_seconds:\n                        event[\"coords_x\"] = faceoffs[0].get(\"coords_x\", \"\")\n\n                        event[\"coords_y\"] = faceoffs[0].get(\"coords_y\", \"\")\n\n                        if event[\"event_team\"] == faceoffs[0][\"event_team\"]:\n                            event[\"zone_start\"] = faceoffs[0][\"zone\"]\n\n                        else:\n                            zones = {\"OFF\": \"DEF\", \"DEF\": \"OFF\", \"NEU\": \"NEU\"}\n\n                            event[\"zone_start\"] = zones.get(faceoffs[0][\"zone\"])\n\n                else:\n                    event[\"zone_start\"] = \"OTF\"\n\n            event_dummies = [\n                \"block\",\n                \"change\",\n                \"chl\",\n                \"fac\",\n                \"give\",\n                \"goal\",\n                \"hit\",\n                \"miss\",\n                \"penl\",\n                \"shot\",\n                \"stop\",\n                \"take\",\n            ]\n\n            for event_dummy in event_dummies:\n                if event[\"event\"].lower() == event_dummy:\n                    event[event_dummy] = 1\n\n                else:\n                    event[event_dummy] = 0\n\n            if event[\"event\"] == \"GOAL\" or event[\"event\"] == \"SHOT\":\n                event[\"shot\"] = 1\n\n            fenwick_events = [\"SHOT\", \"GOAL\", \"MISS\"]\n\n            if event[\"event\"] in fenwick_events:\n                event[\"fenwick\"] = 1\n\n            else:\n                event[\"fenwick\"] = 0\n\n            corsi_events = fenwick_events + [\"BLOCK\"]\n\n            if event[\"event\"] in corsi_events:\n                event[\"corsi\"] = 1\n\n            else:\n                event[\"corsi\"] = 0\n\n            if event.get(\"high_danger\") == 1:\n                if event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]:\n                    event[\"hd_fenwick\"] = 1\n\n                if event[\"event\"] == \"GOAL\":\n                    event[\"hd_goal\"] = 1\n                    event[\"hd_shot\"] = 1\n\n                if event[\"event\"] == \"SHOT\":\n                    event[\"hd_shot\"] = 1\n\n                if event[\"event\"] == \"MISS\":\n                    event[\"hd_miss\"] = 1\n\n            else:\n                event[\"hd_goal\"] = 0\n                event[\"hd_shot\"] = 0\n                event[\"hd_miss\"] = 0\n                event[\"hd_fenwick\"] = 0\n\n            if event[\"event\"] == \"FAC\":\n                if event[\"zone\"] == \"OFF\":\n                    event[\"ozf\"] = 1\n\n                else:\n                    event[\"ozf\"] = 0\n\n                if event[\"zone\"] == \"DEF\":\n                    event[\"dzf\"] = 1\n\n                else:\n                    event[\"dzf\"] = 0\n\n                if event[\"zone\"] == \"NEU\":\n                    event[\"nzf\"] = 1\n\n                else:\n                    event[\"nzf\"] = 0\n\n            else:\n                event[\"ozf\"] = 0\n                event[\"nzf\"] = 0\n                event[\"dzf\"] = 0\n\n            if event[\"event\"] == \"CHANGE\" and event.get(\"zone_start\"):\n                if event[\"zone_start\"] == \"OFF\":\n                    event[\"ozc\"] = 1\n\n                else:\n                    event[\"ozc\"] = 0\n\n                if event[\"zone_start\"] == \"DEF\":\n                    event[\"dzc\"] = 1\n\n                else:\n                    event[\"dzc\"] = 0\n\n                if event[\"zone_start\"] == \"NEU\":\n                    event[\"nzc\"] = 1\n\n                else:\n                    event[\"nzc\"] = 0\n\n                if event[\"zone_start\"] == \"OTF\":\n                    event[\"otf\"] = 1\n\n                else:\n                    event[\"otf\"] = 0\n\n            else:\n                event[\"ozc\"] = 0\n                event[\"nzc\"] = 0\n                event[\"dzc\"] = 0\n                event[\"otf\"] = 0\n\n            if event[\"event\"] == \"PENL\":\n                penalty_lengths = [0, 2, 4, 5, 10]\n\n                for penalty_length in penalty_lengths:\n                    if event.get(\"penalty_length\") == penalty_length:\n                        event[f\"pen{penalty_length}\"] = 1\n\n                    else:\n                        event[f\"pen{penalty_length}\"] = 0\n\n            else:\n                event[\"pen0\"] = 0\n                event[\"pen2\"] = 0\n                event[\"pen4\"] = 0\n                event[\"pen5\"] = 0\n                event[\"pen10\"] = 0\n\n            if event[\"event\"] == \"BLOCK\" and \"BLOCKED BY TEAMMATE\" in event[\"description\"]:  # Not covered by tests\n                event[\"teammate_block\"] = 1\n                event[\"block\"] = 0\n            else:\n                event[\"teammate_block\"] = 0\n\n            game_id_str = str(event[\"game_id\"])\n            event_idx_str = str(event[\"event_idx\"])\n\n            if len(event_idx_str) == 1:\n                event_id = game_id_str + \"000\" + event_idx_str\n\n            elif len(event_idx_str) == 2:\n                event_id = game_id_str + \"00\" + event_idx_str\n\n            elif len(event_idx_str) == 3:\n                event_id = game_id_str + \"0\" + event_idx_str\n\n            elif len(event_idx_str) == 4:  # Not covered by tests\n                event_id = game_id_str + event_idx_str\n\n            event[\"id\"] = int(event_id)\n\n            final_events.append(PBPEvent.model_validate(event).model_dump())\n            final_events_ext.append(PBPEventExt.model_validate(event).model_dump())\n\n        self._play_by_play = final_events\n        self._play_by_play_ext = final_events_ext\n\n    def _prep_xg(self):\n        \"\"\"Method to add xG predictions to play-by-play data. Updates self._play_by_play.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Game object\n            &gt;&gt;&gt; game = Game(2023020001)\n\n            Requires clean events from the shifts, API events, and HTML events feeds\n\n            HTML events\n            &gt;&gt;&gt; game._scrape_html_events()  # Scrapes events from HTML feed\n            &gt;&gt;&gt; game._munge_html_events()  # Preps raw events, updates game._html_events\n\n            API events\n            &gt;&gt;&gt; game._munge_api_events()  # Preps raw events, updates game._api_events\n\n            Shifts and changes\n            &gt;&gt;&gt; game._scrape_html_events()  # Scrapes shifts from HTML feed\n            &gt;&gt;&gt; game._munge_shifts()  # Preps raw shifts, updates game._shifts\n            &gt;&gt;&gt; game._munge_changes()  # Preps changes\n\n            Combines them all\n            &gt;&gt;&gt; game._combine_events()  # Combines raw events, into game._play_by_play\n\n            Data can then be manually cleaned\n            &gt;&gt;&gt; game._munge_play_by_play()\n            &gt;&gt;&gt; game._prep_xg()\n            &gt;&gt;&gt; game._play_by_play  # Returns cleaned data\n        \"\"\"\n        plays = self._play_by_play\n\n        even_strengths = [\"5v5\", \"4v4\", \"3v3\"]\n        powerplay_strengths = [\"5v4\", \"4v3\", \"5v3\"]\n        shorthanded_strengths = [\"4v5\", \"3v4\", \"3v5\"]\n        empty_for_strengths = [\"Ev5\", \"Ev4\", \"Ev3\"]\n        empty_against_strengths = [\"5vE\", \"4vE\", \"3vE\"]\n\n        important_events = [\n            \"SHOT\",\n            \"FAC\",\n            \"HIT\",\n            \"BLOCK\",\n            \"MISS\",\n            \"GIVE\",\n            \"TAKE\",\n            # \"PENL\",\n            \"GOAL\",\n        ]\n\n        xg_plays = [\n            x\n            for x in plays\n            if x[\"event\"] in important_events\n            and x[\"strength_state\"] != \"1v0\"\n            and x[\"strength_state\"] != \"EvE\"\n            and x[\"coords_x\"] is not None\n            and x[\"coords_y\"] is not None\n        ]\n\n        xg_idxs = [x[\"event_idx\"] for x in xg_plays]\n\n        non_xg_plays = [x for x in plays if x[\"event_idx\"] not in xg_idxs]\n\n        for play in non_xg_plays:\n            play[\"pred_goal\"] = 0.0\n\n        for idx, play in enumerate(xg_plays):\n            if play[\"event\"] not in [\"GOAL\", \"SHOT\", \"MISS\"]:\n                play[\"pred_goal\"] = 0.0\n                continue\n\n            xg_fields = {\n                \"period\": play[\"period\"],\n                \"period_seconds\": play[\"period_seconds\"],\n                \"score_diff\": play[\"score_diff\"],\n                \"danger\": play[\"danger\"],\n                \"high_danger\": play[\"danger\"],\n                \"event_distance\": play[\"event_distance\"],\n                \"event_angle\": play[\"event_angle\"],\n                \"is_home\": play[\"is_home\"],\n                # \"forwards_count\": play[\"forwards_count\"],\n                # \"forwards_percent\": play[\"forwards_percent\"],\n                # \"opp_forwards_count\": play[\"opp_forwards_count\"],\n                # \"opp_forwards_percent\": play[\"opp_forwards_percent\"],\n            }\n\n            if play.get(\"player_1_position\") in [\"L\", \"C\", \"R\"]:\n                xg_fields[\"position_f\"] = 1\n                xg_fields[\"position_d\"] = 0\n                xg_fields[\"position_g\"] = 0\n\n            if play.get(\"player_1_position\") == \"D\":\n                xg_fields[\"position_f\"] = 0\n                xg_fields[\"position_d\"] = 1\n                xg_fields[\"position_g\"] = 0\n\n            if play.get(\"player_1_position\") == \"G\":\n                xg_fields[\"position_f\"] = 0\n                xg_fields[\"position_d\"] = 0\n                xg_fields[\"position_g\"] = 1\n\n            shot_types = [\n                \"backhand\",\n                \"bat\",\n                \"between_legs\",\n                \"cradle\",\n                \"deflected\",\n                \"poke\",\n                \"slap\",\n                \"snap\",\n                \"tip_in\",\n                \"wrap_around\",\n                \"wrist\",\n            ]\n\n            for shot_type in shot_types:\n                if play[\"shot_type\"] == shot_type.upper().replace(\"_\", \"-\"):\n                    xg_fields.update({shot_type: 1})\n\n                else:\n                    xg_fields.update({shot_type: 0})\n\n            if idx == 0 or xg_plays[idx - 1][\"period\"] != play[\"period\"]:  # Not covered by tests\n                new_fields = [\n                    \"is_rebound\",\n                    \"rush_attempt\",\n                    \"seconds_since_last\",\n                    \"event_type_last\",\n                    \"distance_from_last\",\n                    \"prior_shot_same\",\n                    \"prior_miss_same\",\n                    \"prior_block_same\",\n                    \"prior_give_same\",\n                    \"prior_take_same\",\n                    \"prior_hit_same\",\n                    \"prior_shot_opp\",\n                    \"prior_miss_opp\",\n                    \"prior_block_opp\",\n                    \"prior_give_opp\",\n                    \"prior_take_opp\",\n                    \"prior_hit_opp\",\n                    \"prior_face\",\n                ]\n\n                new_fields = {x: 0 for x in new_fields}\n\n                xg_fields.update(new_fields)\n\n            else:\n                previous_play = xg_plays[idx - 1]\n\n                seconds_since_last = play[\"game_seconds\"] - previous_play[\"game_seconds\"]\n\n                xg_fields[\"seconds_since_last\"] = seconds_since_last\n\n                event_team_last = previous_play[\"event_team\"]\n                event_type_last = previous_play[\"event\"]\n                coords_x_last = previous_play[\"coords_x\"]\n                coords_y_last = previous_play[\"coords_y\"]\n                zone_last = previous_play[\"zone\"]\n\n                distance_from_last = (\n                    (play[\"coords_x\"] - coords_x_last) ** 2 + (play[\"coords_y\"] - coords_y_last) ** 2\n                ) ** (1 / 2)\n\n                xg_fields[\"distance_from_last\"] = distance_from_last\n\n                same_team_as_last = play[\"event_team\"] == event_team_last\n                not_same_team_as_last = play[\"event_team\"] != event_team_last\n\n                last_is_shot = previous_play[\"event\"] == \"SHOT\"\n                last_is_miss = previous_play[\"event\"] == \"MISS\"\n                last_is_block = previous_play[\"event\"] == \"BLOCK\"\n                last_is_give = previous_play[\"event\"] == \"GIVE\"\n                last_is_take = previous_play[\"event\"] == \"TAKE\"\n                last_is_hit = previous_play[\"event\"] == \"HIT\"\n                last_is_face = previous_play[\"event\"] == \"FACE\"\n\n                if last_is_shot &amp; same_team_as_last:\n                    xg_fields[\"prior_shot_same\"] = 1\n                else:\n                    xg_fields[\"prior_shot_same\"] = 0\n\n                if last_is_miss &amp; same_team_as_last:\n                    xg_fields[\"prior_miss_same\"] = 1\n                else:\n                    xg_fields[\"prior_miss_same\"] = 0\n\n                if last_is_block &amp; same_team_as_last:\n                    xg_fields[\"prior_block_same\"] = 1\n                else:\n                    xg_fields[\"prior_block_same\"] = 0\n\n                if last_is_give &amp; same_team_as_last:\n                    xg_fields[\"prior_give_same\"] = 1\n                else:\n                    xg_fields[\"prior_give_same\"] = 0\n\n                if last_is_take &amp; same_team_as_last:\n                    xg_fields[\"prior_take_same\"] = 1\n                else:\n                    xg_fields[\"prior_take_same\"] = 0\n\n                if last_is_hit &amp; same_team_as_last:\n                    xg_fields[\"prior_hit_same\"] = 1\n                else:\n                    xg_fields[\"prior_hit_same\"] = 0\n\n                if last_is_shot &amp; not_same_team_as_last:\n                    xg_fields[\"prior_shot_opp\"] = 1\n                else:\n                    xg_fields[\"prior_shot_opp\"] = 0\n\n                if last_is_miss &amp; not_same_team_as_last:\n                    xg_fields[\"prior_miss_opp\"] = 1\n                else:\n                    xg_fields[\"prior_miss_opp\"] = 0\n\n                if last_is_block &amp; not_same_team_as_last:\n                    xg_fields[\"prior_block_opp\"] = 1\n                else:\n                    xg_fields[\"prior_block_opp\"] = 0\n\n                if last_is_give &amp; not_same_team_as_last:\n                    xg_fields[\"prior_give_opp\"] = 1\n                else:\n                    xg_fields[\"prior_give_opp\"] = 0\n\n                if last_is_take &amp; not_same_team_as_last:\n                    xg_fields[\"prior_take_opp\"] = 1\n                else:\n                    xg_fields[\"prior_take_opp\"] = 0\n\n                if last_is_hit &amp; not_same_team_as_last:\n                    xg_fields[\"prior_hit_opp\"] = 1\n                else:\n                    xg_fields[\"prior_hit_opp\"] = 0\n\n                if last_is_face:  # Not covered by tests\n                    xg_fields[\"prior_face\"] = 1\n                else:\n                    xg_fields[\"prior_face\"] = 0\n\n                if play[\"score_diff\"] &gt; 4:\n                    xg_fields[\"score_diff\"] = 4\n\n                elif play[\"score_diff\"] &lt; -4:\n                    xg_fields[\"score_diff\"] = -4\n\n                if (\n                    event_type_last in [\"SHOT\", \"MISS\"] and same_team_as_last and xg_fields[\"seconds_since_last\"] &lt;= 3\n                ) or (event_type_last == \"BLOCK\" and not_same_team_as_last and xg_fields[\"seconds_since_last\"] &lt;= 3):\n                    xg_fields[\"is_rebound\"] = 1\n\n                else:\n                    xg_fields[\"is_rebound\"] = 0\n\n                if xg_fields[\"seconds_since_last\"] &lt;= 4 and zone_last == \"NEU\":\n                    xg_fields[\"rush_attempt\"] = 1\n\n                else:\n                    xg_fields[\"rush_attempt\"] = 0\n\n            strength_states_list = [\n                even_strengths,\n                powerplay_strengths,\n                shorthanded_strengths,\n                empty_for_strengths,\n                empty_against_strengths,\n            ]\n\n            strength_states_flat = [\n                strength_state for strength_states in strength_states_list for strength_state in strength_states\n            ]\n\n            if play[\"strength_state\"] not in strength_states_flat:\n                play[\"pred_goal\"] = 0.0\n                continue\n\n            for strength_states in strength_states_list:\n                if play[\"strength_state\"] in strength_states:\n                    for strength_state in strength_states:\n                        if play[\"strength_state\"] == strength_state:\n                            xg_fields[f\"strength_state_{strength_state}\"] = 1\n\n                        else:\n                            xg_fields[f\"strength_state_{strength_state}\"] = 0\n\n            xg_fields = XGFields.model_validate(xg_fields).model_dump(exclude_unset=True)\n            xg_data = np.array(list(xg_fields.values()), ndmin=2)\n\n            self._xg_fields.update({play[\"event_idx\"]: xg_data})\n\n            if play[\"strength_state\"] in even_strengths:\n                preds = self._es_model.predict_proba(xg_data)\n\n            if play[\"strength_state\"] in powerplay_strengths:\n                preds = self._pp_model.predict_proba(xg_data)\n\n            if play[\"strength_state\"] in shorthanded_strengths:\n                preds = self._sh_model.predict_proba(xg_data)\n\n            if play[\"strength_state\"] in empty_for_strengths:\n                preds = self._ef_model.predict_proba(xg_data)\n\n            if play[\"strength_state\"] in empty_against_strengths:\n                preds = self._ea_model.predict_proba(xg_data)\n\n            pred_goal = preds[:, 1][0]\n            play[\"pred_goal\"] = pred_goal\n\n            play = calculate_score_adjustment(play, score_adjustments)\n\n        new_plays = xg_plays + non_xg_plays\n\n        new_plays = sorted(new_plays, key=lambda x: x[\"event_idx\"])\n\n        self._play_by_play = new_plays\n\n    @property\n    def play_by_play(self) -&gt; list:\n        \"\"\"List of events in play-by-play. Each event is a dictionary with the below keys.\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).play_by_play_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            game_date (str):\n                Date game was played, e.g., 2020-01-09\n            event_idx (int):\n                Index ID for event, e.g., 667\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            strength_state (str):\n                Strength state, e.g., 5vE\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., CHI\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            description (str | None):\n                Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., DEF\n            coords_x (int):\n                x-coordinates where the event occurred, e.g, -96\n            coords_y (int):\n                y-coordinates where the event occurred, e.g., 11\n            danger (int):\n                Whether shot event occurred from danger area, e.g., 0\n            high_danger (int):\n                Whether shot event occurred from high-danger area, e.g., 0\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_eh_id_api (str):\n                Evolving Hockey ID for player_1 from the api_events (for debugging), e.g., PEKKA.RINNE\n            player_1_api_id (int):\n                NHL API ID for player_1, e.g., 8471469\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_1_type (str):\n                Type of player, e.g., GOAL SCORER\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_eh_id_api (str | None):\n                Evolving Hockey ID for player_2 from the api_events (for debugging), e.g., None\n            player_2_api_id (int | None):\n                NHL API ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_2_type (str | None):\n                Type of player, e.g., None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_eh_id_api (str | None):\n                Evolving Hockey ID for player_3 from the api_events (for debugging), e.g., None\n            player_3_api_id (int | None):\n                NHL API ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            player_3_type (str | None):\n                Type of player, e.g., None\n            score_state (str):\n                Score of the game from event team's perspective, e.g., 4v2\n            score_diff (int):\n                Score differential from event team's perspective, e.g., 2\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            event_length (int):\n                Time elapsed since previous event, e.g., 5\n            event_distance (float | None):\n                Calculated distance of event from goal, e.g, 185.32673849177834\n            pbp_distance (int):\n                Distance of event from goal from description, e.g., 185\n            event_angle (float | None):\n                Angle of event towards goal, e.g., 57.52880770915151\n            penalty (str | None):\n                Name of penalty, e.g., None\n            penalty_length (int | None):\n                Duration of penalty, e.g., None\n            home_score (int):\n                Home team's score, e.g., 2\n            home_score_diff (int):\n                Home team's score differential, e.g., -2\n            away_score (int):\n                Away team's score, e.g., 4\n            away_score_diff (int):\n                Away team's score differential, e.g., 2\n            is_home (int):\n                Whether event team is home, e.g., 0\n            is_away (int):\n                Whether event is away, e.g., 1\n            home_team (str):\n                Home team, e.g., CHI\n            away_team (str):\n                Away team, e.g., NSH\n            home_skaters (int):\n                Number of home team skaters on-ice (excl. goalies), e.g., 6\n            away_skaters (int):\n                Number of away team skaters on-ice (excl. goalies), e.g., 5\n            home_on (list | str | None):\n                Name of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            home_on_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_on_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            home_on_positions (list | str | None):\n                Positions of home team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            away_on (list | str | None):\n                Name of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            away_on_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            away_on_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            away_on_positions (list | str | None):\n                Positions of away team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            event_team_skaters (int | None):\n                Number of event team skaters on-ice (excl. goalies), e.g., 5\n            teammates (list | str | None):\n                Name of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            teammates_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            teammates_api_id (list | str | None = None):\n                NHL API IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            teammates_positions (list | str | None):\n                Positions of event team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            own_goalie (list | str | None):\n                Name of the event team's goalie, e.g., PEKKA RINNE\n            own_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the event team's goalie, e.g., PEKKA.RINNE\n            own_goalie_api_id (list | str | None):\n                NHL API ID of the event team's goalie, e.g., 8471469\n            forwards (list | str | None):\n                Name of event team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            forwards_api_id (list | str | None):\n                NHL API IDs of event team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            defense (list | str | None):\n                Name of event team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            defense_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            defense_api_id (list | str | None):\n                NHL API IDs of event team's skaters on-ice, e.g., 8475218, 8474600\n            opp_strength_state (str | None):\n                Strength state from opposing team's perspective, e.g., Ev5\n            opp_score_state (str | None):\n                Score state from opposing team's perspective, e.g., 2v4\n            opp_score_diff (int | None):\n                Score differential from opposing team's perspective, e.g., -2\n            opp_team_skaters (int | None):\n                Number of opposing team skaters on-ice (excl. goalies), e.g., 6\n            opp_team_on (list | str | None):\n                Name of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_team_on_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_team_on_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            opp_team_on_positions (list | str | None):\n                Positions of opposing team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            opp_goalie (list | str | None):\n                Name of the opposing team's goalie, e.g., None\n            opp_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the opposing team's goalie, e.g., None\n            opp_goalie_api_id (list | str | None):\n                NHL API ID of the opposing team's goalie, e.g., None\n            opp_forwards (list | str | None):\n                Name of opposing team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            opp_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            opp_forwards_api_id (list | str | None):\n                NHL API IDs of opposing team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            opp_defense (list | str | None):\n                Name of opposing team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_defense_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice, e.g., 8470281, 8476979\n            home_forwards (list | str | None):\n                Name of home team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            home_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            home_forwards_api_id (list | str | None = None):\n                NHL API IDs of home team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            home_defense (list | str | None):\n                Name of home team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            home_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_defense_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice, e.g., 8470281, 8476979\n            home_goalie (list | str | None):\n                Name of the home team's goalie, e.g., None\n            home_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the home team's goalie, e.g., None\n            home_goalie_api_id (list | str | None):\n                NHL API ID of the home team's goalie, e.g., None\n            away_forwards (list | str | None):\n                Name of away team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            away_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            away_forwards_api_id (list | str | None):\n                NHL API IDs of away team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            away_defense (list | str | None):\n                Name of away team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            away_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            away_defense_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice, e.g., 8475218, 8474600\n            away_goalie (list | str | None):\n                Name of the away team's goalie, e.g., PEKKA RINNE\n            away_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the away team's goalie, e.g., PEKKA.RINNE\n            away_goalie_api_id (list | str | None):\n                NHL API ID of the away team's goalie, e.g., 8471469\n            change_on_count (int | None):\n                Number of players on, e.g., None\n            change_off_count (int | None):\n                Number of players off, e.g., None\n            change_on (list | str | None):\n                Names of the players on, e.g., None\n            change_on_eh_id (list | str | None):\n                Evolving Hockey IDs of the players on, e.g., None\n            change_on_api_id (list | str | None):\n                NHL API IDs of the players on, e.g., None\n            change_on_positions (list | str | None):\n                Postions of the players on, e.g., None\n            change_off (list | str | None):\n                Names of the players off, e.g., None\n            change_off_eh_id (list | str | None):\n                Evolving Hockey IDs of the players off, e.g., None\n            change_off_api_id (list | str | None):\n                NHL API IDs of the players off, e.g., None\n            change_off_positions (list | str | None):\n                Positions of the players off, e.g., None\n            change_on_forwards_count (int | None):\n                Number of forwards changing on, e.g., None\n            change_off_forwards_count (int | None):\n                Number of forwards off, e.g., None\n            change_on_forwards (list | str | None):\n                Names of the forwards on, e.g., None\n            change_on_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards on, e.g., None\n            change_on_forwards_api_id (list | str | None):\n                NHL API IDs of the forwards on, e.g., None\n            change_off_forwards (list | str | None):\n                Names of the forwards off, e.g., None\n            change_off_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards off, e.g., None\n            change_off_forwards_api_id (list | str | None):\n                NHL API IDs of the forwards off, e.g., None\n            change_on_defense_count (int | None):\n                Number of defense on, e.g., None\n            change_off_defense_count (int | None):\n                Number of defense off, e.g., None\n            change_on_defense (list | str | None):\n                Names of the defense on, e.g., None\n            change_on_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense on, e.g., None\n            change_on_defense_api_id (list | str | None):\n                NHL API IDs of the defense on, e.g., None\n            change_off_defense (list | str | None):\n                Names of the defense off, e.g., None\n            change_off_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense off, e.g., None\n            change_off_defense_api_id (list | str | None):\n                NHL API IDs of the defense off, e.g., None\n            change_on_goalie_count (int | None):\n                Number of goalies on, e.g., None\n            change_off_goalie_count (int | None):\n                Number of goalies off, e.g., None\n            change_on_goalie (list | str | None):\n                Name of goalie on, e.g., None\n            change_on_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie on, e.g., None\n            change_on_goalie_api_id (list | str | None):\n                NHL API ID of the goalie on, e.g., None\n            change_off_goalie (list | str | None):\n                Name of the goalie off, e.g., None\n            change_off_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie off, e.g., None\n            change_off_goalie_api_id (list | str | None):\n                NHL API ID of the goalie off, e.g., None\n            goal (int):\n                Dummy indicator whether event is a goal, e.g., 1\n            shot (int):\n                Dummy indicator whether event is a shot, e.g., 1\n            miss (int):\n                Dummy indicator whether event is a miss, e.g., 0\n            fenwick (int):\n                Dummy indicator whether event is a fenwick event, e.g., 1\n            corsi (int):\n                Dummy indicator whether event is a corsi event, e.g., 1\n            block (int):\n                Dummy indicator whether event is a block, e.g., 0\n            hit (int):\n                Dummy indicator whether event is a hit, e.g., 0\n            give (int):\n                Dummy indicator whether event is a give, e.g., 0\n            take (int):\n                Dummy indicator whether event is a take, e.g., 0\n            fac (int):\n                Dummy indicator whether event is a faceoff, e.g., 0\n            penl (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            change (int):\n                Dummy indicator whether event is a change, e.g., 0\n            stop (int):\n                Dummy indicator whether event is a stop, e.g., 0\n            chl (int):\n                Dummy indicator whether event is a challenge, e.g., 0\n            ozf (int):\n                Dummy indicator whether event is a offensive zone faceoff, e.g., 0\n            nzf (int):\n                Dummy indicator whether event is a neutral zone faceoff, e.g., 0\n            dzf (int):\n                Dummy indicator whether event is a defensive zone faceoff, e.g., 0\n            ozc (int):\n                Dummy indicator whether event is a offensive zone change, e.g., 0\n            nzc (int):\n                Dummy indicator whether event is a neutral zone change, e.g., 0\n            dzc (int):\n                Dummy indicator whether event is a defensive zone change, e.g., 0\n            otf (int):\n                Dummy indicator whether event is an on-the-fly change, e.g., 0\n            pen0 (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            pen2 (int):\n                Dummy indicator whether event is a minor penalty, e.g., 0\n            pen4 (int):\n                Dummy indicator whether event is a double minor penalty, e.g., 0\n            pen5 (int):\n                Dummy indicator whether event is a major penalty, e.g., 0\n            pen10 (int):\n                Dummy indicator whether event is a game misconduct penalty, e.g., 0\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.play_by_play\n\n        \"\"\"\n        if self._play_by_play is None:\n            if self._rosters is None:\n                if self._api_rosters is None:\n                    self._munge_api_rosters()\n\n                if self._html_rosters is None:\n                    self._scrape_html_rosters()\n                    self._munge_html_rosters()\n\n                self._combine_rosters()\n\n            if self._changes is None:\n                self._scrape_shifts()\n                self._munge_shifts()\n\n                self._munge_changes()\n\n            if self._html_events is None:\n                self._scrape_html_events()\n                self._munge_html_events()\n\n            if self._api_events is None:\n                self._munge_api_events()\n\n            self._combine_events()\n            self._munge_play_by_play()\n            self._prep_xg()\n\n        return self._play_by_play\n\n    @property\n    def play_by_play_ext(self) -&gt; list:\n        \"\"\"List of additional columns used for aggregating on-ice statistics.\n\n        Returns:\n            id (int):\n                Unique play identifier, the equivalent of the game ID and event_idx concatenated\n            event_idx (int):\n                Index ID for event\n            event_on_1 (str | None):\n                Player name\n            event_on_1_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            event_on_1_api_id (int | None):\n                ID used for matching NHL API data\n            event_on_1_pos (str | None):\n                Player position\n            event_on_2 (str | None):\n                Player name\n            event_on_2_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            event_on_2_api_id (int | None):\n                ID used for matching NHL API data\n            event_on_2_pos (str | None):\n                Player position\n            event_on_3 (str | None):\n                Player name\n            event_on_3_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            event_on_3_api_id (int | None):\n                ID used for matching NHL API data\n            event_on_3_pos (str | None):\n                Player position\n            event_on_4 (str | None):\n                Player name\n            event_on_4_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            event_on_4_api_id (int | None):\n                ID used for matching NHL API data\n            event_on_4_pos (str | None):\n                Player position\n            event_on_5 (str | None):\n                Player name\n            event_on_5_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            event_on_5_api_id (int | None):\n                ID used for matching NHL API data\n            event_on_5_pos (str | None):\n                Player position\n            event_on_6 (str | None):\n                Player name\n            event_on_6_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            event_on_6_api_id (int | None):\n                ID used for matching NHL API data\n            event_on_6_pos (str | None):\n                Player position\n            event_on_7 (str | None):\n                Player name\n            event_on_7_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            event_on_7_api_id (int | None):\n                ID used for matching NHL API data\n            event_on_7_pos (str | None):\n                Player position\n            opp_on_1 (str | None):\n                Player name\n            opp_on_1_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            opp_on_1_api_id (int | None):\n                ID used for matching NHL API data\n            opp_on_1_pos (str | None):\n                Player position\n            opp_on_2 (str | None):\n                Player name\n            opp_on_2_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            opp_on_2_api_id (int | None):\n                ID used for matching NHL API data\n            opp_on_2_pos (str | None):\n                Player position\n            opp_on_3 (str | None):\n                Player name\n            opp_on_3_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            opp_on_3_api_id (int | None):\n                ID used for matching NHL API data\n            opp_on_3_pos (str | None):\n                Player position\n            opp_on_4 (str | None):\n                Player name\n            opp_on_4_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            opp_on_4_api_id (int | None):\n                ID used for matching NHL API data\n            opp_on_4_pos (str | None):\n                Player position\n            opp_on_5 (str | None):\n                Player name\n            opp_on_5_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            opp_on_5_api_id (int | None):\n                ID used for matching NHL API data\n            opp_on_5_pos (str | None):\n                Player position\n            opp_on_6 (str | None):\n                Player name\n            opp_on_6_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            opp_on_6_api_id (int | None):\n                ID used for matching NHL API data\n            opp_on_6_pos (str | None):\n                Player position\n            opp_on_7 (str | None):\n                Player name\n            opp_on_7_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            opp_on_7_api_id (int | None):\n                ID used for matching NHL API data\n            opp_on_7_pos (str | None):\n                Player position\n            change_on_1 (str | None):\n                Player name\n            change_on_1_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_on_1_api_id (int | None):\n                ID used for matching NHL API data\n            change_on_1_pos (str | None):\n                Player position\n            change_on_2 (str | None):\n                Player name\n            change_on_2_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_on_2_api_id (int | None):\n                ID used for matching NHL API data\n            change_on_2_pos (str | None):\n                Player position\n            change_on_3 (str | None):\n                Player name\n            change_on_3_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_on_3_api_id (int | None):\n                ID used for matching NHL API data\n            change_on_3_pos (str | None):\n                Player position\n            change_on_4 (str | None):\n                Player name\n            change_on_4_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_on_4_api_id (int | None):\n                ID used for matching NHL API data\n            change_on_4_pos (str | None):\n                Player position\n            change_on_5 (str | None):\n                Player name\n            change_on_5_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_on_5_api_id (int | None):\n                ID used for matching NHL API data\n            change_on_5_pos (str | None):\n                Player position\n            change_on_6 (str | None):\n                Player name\n            change_on_6_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_on_6_api_id (int | None):\n                ID used for matching NHL API data\n            change_on_6_pos (str | None):\n                Player position\n            change_on_7 (str | None):\n                Player name\n            change_on_7_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_on_7_api_id (int | None):\n                ID used for matching NHL API data\n            change_on_7_pos (str | None):\n                Player position\n            change_off_1 (str | None):\n                Player name\n            change_off_1_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_off_1_api_id (int | None):\n                ID used for matching NHL API data\n            change_off_1_pos (str | None):\n                Player position\n            change_off_2 (str | None):\n                Player name\n            change_off_2_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_off_2_api_id (int | None):\n                ID used for matching NHL API data\n            change_off_2_pos (str | None):\n                Player position\n            change_off_3 (str | None):\n                Player name\n            change_off_3_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_off_3_api_id (int | None):\n                ID used for matching NHL API data\n            change_off_3_pos (str | None):\n                Player position\n            change_off_4 (str | None):\n                Player name\n            change_off_4_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_off_4_api_id (int | None):\n                ID used for matching NHL API data\n            change_off_4_pos (str | None):\n                Player position\n            change_off_5 (str | None):\n                Player name\n            change_off_5_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_off_5_api_id (int | None):\n                ID used for matching NHL API data\n            change_off_5_pos (str | None):\n                Player position\n            change_off_6 (str | None):\n                Player name\n            change_off_6_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_off_6_api_id (int | None):\n                ID used for matching NHL API data\n            change_off_6_pos (str | None):\n                Player position\n            change_off_7 (str | None):\n                Player name\n            change_off_7_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_off_7_api_id (int | None):\n                ID used for matching NHL API data\n            change_off_7_pos (str | None):\n                Player position\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.play_by_play_ext\n\n        \"\"\"\n        if self._play_by_play is None:\n            if self._rosters is None:\n                if self._api_rosters is None:\n                    self._munge_api_rosters()\n\n                if self._html_rosters is None:\n                    self._scrape_html_rosters()\n                    self._munge_html_rosters()\n\n                self._combine_rosters()\n\n            if self._changes is None:\n                self._scrape_shifts()\n                self._munge_shifts()\n\n                self._munge_changes()\n\n            if self._html_events is None:\n                self._scrape_html_events()\n                self._munge_html_events()\n\n            if self._api_events is None:\n                self._munge_api_events()\n\n            self._combine_events()\n            self._munge_play_by_play()\n            self._prep_xg()\n\n        return self._play_by_play_ext\n\n    @property\n    def play_by_play_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of play-by-play data.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            game_date (str):\n                Date game was played, e.g., 2020-01-09\n            event_idx (int):\n                Index ID for event, e.g., 667\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            strength_state (str):\n                Strength state, e.g., 5vE\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., CHI\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            description (str | None):\n                Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., DEF\n            coords_x (int):\n                x-coordinates where the event occurred, e.g, -96\n            coords_y (int):\n                y-coordinates where the event occurred, e.g., 11\n            danger (int):\n                Whether shot event occurred from danger area, e.g., 0\n            high_danger (int):\n                Whether shot event occurred from high-danger area, e.g., 0\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_eh_id_api (str):\n                Evolving Hockey ID for player_1 from the api_events (for debugging), e.g., PEKKA.RINNE\n            player_1_api_id (int):\n                NHL API ID for player_1, e.g., 8471469\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_1_type (str):\n                Type of player, e.g., GOAL SCORER\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_eh_id_api (str | None):\n                Evolving Hockey ID for player_2 from the api_events (for debugging), e.g., None\n            player_2_api_id (int | None):\n                NHL API ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_2_type (str | None):\n                Type of player, e.g., None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_eh_id_api (str | None):\n                Evolving Hockey ID for player_3 from the api_events (for debugging), e.g., None\n            player_3_api_id (int | None):\n                NHL API ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            player_3_type (str | None):\n                Type of player, e.g., None\n            score_state (str):\n                Score of the game from event team's perspective, e.g., 4v2\n            score_diff (int):\n                Score differential from event team's perspective, e.g., 2\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            event_length (int):\n                Time elapsed since previous event, e.g., 5\n            event_distance (float | None):\n                Calculated distance of event from goal, e.g, 185.32673849177834\n            pbp_distance (int):\n                Distance of event from goal from description, e.g., 185\n            event_angle (float | None):\n                Angle of event towards goal, e.g., 57.52880770915151\n            penalty (str | None):\n                Name of penalty, e.g., None\n            penalty_length (int | None):\n                Duration of penalty, e.g., None\n            home_score (int):\n                Home team's score, e.g., 2\n            home_score_diff (int):\n                Home team's score differential, e.g., -2\n            away_score (int):\n                Away team's score, e.g., 4\n            away_score_diff (int):\n                Away team's score differential, e.g., 2\n            is_home (int):\n                Whether event team is home, e.g., 0\n            is_away (int):\n                Whether event is away, e.g., 1\n            home_team (str):\n                Home team, e.g., CHI\n            away_team (str):\n                Away team, e.g., NSH\n            home_skaters (int):\n                Number of home team skaters on-ice (excl. goalies), e.g., 6\n            away_skaters (int):\n                Number of away team skaters on-ice (excl. goalies), e.g., 5\n            home_on (list | str | None):\n                Name of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            home_on_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_on_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            home_on_positions (list | str | None):\n                Positions of home team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            away_on (list | str | None):\n                Name of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            away_on_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            away_on_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            away_on_positions (list | str | None):\n                Positions of away team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            event_team_skaters (int | None):\n                Number of event team skaters on-ice (excl. goalies), e.g., 5\n            teammates (list | str | None):\n                Name of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            teammates_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            teammates_api_id (list | str | None = None):\n                NHL API IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            teammates_positions (list | str | None):\n                Positions of event team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            own_goalie (list | str | None):\n                Name of the event team's goalie, e.g., PEKKA RINNE\n            own_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the event team's goalie, e.g., PEKKA.RINNE\n            own_goalie_api_id (list | str | None):\n                NHL API ID of the event team's goalie, e.g., 8471469\n            forwards (list | str | None):\n                Name of event team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            forwards_api_id (list | str | None):\n                NHL API IDs of event team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            defense (list | str | None):\n                Name of event team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            defense_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            defense_api_id (list | str | None):\n                NHL API IDs of event team's skaters on-ice, e.g., 8475218, 8474600\n            opp_strength_state (str | None):\n                Strength state from opposing team's perspective, e.g., Ev5\n            opp_score_state (str | None):\n                Score state from opposing team's perspective, e.g., 2v4\n            opp_score_diff (int | None):\n                Score differential from opposing team's perspective, e.g., -2\n            opp_team_skaters (int | None):\n                Number of opposing team skaters on-ice (excl. goalies), e.g., 6\n            opp_team_on (list | str | None):\n                Name of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_team_on_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_team_on_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            opp_team_on_positions (list | str | None):\n                Positions of opposing team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            opp_goalie (list | str | None):\n                Name of the opposing team's goalie, e.g., None\n            opp_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the opposing team's goalie, e.g., None\n            opp_goalie_api_id (list | str | None):\n                NHL API ID of the opposing team's goalie, e.g., None\n            opp_forwards (list | str | None):\n                Name of opposing team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            opp_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            opp_forwards_api_id (list | str | None):\n                NHL API IDs of opposing team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            opp_defense (list | str | None):\n                Name of opposing team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_defense_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice, e.g., 8470281, 8476979\n            home_forwards (list | str | None):\n                Name of home team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            home_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            home_forwards_api_id (list | str | None = None):\n                NHL API IDs of home team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            home_defense (list | str | None):\n                Name of home team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            home_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_defense_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice, e.g., 8470281, 8476979\n            home_goalie (list | str | None):\n                Name of the home team's goalie, e.g., None\n            home_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the home team's goalie, e.g., None\n            home_goalie_api_id (list | str | None):\n                NHL API ID of the home team's goalie, e.g., None\n            away_forwards (list | str | None):\n                Name of away team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            away_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            away_forwards_api_id (list | str | None):\n                NHL API IDs of away team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            away_defense (list | str | None):\n                Name of away team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            away_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            away_defense_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice, e.g., 8475218, 8474600\n            away_goalie (list | str | None):\n                Name of the away team's goalie, e.g., PEKKA RINNE\n            away_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the away team's goalie, e.g., PEKKA.RINNE\n            away_goalie_api_id (list | str | None):\n                NHL API ID of the away team's goalie, e.g., 8471469\n            change_on_count (int | None):\n                Number of players on, e.g., None\n            change_off_count (int | None):\n                Number of players off, e.g., None\n            change_on (list | str | None):\n                Names of the players on, e.g., None\n            change_on_eh_id (list | str | None):\n                Evolving Hockey IDs of the players on, e.g., None\n            change_on_positions (list | str | None):\n                Postions of the players on, e.g., None\n            change_off (list | str | None):\n                Names of the players off, e.g., None\n            change_off_eh_id (list | str | None):\n                Evolving Hockey IDs of the players off, e.g., None\n            change_off_positions (list | str | None):\n                Positions of the players off, e.g., None\n            change_on_forwards_count (int | None):\n                Number of forwards changing on, e.g., None\n            change_off_forwards_count (int | None):\n                Number of forwards off, e.g., None\n            change_on_forwards (list | str | None):\n                Names of the forwards on, e.g., None\n            change_on_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards on, e.g., None\n            change_off_forwards (list | str | None):\n                Names of the forwards off, e.g., None\n            change_off_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards off, e.g., None\n            change_on_defense_count (int | None):\n                Number of defense on, e.g., None\n            change_off_defense_count (int | None):\n                Number of defense off, e.g., None\n            change_on_defense (list | str | None):\n                Names of the defense on, e.g., None\n            change_on_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense on, e.g., None\n            change_off_defense (list | str | None):\n                Names of the defense off, e.g., None\n            change_off_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense off, e.g., None\n            change_on_goalie_count (int | None):\n                Number of goalies on, e.g., None\n            change_off_goalie_count (int | None):\n                Number of goalies off, e.g., None\n            change_on_goalie (list | str | None):\n                Name of goalie on, e.g., None\n            change_on_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie on, e.g., None\n            change_off_goalie (list | str | None):\n                Name of the goalie off, e.g., None\n            change_off_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie off, e.g., None\n            goal (int):\n                Dummy indicator whether event is a goal, e.g., 1\n            shot (int):\n                Dummy indicator whether event is a shot, e.g., 1\n            miss (int):\n                Dummy indicator whether event is a miss, e.g., 0\n            fenwick (int):\n                Dummy indicator whether event is a fenwick event, e.g., 1\n            corsi (int):\n                Dummy indicator whether event is a corsi event, e.g., 1\n            block (int):\n                Dummy indicator whether event is a block, e.g., 0\n            hit (int):\n                Dummy indicator whether event is a hit, e.g., 0\n            give (int):\n                Dummy indicator whether event is a give, e.g., 0\n            take (int):\n                Dummy indicator whether event is a take, e.g., 0\n            fac (int):\n                Dummy indicator whether event is a faceoff, e.g., 0\n            penl (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            change (int):\n                Dummy indicator whether event is a change, e.g., 0\n            stop (int):\n                Dummy indicator whether event is a stop, e.g., 0\n            chl (int):\n                Dummy indicator whether event is a challenge, e.g., 0\n            ozf (int):\n                Dummy indicator whether event is a offensive zone faceoff, e.g., 0\n            nzf (int):\n                Dummy indicator whether event is a neutral zone faceoff, e.g., 0\n            dzf (int):\n                Dummy indicator whether event is a defensive zone faceoff, e.g., 0\n            ozc (int):\n                Dummy indicator whether event is a offensive zone change, e.g., 0\n            nzc (int):\n                Dummy indicator whether event is a neutral zone change, e.g., 0\n            dzc (int):\n                Dummy indicator whether event is a defensive zone change, e.g., 0\n            otf (int):\n                Dummy indicator whether event is an on-the-fly change, e.g., 0\n            pen0 (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            pen2 (int):\n                Dummy indicator whether event is a minor penalty, e.g., 0\n            pen4 (int):\n                Dummy indicator whether event is a double minor penalty, e.g., 0\n            pen5 (int):\n                Dummy indicator whether event is a major penalty, e.g., 0\n            pen10 (int):\n                Dummy indicator whether event is a game misconduct penalty, e.g., 0\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.play_by_play_df\n\n        \"\"\"\n        if self._play_by_play is None:\n            if self._rosters is None:\n                if self._api_rosters is None:\n                    self._munge_api_rosters()\n\n                if self._html_rosters is None:\n                    self._scrape_html_rosters()\n                    self._munge_html_rosters()\n\n                self._combine_rosters()\n\n            if self._changes is None:\n                self._scrape_shifts()\n                self._munge_shifts()\n\n                self._munge_changes()\n\n            if self._html_events is None:\n                self._scrape_html_events()\n                self._munge_html_events()\n\n            if self._api_events is None:\n                self._munge_api_events()\n\n            self._combine_events()\n            self._munge_play_by_play()\n            self._prep_xg()\n\n        return pd.DataFrame(self._play_by_play)\n\n    def _combine_rosters(self) -&gt; None:\n        \"\"\"Method to combine API and HTML rosters. Updates self._rosters.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Game object\n            &gt;&gt;&gt; game = Game(2023020001)\n\n            Requires clean rosters from the API and HTML feeds\n\n            HTML rosters\n            &gt;&gt;&gt; game._scrape_html_rosters()\n            &gt;&gt;&gt; game._munge_html_rosters()\n\n            API rosters\n            &gt;&gt;&gt; game._munge_api_rosters()\n\n            Combined rosters\n            &gt;&gt;&gt; game._combine_rosters()\n\n            However, the combined rosters do not need to be manually cleaned - data are\n            cleaned at the level of their respective source\n            &gt;&gt;&gt; game._rosters  # Returns clean rosters if all of the above have been performed\n\n        \"\"\"\n        html_rosters = self._html_rosters\n        api_rosters = self._api_rosters\n\n        api_rosters_dict = {x[\"team_jersey\"]: x for x in api_rosters}\n\n        players = []\n\n        for player in html_rosters:\n            if player[\"status\"] == \"ACTIVE\":\n                api_info = api_rosters_dict[player[\"team_jersey\"]]\n\n            else:\n                api_info = {\"api_id\": None, \"headshot_url\": None}\n\n            player_info = {}\n\n            player_info.update(player)\n\n            new_values = {\"api_id\": api_info[\"api_id\"], \"headshot_url\": api_info[\"headshot_url\"]}\n\n            player_info.update(new_values)\n\n            player_info = rosters_fixes(self.game_id, player_info)\n\n            players.append(RosterPlayer.model_validate(player_info).model_dump())\n\n        self._rosters = players\n\n    @property\n    def rosters(self) -&gt; list:\n        \"\"\"List of players scraped from API &amp; HTML endpoints. Returns a dictionary of players with the below keys.\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).rosters_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            api_id (int | None):\n                Player's NHL API ID, e.g., 8476887\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            jersey (int):\n                Player's jersey number, e.g., 9\n            position (str):\n                Player's position, e.g., L\n            starter (int):\n                Whether the player started the game, e.g., 0\n            status (str):\n                Whether player is active or scratched, e.g., ACTIVE\n            headshot_url (str | None):\n                URL to get player's headshot, e.g., https://assets.nhle.com/mugs/nhl/20192020/NSH/8476887.png\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.rosters\n\n        \"\"\"\n        if self._rosters is None:\n            if self._api_rosters is None:\n                self._munge_api_rosters()\n\n            if self._html_rosters is None:\n                self._scrape_html_rosters()\n                self._munge_html_rosters()\n\n            self._combine_rosters()\n\n        return self._rosters\n\n    @property\n    def rosters_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of players scraped from API &amp; HTML endpoints.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            api_id (int | None):\n                Player's NHL API ID, e.g., 8476887\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            jersey (int):\n                Player's jersey number, e.g., 9\n            position (str):\n                Player's position, e.g., L\n            starter (int):\n                Whether the player started the game, e.g., 0\n            status (str):\n                Whether player is active or scratched, e.g., ACTIVE\n            headshot_url (str | None):\n                URL to get player's headshot, e.g., https://assets.nhle.com/mugs/nhl/20192020/NSH/8476887.png\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.rosters_df\n\n        \"\"\"\n        if self._rosters is None:\n            if self._api_rosters is None:\n                self._munge_api_rosters()\n\n            if self._html_rosters is None:\n                self._scrape_html_rosters()\n                self._munge_html_rosters()\n\n            self._combine_rosters()\n\n        return pd.DataFrame(self._rosters)\n\n    def _scrape_shifts(self) -&gt; None:\n        \"\"\"Method for scraping shifts from HTML endpoint. Updates self._shifts.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Game object\n            &gt;&gt;&gt; game = Game(2023020001)\n\n            Before cleaning the data, game._shifts is None\n            &gt;&gt;&gt; game._shifts  # Returns None\n\n            Once you scrape the data, you can access it in raw form, prior to any processing\n            &gt;&gt;&gt; game._scrape_shifts()  # Scrapes raw data and adds it to game._shifts\n            &gt;&gt;&gt; game.shifts  # Returns cleaned shifts data\n            &gt;&gt;&gt; game.shifts_df  # Same, but a Pandas DataFrame\n\n            You then have to manually clean the data\n            &gt;&gt;&gt; game._munge_shifts()\n            &gt;&gt;&gt; game.shifts  # Returns cleaned shifts data\n            &gt;&gt;&gt; game.shifts_df  # Same but a Pandas DataFrame\n        \"\"\"\n        # Creating basic information from game ID\n        season = self.season\n        game_session = self.session\n        game_id = self.game_id\n        s = self._requests_session\n\n        # This is the list for collecting all the game information for the end\n\n        game_list = []\n\n        # Dictionary of urls for scraping\n\n        urls_dict = {\"HOME\": self.home_shifts_endpoint, \"AWAY\": self.away_shifts_endpoint}\n\n        # Iterating through the url dictionary\n\n        for team_venue, url in urls_dict.items():\n            response = s.get(url)\n\n            soup = BeautifulSoup(response.content.decode(\"ISO-8859-1\"), \"lxml\", multi_valued_attributes=None)\n\n            # Getting team names from the HTML Data\n\n            team_name = soup.find(\"td\", {\"align\": \"center\", \"class\": \"teamHeading + border\"})\n\n            # Converting team names to proper format\n\n            if team_name is None:  # Not covered by tests\n                continue\n\n            team_name = unidecode(team_name.get_text())\n\n            if team_name == \"PHOENIX COYOTES\":\n                team_name = \"ARIZONA COYOTES\"\n\n            elif \"CANADIENS\" in team_name:\n                team_name = \"MONTREAL CANADIENS\"\n\n            # Getting players from the HTML data\n\n            players = soup.find_all(\"td\", {\"class\": [\"playerHeading + border\", \"lborder + bborder\"]})\n\n            # Creating a dictionary to collect the players' information\n\n            players_dict = {}\n\n            # Iterating through the players\n\n            for player in players:\n                # Getting player's data\n\n                data = player.get_text()\n\n                # If there is a name in the data, get the information\n\n                if \", \" in data:\n                    name = data.split(\",\", 1)\n\n                    jersey = name[0].split(\" \")[0].strip()\n\n                    last_name = name[0].split(\" \", 1)[1].strip()\n\n                    first_name = re.sub(r\"\\(\\s?(.+)\\)\", \"\", name[1]).strip()\n\n                    full_name = f\"{first_name} {last_name}\"\n\n                    if full_name == \" \":  # Not covered by tests\n                        continue\n\n                    new_values = {full_name: {\"player_name\": full_name, \"jersey\": jersey, \"shifts\": []}}\n\n                    players_dict.update(new_values)\n\n                # If there is not a name it is likely because these are shift information, not player information\n\n                else:\n                    if full_name == \" \":  # Not covered by tests\n                        continue\n\n                    # Extend the player's shift information with the shift data\n\n                    players_dict[full_name][\"shifts\"].extend([data])\n\n            # Iterating through the player's dictionary,\n            # which has a key of the player's name and an array of shift-arrays\n\n            for player, shifts in players_dict.items():\n                # Getting the number of shifts\n\n                length = int(len(np.array(shifts[\"shifts\"])) / 5)\n\n                # Reshaping the shift data into fields and values\n\n                for _number, shift in enumerate(np.array(shifts[\"shifts\"]).reshape(length, 5)):\n                    # Adding header values to the shift data\n\n                    headers = [\"shift_count\", \"period\", \"shift_start\", \"shift_end\", \"duration\"]\n\n                    # Creating a dictionary from the headers and the shift data\n\n                    shift_dict = dict(zip(headers, shift.flatten(), strict=False))\n\n                    # Adding other data to the shift dictionary\n\n                    new_values = {\n                        \"season\": season,\n                        \"session\": game_session,\n                        \"game_id\": game_id,\n                        \"team_name\": team_name,\n                        \"team\": team_codes[team_name],\n                        \"team_venue\": team_venue.upper(),\n                        \"player_name\": unidecode(shifts[\"player_name\"]).upper(),\n                        \"team_jersey\": f\"{team_codes[team_name]}{shifts['jersey']}\",\n                        \"jersey\": int(shifts[\"jersey\"]),\n                        \"period\": int(shift_dict[\"period\"].replace(\"OT\", \"4\").replace(\"SO\", \"5\")),\n                        \"shift_count\": int(shift_dict[\"shift_count\"]),\n                        \"shift_start\": unidecode(shift_dict[\"shift_start\"]).strip(),\n                        \"start_time\": unidecode(shift_dict[\"shift_start\"]).strip().split(\"/\", 1)[0].strip(),\n                        \"shift_end\": unidecode(shift_dict[\"shift_end\"]).strip(),\n                        \"end_time\": unidecode(shift_dict[\"shift_end\"]).strip().split(\"/\", 1)[0].strip(),\n                    }\n\n                    shift_dict.update(new_values)\n\n                    # Appending the shift dictionary to the list of shift dictionaries\n\n                    if shift_dict[\"start_time\"] != \"31:23\":\n                        game_list.append(shift_dict)\n\n        self._shifts = game_list\n\n    def _munge_shifts(self) -&gt; None:\n        \"\"\"Method to munge list of shifts from HTML endpoint. Updates self._shifts.\"\"\"\n        season = self.season\n        game_session = self.session\n\n        # Iterating through the lists of shifts\n\n        roster = self._rosters\n\n        actives = {x[\"team_jersey\"]: x for x in roster if x[\"status\"] == \"ACTIVE\"}\n        scratches = {x[\"team_jersey\"]: x for x in roster if x[\"status\"] == \"SCRATCH\"}\n\n        if self.game_id == 2020020860:\n            new_shifts = {\n                \"DAL29\": 5,\n                \"CHI60\": 4,\n                \"DAL14\": 27,\n                \"DAL21\": 22,\n                \"DAL3\": 28,\n                \"CHI5\": 27,\n                \"CHI88\": 26,\n                \"CHI12\": 26,\n            }\n\n            for new_player, shift_count in new_shifts.items():\n                new_player_info = actives[new_player]\n\n                new_goalies = [\"DAL29\", \"CHI60\"]\n\n                if new_player in new_goalies:\n                    shift_start = \"0:00 / 5:00\"\n                    shift_end = \"4:30 / 0:30\"\n                    duration = \"4:30\"\n                    start_time = \"0:00\"\n                    end_time = \"4:30\"\n\n                new_players = [\"DAL14\", \"DAL21\", \"DAL3\", \"CHI5\"]\n\n                if new_player in new_players:\n                    shift_start = \"3:47 / 1:13\"\n                    shift_end = \"4:30 / 0:30\"\n                    duration = \"00:43\"\n                    start_time = \"3:47\"\n                    end_time = \"4:30\"\n\n                if new_player == \"CHI88\":\n                    shift_start = \"3:51 / 1:09\"\n                    shift_end = \"4:30 / 0:30\"\n                    duration = \"00:39\"\n                    start_time = \"3:51\"\n                    end_time = \"4:30\"\n\n                if new_player == \"CHI12\":\n                    shift_start = \"4:14 / 0:46\"\n                    shift_end = \"4:30 / 0:30\"\n                    duration = \"00:16\"\n                    start_time = \"4:14\"\n                    end_time = \"4:30\"\n\n                new_shift = {\n                    \"shift_count\": shift_count,\n                    \"period\": 4,\n                    \"shift_start\": shift_start,\n                    \"shift_end\": shift_end,\n                    \"duration\": duration,\n                    \"season\": 20202021,\n                    \"session\": \"R\",\n                    \"game_id\": self.game_id,\n                    \"team_name\": new_player_info[\"team_name\"],\n                    \"team\": new_player_info[\"team\"],\n                    \"team_venue\": new_player_info[\"team_venue\"],\n                    \"player_name\": new_player_info[\"player_name\"],\n                    \"team_jersey\": new_player_info[\"team_jersey\"],\n                    \"jersey\": new_player_info[\"jersey\"],\n                    \"start_time\": start_time,\n                    \"end_time\": end_time,\n                }\n\n                self._shifts.append(new_shift)\n\n        for shift in self._shifts:\n            # Get active players and store them in a new dictionary with team jersey as key\n            # and other info as a value-dictionary\n\n            shift[\"eh_id\"] = actives.get(shift[\"team_jersey\"], scratches.get(shift[\"team_jersey\"]))[\"eh_id\"]\n\n            shift[\"api_id\"] = actives.get(shift[\"team_jersey\"], scratches.get(shift[\"team_jersey\"]))[\"api_id\"]\n\n            shift[\"position\"] = actives.get(shift[\"team_jersey\"], scratches.get(shift[\"team_jersey\"]))[\"position\"]\n\n            # Replacing some player names\n\n            shift[\"player_name\"] = (\n                shift[\"player_name\"]\n                .replace(\"ALEXANDRE\", \"ALEX\")\n                .replace(\"ALEXANDER\", \"ALEX\")\n                .replace(\"CHRISTOPHER\", \"CHRIS\")\n            )\n\n            shift[\"player_name\"] = correct_names_dict.get(shift[\"player_name\"], shift[\"player_name\"])\n\n            # Adding seconds columns\n\n            cols = [\"start_time\", \"end_time\", \"duration\"]\n\n            for col in cols:\n                time_split = shift[col].split(\":\", 1)\n\n                # Sometimes the shift value can be blank, if it is, we'll skip the field and fix later\n\n                try:\n                    shift[f\"{col}_seconds\"] = 60 * int(time_split[0]) + int(time_split[1])\n\n                except ValueError:  # Not covered by tests\n                    continue\n\n            # Fixing end time if it is blank or empty\n\n            if shift[\"end_time\"] == \" \" or shift[\"end_time\"] == \"\":  # Not covered by tests\n                # Calculating end time based on duration seconds\n\n                shift[\"end_time_seconds\"] = shift[\"start_time_seconds\"] + shift[\"duration_seconds\"]\n\n                # Creating end time based on time delta\n\n                shift[\"end_time\"] = str(timedelta(seconds=shift[\"end_time_seconds\"])).split(\":\", 1)[1]\n\n            # If the shift start is after the shift end, we need to fix the error\n\n            if shift[\"start_time_seconds\"] &gt; shift[\"end_time_seconds\"]:  # Not covered by tests\n                # Creating new values based on game session and period\n\n                if shift[\"period\"] &lt; 4:\n                    # Setting the end time\n\n                    shift[\"end_time\"] = \"20:00\"\n\n                    # Setting the end time in seconds\n\n                    shift[\"end_time_seconds\"] = 1200\n\n                    # Setting the shift end\n\n                    shift[\"shift_end\"] = \"20:00 / 0:00\"\n\n                    # Setting duration and duration in seconds\n\n                    shift[\"duration_seconds\"] = shift[\"end_time_seconds\"] - shift[\"start_time_seconds\"]\n\n                    shift[\"duration\"] = str(timedelta(seconds=shift[\"duration_seconds\"])).split(\":\", 1)[1]\n\n                else:\n                    total_seconds = 1200 if game_session == \"P\" else 300\n\n                    # Need to get the end period to get the end time in seconds\n\n                    max_period = max([int(shift[\"period\"]) for shift in self._shifts if shift[\"period\"] != \" \"])\n\n                    # Getting the end time in seconds for the final period\n\n                    max_seconds = max(\n                        [\n                            shift[\"end_time_seconds\"]\n                            for shift in self._shifts\n                            if \"end_time_seconds\" in shift and shift[\"period\"] == max_period\n                        ]\n                    )\n\n                    shift[\"end_time_seconds\"] = max_seconds\n\n                    # Setting end time\n\n                    end_time = str(timedelta(seconds=max_seconds)).split(\":\", 1)[1]\n\n                    # Setting remainder time\n\n                    remainder = str(timedelta(seconds=(total_seconds - max_seconds))).split(\":\", 1)[1]\n\n                    shift[\"end_time\"] = end_time\n\n                    shift[\"shift_end\"] = f\"{end_time} / {remainder}\"\n\n            # Setting goalie values\n\n            if shift[\"position\"] == \"G\":\n                shift[\"goalie\"] = 1\n\n            else:\n                shift[\"goalie\"] = 0\n\n            # Setting home and away values\n\n            if shift[\"team_venue\"] == \"HOME\":\n                shift[\"is_home\"] = 1\n\n                shift[\"is_away\"] = 0\n\n            else:\n                shift[\"is_home\"] = 0\n\n                shift[\"is_away\"] = 1\n\n        periods = np.unique([x[\"period\"] for x in self._shifts]).tolist()\n\n        # Setting list of teams to iterate through while iterating through the periods\n\n        teams = [\"HOME\", \"AWAY\"]\n\n        for period in periods:\n            # Getting max seconds for the period\n\n            max_seconds = max([int(x[\"end_time_seconds\"]) for x in self._shifts if x[\"period\"] == period])\n\n            # Iterating through home and away teams\n\n            for team in teams:\n                # Getting the team's goalies for the game\n\n                team_goalies = [x for x in self._shifts if x[\"goalie\"] == 1 and x[\"team_venue\"] == team]\n\n                # Getting the goalies for the period\n\n                goalies = [\n                    x for x in self._shifts if x[\"goalie\"] == 1 and x[\"team_venue\"] == team and x[\"period\"] == period\n                ]\n\n                # If there are no goalies changing during the period, we need to add them\n\n                if len(goalies) &lt; 1:  # Not covered by tests\n                    if period == 1:\n                        if len(team_goalies) &lt; 1:\n                            first_goalie = {}\n\n                            starter = [\n                                x\n                                for x in actives.values()\n                                if x[\"position\"] == \"G\" and x[\"team_venue\"] == team and x[\"starter\"] == 1\n                            ][0]\n\n                            new_values = {\n                                \"season\": season,\n                                \"session\": game_session,\n                                \"game_id\": self.game_id,\n                                \"period\": period,\n                                \"team_venue\": team,\n                                \"goalie\": 1,\n                                \"shift_count\": 1,\n                            }\n\n                            new_values.update(starter)\n\n                            if team == \"HOME\":\n                                new_values.update({\"is_home\": 1, \"is_away\": 0})\n\n                            else:\n                                new_values.update({\"is_away\": 1, \"is_home\": 0})\n\n                            first_goalie.update(new_values)\n\n                        else:\n                            first_goalie = team_goalies[0]\n\n                        # Initial dictionary is set using data from the first goalie to appear\n\n                        goalie_shift = dict(first_goalie)\n\n                    else:\n                        # Initial dictionary is set using data from the pervious goalie to appear\n\n                        prev_goalie = [x for x in team_goalies if x[\"period\"] == (period - 1)][-1]\n\n                        goalie_shift = dict(prev_goalie)\n\n                    # Setting goalie shift number so we can identify later\n\n                    goalie_shift[\"number\"] = 0\n\n                    # Setting the period for the current period\n\n                    goalie_shift[\"period\"] = period\n\n                    # Setting the start time\n\n                    goalie_shift[\"start_time\"] = \"0:00\"\n\n                    # Setting the start time in seconds\n\n                    goalie_shift[\"start_time_seconds\"] = 0\n\n                    # If during regular time\n\n                    if period &lt; 4:\n                        # Setting shift start value\n\n                        goalie_shift[\"shift_start\"] = \"0:00 / 20:00\"\n\n                        if max_seconds &lt; 1200:\n                            # Setting end time value\n\n                            goalie_shift[\"end_time\"] = \"20:00\"\n\n                            # Setting end time in seconds\n\n                            goalie_shift[\"end_time_seconds\"] = 1200\n\n                            # Setting the duration, assuming they were out there the whole time\n\n                            goalie_shift[\"duration\"] = \"20:00\"\n\n                            # Setting the duration in seconds, assuming they were out there the whole time\n\n                            goalie_shift[\"duration_seconds\"] = 1200\n\n                            # Setting the shift end value\n\n                            goalie_shift[\"shift_end\"] = \"20:00 / 0:00\"\n\n                    # If the period is greater than 3\n\n                    else:\n                        # Need to account for whether regular season or playoffs\n\n                        if game_session == \"P\":\n                            goalie_shift[\"shift_start\"] = \"0:00 / 20:00\"\n\n                            total_seconds = 1200\n\n                        else:\n                            goalie_shift[\"shift_start\"] = \"0:00 / 5:00\"\n\n                            total_seconds = 300\n\n                        if max_seconds &lt; total_seconds:\n                            # Getting end time\n\n                            end_time = str(timedelta(seconds=max_seconds)).split(\":\", 1)[1]\n\n                            # Getting remainder time\n\n                            remainder = str(timedelta(seconds=(total_seconds - max_seconds))).split(\":\", 1)[1]\n\n                            # Setting values\n\n                            goalie_shift[\"end_time_seconds\"] = max_seconds\n\n                            goalie_shift[\"end_time\"] = end_time\n\n                            goalie_shift[\"shift_end\"] = f\"{end_time} / {remainder}\"\n\n                    # Appending the new goalie shift to the game list\n\n                    self._shifts.append(goalie_shift)\n\n            # Iterating through the shifts\n\n            for shift in self._shifts:\n                # Fixing goalie errors\n\n                if (\n                    shift[\"goalie\"] == 1\n                    and shift[\"period\"] == period\n                    and (not shift.get(\"shift_end\") or shift[\"shift_end\"] == \"0:00 / 0:00\")\n                ):  # Not covered by tests\n                    if period &lt; 4:\n                        shift[\"shift_end\"] = \"20:00 / 0:00\"\n                        shift[\"end_time\"] = \"20:00\"\n                        shift[\"end_time_seconds\"] = 1200\n\n                    else:\n                        total_seconds = 300 if game_session == \"R\" else 1200\n\n                        end_time = str(timedelta(seconds=max_seconds)).split(\":\", 1)[1]\n\n                        remainder = str(timedelta(seconds=(total_seconds - max_seconds))).split(\":\", 1)[1]\n\n                        shift[\"end_time_seconds\"] = max_seconds\n                        shift[\"end_time\"] = end_time\n                        shift[\"shift_end\"] = f\"{end_time} / {remainder}\"\n\n                    # Setting duration and duration in seconds\n\n                    shift[\"duration_seconds\"] = shift[\"end_time_seconds\"] - shift[\"start_time_seconds\"]\n\n                    shift[\"duration\"] = str(timedelta(seconds=shift[\"duration_seconds\"])).split(\":\", 1)[1]\n\n        self._shifts = [PlayerShift.model_validate(shift).model_dump() for shift in self._shifts]\n\n    @property\n    def shifts(self) -&gt; list:\n        \"\"\"List of shifts scraped from HTML endpoint. Returns a dictionary of player - shifts with the below keys.\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).shifts_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            position (str):\n                Player's position, e.g., L\n            jersey (int):\n                Player's jersey number, e.g., 9\n            shift_count (int):\n                Shift number for that player, e.g., 1\n            period (int):\n                Period number for the shift, e.g., 1\n            start_time (str):\n                Time shift started, e.g., 0:00\n            end_time (str):\n                Time shift ended, e.g., 0:18\n            duration (str):\n                Length of shift, e.g, 00:18\n            start_time_seconds (int):\n                Time shift started in seconds, e.g., 0\n            end_time_seconds (int):\n                Time shift ended in seconds, e.g., 18\n            duration_seconds (int):\n                Length of shift in seconds, e.g., 18\n            shift_start (str):\n                Time the shift started as the original string, e.g., 0:00 / 20:00\n            shift_end (str):\n                Time the shift ended as the original string, e.g., 0:18 / 19:42\n            goalie (int):\n                Whether player is a goalie, e.g., 0\n            is_home (int):\n                Whether player is home e.g., 0\n            is_away (int):\n                Whether player is away, e.g., 1\n            team_venue (str):\n                Whether player is home or away, e.g., AWAY\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.shifts\n\n        \"\"\"\n        # TODO: Add API ID to documentation\n\n        if self._shifts is None:\n            if self._rosters is None:\n                if self._html_rosters is None:\n                    self._scrape_html_rosters()\n                    self._munge_html_rosters()\n\n                if self._api_rosters is None:\n                    self._munge_api_rosters()\n\n                self._combine_rosters()\n\n            self._scrape_shifts()\n            self._munge_shifts()\n\n        return self._shifts\n\n    @property\n    def shifts_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of shifts scraped from HTML endpoint.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            position (str):\n                Player's position, e.g., L\n            jersey (int):\n                Player's jersey number, e.g., 9\n            shift_count (int):\n                Shift number for that player, e.g., 1\n            period (int):\n                Period number for the shift, e.g., 1\n            start_time (str):\n                Time shift started, e.g., 0:00\n            end_time (str):\n                Time shift ended, e.g., 0:18\n            duration (str):\n                Length of shift, e.g, 00:18\n            start_time_seconds (int):\n                Time shift started in seconds, e.g., 0\n            end_time_seconds (int):\n                Time shift ended in seconds, e.g., 18\n            duration_seconds (int):\n                Length of shift in seconds, e.g., 18\n            shift_start (str):\n                Time the shift started as the original string, e.g., 0:00 / 20:00\n            shift_end (str):\n                Time the shift ended as the original string, e.g., 0:18 / 19:42\n            goalie (int):\n                Whether player is a goalie, e.g., 0\n            is_home (int):\n                Whether player is home e.g., 0\n            is_away (int):\n                Whether player is away, e.g., 1\n            team_venue (str):\n                Whether player is home or away, e.g., AWAY\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.shifts_df\n\n        \"\"\"\n        # TODO: Add API ID to documentation\n\n        if self._shifts is None:\n            if self._rosters is None:\n                if self._html_rosters is None:\n                    self._scrape_html_rosters()\n                    self._munge_html_rosters()\n\n                if self._api_rosters is None:\n                    self._munge_api_rosters()\n\n                self._combine_rosters()\n\n            self._scrape_shifts()\n            self._munge_shifts()\n\n        return pd.DataFrame(self._shifts)\n</code></pre>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Game._munge_api_events","title":"_munge_api_events","text":"<pre><code>_munge_api_events()\n</code></pre> <p>Method to munge events from API endpoint. Updates self._api_events.</p> <p>For more information and usage, see https://chickenstats.com/latest/contribute/contribute/</p> <p>Examples:</p> <p>First, instantiate the Game object</p> <pre><code>&gt;&gt;&gt; game = Game(2023020001)\n</code></pre> <p>Before cleaning the data, game._api_events is None</p> <pre><code>&gt;&gt;&gt; game._api_events  # Returns None\n</code></pre> <p>However, you can access the raw events from the API feed</p> <pre><code>&gt;&gt;&gt; game.api_response[\"plays\"]\n</code></pre> <p>Once you've cleaned the data using <code>_munge_api_events</code>, it's then available from game._api_events, or game.api_events, which is the preferred method of accessing the data</p> <pre><code>&gt;&gt;&gt; game._munge_api_events()  # Cleans the raw data from game.api_response['plays']\n&gt;&gt;&gt; game._api_events  # Returns clean API events data\n&gt;&gt;&gt; game.api_events  # Also returns clean API events data, preferred method of accessing\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _munge_api_events(self) -&gt; None:\n    \"\"\"Method to munge events from API endpoint. Updates self._api_events.\n\n    For more information and usage, see\n    https://chickenstats.com/latest/contribute/contribute/\n\n    Examples:\n        First, instantiate the Game object\n        &gt;&gt;&gt; game = Game(2023020001)\n\n        Before cleaning the data, game._api_events is None\n        &gt;&gt;&gt; game._api_events  # Returns None\n\n        However, you can access the raw events from the API feed\n        &gt;&gt;&gt; game.api_response[\"plays\"]\n\n        Once you've cleaned the data using `_munge_api_events`, it's then available from\n        game._api_events, or game.api_events, which is the preferred method of accessing the data\n\n        &gt;&gt;&gt; game._munge_api_events()  # Cleans the raw data from game.api_response['plays']\n        &gt;&gt;&gt; game._api_events  # Returns clean API events data\n        &gt;&gt;&gt; game.api_events  # Also returns clean API events data, preferred method of accessing\n    \"\"\"\n    self._api_events = [x for x in self.api_response[\"plays\"]]\n\n    rosters = {x[\"api_id\"]: x for x in self._api_rosters}\n\n    teams_dict = {self.home_team[\"id\"]: self.home_team[\"abbrev\"], self.away_team[\"id\"]: self.away_team[\"abbrev\"]}\n\n    event_list = []\n\n    for event in self._api_events:\n        time_split = event[\"timeInPeriod\"].split(\":\")\n\n        period = int(event[\"periodDescriptor\"][\"number\"])\n        period_type = event[\"periodDescriptor\"][\"periodType\"]\n        period_seconds = (int(time_split[0]) * 60) + int(time_split[1])\n\n        if self.session == \"R\" and period == 5:\n            game_seconds = 3900\n\n        else:\n            game_seconds = ((period - 1) * 1200) + period_seconds\n\n        event_info = {}\n\n        new_values = {\n            \"season\": self.season,\n            \"session\": self.session,\n            \"game_id\": self.game_id,\n            \"event_idx\": event[\"sortOrder\"],\n            \"period\": period,\n            \"period_type\": period_type,\n            \"period_seconds\": period_seconds,\n            \"game_seconds\": game_seconds,\n            \"event\": event[\"typeDescKey\"],\n            \"event_code\": event[\"typeCode\"],\n            \"strength\": event.get(\"situationCode\"),\n            \"home_team_defending_side\": event.get(\"homeTeamDefendingSide\"),\n        }\n\n        event_info.update(new_values)\n\n        if event_info[\"event\"] == \"period-start\":\n            event_info[\"event\"] = \"PSTR\"\n\n        if event_info[\"event\"] == \"period-end\":\n            event_info[\"event\"] = \"PEND\"\n\n        if event_info[\"event\"] == \"game-end\":\n            event_info[\"event\"] = \"GEND\"\n\n        if event_info[\"event\"] == \"shootout-complete\":\n            event_info[\"event\"] = \"SOC\"\n\n        if event.get(\"details\"):\n            new_values = {\n                \"event_team\": teams_dict.get(event[\"details\"].get(\"eventOwnerTeamId\")),\n                \"coords_x\": event[\"details\"].get(\"xCoord\"),\n                \"coords_y\": event[\"details\"].get(\"yCoord\"),\n                \"zone\": event[\"details\"].get(\"zoneCode\"),\n                \"event_team_id\": event[\"details\"].get(\"eventOwnerTeamId\"),\n            }\n\n            event_info.update(new_values)\n\n            if event_info[\"event\"] == \"faceoff\":\n                event_info[\"player_1_api_id\"] = event[\"details\"][\"winningPlayerId\"]\n                event_info[\"player_1_type\"] = \"WINNER\"\n                event_info[\"player_2_api_id\"] = event[\"details\"][\"losingPlayerId\"]\n                event_info[\"player_2_type\"] = \"LOSER\"\n\n                event_info[\"event\"] = \"FAC\"\n\n            if event_info[\"event\"] == \"stoppage\":\n                event_info[\"stoppage_reason\"] = event[\"details\"][\"reason\"].replace(\"-\", \" \").upper()\n                event_info[\"stoppage_reason_secondary\"] = (\n                    event[\"details\"].get(\"secondaryReason\", \"\").replace(\"-\", \" \").upper()\n                )\n\n                event_info[\"event\"] = \"STOP\"\n\n            if event_info[\"event\"] == \"hit\":\n                event_info[\"player_1_api_id\"] = event[\"details\"][\"hittingPlayerId\"]\n                event_info[\"player_1_type\"] = \"HITTER\"\n                event_info[\"player_2_api_id\"] = event[\"details\"][\"hitteePlayerId\"]\n                event_info[\"player_2_type\"] = \"HITTEE\"\n\n                event_info[\"event\"] = \"HIT\"\n\n            if event_info[\"event\"] == \"giveaway\":\n                event_info[\"player_1_api_id\"] = event[\"details\"][\"playerId\"]\n                event_info[\"player_1_type\"] = \"GIVER\"\n\n                event_info[\"event\"] = \"GIVE\"\n\n            if event_info[\"event\"] == \"shot-on-goal\":\n                event_info[\"player_1_api_id\"] = event[\"details\"][\"shootingPlayerId\"]\n                event_info[\"player_1_type\"] = \"SHOOTER\"\n                event_info[\"opp_goalie_api_id\"] = event[\"details\"].get(\"goalieInNetId\", \"EMPTY_NET\")\n                event_info[\"shot_type\"] = event[\"details\"].get(\"shotType\", \"WRIST\").upper()\n\n                event_info[\"event\"] = \"SHOT\"\n\n            if event_info[\"event\"] == \"takeaway\":\n                event_info[\"player_1_api_id\"] = event[\"details\"][\"playerId\"]\n                event_info[\"player_1_type\"] = \"TAKER\"\n\n                event_info[\"event\"] = \"TAKE\"\n\n            if event_info[\"event\"] == \"missed-shot\":\n                event_info[\"player_1_api_id\"] = event[\"details\"][\"shootingPlayerId\"]\n                event_info[\"player_1_type\"] = \"SHOOTER\"\n                event_info[\"opp_goalie_api_id\"] = event[\"details\"].get(\"goalieInNetId\", \"EMPTY NET\")\n                event_info[\"shot_type\"] = event[\"details\"].get(\"shotType\", \"WRIST\").upper()\n                event_info[\"miss_reason\"] = event[\"details\"].get(\"reason\", \"\").replace(\"-\", \" \").upper()\n\n                event_info[\"event\"] = \"MISS\"\n\n            if event_info[\"event\"] == \"blocked-shot\":\n                event_info[\"player_1_api_id\"] = event[\"details\"].get(\"blockingPlayerId\")\n                event_info[\"player_1_type\"] = \"BLOCKER\"\n\n                if event_info[\"player_1_api_id\"] is None:  # Not covered by tests\n                    event_info[\"event_team\"] = \"OTHER\"\n                    event_info[\"player_1\"] = \"REFEREE\"\n                    event_info[\"player_1_api_id\"] = None\n                    event_info[\"player_1_eh_id\"] = \"REFEREE\"\n\n                event_info[\"player_2_api_id\"] = event[\"details\"][\"shootingPlayerId\"]\n                event_info[\"player_2_type\"] = \"SHOOTER\"\n\n                event_info[\"event\"] = \"BLOCK\"\n\n            if event_info[\"event\"] == \"goal\":\n                event_info[\"player_1_api_id\"] = event[\"details\"][\"scoringPlayerId\"]\n                event_info[\"player_1_type\"] = \"GOAL SCORER\"\n                event_info[\"player_2_api_id\"] = event[\"details\"].get(\"assist1PlayerId\")\n\n                if event_info[\"player_2_api_id\"] is not None:\n                    event_info[\"player_2_type\"] = \"PRIMARY ASSIST\"\n\n                event_info[\"player_3_api_id\"] = event[\"details\"].get(\"assist2PlayerId\")\n\n                if event_info[\"player_3_api_id\"] is not None:\n                    event_info[\"player_3_type\"] = \"SECONDARY ASSIST\"\n\n                event_info[\"opp_goalie_api_id\"] = event[\"details\"].get(\"goalieInNetId\", \"EMPTY NET\")\n                event_info[\"shot_type\"] = event[\"details\"].get(\"shotType\", \"WRIST\").upper()\n\n                event_info[\"event\"] = \"GOAL\"\n\n            if event_info[\"event\"] == \"penalty\":\n                event_info[\"penalty_type\"] = event[\"details\"][\"typeCode\"]\n                event_info[\"penalty_reason\"] = event[\"details\"][\"descKey\"].upper()\n                event_info[\"penalty_duration\"] = event[\"details\"].get(\"duration\")\n\n                if (\n                    (event_info[\"penalty_type\"] == \"BEN\" and event[\"details\"].get(\"committedByPlayerId\") is None)\n                    or (\n                        \"HEAD-COACH\" in event_info[\"penalty_reason\"] or \"TEAM-STAFF\" in event_info[\"penalty_reason\"]\n                    )\n                    and event[\"details\"].get(\"committedByPlayerId\") is None\n                ):\n                    event_info[\"player_1\"] = \"BENCH\"\n                    event_info[\"player_1_api_id\"] = None\n                    event_info[\"player_1_eh_id\"] = \"BENCH\"\n                    event_info[\"player_1_type\"] = \"COMMITTED BY\"\n                    event_info[\"player_2_api_id\"] = event[\"details\"].get(\"servedByPlayerId\")\n                    event_info[\"player_2_type\"] = \"SERVED BY\"\n\n                else:\n                    event_info[\"player_1_api_id\"] = event[\"details\"].get(\"committedByPlayerId\")\n                    event_info[\"player_1_type\"] = \"COMMITTED BY\"\n                    event_info[\"player_2_api_id\"] = event[\"details\"].get(\"drawnByPlayerId\")\n                    event_info[\"player_2_type\"] = \"DRAWN BY\"\n\n                    if event_info[\"player_2_api_id\"] is None:\n                        event_info[\"player_2_api_id\"] = event[\"details\"].get(\"servedByPlayerId\")\n                        event_info[\"player_2_type\"] = \"SERVED BY\"\n\n                    else:\n                        event_info[\"player_3_api_id\"] = event[\"details\"].get(\"servedByPlayerId\")\n                        event_info[\"player_3_type\"] = \"SERVED BY\"\n\n                event_info[\"event\"] = \"PENL\"\n\n            if event_info[\"event\"] == \"delayed-penalty\":\n                event_info[\"event\"] = \"DELPEN\"\n\n            if event_info[\"event\"] == \"failed-shot-attempt\":  # Not covered by tests\n                event_info[\"player_1_api_id\"] = event[\"details\"][\"shootingPlayerId\"]\n                event_info[\"player_1_type\"] = \"SHOOTER\"\n                event_info[\"opp_goalie_api_id\"] = event[\"details\"].get(\"goalieInNetId\", \"EMPTY NET\")\n\n                event_info[\"event\"] = \"MISS\"\n\n        event_info = api_events_fixes(self.game_id, event_info)\n\n        player_cols = [\"player_1_api_id\", \"player_2_api_id\", \"player_3_api_id\", \"opp_goalie_api_id\"]\n\n        for player_col in player_cols:\n            if (\n                player_col not in event_info\n                or event_info[player_col] is None\n                or event_info[player_col] == \"BENCH\"\n                or event_info[player_col] == \"REFEREE\"\n            ):\n                continue\n\n            else:\n                player_info = rosters.get(event_info[player_col], {})\n\n                new_cols = {\n                    player_col.replace(\"_api_id\", \"\"): player_info.get(\"player_name\"),\n                    player_col.replace(\"_api_id\", \"_eh_id\"): player_info.get(\"eh_id\"),\n                    player_col.replace(\"_api_id\", \"_team_jersey\"): player_info.get(\"team_jersey\"),\n                    player_col.replace(\"_api_id\", \"_position\"): player_info.get(\"position\"),\n                }\n\n                event_info.update(new_cols)\n\n        if event_info[\"event\"] == \"BLOCK\":\n            player_1_team = event_info.get(\"player_1_team_jersey\")\n\n            if player_1_team:\n                player_1_team = player_1_team[:3]\n                event_info[\"event_team\"] = player_1_team\n\n        event_list.append(event_info)\n\n    final_events = []\n\n    for event in event_list:\n        other_events = [\n            x\n            for x in event_list\n            # if x != event\n            if x[\"event\"] == event[\"event\"]\n            and x[\"game_seconds\"] == event[\"game_seconds\"]\n            and x.get(\"player_1\") is not None\n            and x[\"period\"] == event[\"period\"]\n            and x.get(\"player_1_api_id\") == event.get(\"player_1_api_id\")\n        ]\n\n        event[\"version\"] = 1\n\n        if len(other_events) &gt; 0:\n            for idx, _other_event in enumerate(other_events):\n                if event == other_events[0]:\n                    continue\n\n                version = idx + 1\n                event[\"version\"] = version\n\n        final_events.append(APIEvent.model_validate(event).model_dump())\n\n    self._api_events = final_events\n</code></pre>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Game._munge_api_rosters","title":"_munge_api_rosters","text":"<pre><code>_munge_api_rosters()\n</code></pre> <p>Method to munge list of players from API  endpoint. Updates self._api_rosters.</p> <p>For more information and usage, see https://chickenstats.com/latest/contribute/contribute/</p> <p>Examples:</p> <p>First, instantiate the Game object</p> <pre><code>&gt;&gt;&gt; game = Game(2023020001)\n</code></pre> <p>Before cleaning the data, game._api_rosters is None</p> <pre><code>&gt;&gt;&gt; game._rosters  # Returns None\n</code></pre> <p>However, you can access the raw roster data from the API feed</p> <pre><code>&gt;&gt;&gt; game.api_response[\"rosterSpots\"]\n</code></pre> <p>Once you've cleaned the data using <code>_munge_api_rosters</code>, it's then available from game._api_rosters, or game.api_rosters, which is the preferred method of accesing the data</p> <pre><code>&gt;&gt;&gt; game._munge_api_rosters()  # Cleans the raw data from game.api_response['plays']\n&gt;&gt;&gt; game._api_rosters  # Returns clean API rosters data\n&gt;&gt;&gt; game.api_rosters  # Also returns clean API rosters data, preferred method of accessing\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _munge_api_rosters(self) -&gt; None:\n    \"\"\"Method to munge list of players from API  endpoint. Updates self._api_rosters.\n\n    For more information and usage, see\n    https://chickenstats.com/latest/contribute/contribute/\n\n    Examples:\n        First, instantiate the Game object\n        &gt;&gt;&gt; game = Game(2023020001)\n\n        Before cleaning the data, game._api_rosters is None\n        &gt;&gt;&gt; game._rosters  # Returns None\n\n        However, you can access the raw roster data from the API feed\n        &gt;&gt;&gt; game.api_response[\"rosterSpots\"]\n\n        Once you've cleaned the data using `_munge_api_rosters`, it's then available from\n        game._api_rosters, or game.api_rosters, which is the preferred method of accesing the data\n\n        &gt;&gt;&gt; game._munge_api_rosters()  # Cleans the raw data from game.api_response['plays']\n        &gt;&gt;&gt; game._api_rosters  # Returns clean API rosters data\n        &gt;&gt;&gt; game.api_rosters  # Also returns clean API rosters data, preferred method of accessing\n    \"\"\"\n    players = []\n\n    team_info = {\n        self.home_team[\"id\"]: {\"venue\": \"HOME\", \"team\": self.home_team[\"abbrev\"]},\n        self.away_team[\"id\"]: {\"venue\": \"AWAY\", \"team\": self.away_team[\"abbrev\"]},\n    }\n\n    for player in self.api_response[\"rosterSpots\"]:\n        first_name = unidecode(player[\"firstName\"][\"default\"]).encode(\"latin\").decode(\"utf=8\").upper().strip()\n\n        last_name = unidecode(player[\"lastName\"][\"default\"]).encode(\"latin\").decode(\"utf=8\").upper().strip()\n\n        player_name = first_name + \" \" + last_name\n\n        player_name = (\n            player_name.replace(\"ALEXANDRE\", \"ALEX\").replace(\"ALEXANDER\", \"ALEX\").replace(\"CHRISTOPHER\", \"CHRIS\")\n        )\n\n        player_name = correct_names_dict.get(player_name, player_name)\n\n        eh_id = (player_name.split(\" \", 1)[0] + \".\" + player_name.split(\" \", 1)[1]).replace(\"..\", \".\")\n\n        eh_id = correct_api_names_dict.get(player[\"playerId\"], eh_id)\n\n        team = team_info[player[\"teamId\"]]\n\n        player_info = {\n            \"season\": self.season,\n            \"session\": self.session,\n            \"game_id\": self.game_id,\n            \"team\": team[\"team\"],\n            \"team_venue\": team[\"venue\"],\n            \"player_name\": player_name,\n            \"first_name\": first_name,\n            \"last_name\": last_name,\n            \"api_id\": player[\"playerId\"],\n            \"eh_id\": correct_api_names_dict.get(player[\"playerId\"], eh_id),\n            \"team_jersey\": team[\"team\"] + str(player[\"sweaterNumber\"]),\n            \"jersey\": player[\"sweaterNumber\"],\n            \"position\": player[\"positionCode\"],\n            \"headshot_url\": player.get(\"headshot\", \"\"),\n        }\n\n        players.append(APIRosterPlayer.model_validate(player_info).model_dump())\n\n    if self.game_id == 2013020971:\n        new_player = {\n            \"season\": self.season,\n            \"session\": self.session,\n            \"game_id\": self.game_id,\n            \"team\": \"CBJ\",\n            \"team_venue\": \"AWAY\",\n            \"player_name\": \"NATHAN HORTON\",\n            \"first_name\": \"NATHAN\",\n            \"last_name\": \"HORTON\",\n            \"api_id\": 8470596,\n            \"eh_id\": \"NATHAN.HORTON\",\n            \"team_jersey\": \"CBJ8\",\n            \"jersey\": 8,\n            \"position\": \"R\",\n            \"headshot_url\": \"\",\n        }\n\n        players.append(APIRosterPlayer.model_validate(new_player).model_dump())\n\n    players = sorted(players, key=lambda k: (k[\"team_venue\"], k[\"player_name\"]))\n\n    self._api_rosters = players\n</code></pre>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Game._munge_changes","title":"_munge_changes","text":"<pre><code>_munge_changes()\n</code></pre> <p>Method to munge list of changes from HTML shifts &amp; rosters endpoints. Updates self._changes.</p> <p>For more information and usage, see https://chickenstats.com/latest/contribute/contribute/</p> <p>Examples:</p> <p>First, instantiate the Game object</p> <pre><code>&gt;&gt;&gt; game = Game(2023020001)\n</code></pre> <p>Before cleaning the data, game._changes is None</p> <pre><code>&gt;&gt;&gt; game._changes  # Returns None\n</code></pre> <p>Once you scrape the shifts data, you can access it in raw form, prior to any processing</p> <pre><code>&gt;&gt;&gt; game._scrape_shifts()  # Scrapes raw data and adds it to game._shifts\n&gt;&gt;&gt; game.shifts  # Returns cleaned shifts data\n&gt;&gt;&gt; game.shifts_df  # Same, but a Pandas DataFrame\n</code></pre> <p>You then have to manually clean the data to convert it to changes</p> <pre><code>&gt;&gt;&gt; game._munge_shifts()  # Necessary before munging the changes\n&gt;&gt;&gt; game._munge_changes()\n&gt;&gt;&gt; game.changes  # Returns cleaned changes data\n&gt;&gt;&gt; game.changes_df  # Same but a Pandas DataFrame\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _munge_changes(self) -&gt; None:\n    \"\"\"Method to munge list of changes from HTML shifts &amp; rosters endpoints. Updates self._changes.\n\n    For more information and usage, see\n    https://chickenstats.com/latest/contribute/contribute/\n\n    Examples:\n        First, instantiate the Game object\n        &gt;&gt;&gt; game = Game(2023020001)\n\n        Before cleaning the data, game._changes is None\n        &gt;&gt;&gt; game._changes  # Returns None\n\n        Once you scrape the shifts data, you can access it in raw form, prior to any processing\n        &gt;&gt;&gt; game._scrape_shifts()  # Scrapes raw data and adds it to game._shifts\n        &gt;&gt;&gt; game.shifts  # Returns cleaned shifts data\n        &gt;&gt;&gt; game.shifts_df  # Same, but a Pandas DataFrame\n\n        You then have to manually clean the data to convert it to changes\n        &gt;&gt;&gt; game._munge_shifts()  # Necessary before munging the changes\n        &gt;&gt;&gt; game._munge_changes()\n        &gt;&gt;&gt; game.changes  # Returns cleaned changes data\n        &gt;&gt;&gt; game.changes_df  # Same but a Pandas DataFrame\n    \"\"\"\n    game_id = self.game_id\n    season = self.season\n    game_session = self.session\n    shifts = self._shifts\n\n    game_list = []\n\n    periods = np.unique([x[\"period\"] for x in shifts]).tolist()\n\n    teams = [\"HOME\", \"AWAY\"]\n\n    for period in periods:\n        max([x[\"end_time_seconds\"] for x in shifts if x[\"period\"] == period])\n\n        for team in teams:\n            changes_dict = {}\n\n            changes_on = np.unique(\n                [x[\"start_time_seconds\"] for x in shifts if x[\"period\"] == period and x[\"team_venue\"] == team]\n            ).tolist()\n\n            for change_on in changes_on:\n                players_on = [\n                    x\n                    for x in shifts\n                    if x[\"period\"] == period and x[\"start_time_seconds\"] == change_on and x[\"team_venue\"] == team\n                ]\n\n                players_on = sorted(players_on, key=lambda k: (k[\"jersey\"]))\n\n                f_positions = [\"L\", \"C\", \"R\"]\n\n                forwards_on = [\n                    x\n                    for x in shifts\n                    if x[\"period\"] == period\n                    and x[\"start_time_seconds\"] == change_on\n                    and x[\"team_venue\"] == team\n                    and x[\"position\"] in f_positions\n                ]\n\n                forwards_on = sorted(forwards_on, key=lambda k: (k[\"jersey\"]))\n\n                defense_on = [\n                    x\n                    for x in shifts\n                    if x[\"period\"] == period\n                    and x[\"start_time_seconds\"] == change_on\n                    and x[\"team_venue\"] == team\n                    and x[\"position\"] == \"D\"\n                ]\n\n                defense_on = sorted(defense_on, key=lambda k: (k[\"jersey\"]))\n\n                goalies_on = [\n                    x\n                    for x in shifts\n                    if x[\"period\"] == period\n                    and x[\"start_time_seconds\"] == change_on\n                    and x[\"team_venue\"] == team\n                    and x[\"position\"] == \"G\"\n                ]\n\n                goalies_on = sorted(goalies_on, key=lambda k: (k[\"jersey\"]))\n\n                new_values = {\n                    \"season\": season,\n                    \"session\": game_session,\n                    \"game_id\": game_id,\n                    \"event\": \"CHANGE\",\n                    \"event_team\": players_on[0][\"team\"],\n                    \"is_home\": players_on[0][\"is_home\"],\n                    \"is_away\": players_on[0][\"is_away\"],\n                    \"team_venue\": team,\n                    \"period\": period,\n                    \"period_time\": players_on[0][\"start_time\"],\n                    \"period_seconds\": players_on[0][\"start_time_seconds\"],\n                    \"change_on_count\": len(players_on),\n                    \"change_off_count\": 0,\n                    \"change_on_jersey\": [x[\"team_jersey\"] for x in players_on],\n                    \"change_on\": [x[\"player_name\"] for x in players_on],\n                    \"change_on_eh_id\": [x[\"eh_id\"] for x in players_on],\n                    \"change_on_api_id\": [str(x[\"api_id\"]) for x in players_on],\n                    \"change_on_positions\": [x[\"position\"] for x in players_on],\n                    \"change_off_jersey\": \"\",\n                    \"change_off\": \"\",\n                    \"change_off_eh_id\": \"\",\n                    \"change_off_api_id\": \"\",\n                    \"change_off_positions\": \"\",\n                    \"change_on_forwards_count\": len(forwards_on),\n                    \"change_off_forwards_count\": 0,\n                    \"change_on_forwards_jersey\": [x[\"team_jersey\"] for x in forwards_on],\n                    \"change_on_forwards\": [x[\"player_name\"] for x in forwards_on],\n                    \"change_on_forwards_eh_id\": [x[\"eh_id\"] for x in forwards_on],\n                    \"change_on_forwards_api_id\": [str(x[\"api_id\"]) for x in forwards_on],\n                    \"change_off_forwards_jersey\": \"\",\n                    \"change_off_forwards\": \"\",\n                    \"change_off_forwards_eh_id\": \"\",\n                    \"change_off_forwards_api_id\": \"\",\n                    \"change_on_defense_count\": len(defense_on),\n                    \"change_off_defense_count\": 0,\n                    \"change_on_defense_jersey\": [x[\"team_jersey\"] for x in defense_on],\n                    \"change_on_defense\": [x[\"player_name\"] for x in defense_on],\n                    \"change_on_defense_eh_id\": [x[\"eh_id\"] for x in defense_on],\n                    \"change_on_defense_api_id\": [str(x[\"api_id\"]) for x in defense_on],\n                    \"change_off_defense_jersey\": \"\",\n                    \"change_off_defense\": \"\",\n                    \"change_off_defense_eh_id\": \"\",\n                    \"change_off_defense_api_id\": \"\",\n                    \"change_on_goalie_count\": len(goalies_on),\n                    \"change_off_goalie_count\": 0,\n                    \"change_on_goalie_jersey\": [x[\"team_jersey\"] for x in goalies_on],\n                    \"change_on_goalie\": [x[\"player_name\"] for x in goalies_on],\n                    \"change_on_goalie_eh_id\": [x[\"eh_id\"] for x in goalies_on],\n                    \"change_on_goalie_api_id\": [str(x[\"api_id\"]) for x in goalies_on],\n                    \"change_off_goalie_jersey\": \"\",\n                    \"change_off_goalie\": \"\",\n                    \"change_off_goalie_eh_id\": \"\",\n                    \"change_off_goalie_api_id\": \"\",\n                }\n\n                changes_dict.update({change_on: new_values})\n\n            changes_off = np.unique(\n                [x[\"end_time_seconds\"] for x in shifts if x[\"period\"] == period and x[\"team_venue\"] == team]\n            ).tolist()\n\n            for change_off in changes_off:\n                players_off = [\n                    x\n                    for x in shifts\n                    if x[\"period\"] == period and x[\"end_time_seconds\"] == change_off and x[\"team_venue\"] == team\n                ]\n\n                players_off = sorted(players_off, key=lambda k: (k[\"jersey\"]))\n\n                f_positions = [\"L\", \"C\", \"R\"]\n\n                forwards_off = [\n                    x\n                    for x in shifts\n                    if x[\"period\"] == period\n                    and x[\"end_time_seconds\"] == change_off\n                    and x[\"team_venue\"] == team\n                    and x[\"position\"] in f_positions\n                ]\n\n                forwards_off = sorted(forwards_off, key=lambda k: (k[\"jersey\"]))\n\n                defense_off = [\n                    x\n                    for x in shifts\n                    if x[\"period\"] == period\n                    and x[\"end_time_seconds\"] == change_off\n                    and x[\"team_venue\"] == team\n                    and x[\"position\"] == \"D\"\n                ]\n\n                defense_off = sorted(defense_off, key=lambda k: (k[\"jersey\"]))\n\n                goalies_off = [\n                    x\n                    for x in shifts\n                    if x[\"period\"] == period\n                    and x[\"end_time_seconds\"] == change_off\n                    and x[\"team_venue\"] == team\n                    and x[\"position\"] == \"G\"\n                ]\n\n                goalies_off = sorted(goalies_off, key=lambda k: (k[\"jersey\"]))\n\n                new_values = {\n                    \"season\": season,\n                    \"session\": game_session,\n                    \"game_id\": game_id,\n                    \"event\": \"CHANGE\",\n                    \"event_team\": players_off[0][\"team\"],\n                    \"team_venue\": team,\n                    \"is_home\": players_off[0][\"is_home\"],\n                    \"is_away\": players_off[0][\"is_away\"],\n                    \"period\": period,\n                    \"period_time\": players_off[0][\"end_time\"],\n                    \"period_seconds\": players_off[0][\"end_time_seconds\"],\n                    \"change_off_count\": len(players_off),\n                    \"change_off_jersey\": [x[\"team_jersey\"] for x in players_off],\n                    \"change_off\": [x[\"player_name\"] for x in players_off],\n                    \"change_off_eh_id\": [x[\"eh_id\"] for x in players_off],\n                    \"change_off_api_id\": [str(x[\"api_id\"]) for x in players_off],\n                    \"change_off_positions\": [x[\"position\"] for x in players_off],\n                    \"change_off_forwards_count\": len(forwards_off),\n                    \"change_off_forwards_jersey\": [x[\"team_jersey\"] for x in forwards_off],\n                    \"change_off_forwards\": [x[\"player_name\"] for x in forwards_off],\n                    \"change_off_forwards_eh_id\": [x[\"eh_id\"] for x in forwards_off],\n                    \"change_off_forwards_api_id\": [str(x[\"api_id\"]) for x in forwards_off],\n                    \"change_off_defense_count\": len(defense_off),\n                    \"change_off_defense_jersey\": [x[\"team_jersey\"] for x in defense_off],\n                    \"change_off_defense\": [x[\"player_name\"] for x in defense_off],\n                    \"change_off_defense_eh_id\": [x[\"eh_id\"] for x in defense_off],\n                    \"change_off_defense_api_id\": [str(x[\"api_id\"]) for x in defense_off],\n                    \"change_off_goalie_count\": len(goalies_off),\n                    \"change_off_goalie_jersey\": [x[\"team_jersey\"] for x in goalies_off],\n                    \"change_off_goalie\": [x[\"player_name\"] for x in goalies_off],\n                    \"change_off_goalie_eh_id\": [x[\"eh_id\"] for x in goalies_off],\n                    \"change_off_goalie_api_id\": [str(x[\"api_id\"]) for x in goalies_off],\n                }\n\n                if change_off in changes_on:\n                    changes_dict[change_off].update(new_values)\n\n                else:\n                    new_values.update(\n                        {\n                            \"change_on_count\": 0,\n                            \"change_on_forwards_count\": 0,\n                            \"change_on_defense_count\": 0,\n                            \"change_on_goalie_count\": 0,\n                        }\n                    )\n\n                    changes_dict[change_off] = new_values\n\n            game_list.extend(list(changes_dict.values()))\n\n    game_list = sorted(game_list, key=lambda k: (k[\"period\"], k[\"period_seconds\"], k[\"is_away\"]))\n\n    final_changes = []\n\n    for change in game_list:\n        players_on = \", \".join(change.get(\"change_on\", []))\n\n        players_off = \", \".join(change.get(\"change_off\", []))\n\n        on_num = len(change.get(\"change_on\", []))\n\n        off_num = len(change.get(\"change_off\", []))\n\n        if on_num &gt; 0 and off_num &gt; 0:\n            change[\"description\"] = f\"PLAYERS ON: {players_on} / PLAYERS OFF: {players_off}\"\n\n        if on_num &gt; 0 and off_num == 0:\n            change[\"description\"] = f\"PLAYERS ON: {players_on}\"\n\n        if off_num &gt; 0 and on_num == 0:\n            change[\"description\"] = f\"PLAYERS OFF: {players_off}\"\n\n        if change[\"period\"] == 5 and game_session == \"R\":  # Not covered by tests\n            change[\"game_seconds\"] = 3900 + change[\"period_seconds\"]\n\n        else:\n            change[\"game_seconds\"] = (int(change[\"period\"]) - 1) * 1200 + change[\"period_seconds\"]\n\n        if change[\"is_home\"] == 1:\n            change[\"event_type\"] = \"HOME CHANGE\"\n\n        else:\n            change[\"event_type\"] = \"AWAY CHANGE\"\n\n        final_changes.append(ChangeEvent.model_validate(change).model_dump())\n\n    self._changes = final_changes\n</code></pre>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Game._scrape_html_events","title":"_scrape_html_events","text":"<pre><code>_scrape_html_events()\n</code></pre> <p>Method for scraping events from HTML endpoint. Updates self._html_events.</p> <p>For more information and usage, see https://chickenstats.com/latest/contribute/contribute/</p> <p>Examples:</p> <p>First, instantiate the Game object</p> <pre><code>&gt;&gt;&gt; game = Game(2023020001)\n</code></pre> <p>Before cleaning the data, game._html_events is None</p> <pre><code>&gt;&gt;&gt; game._html_events  # Returns None\n</code></pre> <p>Once you scrape the data, you can access it in raw form, prior to any processing</p> <pre><code>&gt;&gt;&gt; game._scrape_html_events()  # Scrapes raw data and adds it to game._html_events\n&gt;&gt;&gt; game.html_events  # Returns raw events, prior to processing\n&gt;&gt;&gt; game.html_events_df  # Same, but a Pandas DataFrame\n</code></pre> <p>You then have to manually clean the data</p> <pre><code>&gt;&gt;&gt; game._munge_html_events()\n&gt;&gt;&gt; game.html_events  # Returns cleaned events data\n&gt;&gt;&gt; game.html_events_df  # Same but a Pandas DataFrame\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _scrape_html_events(self) -&gt; None:\n    \"\"\"Method for scraping events from HTML endpoint. Updates self._html_events.\n\n    For more information and usage, see\n    https://chickenstats.com/latest/contribute/contribute/\n\n    Examples:\n        First, instantiate the Game object\n        &gt;&gt;&gt; game = Game(2023020001)\n\n        Before cleaning the data, game._html_events is None\n        &gt;&gt;&gt; game._html_events  # Returns None\n\n        Once you scrape the data, you can access it in raw form, prior to any processing\n        &gt;&gt;&gt; game._scrape_html_events()  # Scrapes raw data and adds it to game._html_events\n        &gt;&gt;&gt; game.html_events  # Returns raw events, prior to processing\n        &gt;&gt;&gt; game.html_events_df  # Same, but a Pandas DataFrame\n\n        You then have to manually clean the data\n        &gt;&gt;&gt; game._munge_html_events()\n        &gt;&gt;&gt; game.html_events  # Returns cleaned events data\n        &gt;&gt;&gt; game.html_events_df  # Same but a Pandas DataFrame\n    \"\"\"\n    url = self.html_events_endpoint\n\n    s = self._requests_session\n\n    try:\n        response = s.get(url)\n    except RetryError:  # Not covered by tests\n        return None\n\n    soup = BeautifulSoup(response.content.decode(\"ISO-8859-1\"), \"lxml\")\n\n    events = []\n\n    if soup.find(\"html\") is None:  # Not covered by tests\n        return None\n\n    tds = soup.find_all(\"td\", {\"class\": re.compile(\".*bborder.*\")})\n\n    events_data = hs_strip_html(tds)\n\n    events_data = [unidecode(x).replace(\"\\n \", \", \").replace(\"\\n\", \"\") for x in events_data]\n\n    length = int(len(events_data) / 8)\n\n    events_data = np.array(events_data).reshape(length, 8)\n\n    for _idx, event in enumerate(events_data):\n        column_names = [\n            \"event_idx\",\n            \"period\",\n            \"strength\",\n            \"time\",\n            \"event\",\n            \"description\",\n            \"away_skaters\",\n            \"home_skaters\",\n        ]\n\n        if \"#\" in event:\n            continue\n\n        else:\n            event = dict(zip(column_names, event, strict=False))\n\n            new_values = {\n                \"season\": self.season,\n                \"session\": self.session,\n                \"game_id\": self.game_id,\n                \"event_idx\": int(event[\"event_idx\"]),\n                \"description\": unidecode(event[\"description\"]).upper(),\n                \"period\": event[\"period\"],\n            }\n\n            event.update(new_values)\n\n            # This event is missing from the API and doesn't have a player in the HTML endpoint\n\n            if self.game_id == 2022020194 and event[\"event_idx\"] == 134:\n                continue\n\n            if self.game_id == 2022020673 and event[\"event_idx\"] == 208:\n                continue\n\n            events.append(event)\n\n    self._html_events = events\n</code></pre>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Game._munge_html_events","title":"_munge_html_events","text":"<pre><code>_munge_html_events()\n</code></pre> <p>Method to munge list of events from HTML endpoint. Updates self._html_events.</p> <p>For more information and usage, see https://chickenstats.com/latest/contribute/contribute/</p> <p>Examples:</p> <p>First, instantiate the Game object</p> <pre><code>&gt;&gt;&gt; game = Game(2023020001)\n</code></pre> <p>Before cleaning the data, game._html_events is None</p> <pre><code>&gt;&gt;&gt; game._html_events  # Returns None\n</code></pre> <p>Once you scrape the data, you can access it in raw form, prior to any processing</p> <pre><code>&gt;&gt;&gt; game._scrape_html_events()  # Scrapes raw data and adds it to game._html_events\n&gt;&gt;&gt; game.html_events  # Returns raw events, prior to processing\n&gt;&gt;&gt; game.html_events_df  # Same, but a Pandas DataFrame\n</code></pre> <p>You then have to manually clean the data</p> <pre><code>&gt;&gt;&gt; game._munge_html_events()\n&gt;&gt;&gt; game.html_events  # Returns cleaned events data\n&gt;&gt;&gt; game.html_events_df  # Same but a Pandas DataFrame\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _munge_html_events(self) -&gt; None:\n    \"\"\"Method to munge list of events from HTML endpoint. Updates self._html_events.\n\n    For more information and usage, see\n    https://chickenstats.com/latest/contribute/contribute/\n\n    Examples:\n        First, instantiate the Game object\n        &gt;&gt;&gt; game = Game(2023020001)\n\n        Before cleaning the data, game._html_events is None\n        &gt;&gt;&gt; game._html_events  # Returns None\n\n        Once you scrape the data, you can access it in raw form, prior to any processing\n        &gt;&gt;&gt; game._scrape_html_events()  # Scrapes raw data and adds it to game._html_events\n        &gt;&gt;&gt; game.html_events  # Returns raw events, prior to processing\n        &gt;&gt;&gt; game.html_events_df  # Same, but a Pandas DataFrame\n\n        You then have to manually clean the data\n        &gt;&gt;&gt; game._munge_html_events()\n        &gt;&gt;&gt; game.html_events  # Returns cleaned events data\n        &gt;&gt;&gt; game.html_events_df  # Same but a Pandas DataFrame\n    \"\"\"\n    game_session = self.session\n\n    if self._html_rosters is None:  # Not covered by tests\n        self._scrape_html_rosters()\n        self._munge_html_rosters()\n\n    roster = self._html_rosters\n\n    # Compiling regex expressions to save time later\n\n    event_team_re = re.compile(r\"^([A-Z]{3}|[A-Z]\\.[A-Z])\")\n    numbers_re = re.compile(r\"#([0-9]{1,2})\")\n    event_players_re = re.compile(r\"([A-Z]{3}\\s+#[0-9]{1,2})\")\n    re.compile(r\"([A-Z]{1,2})\")\n    fo_team_re = re.compile(r\"([A-Z]{3}) WON\")\n    block_team_re = re.compile(r\"BLOCKED BY\\s+([A-Z]{3})\")\n    re.compile(r\"(\\d+)\")\n    zone_re = re.compile(r\"([A-Za-z]{3}). ZONE\")\n    penalty_re = re.compile(r\"([A-Za-z]*|[A-Za-z]*-[A-Za-z]*|[A-Za-z]*\\s+\\(.*\\))\\s*\\(\")\n    penalty_length_re = re.compile(r\"(\\d+) MIN\")\n    shot_re = re.compile(r\",\\s+([A-Za-z]*|[A-Za-z]*-[A-Za-z]*)\\s*,\")\n    distance_re = re.compile(r\"(\\d+) FT\")\n    served_re = re.compile(r\"([A-Z]{3})\\s.+SERVED BY: #([0-9]+)\")\n    # served_drawn_re = re.compile('([A-Z]{3})\\s#.*\\sSERVED BY: #([0-9]+)')\n    drawn_re = re.compile(r\"DRAWN BY: ([A-Z]{3}) #([0-9]+)\")\n\n    actives = {player[\"team_jersey\"]: player for player in roster if player[\"status\"] == \"ACTIVE\"}\n\n    scratches = {player[\"team_jersey\"]: player for player in roster if player[\"status\"] == \"SCRATCH\"}\n\n    for event in self._html_events:\n        non_descripts = {\n            \"PGSTR\": \"PRE-GAME START\",\n            \"PGEND\": \"PRE-GAME END\",\n            \"ANTHEM\": \"NATIONAL ANTHEM\",\n            \"EISTR\": \"EARLY INTERMISSION START\",\n            \"EIEND\": \"EARLY INTERMISSION END\",\n            \"SPC\": \"PUCK IN CROWD\",\n            \"GOFF\": \"GAME OFFICIAL\",\n            \"EGT\": \"EMERGENCY GOALTENDER\",\n        }\n\n        if event[\"event\"] in list(non_descripts.keys()):\n            event[\"description\"] = non_descripts[event[\"event\"]]\n\n            if event[\"event\"] == \"SPC\":\n                event[\"event\"] = \"STOP\"\n\n        # Replacing the team names with three-letter codes from API endpoint\n\n        new_team_names = {\"L.A\": \"LAK\", \"N.J\": \"NJD\", \"S.J\": \"SJS\", \"T.B\": \"TBL\", \"PHX\": \"ARI\"}\n\n        for old_name, new_name in new_team_names.items():\n            event[\"description\"] = event[\"description\"].replace(old_name, new_name).upper()\n\n        event = html_events_fixes(self.game_id, event)\n\n        if event[\"event\"] == \"PEND\" and event[\"time\"] == \"-16:0-120:00\":  # Not covered by tests\n            goals = [x for x in self._html_events if x[\"period\"] == event[\"period\"] and x[\"event\"] == \"GOAL\"]\n\n            if len(goals) == 0:\n                if int(event[\"period\"]) == 4 and event[\"session\"] == \"R\":\n                    event[\"time\"] = event[\"time\"].replace(\"-16:0-120:00\", \"5:000:00\")\n\n                else:\n                    event[\"time\"] = event[\"time\"].replace(\"-16:0-120:00\", \"20:000:00\")\n\n            elif len(goals) &gt; 0:\n                goal = goals[-1]\n\n                event[\"time\"] = event[\"time\"].replace(\"-16:0-120:00\", goal[\"time\"])\n\n        non_team_events = [\n            \"STOP\",\n            \"ANTHEM\",\n            \"PGSTR\",\n            \"PGEND\",\n            \"PSTR\",\n            \"PEND\",\n            \"EISTR\",\n            \"EIEND\",\n            \"GEND\",\n            \"SOC\",\n            \"PBOX\",\n        ]\n\n        if event[\"event\"] not in non_team_events:\n            try:\n                event[\"event_team\"] = re.search(event_team_re, event[\"description\"]).group(1)\n\n                if event[\"event_team\"] == \"LEA\":  # Not covered by tests\n                    event[\"event_team\"] = \"\"\n\n            except AttributeError:\n                continue\n\n        if event[\"event\"] == \"FAC\":\n            try:\n                event[\"event_team\"] = re.search(fo_team_re, event[\"description\"]).group(1)\n\n            except AttributeError:\n                event[\"event_team\"] = None\n\n        if event[\"event\"] == \"BLOCK\" and \"BLOCKED BY\" in event[\"description\"]:\n            event[\"event_team\"] = re.search(block_team_re, event[\"description\"]).group(1)\n\n        event[\"period\"] = int(event[\"period\"])\n\n        time_split = event[\"time\"].split(\":\")\n\n        event[\"period_time\"] = time_split[0] + \":\" + time_split[1][:2]\n\n        event[\"period_seconds\"] = (60 * int(event[\"period_time\"].split(\":\")[0])) + int(\n            event[\"period_time\"].split(\":\")[1]\n        )\n\n        event[\"game_seconds\"] = (int(event[\"period\"]) - 1) * 1200 + event[\"period_seconds\"]\n\n        if event[\"period\"] == 5 and game_session == \"R\":\n            event[\"game_seconds\"] = 3900 + event[\"period_seconds\"]\n\n        event_list = [\"GOAL\", \"SHOT\", \"TAKE\", \"GIVE\"]\n\n        if event[\"event\"] in event_list:\n            event_players = [event[\"event_team\"] + num for num in re.findall(numbers_re, event[\"description\"])]\n\n        else:\n            event_players = re.findall(event_players_re, event[\"description\"])\n\n        if event[\"event\"] == \"FAC\" and event[\"event_team\"] not in event_players[0]:\n            event_players[0], event_players[1] = event_players[1], event_players[0]\n\n        if event[\"event\"] == \"BLOCK\" and \"TEAMMATE\" in event[\"description\"]:\n            event[\"event_team\"] = event[\"description\"][:3]\n\n            event_players.insert(0, \"TEAMMATE\")\n\n        elif event[\"event\"] == \"BLOCK\" and \"BLOCKED BY OTHER\" in event[\"description\"]:  # Not covered by tests\n            event[\"event_team\"] = \"OTHER\"\n\n            event_players.insert(0, \"REFEREE\")\n\n        elif event[\"event\"] == \"BLOCK\" and event[\"event_team\"] not in event_players[0]:\n            event_players[0], event_players[1] = event_players[1], event_players[0]\n\n        for idx, event_player in enumerate(event_players):\n            num = idx + 1\n\n            event_player = event_player.replace(\" #\", \"\")\n\n            if event_player == \"TEAMMATE\":\n                player_name = \"TEAMMATE\"\n                eh_id = \"TEAMMATE\"\n                position = None\n\n            elif event_player == \"REFEREE\":  # Not covered by tests\n                player_name = \"REFEREE\"\n                eh_id = \"REFEREE\"\n                position = None\n\n            else:\n                try:\n                    player_name = actives[event_player][\"player_name\"]\n                    eh_id = actives[event_player][\"eh_id\"]\n                    position = actives[event_player][\"position\"]\n\n                except KeyError:\n                    player_name = scratches[event_player][\"player_name\"]\n                    eh_id = scratches[event_player][\"eh_id\"]\n                    position = scratches[event_player][\"position\"]\n\n            new_values = {\n                f\"player_{num}\": player_name,\n                f\"player_{num}_eh_id\": eh_id,\n                f\"player_{num}_position\": position,\n            }\n\n            event.update(new_values)\n\n        try:\n            event[\"zone\"] = re.search(zone_re, event[\"description\"]).group(1).upper()\n\n            if \"BLOCK\" in event[\"event\"] and event[\"zone\"] == \"DEF\":\n                event[\"zone\"] = \"OFF\"\n\n        except AttributeError:\n            pass\n\n        if event[\"event\"] == \"PENL\":\n            if (\"TEAM\" in event[\"description\"] and \"SERVED BY\" in event[\"description\"]) or (\n                \"HEAD COACH\" in event[\"description\"]\n            ):\n                event[\"player_1\"] = \"BENCH\"\n\n                event[\"player_1_eh_id\"] = \"BENCH\"\n\n                event[\"player_1_position\"] = None\n\n                try:\n                    served_by = re.search(served_re, event[\"description\"])\n\n                    name = served_by.group(1) + str(served_by.group(2))\n\n                except AttributeError:  # Not covered by tests\n                    try:\n                        drawn_by = re.search(drawn_re, event[\"description\"])\n\n                        name = drawn_by.group(1) + str(drawn_by.group(2))\n\n                    except AttributeError:\n                        continue\n\n                event[\"player_2\"] = actives[name][\"player_name\"]\n\n                event[\"player_2_eh_id\"] = actives[name][\"eh_id\"]\n\n                event[\"player_2_position\"] = actives[name][\"position\"]\n\n            if \"SERVED BY\" in event[\"description\"] and \"DRAWN BY\" in event[\"description\"]:\n                try:\n                    drawn_by = re.search(drawn_re, event[\"description\"])\n\n                    drawn_name = drawn_by.group(1) + str(drawn_by.group(2))\n\n                    event[\"player_2\"] = actives[drawn_name][\"player_name\"]\n\n                    event[\"player_2_eh_id\"] = actives[drawn_name][\"eh_id\"]\n\n                    event[\"player_2_position\"] = actives[drawn_name][\"position\"]\n\n                    if event[\"player_1_eh_id\"] == event[\"player_2_eh_id\"]:\n                        event[\"player_1\"] = \"BENCH\"\n                        event[\"player_1_eh_id\"] = \"BENCH\"\n                        event[\"player_1_position\"] = None\n\n                    served_by = re.search(served_re, event[\"description\"])\n\n                    served_name = served_by.group(1) + str(served_by.group(2))\n\n                    event[\"player_3\"] = actives[served_name][\"player_name\"]\n\n                    event[\"player_3_eh_id\"] = actives[served_name][\"eh_id\"]\n\n                    event[\"player_3_position\"] = actives[served_name][\"position\"]\n\n                    if \"TEAM\" in event[\"description\"] or \"HEAD COACH\" in event[\"description\"]:\n                        event[\"player_2\"], event[\"player_3\"] = (event[\"player_3\"], event[\"player_2\"])\n\n                        event[\"player_2_eh_id\"], event[\"player_3_eh_id\"] = (\n                            event[\"player_3_eh_id\"],\n                            event[\"player_2_eh_id\"],\n                        )\n\n                        event[\"player_2_position\"], event[\"player_3_position\"] = (\n                            event[\"player_3_position\"],\n                            event[\"player_2_position\"],\n                        )\n\n                except AttributeError:  # Not covered by tests\n                    pass\n\n            elif \"SERVED BY\" in event[\"description\"]:\n                try:\n                    served_by = re.search(served_re, event[\"description\"])\n\n                    served_name = served_by.group(1) + str(served_by.group(2))\n\n                    event[\"player_2\"] = actives[served_name][\"player_name\"]\n\n                    event[\"player_2_eh_id\"] = actives[served_name][\"eh_id\"]\n\n                    event[\"player_2_position\"] = actives[served_name][\"position\"]\n\n                except AttributeError:  # Not covered by tests\n                    pass\n\n            elif \"DRAWN BY\" in event[\"description\"]:\n                try:\n                    drawn_by = re.search(drawn_re, event[\"description\"])\n\n                    drawn_name = drawn_by.group(1) + str(drawn_by.group(2))\n\n                    event[\"player_2\"] = actives[drawn_name][\"player_name\"]\n\n                    event[\"player_2_eh_id\"] = actives[drawn_name][\"eh_id\"]\n\n                    event[\"player_2_position\"] = actives[drawn_name][\"position\"]\n\n                except AttributeError:  # Not covered by tests\n                    pass\n\n            if \"player_1\" not in event:  # Not covered by tests\n                new_values = {\"player_1\": \"BENCH\", \"player_1_eh_id\": \"BENCH\", \"player_1_position\": \"\"}\n\n                event.update(new_values)\n\n            try:\n                event[\"penalty_length\"] = int(re.search(penalty_length_re, event[\"description\"]).group(1))\n\n            except TypeError:  # Not covered by tests\n                pass\n\n            try:\n                event[\"penalty\"] = re.search(penalty_re, event[\"description\"]).group(1).upper()\n\n            except AttributeError:  # Not covered by tests\n                continue\n\n            if \"INTERFERENCE\" in event[\"description\"] and \"GOALKEEPER\" in event[\"description\"]:\n                event[\"penalty\"] = \"GOALKEEPER INTERFERENCE\"\n\n            elif \"CROSS\" in event[\"description\"] and \"CHECKING\" in event[\"description\"]:\n                event[\"penalty\"] = \"CROSS-CHECKING\"\n\n            elif (\n                \"DELAY\" in event[\"description\"]\n                and \"GAME\" in event[\"description\"]\n                and \"PUCK OVER\" in event[\"description\"]\n            ):\n                event[\"penalty\"] = \"DELAY OF GAME - PUCK OVER GLASS\"\n\n            elif (\n                \"DELAY\" in event[\"description\"]\n                and \"GAME\" in event[\"description\"]\n                and \"FO VIOL\" in event[\"description\"]\n            ):  # Not covered by tests\n                event[\"penalty\"] = \"DELAY OF GAME - FACEOFF VIOLATION\"\n\n            elif (\n                \"DELAY\" in event[\"description\"]\n                and \"GAME\" in event[\"description\"]\n                and \"EQUIPMENT\" in event[\"description\"]\n            ):  # Not covered by tests\n                event[\"penalty\"] = \"DELAY OF GAME - EQUIPMENT\"\n\n            elif (\n                \"DELAY\" in event[\"description\"]\n                and \"GAME\" in event[\"description\"]\n                and \"UNSUCC\" in event[\"description\"]\n            ):\n                event[\"penalty\"] = \"DELAY OF GAME - UNSUCCESSFUL CHALLENGE\"\n\n            elif (\n                \"DELAY\" in event[\"description\"]\n                and \"GAME\" in event[\"description\"]\n                and \"SMOTHERING\" in event[\"description\"]\n            ):  # Not covered by tests\n                event[\"penalty\"] = \"DELAY OF GAME - SMOTHERING THE PUCK\"\n\n            elif (\n                \"ILLEGAL\" in event[\"description\"]\n                and \"CHECK\" in event[\"description\"]\n                and \"HEAD\" in event[\"description\"]\n            ):  # Not covered by tests\n                event[\"penalty\"] = \"ILLEGAL CHECK TO HEAD\"\n\n            elif (\n                \"HIGH-STICKING\" in event[\"description\"] and \"- DOUBLE\" in event[\"description\"]\n            ):  # Not covered by tests\n                event[\"penalty\"] = \"HIGH-STICKING - DOUBLE MINOR\"\n\n            elif \"GAME MISCONDUCT\" in event[\"description\"]:\n                event[\"penalty\"] = \"GAME MISCONDUCT\"\n\n            elif \"MATCH PENALTY\" in event[\"description\"]:\n                event[\"penalty\"] = \"MATCH PENALTY\"\n\n            elif \"NET\" in event[\"description\"] and \"DISPLACED\" in event[\"description\"]:  # Not covered by tests\n                event[\"penalty\"] = \"DISPLACED NET\"\n\n            elif (\n                \"THROW\" in event[\"description\"]\n                and \"OBJECT\" in event[\"description\"]\n                and \"AT PUCK\" in event[\"description\"]\n            ):  # Not covered by tests\n                event[\"penalty\"] = \"THROWING OBJECT AT PUCK\"\n\n            elif (\n                \"INSTIGATOR\" in event[\"description\"] and \"FACE SHIELD\" in event[\"description\"]\n            ):  # Not covered by tests\n                event[\"penalty\"] = \"INSTIGATOR - FACE SHIELD\"\n\n            elif \"GOALIE LEAVE CREASE\" in event[\"description\"]:\n                event[\"penalty\"] = \"LEAVING THE CREASE\"\n\n            elif \"REMOVING\" in event[\"description\"] and \"HELMET\" in event[\"description\"]:  # Not covered by tests\n                event[\"penalty\"] = \"REMOVING OPPONENT HELMET\"\n\n            elif \"BROKEN\" in event[\"description\"] and \"STICK\" in event[\"description\"]:  # Not covered by tests\n                event[\"penalty\"] = \"HOLDING BROKEN STICK\"\n\n            elif \"HOOKING\" in event[\"description\"] and \"BREAKAWAY\" in event[\"description\"]:\n                event[\"penalty\"] = \"HOOKING - BREAKAWAY\"\n\n            elif \"HOLDING\" in event[\"description\"] and \"BREAKAWAY\" in event[\"description\"]:\n                event[\"penalty\"] = \"HOLDING - BREAKAWAY\"\n\n            elif \"TRIPPING\" in event[\"description\"] and \"BREAKAWAY\" in event[\"description\"]:  # Not covered by tests\n                event[\"penalty\"] = \"TRIPPING - BREAKAWAY\"\n\n            elif \"SLASH\" in event[\"description\"] and \"BREAKAWAY\" in event[\"description\"]:  # Not covered by tests\n                event[\"penalty\"] = \"SLASHING - BREAKAWAY\"\n\n            elif \"TEAM TOO MANY\" in event[\"description\"]:\n                event[\"penalty\"] = \"TOO MANY MEN ON THE ICE\"\n\n            elif \"HOLDING\" in event[\"description\"] and \"STICK\" in event[\"description\"]:\n                event[\"penalty\"] = \"HOLDING THE STICK\"\n\n            elif \"THROWING\" in event[\"description\"] and \"STICK\" in event[\"description\"]:  # Not covered by tests\n                event[\"penalty\"] = \"THROWING STICK\"\n\n            elif \"CLOSING\" in event[\"description\"] and \"HAND\" in event[\"description\"]:\n                event[\"penalty\"] = \"CLOSING HAND ON PUCK\"\n\n            elif \"ABUSE\" in event[\"description\"] and \"OFFICIALS\" in event[\"description\"]:\n                event[\"penalty\"] = \"ABUSE OF OFFICIALS\"\n\n            elif \"UNSPORTSMANLIKE CONDUCT\" in event[\"description\"]:\n                event[\"penalty\"] = \"UNSPORTSMANLIKE CONDUCT\"\n\n            elif (\n                \"PUCK\" in event[\"description\"]\n                and \"THROWN\" in event[\"description\"]\n                and \"FWD\" in event[\"description\"]\n            ):  # Not covered by tests\n                event[\"penalty\"] = \"PUCK THROWN FORWARD - GOALKEEPER\"\n\n            elif \"DELAY\" in event[\"description\"] and \"GAME\" in event[\"description\"]:\n                event[\"penalty\"] = \"DELAY OF GAME\"\n\n            elif event[\"penalty\"] == \"MISCONDUCT\":\n                event[\"penalty\"] = \"GAME MISCONDUCT\"\n\n        shot_events = [\"GOAL\", \"SHOT\", \"MISS\", \"BLOCK\"]\n\n        if event[\"event\"] in shot_events:\n            try:\n                event[\"shot_type\"] = re.search(shot_re, event[\"description\"]).group(1).upper()\n\n            except AttributeError:\n                event[\"shot_type\"] = \"WRIST\"\n\n                pass\n\n            if \"BETWEEN LEGS\" in event[\"description\"]:  # Not covered by tests\n                event[\"shot_type\"] = \"BETWEEN LEGS\"\n\n        try:\n            event[\"pbp_distance\"] = int(re.search(distance_re, event[\"description\"]).group(1))\n\n        except AttributeError:\n            if event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]:\n                event[\"pbp_distance\"] = 0\n\n            pass\n\n    self._html_events = sorted(self._html_events, key=lambda k: (k[\"event_idx\"]))\n\n    final_events = []\n\n    for event in self._html_events:\n        if \"period_seconds\" not in event and \"time\" in event:\n            event[\"period\"] = int(event[\"period\"])\n\n            time_split = event[\"time\"].split(\":\")\n\n            event[\"period_time\"] = time_split[0] + \":\" + time_split[1][:2]\n\n            event[\"period_seconds\"] = (60 * int(event[\"period_time\"].split(\":\")[0])) + int(\n                event[\"period_time\"].split(\":\")[1]\n            )\n\n        if \"game_seconds\" not in event:\n            event[\"game_seconds\"] = (int(event[\"period\"]) - 1) * 1200 + event[\"period_seconds\"]\n\n            if event[\"period\"] == 5 and event[\"session\"] == \"R\":\n                event[\"game_seconds\"] = 3900 + event[\"period_seconds\"]\n\n        if \"version\" not in event:\n            other_events = [\n                x\n                for x in self._html_events\n                # if x != event\n                if x[\"event\"] == event[\"event\"]\n                and x.get(\"game_seconds\") == event[\"game_seconds\"]\n                and x[\"period\"] == event[\"period\"]\n                and x.get(\"player_1_eh_id\") is not None\n                and event.get(\"player_1_eh_id\") is not None\n                and x[\"player_1_eh_id\"] == event[\"player_1_eh_id\"]\n            ]\n\n            version = 1\n\n            event[\"version\"] = version\n\n            if len(other_events) &gt; 0:\n                for idx, _other_event in enumerate(other_events):\n                    if event == other_events[0]:\n                        continue\n\n                    version = idx + 1\n                    event[\"version\"] = version\n\n        final_events.append(HTMLEvent.model_validate(event).model_dump())\n\n    self._html_events = final_events\n</code></pre>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Game._scrape_html_rosters","title":"_scrape_html_rosters","text":"<pre><code>_scrape_html_rosters()\n</code></pre> <p>Method for scraping players from HTML endpoint. Updates self._html_rosters.</p> <p>For more information and usage, see https://chickenstats.com/latest/contribute/contribute/</p> <p>Examples:</p> <p>First, instantiate the Game object</p> <pre><code>&gt;&gt;&gt; game = Game(2023020001)\n</code></pre> <p>Before cleaning the data, game._html_rosters is None</p> <pre><code>&gt;&gt;&gt; game._html_rosters  # Returns None\n</code></pre> <p>Once you scrape the data, you can access it in raw form, prior to any processing</p> <pre><code>&gt;&gt;&gt; game._scrape_html_rosters()  # Scrapes raw data and adds it to game._html_rosters\n&gt;&gt;&gt; game.html_rosters  # Returns raw rosters, prior to processing\n&gt;&gt;&gt; game.html_rosters_df  # Same, but a Pandas DataFrame\n</code></pre> <p>You then have to manually clean the data</p> <pre><code>&gt;&gt;&gt; game._munge_html_rosters()\n&gt;&gt;&gt; game.html_rosters  # Returns cleaned rosters data\n&gt;&gt;&gt; game.html_rosters_df  # Same but a Pandas DataFrame\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _scrape_html_rosters(self) -&gt; None:\n    \"\"\"Method for scraping players from HTML endpoint. Updates self._html_rosters.\n\n    For more information and usage, see\n    https://chickenstats.com/latest/contribute/contribute/\n\n    Examples:\n        First, instantiate the Game object\n        &gt;&gt;&gt; game = Game(2023020001)\n\n        Before cleaning the data, game._html_rosters is None\n        &gt;&gt;&gt; game._html_rosters  # Returns None\n\n        Once you scrape the data, you can access it in raw form, prior to any processing\n        &gt;&gt;&gt; game._scrape_html_rosters()  # Scrapes raw data and adds it to game._html_rosters\n        &gt;&gt;&gt; game.html_rosters  # Returns raw rosters, prior to processing\n        &gt;&gt;&gt; game.html_rosters_df  # Same, but a Pandas DataFrame\n\n        You then have to manually clean the data\n        &gt;&gt;&gt; game._munge_html_rosters()\n        &gt;&gt;&gt; game.html_rosters  # Returns cleaned rosters data\n        &gt;&gt;&gt; game.html_rosters_df  # Same but a Pandas DataFrame\n    \"\"\"\n    # URL and scraping url\n\n    url = self.html_rosters_endpoint\n\n    s = self._requests_session\n\n    try:\n        page = s.get(url)\n    except RetryError:  # Not covered by tests\n        return None\n\n    # Continue if status code is bad\n\n    if page.status_code == 404:  # Not covered by tests\n        return None\n\n    # Reading the HTML file using beautiful soup package\n\n    soup = BeautifulSoup(page.content.decode(\"ISO-8859-1\"), \"lxml\", multi_valued_attributes=None)\n\n    # Information for reading the HTML data\n\n    td_dict = {\"align\": \"center\", \"class\": [\"teamHeading + border\", \"teamHeading + border \"], \"width\": \"50%\"}\n\n    # Finding all active players in the html file\n\n    teamsoup = soup.find_all(\"td\", td_dict)\n\n    # Dictionary for finding each team's table in the HTML file\n\n    table_dict = {\n        \"align\": \"center\",\n        \"border\": \"0\",\n        \"cellpadding\": \"0\",\n        \"cellspacing\": \"0\",\n        \"width\": \"100%\",\n        \"xmlns:ext\": \"\",\n    }\n\n    # Dictionary to collect the team names\n\n    team_names = {}\n\n    # Dictionary to collect the team tables from the HTML data for iterating\n\n    team_soup_list = []\n\n    # List of teams for iterating\n\n    team_list = [\"away\", \"home\"]\n\n    # List to collect the player dictionaries during iteration\n\n    player_list = []\n\n    # Iterating through the home and away teams to collect names and tables\n\n    for idx, team in enumerate(team_list):\n        # Collecting team names\n\n        team_name = unidecode(teamsoup[idx].get_text().encode(\"latin-1\").decode(\"utf-8\")).upper()\n\n        # Correcting the Coyotes team name\n\n        if team_name == \"PHOENIX COYOTES\":\n            team_name = \"ARIZONA COYOTES\"\n\n        team_names.update({team: team_name})\n\n        # Collecting tables of active players\n\n        team_soup_list.append((soup.find_all(\"table\", table_dict))[idx].find_all(\"td\"))\n\n    # Iterating through the team's tables of active players\n\n    for idx, team_soup in enumerate(team_soup_list):\n        table_dict = {\n            \"align\": \"center\",\n            \"border\": \"0\",\n            \"cellpadding\": \"0\",\n            \"cellspacing\": \"0\",\n            \"width\": \"100%\",\n            \"xmlns:ext\": \"\",\n        }\n\n        stuff = soup.find_all(\"table\", table_dict)[idx].find_all(\"td\", {\"class\": \"bold\"})\n\n        starters = list(np.reshape(stuff, (int(len(stuff) / 3), 3))[:, 2])\n\n        # Getting length to create numpy array\n\n        length = int(len(team_soup) / 3)\n\n        # Creating a numpy array from the data, chopping off the headers to create my own\n\n        active_array = np.array(team_soup).reshape(length, 3)\n\n        # Getting original headers\n\n        og_headers = active_array[0]\n\n        if \"Name\" not in og_headers and \"Nom/Name\" not in og_headers:  # Not covered by tests\n            continue\n\n        # Chop off the headers to create my own\n\n        actives = active_array[1:]\n\n        # Iterating through each player, or row in the array\n\n        for player in actives:\n            # New headers for the data. Original headers | ['#', 'Pos', 'Name']\n\n            if len(player) == 3:\n                headers = [\"jersey\", \"position\", \"player_name\"]\n\n            # Sometimes headers are missing\n\n            else:  # Not covered by tests\n                headers = [\"jersey\", \"player_name\"]\n\n            # Creating dictionary with headers as keys from the player data\n\n            player = dict(zip(headers, player, strict=False))\n\n            # Adding new values to the player dictionary\n\n            new_values = {\n                \"team_name\": team_names.get(team_list[idx]),\n                \"team_venue\": team_list[idx].upper(),\n                \"status\": \"ACTIVE\",\n            }\n\n            if player[\"player_name\"] in starters:\n                player[\"starter\"] = 1\n\n            else:\n                player[\"starter\"] = 0\n\n            player[\"player_name\"] = (\n                re.sub(r\"\\(\\s?(.*)\\)\", \"\", player[\"player_name\"]).strip().encode(\"latin-1\").decode(\"utf-8\").upper()\n            )\n\n            player[\"player_name\"] = unidecode(player[\"player_name\"])\n\n            if \"position\" not in headers:  # Not covered by tests\n                player[\"position\"] = None\n\n            # Update the player's dictionary with new values\n\n            player.update(new_values)\n\n            # Append player dictionary to list of players\n\n            player_list.append(player)\n\n    # Check if scratches are present\n\n    if len(soup.find_all(\"table\", table_dict)) &gt; 2:\n        # If scratches are present, iterate through the team's scratch tables\n\n        for idx, team in enumerate(team_list):\n            # Getting team's scratches from HTML\n\n            scratch_soup = (soup.find_all(\"table\", table_dict))[idx + 2].find_all(\"td\")\n\n            # Checking to see if there is at least one set of scratches (first row are headers)\n\n            if len(scratch_soup) &gt; 1:\n                # Getting the number of scratches\n\n                length = int(len(scratch_soup) / 3)\n\n                # Creating numpy array of scratches, removing headers\n\n                scratches = np.array(scratch_soup).reshape(length, 3)[1:]\n\n                # Iterating through the array\n\n                for player in scratches:\n                    # New headers for the data. Original headers | ['#', 'Pos', 'Name']\n\n                    if len(player) == 3:\n                        headers = [\"jersey\", \"position\", \"player_name\"]\n\n                    # Sometimes headers are missing\n\n                    else:  # Not covered by tests\n                        headers = [\"jersey\", \"player_name\"]\n\n                    # Creating dictionary with headers as keys from the player data\n\n                    player = dict(zip(headers, player, strict=False))\n\n                    # Adding new values to the player dictionary\n\n                    new_values = {\n                        \"team_name\": team_names.get(team_list[idx]),\n                        \"team_venue\": team_list[idx].upper(),\n                        \"starter\": 0,\n                        \"status\": \"SCRATCH\",\n                    }\n\n                    if \"position\" not in headers:  # Not covered by tests\n                        player[\"position\"] = None\n\n                    player[\"player_name\"] = (\n                        re.sub(r\"\\(\\s?(.*)\\)\", \"\", player[\"player_name\"])\n                        .strip()\n                        .encode(\"latin-1\")\n                        .decode(\"utf-8\")\n                        .upper()\n                    )\n\n                    player[\"player_name\"] = unidecode(player[\"player_name\"])\n\n                    # Updating player dictionary\n\n                    player.update(new_values)\n\n                    # Appending the player dictionary to the player list\n\n                    player_list.append(player)\n\n    self._html_rosters = player_list\n</code></pre>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Game._munge_html_rosters","title":"_munge_html_rosters","text":"<pre><code>_munge_html_rosters()\n</code></pre> <p>Method to munge list of players from HTML endpoint. Updates self._html_rosters.</p> <p>For more information and usage, see https://chickenstats.com/latest/contribute/contribute/</p> <p>Examples:</p> <p>First, instantiate the Game object</p> <pre><code>&gt;&gt;&gt; game = Game(2023020001)\n</code></pre> <p>Before cleaning the data, game._html_rosters is None</p> <pre><code>&gt;&gt;&gt; game._html_rosters  # Returns None\n</code></pre> <p>Once you scrape the data, you can access it in raw form, prior to any processing</p> <pre><code>&gt;&gt;&gt; game._scrape_html_rosters()  # Scrapes raw data and adds it to game._html_rosters\n&gt;&gt;&gt; game.html_rosters  # Returns raw rosters, prior to processing\n&gt;&gt;&gt; game.html_rosters_df  # Same, but a Pandas DataFrame\n</code></pre> <p>You then have to manually clean the data</p> <pre><code>&gt;&gt;&gt; game._munge_html_rosters()\n&gt;&gt;&gt; game.html_rosters  # Returns cleaned rosters data\n&gt;&gt;&gt; game.html_rosters_df  # Same but a Pandas DataFrame\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _munge_html_rosters(self) -&gt; None:\n    \"\"\"Method to munge list of players from HTML endpoint. Updates self._html_rosters.\n\n    For more information and usage, see\n    https://chickenstats.com/latest/contribute/contribute/\n\n    Examples:\n        First, instantiate the Game object\n        &gt;&gt;&gt; game = Game(2023020001)\n\n        Before cleaning the data, game._html_rosters is None\n        &gt;&gt;&gt; game._html_rosters  # Returns None\n\n        Once you scrape the data, you can access it in raw form, prior to any processing\n        &gt;&gt;&gt; game._scrape_html_rosters()  # Scrapes raw data and adds it to game._html_rosters\n        &gt;&gt;&gt; game.html_rosters  # Returns raw rosters, prior to processing\n        &gt;&gt;&gt; game.html_rosters_df  # Same, but a Pandas DataFrame\n\n        You then have to manually clean the data\n        &gt;&gt;&gt; game._munge_html_rosters()\n        &gt;&gt;&gt; game.html_rosters  # Returns cleaned rosters data\n        &gt;&gt;&gt; game.html_rosters_df  # Same but a Pandas DataFrame\n    \"\"\"\n    season = self.season\n    game_session = self.session\n\n    # Iterating through each player to change information\n\n    final_rosters = []\n\n    for player in self._html_rosters:\n        # Fixing jersey data type\n\n        player = html_rosters_fixes(self.game_id, player)\n\n        player[\"jersey\"] = int(player[\"jersey\"])\n\n        # Adding new values in a batch\n\n        new_values = {\"season\": int(season), \"session\": game_session, \"game_id\": self.game_id}\n\n        player.update(new_values)\n\n        player[\"player_name\"] = (\n            player[\"player_name\"]\n            .replace(\"ALEXANDRE\", \"ALEX\")\n            .replace(\"ALEXANDER\", \"ALEX\")\n            .replace(\"CHRISTOPHER\", \"CHRIS\")\n        )\n\n        player[\"player_name\"] = correct_names_dict.get(player[\"player_name\"], player[\"player_name\"])\n\n        # Creating Evolving Hockey ID\n\n        player[\"eh_id\"] = unidecode(player[\"player_name\"])\n\n        name_split = player[\"eh_id\"].split(\" \", maxsplit=1)\n\n        player[\"eh_id\"] = f\"{name_split[0]}.{name_split[1]}\"\n\n        player[\"eh_id\"] = player[\"eh_id\"].replace(\"..\", \".\")\n\n        # Correcting Evolving Hockey IDs for duplicates\n\n        duplicates = {\n            \"SEBASTIAN.AHO\": player[\"position\"] == \"D\",\n            \"COLIN.WHITE\": player[\"season\"] &gt;= 20162017,\n            \"SEAN.COLLINS\": player[\"position\"] != \"D\",\n            \"ALEX.PICARD\": player[\"position\"] != \"D\",\n            \"ERIK.GUSTAFSSON\": player[\"season\"] &gt;= 20152016,\n            \"MIKKO.LEHTONEN\": player[\"season\"] &gt;= 20202021,\n            \"NATHAN.SMITH\": player[\"season\"] &gt;= 20212022,\n            \"DANIIL.TARASOV\": player[\"position\"] == \"G\",\n        }\n\n        # Iterating through the duplicate names and conditions\n\n        for duplicate_name, condition in duplicates.items():\n            if player[\"eh_id\"] == duplicate_name and condition:\n                player[\"eh_id\"] = f\"{duplicate_name}2\"\n\n        # Something weird with Colin White\n\n        if player[\"eh_id\"] == \"COLIN.\":  # Not covered by tests\n            player[\"eh_id\"] = \"COLIN.WHITE2\"\n\n        player[\"team\"] = team_codes.get(player[\"team_name\"])\n\n        player[\"team_jersey\"] = f\"{player['team']}{player['jersey']}\"\n\n        final_rosters.append(HTMLRosterPlayer.model_validate(player).model_dump())\n\n    self._html_rosters = final_rosters\n\n    self._html_rosters = sorted(self._html_rosters, key=lambda k: (k[\"team_venue\"], k[\"status\"], k[\"player_name\"]))\n</code></pre>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Game._combine_events","title":"_combine_events","text":"<pre><code>_combine_events()\n</code></pre> <p>Method to combine API and HTML events. Updates self._play_by_play.</p> <p>For more information and usage, see https://chickenstats.com/latest/contribute/contribute/</p> <p>Examples:</p> <p>First instantiate the Game object</p> <pre><code>&gt;&gt;&gt; game = Game(2023020001)\n</code></pre> <p>Requires all other data sources to be clean</p> <p>HTML rosters</p> <pre><code>&gt;&gt;&gt; game._scrape_html_rosters()\n&gt;&gt;&gt; game._munge_html_rosters()\n</code></pre> <p>API rosters</p> <pre><code>&gt;&gt;&gt; game._munge_api_rosters()\n</code></pre> <p>Combined rosters</p> <pre><code>&gt;&gt;&gt; game._combine_rosters()\n</code></pre> <p>HTML events</p> <pre><code>&gt;&gt;&gt; game._scrape_html_events()  # Scrapes events from HTML feed\n&gt;&gt;&gt; game._munge_html_events()  # Preps raw events, updates game._html_events\n</code></pre> <p>API events</p> <pre><code>&gt;&gt;&gt; game._munge_api_events()  # Preps raw events, updates game._api_events\n</code></pre> <p>Shifts and changes</p> <pre><code>&gt;&gt;&gt; game._scrape_html_events()  # Scrapes shifts from HTML feed\n&gt;&gt;&gt; game._munge_shifts()  # Preps raw shifts, updates game._shifts\n&gt;&gt;&gt; game._munge_changes()  # Preps changes\n</code></pre> <p>Combines them all</p> <pre><code>&gt;&gt;&gt; game._combine_events()  # Combines raw events, into game._play_by_play\n</code></pre> <p>Data can then be manually cleaned</p> <pre><code>&gt;&gt;&gt; game._munge_play_by_play()\n&gt;&gt;&gt; game._prep_xg()\n&gt;&gt;&gt; game._play_by_play  # Returns cleaned data\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _combine_events(self) -&gt; None:\n    \"\"\"Method to combine API and HTML events. Updates self._play_by_play.\n\n    For more information and usage, see\n    https://chickenstats.com/latest/contribute/contribute/\n\n    Examples:\n        First instantiate the Game object\n        &gt;&gt;&gt; game = Game(2023020001)\n\n        Requires all other data sources to be clean\n\n        HTML rosters\n        &gt;&gt;&gt; game._scrape_html_rosters()\n        &gt;&gt;&gt; game._munge_html_rosters()\n\n        API rosters\n        &gt;&gt;&gt; game._munge_api_rosters()\n\n        Combined rosters\n        &gt;&gt;&gt; game._combine_rosters()\n\n        HTML events\n        &gt;&gt;&gt; game._scrape_html_events()  # Scrapes events from HTML feed\n        &gt;&gt;&gt; game._munge_html_events()  # Preps raw events, updates game._html_events\n\n        API events\n        &gt;&gt;&gt; game._munge_api_events()  # Preps raw events, updates game._api_events\n\n        Shifts and changes\n        &gt;&gt;&gt; game._scrape_html_events()  # Scrapes shifts from HTML feed\n        &gt;&gt;&gt; game._munge_shifts()  # Preps raw shifts, updates game._shifts\n        &gt;&gt;&gt; game._munge_changes()  # Preps changes\n\n        Combines them all\n        &gt;&gt;&gt; game._combine_events()  # Combines raw events, into game._play_by_play\n\n        Data can then be manually cleaned\n        &gt;&gt;&gt; game._munge_play_by_play()\n        &gt;&gt;&gt; game._prep_xg()\n        &gt;&gt;&gt; game._play_by_play  # Returns cleaned data\n    \"\"\"\n    html_events = self._html_events\n    api_events = self._api_events\n\n    game_list = []\n\n    for event in html_events:\n        if event[\"event\"] == \"EGPID\":  # Not covered by tests\n            continue\n\n        event_data = {}\n\n        event_data.update(event)\n\n        non_team_events = [\n            \"STOP\",\n            \"ANTHEM\",\n            \"PGSTR\",\n            \"PGEND\",\n            \"PSTR\",\n            \"PEND\",\n            \"EISTR\",\n            \"EIEND\",\n            \"GEND\",\n            \"SOC\",\n            \"EGT\",\n            \"PBOX\",\n            \"PRDY\",\n            \"POFF\",\n            \"GOFF\",\n        ]\n\n        if event[\"event\"] in non_team_events:\n            api_matches = [\n                x\n                for x in api_events\n                if x[\"event\"] == event[\"event\"]\n                and x[\"period\"] == event[\"period\"]\n                and x[\"period_seconds\"] == event[\"period_seconds\"]\n                and x[\"version\"] == event[\"version\"]\n            ]\n\n        elif event[\"event\"] == \"CHL\" and event.get(\"event_team\") is None:  # Not covered by tests\n            api_matches = [\n                x\n                for x in api_events\n                if x[\"event\"] == event[\"event\"]\n                and x[\"period\"] == event[\"period\"]\n                and x[\"period_seconds\"] == event[\"period_seconds\"]\n                and x[\"version\"] == event[\"version\"]\n            ]\n\n        elif event[\"event\"] == \"CHL\" and event.get(\"event_team\") is not None:\n            api_matches = [\n                x\n                for x in api_events\n                if x[\"event\"] == event[\"event\"]\n                and x.get(\"event_team\") is not None\n                and event.get(\"event_team\") is not None\n                and x[\"event_team\"] == event[\"event_team\"]\n                and x[\"period\"] == event[\"period\"]\n                and x[\"period_seconds\"] == event[\"period_seconds\"]\n                and x[\"version\"] == event[\"version\"]\n            ]\n\n        elif event[\"event\"] == \"PENL\":\n            api_matches = [\n                x\n                for x in api_events\n                if x[\"event\"] == event[\"event\"]\n                and x[\"event_team\"] == event[\"event_team\"]\n                and x[\"player_1_eh_id\"] == event[\"player_1_eh_id\"]\n                and x.get(\"player_2_eh_id\") == event.get(\"player_2_eh_id\")\n                and x.get(\"player_3_eh_id\") == event.get(\"player_3_eh_id\")\n                and x[\"period\"] == event[\"period\"]\n                and x[\"period_seconds\"] == event[\"period_seconds\"]\n            ]\n\n        elif event[\"event\"] == \"BLOCK\" and event[\"player_1\"] == \"TEAMMATE\":  # Not covered by tests\n            api_matches = [\n                x\n                for x in api_events\n                if x[\"event\"] == event[\"event\"]\n                and x.get(\"event_team\") is not None\n                and event.get(\"event_team\") is not None\n                and x[\"event_team\"] == event[\"event_team\"]\n                and x[\"period\"] == event[\"period\"]\n                and x[\"period_seconds\"] == event[\"period_seconds\"]\n                and x[\"version\"] == event[\"version\"]\n            ]\n\n        else:\n            api_matches = [\n                x\n                for x in api_events\n                if x[\"event\"] == event[\"event\"]\n                and x.get(\"event_team\") is not None\n                and event.get(\"event_team\") is not None\n                and x[\"event_team\"] == event[\"event_team\"]\n                and x.get(\"player_1_eh_id\") is not None\n                and event.get(\"player_1_eh_id\") is not None\n                and x[\"player_1_eh_id\"] == event[\"player_1_eh_id\"]\n                and x[\"period\"] == event[\"period\"]\n                and x[\"period_seconds\"] == event[\"period_seconds\"]\n                and x[\"version\"] == event[\"version\"]\n            ]\n\n        if event[\"event\"] == \"FAC\" and len(api_matches) == 0:  # Not covered by tests\n            api_matches = [\n                x\n                for x in api_events\n                if x[\"event\"] == event[\"event\"]\n                and x[\"period\"] == event[\"period\"]\n                and x[\"period_seconds\"] == event[\"period_seconds\"]\n                and x[\"version\"] == event[\"version\"]\n            ]\n\n        if len(api_matches) == 0:\n            game_list.append(event_data)\n\n            continue\n\n        elif len(api_matches) == 1:\n            api_match = api_matches[0]\n\n            new_values = {\n                \"event_idx_api\": api_match.get(\"event_idx\"),\n                \"coords_x\": api_match.get(\"coords_x\"),\n                \"coords_y\": api_match.get(\"coords_y\"),\n                \"player_1_eh_id_api\": api_match.get(\"player_1_eh_id\"),\n                \"player_1_api_id\": api_match.get(\"player_1_api_id\"),\n                \"player_1_type\": api_match.get(\"player_1_type\"),\n                \"player_2_eh_id_api\": api_match.get(\"player_2_eh_id\"),\n                \"player_2_api_id\": api_match.get(\"player_2_api_id\"),\n                \"player_2_type\": api_match.get(\"player_2_type\"),\n                \"player_3_eh_id_api\": api_match.get(\"player_3_eh_id\"),\n                \"player_3_api_id\": api_match.get(\"player_3_api_id\"),\n                \"player_3_type\": api_match.get(\"player_3_type\"),\n                \"version_api\": api_match.get(\"version\", 1),\n            }\n\n            event_data.update(new_values)\n\n            if event[\"event\"] == \"BLOCK\" and event[\"player_1\"] == \"TEAMMATE\":  # Not covered by tests\n                new_values = {\n                    \"player_1\": api_match.get(\"player_1\", event[\"player_1\"]),\n                    \"player_1_eh_id\": api_match.get(\"player_1_eh_id\", event[\"player_1_eh_id\"]),\n                    \"player_1_position\": api_match.get(\"player_1_position\", event[\"player_1_position\"]),\n                }\n\n                event_data.update(new_values)\n\n            game_list.append(event_data)\n\n    game_list.extend(self._changes)\n\n    for event in game_list:\n        new_values = {\n            \"game_date\": self.game_date,\n            \"home_team\": self.home_team[\"abbrev\"],\n            \"away_team\": self.away_team[\"abbrev\"],\n        }\n\n        event.update(new_values)\n\n        if \"version\" not in event:\n            event[\"version\"] = 1\n\n        if event[\"period\"] == 5 and event[\"session\"] == \"R\":  # Not covered by tests\n            event[\"sort_value\"] = event[\"event_idx\"]\n\n        else:\n            sort_dict = {\n                \"PGSTR\": 1,\n                \"PGEND\": 2,\n                \"ANTHEM\": 3,\n                \"EGT\": 3,\n                \"CHL\": 3,\n                \"DELPEN\": 3,\n                \"BLOCK\": 3,\n                \"GIVE\": 3,\n                \"HIT\": 3,\n                \"MISS\": 3,\n                \"SHOT\": 3,\n                \"TAKE\": 3,\n                \"GOAL\": 5,\n                \"STOP\": 6,\n                \"PENL\": 7,\n                \"PBOX\": 7,\n                \"PSTR\": 7,\n                \"CHANGE\": 8,\n                \"EISTR\": 9,\n                \"EIEND\": 10,\n                \"FAC\": 12,\n                \"PEND\": 13,\n                \"SOC\": 14,\n                \"GEND\": 15,\n                \"GOFF\": 16,\n            }\n\n            event[\"sort_value\"] = sort_dict[event[\"event\"]]\n\n    game_list = sorted(\n        game_list, key=lambda k: (k[\"period\"], k[\"period_seconds\"], k[\"sort_value\"])\n    )  # , k['version']\n\n    self._play_by_play = game_list\n</code></pre>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Game._munge_play_by_play","title":"_munge_play_by_play","text":"<pre><code>_munge_play_by_play()\n</code></pre> <p>Method to munge list of events and changes for play-by-play. Updates self._play_by_play.</p> <p>For more information and usage, see https://chickenstats.com/latest/contribute/contribute/</p> <p>Examples:</p> <p>First, instantiate the Game object</p> <pre><code>&gt;&gt;&gt; game = Game(2023020001)\n</code></pre> <p>Requires clean events from the shifts, API events, and HTML events feeds</p> <p>HTML events</p> <pre><code>&gt;&gt;&gt; game._scrape_html_events()  # Scrapes events from HTML feed\n&gt;&gt;&gt; game._munge_html_events()  # Preps raw events, updates game._html_events\n</code></pre> <p>API events</p> <pre><code>&gt;&gt;&gt; game._munge_api_events()  # Preps raw events, updates game._api_events\n</code></pre> <p>Shifts and changes</p> <pre><code>&gt;&gt;&gt; game._scrape_html_events()  # Scrapes shifts from HTML feed\n&gt;&gt;&gt; game._munge_shifts()  # Preps raw shifts, updates game._shifts\n&gt;&gt;&gt; game._munge_changes()  # Preps changes\n</code></pre> <p>Combines them all</p> <pre><code>&gt;&gt;&gt; game._combine_events()  # Combines raw events, into game._play_by_play\n</code></pre> <p>Data can then be manually cleaned</p> <pre><code>&gt;&gt;&gt; game._munge_play_by_play()\n&gt;&gt;&gt; game._prep_xg()\n&gt;&gt;&gt; game._play_by_play  # Returns cleaned data\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _munge_play_by_play(self) -&gt; None:\n    \"\"\"Method to munge list of events and changes for play-by-play. Updates self._play_by_play.\n\n    For more information and usage, see\n    https://chickenstats.com/latest/contribute/contribute/\n\n    Examples:\n        First, instantiate the Game object\n        &gt;&gt;&gt; game = Game(2023020001)\n\n        Requires clean events from the shifts, API events, and HTML events feeds\n\n        HTML events\n        &gt;&gt;&gt; game._scrape_html_events()  # Scrapes events from HTML feed\n        &gt;&gt;&gt; game._munge_html_events()  # Preps raw events, updates game._html_events\n\n        API events\n        &gt;&gt;&gt; game._munge_api_events()  # Preps raw events, updates game._api_events\n\n        Shifts and changes\n        &gt;&gt;&gt; game._scrape_html_events()  # Scrapes shifts from HTML feed\n        &gt;&gt;&gt; game._munge_shifts()  # Preps raw shifts, updates game._shifts\n        &gt;&gt;&gt; game._munge_changes()  # Preps changes\n\n        Combines them all\n        &gt;&gt;&gt; game._combine_events()  # Combines raw events, into game._play_by_play\n\n        Data can then be manually cleaned\n        &gt;&gt;&gt; game._munge_play_by_play()\n        &gt;&gt;&gt; game._prep_xg()\n        &gt;&gt;&gt; game._play_by_play  # Returns cleaned data\n    \"\"\"\n    game_session = self.session\n\n    home_score = 0\n\n    away_score = 0\n\n    for idx, event in enumerate(self._play_by_play):\n        if event.get(\"event_team\") == event[\"home_team\"]:\n            event[\"opp_team\"] = event[\"away_team\"]\n\n        elif event.get(\"event_team\") == event[\"away_team\"]:\n            event[\"opp_team\"] = event[\"home_team\"]\n\n        else:\n            event[\"event_team\"] = event[\"home_team\"]\n            event[\"opp_team\"] = event[\"away_team\"]\n\n        event[\"home_forwards_eh_id\"] = []\n        event[\"home_forwards_api_id\"] = []\n        event[\"home_forwards\"] = []\n        event[\"home_forwards_positions\"] = []\n\n        event[\"home_defense_eh_id\"] = []\n        event[\"home_defense_api_id\"] = []\n        event[\"home_defense\"] = []\n        event[\"home_defense_positions\"] = []\n\n        event[\"home_goalie_eh_id\"] = []\n        event[\"home_goalie_api_id\"] = []\n        event[\"home_goalie\"] = []\n\n        event[\"away_forwards_eh_id\"] = []\n        event[\"away_forwards_api_id\"] = []\n        event[\"away_forwards\"] = []\n        event[\"away_forwards_positions\"] = []\n\n        event[\"away_defense_eh_id\"] = []\n        event[\"away_defense_api_id\"] = []\n        event[\"away_defense\"] = []\n        event[\"away_defense_positions\"] = []\n\n        event[\"away_goalie_eh_id\"] = []\n        event[\"away_goalie_api_id\"] = []\n        event[\"away_goalie\"] = []\n\n        if (\n            self._play_by_play[(idx - 1)][\"event\"] == \"GOAL\"\n            and self._play_by_play[(idx - 1)][\"event_team\"] == event[\"home_team\"]\n        ):\n            if game_session == \"R\" and event[\"period\"] != 5:\n                home_score += 1\n\n            elif game_session == \"R\" and event[\"period\"] == 5:  # Not covered by tests\n                ot_events = [\n                    x for x in self._play_by_play if x[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"] and x[\"period\"] == 5\n                ]\n\n                home_goals = [\n                    x\n                    for x in self._play_by_play\n                    if x[\"event\"] == \"GOAL\" and x[\"period\"] == 5 and x[\"event_team\"] == event[\"home_team\"]\n                ]\n\n                away_goals = [\n                    x\n                    for x in self._play_by_play\n                    if x[\"event\"] == \"GOAL\" and x[\"period\"] == 5 and x[\"event_team\"] == event[\"away_team\"]\n                ]\n\n                if event == ot_events[-1] and len(home_goals) &gt; len(away_goals):\n                    home_score += 1\n\n            else:\n                home_score += 1\n\n        elif (\n            self._play_by_play[(idx - 1)][\"event\"] == \"GOAL\"\n            and self._play_by_play[(idx - 1)][\"event_team\"] == event[\"away_team\"]\n        ):\n            if game_session == \"R\" and event[\"period\"] != 5:\n                away_score += 1\n\n            elif game_session == \"R\" and event[\"period\"] == 5:  # Not covered by tests\n                ot_events = [\n                    x for x in self._play_by_play if x[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"] and x[\"period\"] == 5\n                ]\n\n                home_goals = [\n                    x\n                    for x in self._play_by_play\n                    if x[\"event\"] == \"GOAL\" and x[\"period\"] == 5 and x[\"event_team\"] == event[\"home_team\"]\n                ]\n\n                away_goals = [\n                    x\n                    for x in self._play_by_play\n                    if x[\"event\"] == \"GOAL\" and x[\"period\"] == 5 and x[\"event_team\"] == event[\"away_team\"]\n                ]\n\n                if event == ot_events[-1] and len(away_goals) &gt; len(home_goals):\n                    away_score += 1\n\n            else:\n                away_score += 1\n\n        event[\"home_score\"] = home_score\n        event[\"home_score_diff\"] = home_score - away_score\n\n        event[\"away_score\"] = away_score\n        event[\"away_score_diff\"] = away_score - home_score\n\n        event[\"score_state\"] = f\"{home_score}v{away_score}\"\n        event[\"score_diff\"] = home_score - away_score\n\n    roster = [x for x in self._rosters if x[\"status\"] == \"ACTIVE\"]\n\n    roster = sorted(roster, key=lambda k: (k[\"team_venue\"], k[\"jersey\"]))\n\n    for player in roster:\n        counter = 0\n\n        for event in self._play_by_play:\n            if (\n                event.get(\"event_team\", \"NaN\") in player[\"team_jersey\"]\n                and event[\"event\"] == \"CHANGE\"\n                and event.get(\"change_on\") is not None\n            ):\n                players_on = [x for x in event[\"change_on_jersey\"].split(\", \") if x == player[\"team_jersey\"]]\n\n                if len(players_on) &gt; 0:\n                    counter += 1\n\n            if (\n                event.get(\"event_team\", \"NaN\") in player[\"team_jersey\"]\n                and event[\"event\"] == \"CHANGE\"\n                and event.get(\"change_off\") is not None\n            ):\n                players_off = [x for x in event[\"change_off_jersey\"].split(\", \") if x == player[\"team_jersey\"]]\n\n                if len(players_off) &gt; 0:\n                    counter -= 1\n\n            if counter &gt; 0:\n                forwards = [\"L\", \"C\", \"R\"]\n\n                if player[\"team_venue\"] == \"HOME\":\n                    if player[\"position\"] in forwards:\n                        event[\"home_forwards_eh_id\"].append(player[\"eh_id\"])\n                        event[\"home_forwards_api_id\"].append(str(player[\"api_id\"]))\n                        event[\"home_forwards\"].append(player[\"player_name\"])\n                        event[\"home_forwards_positions\"].append(player[\"position\"])\n\n                    elif player[\"position\"] == \"D\":\n                        event[\"home_defense_eh_id\"].append(player[\"eh_id\"])\n                        event[\"home_defense_api_id\"].append(str(player[\"api_id\"]))\n                        event[\"home_defense\"].append(player[\"player_name\"])\n                        event[\"home_defense_positions\"].append(player[\"position\"])\n\n                    elif player[\"position\"] == \"G\":\n                        event[\"home_goalie_eh_id\"].append(player[\"eh_id\"])\n                        event[\"home_goalie_api_id\"].append(str(player[\"api_id\"]))\n                        event[\"home_goalie\"].append(player[\"player_name\"])\n\n                else:\n                    if player[\"position\"] in forwards:\n                        event[\"away_forwards_eh_id\"].append(player[\"eh_id\"])\n                        event[\"away_forwards_api_id\"].append(str(player[\"api_id\"]))\n                        event[\"away_forwards\"].append(player[\"player_name\"])\n                        event[\"away_forwards_positions\"].append(player[\"position\"])\n\n                    elif player[\"position\"] == \"D\":\n                        event[\"away_defense_eh_id\"].append(player[\"eh_id\"])\n                        event[\"away_defense_api_id\"].append(str(player[\"api_id\"]))\n                        event[\"away_defense\"].append(player[\"player_name\"])\n                        event[\"away_defense_positions\"].append(player[\"position\"])\n\n                    elif player[\"position\"] == \"G\":\n                        event[\"away_goalie_eh_id\"].append(player[\"eh_id\"])\n                        event[\"away_goalie_api_id\"].append(str(player[\"api_id\"]))\n                        event[\"away_goalie\"].append(player[\"player_name\"])\n\n    # Instantiating shapely objects for high-danger and danger area computations\n\n    high_danger1 = Polygon(np.array([[69, -9], [89, -9], [89, 9], [69, 9]]))\n    high_danger2 = Polygon(np.array([[-69, -9], [-89, -9], [-89, 9], [-69, 9]]))\n\n    danger1 = Polygon(\n        np.array(\n            [[89, 9], [89, -9], [69, -22], [54, -22], [54, -9], [44, -9], [44, 9], [54, 9], [54, 22], [69, 22]]\n        )\n    )\n    danger2 = Polygon(\n        np.array(\n            [\n                [-89, 9],\n                [-89, -9],\n                [-69, -22],\n                [-54, -22],\n                [-54, -9],\n                [-44, -9],\n                [-44, 9],\n                [-54, 9],\n                [-54, 22],\n                [-69, 22],\n            ]\n        )\n    )\n\n    final_events = []\n    final_events_ext = []\n\n    for idx, event in enumerate(self._play_by_play):\n        event_length_idx = idx if event == self._play_by_play[-1] else idx + 1\n\n        new_values = {\n            \"event_idx\": idx + 1,\n            \"event_length\": self._play_by_play[event_length_idx][\"game_seconds\"] - event[\"game_seconds\"],\n            \"home_on_eh_id\": event[\"home_forwards_eh_id\"] + event[\"home_defense_eh_id\"],\n            \"home_on_api_id\": event[\"home_forwards_api_id\"] + event[\"home_defense_api_id\"],\n            \"home_on\": event[\"home_forwards\"] + event[\"home_defense\"],\n            \"home_on_positions\": event[\"home_forwards_positions\"] + event[\"home_defense_positions\"],\n            \"away_on_eh_id\": event[\"away_forwards_eh_id\"] + event[\"away_defense_eh_id\"],\n            \"away_on_api_id\": event[\"away_forwards_api_id\"] + event[\"away_defense_api_id\"],\n            \"away_on\": event[\"away_forwards\"] + event[\"away_defense\"],\n            \"away_on_positions\": event[\"away_forwards_positions\"] + event[\"away_defense_positions\"],\n        }\n\n        event.update(new_values)\n\n        if event.get(\"event_team\") == event[\"home_team\"]:\n            event[\"is_home\"] = 1\n\n        else:\n            event[\"is_home\"] = 0\n\n        if event.get(\"event_team\") == event[\"away_team\"]:\n            event[\"is_away\"] = 1\n\n        else:\n            event[\"is_away\"] = 0\n\n        if (\n            event.get(\"coords_x\") is not None\n            and event.get(\"coords_x\") != \"\"\n            and event.get(\"coords_y\") is not None\n            and event.get(\"coords_y\") != \"\"\n        ):\n            # Fixing event angle and distance for errors\n\n            is_fenwick = event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]\n            is_long_distance = event[\"pbp_distance\"] is not None and event.get(\"pbp_distance\", 0) &gt; 89\n            x_is_neg = event.get(\"coords_x\", 0) &lt; 0\n            x_is_pos = event.get(\"coords_x\", 0) &gt; 0\n            bad_shots = event.get(\"shot_type\", \"WRIST\") not in [\n                \"TIP-IN\",\n                \"WRAP-AROUND\",\n                \"WRAP\",\n                \"DEFLECTED\",\n                \"BAT\",\n                \"BETWEEN LEGS\",\n                \"POKE\",\n            ]\n\n            zone_cond = event.get(\"zone\") != \"OFF\"\n\n            x_is_neg_conds = is_fenwick &amp; is_long_distance &amp; x_is_neg &amp; bad_shots &amp; zone_cond\n\n            x_is_pos_conds = is_fenwick &amp; is_long_distance &amp; x_is_pos &amp; bad_shots &amp; zone_cond\n\n            if x_is_neg_conds is True:\n                event[\"event_distance\"] = ((abs(event[\"coords_x\"]) + 89) ** 2 + event[\"coords_y\"] ** 2) ** (1 / 2)\n\n                try:\n                    event[\"event_angle\"] = np.degrees(\n                        abs(np.arctan(event[\"coords_y\"] / (abs(event[\"coords_x\"] + 89))))\n                    )\n\n                except ZeroDivisionError:  # Not covered by tests\n                    event[\"event_angle\"] = np.degrees(abs(np.arctan(np.nan)))\n\n            elif x_is_pos_conds is True:\n                event[\"event_distance\"] = ((event[\"coords_x\"] + 89) ** 2 + event[\"coords_y\"] ** 2) ** (1 / 2)\n\n                try:\n                    event[\"event_angle\"] = np.degrees(abs(np.arctan(event[\"coords_y\"] / (event[\"coords_x\"] + 89))))\n\n                except ZeroDivisionError:  # Not covered by tests\n                    event[\"event_angle\"] = np.degrees(abs(np.arctan(np.nan)))\n\n            else:\n                event[\"event_distance\"] = ((89 - abs(event[\"coords_x\"])) ** 2 + event[\"coords_y\"] ** 2) ** (1 / 2)\n\n                try:\n                    event[\"event_angle\"] = np.degrees(\n                        abs(np.arctan(event[\"coords_y\"] / (89 - abs(event[\"coords_x\"]))))\n                    )\n\n                except ZeroDivisionError:\n                    event[\"event_angle\"] = np.degrees(abs(np.arctan(np.nan)))\n\n        if (\n            event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]\n            and event.get(\"zone\") == \"DEF\"\n            and event.get(\"event_distance\", 0) &lt;= 64\n        ):  # Not covered by tests\n            event[\"zone\"] = \"OFF\"\n\n        if event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]:\n            if event.get(\"zone\") == \"OFF\":\n                if event.get(\"coords_x\") is not None and event.get(\"coords_y\") is not None:\n                    shot_coords = Point(event[\"coords_x\"], event[\"coords_y\"])\n\n                    if danger1.contains(shot_coords) or danger2.contains(shot_coords):\n                        event[\"danger\"] = 1\n\n                    else:\n                        event[\"danger\"] = 0\n\n                    if high_danger1.contains(shot_coords) or high_danger2.contains(shot_coords):\n                        event[\"high_danger\"] = 1\n\n                        event[\"danger\"] = 0\n\n                    else:\n                        event[\"high_danger\"] = 0\n\n                else:\n                    event[\"high_danger\"] = 0\n\n                    event[\"danger\"] = 0\n\n            else:\n                event[\"high_danger\"] = 0\n\n                event[\"danger\"] = 0\n\n        event[\"home_skaters\"] = len(event[\"home_on_eh_id\"])\n        event[\"away_skaters\"] = len(event[\"away_on_eh_id\"])\n\n        event[\"home_forwards_count\"] = len(event[\"home_forwards\"])\n        event[\"home_defense_count\"] = len(event[\"home_defense\"])\n\n        if event[\"home_skaters\"] &gt; 0:\n            event[\"home_forwards_percent\"] = event[\"home_forwards_count\"] / event[\"home_skaters\"]\n\n        else:\n            event[\"home_forwards_percent\"] = 0\n\n        event[\"away_forwards_count\"] = len(event[\"away_forwards\"])\n        event[\"away_defense_count\"] = len(event[\"away_defense\"])\n\n        if event[\"away_skaters\"] &gt; 0:\n            event[\"away_forwards_percent\"] = event[\"away_forwards_count\"] / event[\"away_skaters\"]\n\n        else:\n            event[\"away_forwards_percent\"] = 0\n\n        home_on = \"E\" if not event[\"home_goalie\"] else event[\"home_skaters\"]\n\n        away_on = \"E\" if not event[\"away_goalie\"] else event[\"away_skaters\"]\n\n        event[\"strength_state\"] = f\"{home_on}v{away_on}\"\n\n        if event.get(\"event_team\") == event[\"home_team\"] or not event.get(\"event_team\"):\n            new_values = {\n                \"strength_state\": f\"{home_on}v{away_on}\",\n                \"score_state\": f\"{event['home_score']}v{event['away_score']}\",\n                \"score_diff\": event[\"home_score_diff\"],\n                \"event_team_skaters\": event[\"home_skaters\"],\n                \"teammates_eh_id\": event[\"home_on_eh_id\"],\n                \"teammates_api_id\": event[\"home_on_api_id\"],\n                \"teammates\": event[\"home_on\"],\n                \"teammates_positions\": event[\"home_on_positions\"],\n                \"forwards_eh_id\": event[\"home_forwards_eh_id\"],\n                \"forwards_api_id\": event[\"home_forwards_api_id\"],\n                \"forwards\": event[\"home_forwards\"],\n                \"forwards_count\": event[\"home_forwards_count\"],\n                \"forwards_percent\": event[\"home_forwards_percent\"],\n                \"defense_eh_id\": event[\"home_defense_eh_id\"],\n                \"defense_api_id\": event[\"home_defense_api_id\"],\n                \"defense\": event[\"home_defense\"],\n                \"defense_count\": event[\"home_defense_count\"],\n                \"own_goalie_eh_id\": event[\"home_goalie_eh_id\"],\n                \"own_goalie_api_id\": event[\"home_goalie_api_id\"],\n                \"own_goalie\": event[\"home_goalie\"],\n                \"opp_strength_state\": f\"{away_on}v{home_on}\",\n                \"opp_score_state\": f\"{event['away_score']}v{event['home_score']}\",\n                \"opp_score_diff\": event[\"away_score_diff\"],\n                \"opp_team_skaters\": event[\"away_skaters\"],\n                \"opp_team_on_eh_id\": event[\"away_on_eh_id\"],\n                \"opp_team_on_api_id\": event[\"away_on_api_id\"],\n                \"opp_team_on\": event[\"away_on\"],\n                \"opp_team_on_positions\": event[\"away_on_positions\"],\n                \"opp_forwards_eh_id\": event[\"away_forwards_eh_id\"],\n                \"opp_forwards_api_id\": event[\"away_forwards_api_id\"],\n                \"opp_forwards\": event[\"away_forwards\"],\n                \"opp_forwards_count\": event[\"away_forwards_count\"],\n                \"opp_forwards_percent\": event[\"away_forwards_percent\"],\n                \"opp_defense_eh_id\": event[\"away_defense_eh_id\"],\n                \"opp_defense_api_id\": event[\"away_defense_api_id\"],\n                \"opp_defense\": event[\"away_defense\"],\n                \"opp_defense_count\": event[\"away_defense_count\"],\n                \"opp_goalie_eh_id\": event[\"away_goalie_eh_id\"],\n                \"opp_goalie_api_id\": event[\"away_goalie_api_id\"],\n                \"opp_goalie\": event[\"away_goalie\"],\n            }\n\n        elif event.get(\"event_team\") == event[\"away_team\"]:\n            new_values = {\n                \"strength_state\": f\"{away_on}v{home_on}\",\n                \"score_state\": f\"{event['away_score']}v{event['home_score']}\",\n                \"score_diff\": event[\"away_score_diff\"],\n                \"event_team_skaters\": event[\"away_skaters\"],\n                \"teammates_eh_id\": event[\"away_on_eh_id\"],\n                \"teammates_api_id\": event[\"away_on_api_id\"],\n                \"teammates\": event[\"away_on\"],\n                \"teammates_positions\": event[\"away_on_positions\"],\n                \"forwards_eh_id\": event[\"away_forwards_eh_id\"],\n                \"forwards_api_id\": event[\"away_forwards_api_id\"],\n                \"forwards\": event[\"away_forwards\"],\n                \"forwards_count\": event[\"away_forwards_count\"],\n                \"forwards_percent\": event[\"away_forwards_percent\"],\n                \"defense_eh_id\": event[\"away_defense_eh_id\"],\n                \"defense_api_id\": event[\"away_defense_api_id\"],\n                \"defense\": event[\"away_defense\"],\n                \"defense_count\": event[\"away_defense_count\"],\n                \"own_goalie_eh_id\": event[\"away_goalie_eh_id\"],\n                \"own_goalie_api_id\": event[\"away_goalie_api_id\"],\n                \"own_goalie\": event[\"away_goalie\"],\n                \"opp_strength_state\": f\"{home_on}v{away_on}\",\n                \"opp_score_state\": f\"{event['home_score']}v{event['away_score']}\",\n                \"opp_score_diff\": event[\"home_score_diff\"],\n                \"opp_team_skaters\": event[\"home_skaters\"],\n                \"opp_team_on_eh_id\": event[\"home_on_eh_id\"],\n                \"opp_team_on_api_id\": event[\"home_on_api_id\"],\n                \"opp_team_on\": event[\"home_on\"],\n                \"opp_team_on_positions\": event[\"home_on_positions\"],\n                \"opp_forwards_eh_id\": event[\"home_forwards_eh_id\"],\n                \"opp_forwards_api_id\": event[\"home_forwards_api_id\"],\n                \"opp_forwards\": event[\"home_forwards\"],\n                \"opp_forwards_count\": event[\"home_forwards_count\"],\n                \"opp_forwards_percent\": event[\"home_forwards_percent\"],\n                \"opp_defense_eh_id\": event[\"home_defense_eh_id\"],\n                \"opp_defense_api_id\": event[\"home_defense_api_id\"],\n                \"opp_defense\": event[\"home_defense\"],\n                \"opp_defense_count\": event[\"home_defense_count\"],\n                \"opp_goalie_eh_id\": event[\"home_goalie_eh_id\"],\n                \"opp_goalie_api_id\": event[\"home_goalie_api_id\"],\n                \"opp_goalie\": event[\"home_goalie\"],\n            }\n\n        event.update(new_values)\n\n        event_team_lists = {\n            \"event_on_x\": event.get(\"teammates\", []),\n            \"event_on_x_eh_id\": event.get(\"teammates_eh_id\", []),\n            \"event_on_x_api_id\": event.get(\"teammates_api_id\", []),\n            \"event_on_x_pos\": event.get(\"teammates_positions\", []),\n        }\n\n        if event.get(\"own_goalie\"):\n            event_team_lists.update(\n                {\n                    \"event_on_x\": event[\"teammates\"] + event[\"own_goalie\"],\n                    \"event_on_x_eh_id\": event[\"teammates_eh_id\"] + event[\"own_goalie_eh_id\"],\n                    \"event_on_x_api_id\": event[\"teammates_api_id\"] + event[\"own_goalie_api_id\"],\n                    \"event_on_x_pos\": event[\"teammates_positions\"] + [\"G\"],\n                }\n            )\n\n        for list_name, event_team_list in event_team_lists.items():\n            for player_num, player in enumerate(event_team_list):\n                col_name = list_name.replace(\"x\", str(player_num + 1))\n                event[col_name] = player\n\n        opp_team_lists = {\n            \"opp_on_x\": event.get(\"opp_team_on\", []),\n            \"opp_on_x_eh_id\": event.get(\"opp_team_on_eh_id\", []),\n            \"opp_on_x_api_id\": event.get(\"opp_team_on_api_id\", []),\n            \"opp_on_x_pos\": event.get(\"opp_team_on_positions\", []),\n        }\n\n        if event.get(\"opp_goalie\"):\n            opp_team_lists.update(\n                {\n                    \"opp_on_x\": event[\"opp_team_on\"] + event[\"opp_goalie\"],\n                    \"opp_on_x_eh_id\": event[\"opp_team_on_eh_id\"] + event[\"opp_goalie_eh_id\"],\n                    \"opp_on_x_api_id\": event[\"opp_team_on_api_id\"] + event[\"opp_goalie_api_id\"],\n                    \"opp_on_x_pos\": event[\"opp_team_on_positions\"] + [\"G\"],\n                }\n            )\n\n        for list_name, opp_team_list in opp_team_lists.items():\n            for player_num, player in enumerate(opp_team_list):\n                col_name = list_name.replace(\"x\", str(player_num + 1))\n                event[col_name] = player\n\n        if event[\"event\"] == \"CHANGE\":\n            if event[\"change_on\"]:\n                change_on_lists = {\n                    \"change_on_x\": event.get(\"change_on\", \"\").split(\", \"),\n                    \"change_on_x_eh_id\": event.get(\"change_on_eh_id\", \"\").split(\", \"),\n                    \"change_on_x_api_id\": event.get(\"change_on_api_id\", \"\").split(\", \"),\n                    \"change_on_x_pos\": event.get(\"change_on_positions\", \"\").split(\", \"),\n                }\n\n                for list_name, change_on_list in change_on_lists.items():\n                    for player_num, player in enumerate(change_on_list):\n                        col_name = list_name.replace(\"x\", str(player_num + 1))\n                        event[col_name] = player\n\n            if event[\"change_off\"]:\n                change_off_lists = {\n                    \"change_off_x\": event.get(\"change_off\", \"\").split(\", \"),\n                    \"change_off_x_eh_id\": event.get(\"change_off_eh_id\", \"\").split(\", \"),\n                    \"change_off_x_api_id\": event.get(\"change_off_api_id\", \"\").split(\", \"),\n                    \"change_off_x_pos\": event.get(\"change_off_positions\", \"\").split(\", \"),\n                }\n\n                for list_name, change_off_list in change_off_lists.items():\n                    for player_num, player in enumerate(change_off_list):\n                        col_name = list_name.replace(\"x\", str(player_num + 1))\n                        event[col_name] = player\n\n        if \"PENALTY SHOT\" in event[\"description\"]:\n            event[\"strength_state\"] = \"1v0\"\n\n        if (event[\"home_skaters\"] &gt; 5 and event[\"home_goalie\"] != []) or (\n            event[\"away_skaters\"] &gt; 5 and event[\"away_goalie\"] != []\n        ):\n            event[\"strength_state\"] = \"ILLEGAL\"\n\n            event[\"opp_strength_state\"] = \"ILLEGAL\"\n\n        if event[\"period\"] == 5 and event[\"session\"] == \"R\":  # Not covered by tests\n            event[\"strength_state\"] = \"1v0\"\n\n        if event[\"event\"] == \"CHANGE\":\n            faceoffs = [\n                x\n                for x in self._play_by_play\n                if (\n                    x[\"event\"] == \"FAC\"\n                    and x[\"game_seconds\"] == event[\"game_seconds\"]\n                    and x[\"period\"] == event[\"period\"]\n                )\n            ]\n\n            if len(faceoffs) &gt; 0:\n                # game_seconds_list = [x[\"game_seconds\"] for x in self._play_by_play]\n\n                # max_seconds = max(game_seconds_list)\n\n                bad_seconds = []  # [0, 1200, 2400, 3600, 3900, max_seconds]\n\n                if event[\"game_seconds\"] not in bad_seconds:\n                    event[\"coords_x\"] = faceoffs[0].get(\"coords_x\", \"\")\n\n                    event[\"coords_y\"] = faceoffs[0].get(\"coords_y\", \"\")\n\n                    if event[\"event_team\"] == faceoffs[0][\"event_team\"]:\n                        event[\"zone_start\"] = faceoffs[0][\"zone\"]\n\n                    else:\n                        zones = {\"OFF\": \"DEF\", \"DEF\": \"OFF\", \"NEU\": \"NEU\"}\n\n                        event[\"zone_start\"] = zones.get(faceoffs[0][\"zone\"])\n\n            else:\n                event[\"zone_start\"] = \"OTF\"\n\n        event_dummies = [\n            \"block\",\n            \"change\",\n            \"chl\",\n            \"fac\",\n            \"give\",\n            \"goal\",\n            \"hit\",\n            \"miss\",\n            \"penl\",\n            \"shot\",\n            \"stop\",\n            \"take\",\n        ]\n\n        for event_dummy in event_dummies:\n            if event[\"event\"].lower() == event_dummy:\n                event[event_dummy] = 1\n\n            else:\n                event[event_dummy] = 0\n\n        if event[\"event\"] == \"GOAL\" or event[\"event\"] == \"SHOT\":\n            event[\"shot\"] = 1\n\n        fenwick_events = [\"SHOT\", \"GOAL\", \"MISS\"]\n\n        if event[\"event\"] in fenwick_events:\n            event[\"fenwick\"] = 1\n\n        else:\n            event[\"fenwick\"] = 0\n\n        corsi_events = fenwick_events + [\"BLOCK\"]\n\n        if event[\"event\"] in corsi_events:\n            event[\"corsi\"] = 1\n\n        else:\n            event[\"corsi\"] = 0\n\n        if event.get(\"high_danger\") == 1:\n            if event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]:\n                event[\"hd_fenwick\"] = 1\n\n            if event[\"event\"] == \"GOAL\":\n                event[\"hd_goal\"] = 1\n                event[\"hd_shot\"] = 1\n\n            if event[\"event\"] == \"SHOT\":\n                event[\"hd_shot\"] = 1\n\n            if event[\"event\"] == \"MISS\":\n                event[\"hd_miss\"] = 1\n\n        else:\n            event[\"hd_goal\"] = 0\n            event[\"hd_shot\"] = 0\n            event[\"hd_miss\"] = 0\n            event[\"hd_fenwick\"] = 0\n\n        if event[\"event\"] == \"FAC\":\n            if event[\"zone\"] == \"OFF\":\n                event[\"ozf\"] = 1\n\n            else:\n                event[\"ozf\"] = 0\n\n            if event[\"zone\"] == \"DEF\":\n                event[\"dzf\"] = 1\n\n            else:\n                event[\"dzf\"] = 0\n\n            if event[\"zone\"] == \"NEU\":\n                event[\"nzf\"] = 1\n\n            else:\n                event[\"nzf\"] = 0\n\n        else:\n            event[\"ozf\"] = 0\n            event[\"nzf\"] = 0\n            event[\"dzf\"] = 0\n\n        if event[\"event\"] == \"CHANGE\" and event.get(\"zone_start\"):\n            if event[\"zone_start\"] == \"OFF\":\n                event[\"ozc\"] = 1\n\n            else:\n                event[\"ozc\"] = 0\n\n            if event[\"zone_start\"] == \"DEF\":\n                event[\"dzc\"] = 1\n\n            else:\n                event[\"dzc\"] = 0\n\n            if event[\"zone_start\"] == \"NEU\":\n                event[\"nzc\"] = 1\n\n            else:\n                event[\"nzc\"] = 0\n\n            if event[\"zone_start\"] == \"OTF\":\n                event[\"otf\"] = 1\n\n            else:\n                event[\"otf\"] = 0\n\n        else:\n            event[\"ozc\"] = 0\n            event[\"nzc\"] = 0\n            event[\"dzc\"] = 0\n            event[\"otf\"] = 0\n\n        if event[\"event\"] == \"PENL\":\n            penalty_lengths = [0, 2, 4, 5, 10]\n\n            for penalty_length in penalty_lengths:\n                if event.get(\"penalty_length\") == penalty_length:\n                    event[f\"pen{penalty_length}\"] = 1\n\n                else:\n                    event[f\"pen{penalty_length}\"] = 0\n\n        else:\n            event[\"pen0\"] = 0\n            event[\"pen2\"] = 0\n            event[\"pen4\"] = 0\n            event[\"pen5\"] = 0\n            event[\"pen10\"] = 0\n\n        if event[\"event\"] == \"BLOCK\" and \"BLOCKED BY TEAMMATE\" in event[\"description\"]:  # Not covered by tests\n            event[\"teammate_block\"] = 1\n            event[\"block\"] = 0\n        else:\n            event[\"teammate_block\"] = 0\n\n        game_id_str = str(event[\"game_id\"])\n        event_idx_str = str(event[\"event_idx\"])\n\n        if len(event_idx_str) == 1:\n            event_id = game_id_str + \"000\" + event_idx_str\n\n        elif len(event_idx_str) == 2:\n            event_id = game_id_str + \"00\" + event_idx_str\n\n        elif len(event_idx_str) == 3:\n            event_id = game_id_str + \"0\" + event_idx_str\n\n        elif len(event_idx_str) == 4:  # Not covered by tests\n            event_id = game_id_str + event_idx_str\n\n        event[\"id\"] = int(event_id)\n\n        final_events.append(PBPEvent.model_validate(event).model_dump())\n        final_events_ext.append(PBPEventExt.model_validate(event).model_dump())\n\n    self._play_by_play = final_events\n    self._play_by_play_ext = final_events_ext\n</code></pre>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Game._combine_rosters","title":"_combine_rosters","text":"<pre><code>_combine_rosters()\n</code></pre> <p>Method to combine API and HTML rosters. Updates self._rosters.</p> <p>For more information and usage, see https://chickenstats.com/latest/contribute/contribute/</p> <p>Examples:</p> <p>First, instantiate the Game object</p> <pre><code>&gt;&gt;&gt; game = Game(2023020001)\n</code></pre> <p>Requires clean rosters from the API and HTML feeds</p> <p>HTML rosters</p> <pre><code>&gt;&gt;&gt; game._scrape_html_rosters()\n&gt;&gt;&gt; game._munge_html_rosters()\n</code></pre> <p>API rosters</p> <pre><code>&gt;&gt;&gt; game._munge_api_rosters()\n</code></pre> <p>Combined rosters</p> <pre><code>&gt;&gt;&gt; game._combine_rosters()\n</code></pre> <p>However, the combined rosters do not need to be manually cleaned - data are cleaned at the level of their respective source</p> <pre><code>&gt;&gt;&gt; game._rosters  # Returns clean rosters if all of the above have been performed\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _combine_rosters(self) -&gt; None:\n    \"\"\"Method to combine API and HTML rosters. Updates self._rosters.\n\n    For more information and usage, see\n    https://chickenstats.com/latest/contribute/contribute/\n\n    Examples:\n        First, instantiate the Game object\n        &gt;&gt;&gt; game = Game(2023020001)\n\n        Requires clean rosters from the API and HTML feeds\n\n        HTML rosters\n        &gt;&gt;&gt; game._scrape_html_rosters()\n        &gt;&gt;&gt; game._munge_html_rosters()\n\n        API rosters\n        &gt;&gt;&gt; game._munge_api_rosters()\n\n        Combined rosters\n        &gt;&gt;&gt; game._combine_rosters()\n\n        However, the combined rosters do not need to be manually cleaned - data are\n        cleaned at the level of their respective source\n        &gt;&gt;&gt; game._rosters  # Returns clean rosters if all of the above have been performed\n\n    \"\"\"\n    html_rosters = self._html_rosters\n    api_rosters = self._api_rosters\n\n    api_rosters_dict = {x[\"team_jersey\"]: x for x in api_rosters}\n\n    players = []\n\n    for player in html_rosters:\n        if player[\"status\"] == \"ACTIVE\":\n            api_info = api_rosters_dict[player[\"team_jersey\"]]\n\n        else:\n            api_info = {\"api_id\": None, \"headshot_url\": None}\n\n        player_info = {}\n\n        player_info.update(player)\n\n        new_values = {\"api_id\": api_info[\"api_id\"], \"headshot_url\": api_info[\"headshot_url\"]}\n\n        player_info.update(new_values)\n\n        player_info = rosters_fixes(self.game_id, player_info)\n\n        players.append(RosterPlayer.model_validate(player_info).model_dump())\n\n    self._rosters = players\n</code></pre>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Game._scrape_shifts","title":"_scrape_shifts","text":"<pre><code>_scrape_shifts()\n</code></pre> <p>Method for scraping shifts from HTML endpoint. Updates self._shifts.</p> <p>For more information and usage, see https://chickenstats.com/latest/contribute/contribute/</p> <p>Examples:</p> <p>First, instantiate the Game object</p> <pre><code>&gt;&gt;&gt; game = Game(2023020001)\n</code></pre> <p>Before cleaning the data, game._shifts is None</p> <pre><code>&gt;&gt;&gt; game._shifts  # Returns None\n</code></pre> <p>Once you scrape the data, you can access it in raw form, prior to any processing</p> <pre><code>&gt;&gt;&gt; game._scrape_shifts()  # Scrapes raw data and adds it to game._shifts\n&gt;&gt;&gt; game.shifts  # Returns cleaned shifts data\n&gt;&gt;&gt; game.shifts_df  # Same, but a Pandas DataFrame\n</code></pre> <p>You then have to manually clean the data</p> <pre><code>&gt;&gt;&gt; game._munge_shifts()\n&gt;&gt;&gt; game.shifts  # Returns cleaned shifts data\n&gt;&gt;&gt; game.shifts_df  # Same but a Pandas DataFrame\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _scrape_shifts(self) -&gt; None:\n    \"\"\"Method for scraping shifts from HTML endpoint. Updates self._shifts.\n\n    For more information and usage, see\n    https://chickenstats.com/latest/contribute/contribute/\n\n    Examples:\n        First, instantiate the Game object\n        &gt;&gt;&gt; game = Game(2023020001)\n\n        Before cleaning the data, game._shifts is None\n        &gt;&gt;&gt; game._shifts  # Returns None\n\n        Once you scrape the data, you can access it in raw form, prior to any processing\n        &gt;&gt;&gt; game._scrape_shifts()  # Scrapes raw data and adds it to game._shifts\n        &gt;&gt;&gt; game.shifts  # Returns cleaned shifts data\n        &gt;&gt;&gt; game.shifts_df  # Same, but a Pandas DataFrame\n\n        You then have to manually clean the data\n        &gt;&gt;&gt; game._munge_shifts()\n        &gt;&gt;&gt; game.shifts  # Returns cleaned shifts data\n        &gt;&gt;&gt; game.shifts_df  # Same but a Pandas DataFrame\n    \"\"\"\n    # Creating basic information from game ID\n    season = self.season\n    game_session = self.session\n    game_id = self.game_id\n    s = self._requests_session\n\n    # This is the list for collecting all the game information for the end\n\n    game_list = []\n\n    # Dictionary of urls for scraping\n\n    urls_dict = {\"HOME\": self.home_shifts_endpoint, \"AWAY\": self.away_shifts_endpoint}\n\n    # Iterating through the url dictionary\n\n    for team_venue, url in urls_dict.items():\n        response = s.get(url)\n\n        soup = BeautifulSoup(response.content.decode(\"ISO-8859-1\"), \"lxml\", multi_valued_attributes=None)\n\n        # Getting team names from the HTML Data\n\n        team_name = soup.find(\"td\", {\"align\": \"center\", \"class\": \"teamHeading + border\"})\n\n        # Converting team names to proper format\n\n        if team_name is None:  # Not covered by tests\n            continue\n\n        team_name = unidecode(team_name.get_text())\n\n        if team_name == \"PHOENIX COYOTES\":\n            team_name = \"ARIZONA COYOTES\"\n\n        elif \"CANADIENS\" in team_name:\n            team_name = \"MONTREAL CANADIENS\"\n\n        # Getting players from the HTML data\n\n        players = soup.find_all(\"td\", {\"class\": [\"playerHeading + border\", \"lborder + bborder\"]})\n\n        # Creating a dictionary to collect the players' information\n\n        players_dict = {}\n\n        # Iterating through the players\n\n        for player in players:\n            # Getting player's data\n\n            data = player.get_text()\n\n            # If there is a name in the data, get the information\n\n            if \", \" in data:\n                name = data.split(\",\", 1)\n\n                jersey = name[0].split(\" \")[0].strip()\n\n                last_name = name[0].split(\" \", 1)[1].strip()\n\n                first_name = re.sub(r\"\\(\\s?(.+)\\)\", \"\", name[1]).strip()\n\n                full_name = f\"{first_name} {last_name}\"\n\n                if full_name == \" \":  # Not covered by tests\n                    continue\n\n                new_values = {full_name: {\"player_name\": full_name, \"jersey\": jersey, \"shifts\": []}}\n\n                players_dict.update(new_values)\n\n            # If there is not a name it is likely because these are shift information, not player information\n\n            else:\n                if full_name == \" \":  # Not covered by tests\n                    continue\n\n                # Extend the player's shift information with the shift data\n\n                players_dict[full_name][\"shifts\"].extend([data])\n\n        # Iterating through the player's dictionary,\n        # which has a key of the player's name and an array of shift-arrays\n\n        for player, shifts in players_dict.items():\n            # Getting the number of shifts\n\n            length = int(len(np.array(shifts[\"shifts\"])) / 5)\n\n            # Reshaping the shift data into fields and values\n\n            for _number, shift in enumerate(np.array(shifts[\"shifts\"]).reshape(length, 5)):\n                # Adding header values to the shift data\n\n                headers = [\"shift_count\", \"period\", \"shift_start\", \"shift_end\", \"duration\"]\n\n                # Creating a dictionary from the headers and the shift data\n\n                shift_dict = dict(zip(headers, shift.flatten(), strict=False))\n\n                # Adding other data to the shift dictionary\n\n                new_values = {\n                    \"season\": season,\n                    \"session\": game_session,\n                    \"game_id\": game_id,\n                    \"team_name\": team_name,\n                    \"team\": team_codes[team_name],\n                    \"team_venue\": team_venue.upper(),\n                    \"player_name\": unidecode(shifts[\"player_name\"]).upper(),\n                    \"team_jersey\": f\"{team_codes[team_name]}{shifts['jersey']}\",\n                    \"jersey\": int(shifts[\"jersey\"]),\n                    \"period\": int(shift_dict[\"period\"].replace(\"OT\", \"4\").replace(\"SO\", \"5\")),\n                    \"shift_count\": int(shift_dict[\"shift_count\"]),\n                    \"shift_start\": unidecode(shift_dict[\"shift_start\"]).strip(),\n                    \"start_time\": unidecode(shift_dict[\"shift_start\"]).strip().split(\"/\", 1)[0].strip(),\n                    \"shift_end\": unidecode(shift_dict[\"shift_end\"]).strip(),\n                    \"end_time\": unidecode(shift_dict[\"shift_end\"]).strip().split(\"/\", 1)[0].strip(),\n                }\n\n                shift_dict.update(new_values)\n\n                # Appending the shift dictionary to the list of shift dictionaries\n\n                if shift_dict[\"start_time\"] != \"31:23\":\n                    game_list.append(shift_dict)\n\n    self._shifts = game_list\n</code></pre>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Game._munge_shifts","title":"_munge_shifts","text":"<pre><code>_munge_shifts()\n</code></pre> <p>Method to munge list of shifts from HTML endpoint. Updates self._shifts.</p> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _munge_shifts(self) -&gt; None:\n    \"\"\"Method to munge list of shifts from HTML endpoint. Updates self._shifts.\"\"\"\n    season = self.season\n    game_session = self.session\n\n    # Iterating through the lists of shifts\n\n    roster = self._rosters\n\n    actives = {x[\"team_jersey\"]: x for x in roster if x[\"status\"] == \"ACTIVE\"}\n    scratches = {x[\"team_jersey\"]: x for x in roster if x[\"status\"] == \"SCRATCH\"}\n\n    if self.game_id == 2020020860:\n        new_shifts = {\n            \"DAL29\": 5,\n            \"CHI60\": 4,\n            \"DAL14\": 27,\n            \"DAL21\": 22,\n            \"DAL3\": 28,\n            \"CHI5\": 27,\n            \"CHI88\": 26,\n            \"CHI12\": 26,\n        }\n\n        for new_player, shift_count in new_shifts.items():\n            new_player_info = actives[new_player]\n\n            new_goalies = [\"DAL29\", \"CHI60\"]\n\n            if new_player in new_goalies:\n                shift_start = \"0:00 / 5:00\"\n                shift_end = \"4:30 / 0:30\"\n                duration = \"4:30\"\n                start_time = \"0:00\"\n                end_time = \"4:30\"\n\n            new_players = [\"DAL14\", \"DAL21\", \"DAL3\", \"CHI5\"]\n\n            if new_player in new_players:\n                shift_start = \"3:47 / 1:13\"\n                shift_end = \"4:30 / 0:30\"\n                duration = \"00:43\"\n                start_time = \"3:47\"\n                end_time = \"4:30\"\n\n            if new_player == \"CHI88\":\n                shift_start = \"3:51 / 1:09\"\n                shift_end = \"4:30 / 0:30\"\n                duration = \"00:39\"\n                start_time = \"3:51\"\n                end_time = \"4:30\"\n\n            if new_player == \"CHI12\":\n                shift_start = \"4:14 / 0:46\"\n                shift_end = \"4:30 / 0:30\"\n                duration = \"00:16\"\n                start_time = \"4:14\"\n                end_time = \"4:30\"\n\n            new_shift = {\n                \"shift_count\": shift_count,\n                \"period\": 4,\n                \"shift_start\": shift_start,\n                \"shift_end\": shift_end,\n                \"duration\": duration,\n                \"season\": 20202021,\n                \"session\": \"R\",\n                \"game_id\": self.game_id,\n                \"team_name\": new_player_info[\"team_name\"],\n                \"team\": new_player_info[\"team\"],\n                \"team_venue\": new_player_info[\"team_venue\"],\n                \"player_name\": new_player_info[\"player_name\"],\n                \"team_jersey\": new_player_info[\"team_jersey\"],\n                \"jersey\": new_player_info[\"jersey\"],\n                \"start_time\": start_time,\n                \"end_time\": end_time,\n            }\n\n            self._shifts.append(new_shift)\n\n    for shift in self._shifts:\n        # Get active players and store them in a new dictionary with team jersey as key\n        # and other info as a value-dictionary\n\n        shift[\"eh_id\"] = actives.get(shift[\"team_jersey\"], scratches.get(shift[\"team_jersey\"]))[\"eh_id\"]\n\n        shift[\"api_id\"] = actives.get(shift[\"team_jersey\"], scratches.get(shift[\"team_jersey\"]))[\"api_id\"]\n\n        shift[\"position\"] = actives.get(shift[\"team_jersey\"], scratches.get(shift[\"team_jersey\"]))[\"position\"]\n\n        # Replacing some player names\n\n        shift[\"player_name\"] = (\n            shift[\"player_name\"]\n            .replace(\"ALEXANDRE\", \"ALEX\")\n            .replace(\"ALEXANDER\", \"ALEX\")\n            .replace(\"CHRISTOPHER\", \"CHRIS\")\n        )\n\n        shift[\"player_name\"] = correct_names_dict.get(shift[\"player_name\"], shift[\"player_name\"])\n\n        # Adding seconds columns\n\n        cols = [\"start_time\", \"end_time\", \"duration\"]\n\n        for col in cols:\n            time_split = shift[col].split(\":\", 1)\n\n            # Sometimes the shift value can be blank, if it is, we'll skip the field and fix later\n\n            try:\n                shift[f\"{col}_seconds\"] = 60 * int(time_split[0]) + int(time_split[1])\n\n            except ValueError:  # Not covered by tests\n                continue\n\n        # Fixing end time if it is blank or empty\n\n        if shift[\"end_time\"] == \" \" or shift[\"end_time\"] == \"\":  # Not covered by tests\n            # Calculating end time based on duration seconds\n\n            shift[\"end_time_seconds\"] = shift[\"start_time_seconds\"] + shift[\"duration_seconds\"]\n\n            # Creating end time based on time delta\n\n            shift[\"end_time\"] = str(timedelta(seconds=shift[\"end_time_seconds\"])).split(\":\", 1)[1]\n\n        # If the shift start is after the shift end, we need to fix the error\n\n        if shift[\"start_time_seconds\"] &gt; shift[\"end_time_seconds\"]:  # Not covered by tests\n            # Creating new values based on game session and period\n\n            if shift[\"period\"] &lt; 4:\n                # Setting the end time\n\n                shift[\"end_time\"] = \"20:00\"\n\n                # Setting the end time in seconds\n\n                shift[\"end_time_seconds\"] = 1200\n\n                # Setting the shift end\n\n                shift[\"shift_end\"] = \"20:00 / 0:00\"\n\n                # Setting duration and duration in seconds\n\n                shift[\"duration_seconds\"] = shift[\"end_time_seconds\"] - shift[\"start_time_seconds\"]\n\n                shift[\"duration\"] = str(timedelta(seconds=shift[\"duration_seconds\"])).split(\":\", 1)[1]\n\n            else:\n                total_seconds = 1200 if game_session == \"P\" else 300\n\n                # Need to get the end period to get the end time in seconds\n\n                max_period = max([int(shift[\"period\"]) for shift in self._shifts if shift[\"period\"] != \" \"])\n\n                # Getting the end time in seconds for the final period\n\n                max_seconds = max(\n                    [\n                        shift[\"end_time_seconds\"]\n                        for shift in self._shifts\n                        if \"end_time_seconds\" in shift and shift[\"period\"] == max_period\n                    ]\n                )\n\n                shift[\"end_time_seconds\"] = max_seconds\n\n                # Setting end time\n\n                end_time = str(timedelta(seconds=max_seconds)).split(\":\", 1)[1]\n\n                # Setting remainder time\n\n                remainder = str(timedelta(seconds=(total_seconds - max_seconds))).split(\":\", 1)[1]\n\n                shift[\"end_time\"] = end_time\n\n                shift[\"shift_end\"] = f\"{end_time} / {remainder}\"\n\n        # Setting goalie values\n\n        if shift[\"position\"] == \"G\":\n            shift[\"goalie\"] = 1\n\n        else:\n            shift[\"goalie\"] = 0\n\n        # Setting home and away values\n\n        if shift[\"team_venue\"] == \"HOME\":\n            shift[\"is_home\"] = 1\n\n            shift[\"is_away\"] = 0\n\n        else:\n            shift[\"is_home\"] = 0\n\n            shift[\"is_away\"] = 1\n\n    periods = np.unique([x[\"period\"] for x in self._shifts]).tolist()\n\n    # Setting list of teams to iterate through while iterating through the periods\n\n    teams = [\"HOME\", \"AWAY\"]\n\n    for period in periods:\n        # Getting max seconds for the period\n\n        max_seconds = max([int(x[\"end_time_seconds\"]) for x in self._shifts if x[\"period\"] == period])\n\n        # Iterating through home and away teams\n\n        for team in teams:\n            # Getting the team's goalies for the game\n\n            team_goalies = [x for x in self._shifts if x[\"goalie\"] == 1 and x[\"team_venue\"] == team]\n\n            # Getting the goalies for the period\n\n            goalies = [\n                x for x in self._shifts if x[\"goalie\"] == 1 and x[\"team_venue\"] == team and x[\"period\"] == period\n            ]\n\n            # If there are no goalies changing during the period, we need to add them\n\n            if len(goalies) &lt; 1:  # Not covered by tests\n                if period == 1:\n                    if len(team_goalies) &lt; 1:\n                        first_goalie = {}\n\n                        starter = [\n                            x\n                            for x in actives.values()\n                            if x[\"position\"] == \"G\" and x[\"team_venue\"] == team and x[\"starter\"] == 1\n                        ][0]\n\n                        new_values = {\n                            \"season\": season,\n                            \"session\": game_session,\n                            \"game_id\": self.game_id,\n                            \"period\": period,\n                            \"team_venue\": team,\n                            \"goalie\": 1,\n                            \"shift_count\": 1,\n                        }\n\n                        new_values.update(starter)\n\n                        if team == \"HOME\":\n                            new_values.update({\"is_home\": 1, \"is_away\": 0})\n\n                        else:\n                            new_values.update({\"is_away\": 1, \"is_home\": 0})\n\n                        first_goalie.update(new_values)\n\n                    else:\n                        first_goalie = team_goalies[0]\n\n                    # Initial dictionary is set using data from the first goalie to appear\n\n                    goalie_shift = dict(first_goalie)\n\n                else:\n                    # Initial dictionary is set using data from the pervious goalie to appear\n\n                    prev_goalie = [x for x in team_goalies if x[\"period\"] == (period - 1)][-1]\n\n                    goalie_shift = dict(prev_goalie)\n\n                # Setting goalie shift number so we can identify later\n\n                goalie_shift[\"number\"] = 0\n\n                # Setting the period for the current period\n\n                goalie_shift[\"period\"] = period\n\n                # Setting the start time\n\n                goalie_shift[\"start_time\"] = \"0:00\"\n\n                # Setting the start time in seconds\n\n                goalie_shift[\"start_time_seconds\"] = 0\n\n                # If during regular time\n\n                if period &lt; 4:\n                    # Setting shift start value\n\n                    goalie_shift[\"shift_start\"] = \"0:00 / 20:00\"\n\n                    if max_seconds &lt; 1200:\n                        # Setting end time value\n\n                        goalie_shift[\"end_time\"] = \"20:00\"\n\n                        # Setting end time in seconds\n\n                        goalie_shift[\"end_time_seconds\"] = 1200\n\n                        # Setting the duration, assuming they were out there the whole time\n\n                        goalie_shift[\"duration\"] = \"20:00\"\n\n                        # Setting the duration in seconds, assuming they were out there the whole time\n\n                        goalie_shift[\"duration_seconds\"] = 1200\n\n                        # Setting the shift end value\n\n                        goalie_shift[\"shift_end\"] = \"20:00 / 0:00\"\n\n                # If the period is greater than 3\n\n                else:\n                    # Need to account for whether regular season or playoffs\n\n                    if game_session == \"P\":\n                        goalie_shift[\"shift_start\"] = \"0:00 / 20:00\"\n\n                        total_seconds = 1200\n\n                    else:\n                        goalie_shift[\"shift_start\"] = \"0:00 / 5:00\"\n\n                        total_seconds = 300\n\n                    if max_seconds &lt; total_seconds:\n                        # Getting end time\n\n                        end_time = str(timedelta(seconds=max_seconds)).split(\":\", 1)[1]\n\n                        # Getting remainder time\n\n                        remainder = str(timedelta(seconds=(total_seconds - max_seconds))).split(\":\", 1)[1]\n\n                        # Setting values\n\n                        goalie_shift[\"end_time_seconds\"] = max_seconds\n\n                        goalie_shift[\"end_time\"] = end_time\n\n                        goalie_shift[\"shift_end\"] = f\"{end_time} / {remainder}\"\n\n                # Appending the new goalie shift to the game list\n\n                self._shifts.append(goalie_shift)\n\n        # Iterating through the shifts\n\n        for shift in self._shifts:\n            # Fixing goalie errors\n\n            if (\n                shift[\"goalie\"] == 1\n                and shift[\"period\"] == period\n                and (not shift.get(\"shift_end\") or shift[\"shift_end\"] == \"0:00 / 0:00\")\n            ):  # Not covered by tests\n                if period &lt; 4:\n                    shift[\"shift_end\"] = \"20:00 / 0:00\"\n                    shift[\"end_time\"] = \"20:00\"\n                    shift[\"end_time_seconds\"] = 1200\n\n                else:\n                    total_seconds = 300 if game_session == \"R\" else 1200\n\n                    end_time = str(timedelta(seconds=max_seconds)).split(\":\", 1)[1]\n\n                    remainder = str(timedelta(seconds=(total_seconds - max_seconds))).split(\":\", 1)[1]\n\n                    shift[\"end_time_seconds\"] = max_seconds\n                    shift[\"end_time\"] = end_time\n                    shift[\"shift_end\"] = f\"{end_time} / {remainder}\"\n\n                # Setting duration and duration in seconds\n\n                shift[\"duration_seconds\"] = shift[\"end_time_seconds\"] - shift[\"start_time_seconds\"]\n\n                shift[\"duration\"] = str(timedelta(seconds=shift[\"duration_seconds\"])).split(\":\", 1)[1]\n\n    self._shifts = [PlayerShift.model_validate(shift).model_dump() for shift in self._shifts]\n</code></pre>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Season","title":"Season","text":"<p>Scrapes schedule and standings data.</p> <p>Helpful for pulling game IDs and scraping programmatically.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int or float or str</code> <p>4-digit year identifier, the first year in the season, e.g., 2023</p> required <p>Attributes:</p> Name Type Description <code>season</code> <code>int</code> <p>8-digit year identifier, the year entered, plus 1, e.g., 20232024</p> <p>Examples:</p> <p>First, instantiate the Season object</p> <pre><code>&gt;&gt;&gt; season = Season(2023)\n</code></pre> <p>Scrape schedule information</p> <pre><code>&gt;&gt;&gt; nsh_schedule = season.schedule(\"NSH\")  # Returns the schedule for the Nashville Predators\n</code></pre> <p>Scrape standings information</p> <pre><code>&gt;&gt;&gt; standings = season.standings  # Returns the latest standings for that season\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>class Season:\n    \"\"\"Scrapes schedule and standings data.\n\n    Helpful for pulling game IDs and scraping programmatically.\n\n    Parameters:\n        year (int or float or str):\n            4-digit year identifier, the first year in the season, e.g., 2023\n\n    Attributes:\n        season (int):\n            8-digit year identifier, the year entered, plus 1, e.g., 20232024\n\n    Examples:\n        First, instantiate the Season object\n        &gt;&gt;&gt; season = Season(2023)\n\n        Scrape schedule information\n        &gt;&gt;&gt; nsh_schedule = season.schedule(\"NSH\")  # Returns the schedule for the Nashville Predators\n\n        Scrape standings information\n        &gt;&gt;&gt; standings = season.standings  # Returns the latest standings for that season\n\n    \"\"\"\n\n    def __init__(self, year: str | int | float):\n        \"\"\"Instantiates a Season object for a given year.\"\"\"\n        if len(str(year)) == 8:\n            self.season = int(year)\n\n        elif len(str(year)) == 4:\n            self.season = int(f\"{year}{int(year) + 1}\")\n\n        first_year = int(str(self.season)[0:4])\n\n        teams_1917 = [\"MTL\", \"MWN\", \"SEN\"]  # \"TAN\"]\n\n        teams_1918 = [\"MTL\", \"SEN\", \"TAN\"]\n\n        teams_1919 = [\"MTL\", \"QBD\", \"SEN\", \"TSP\"]\n\n        teams_1920 = [\"HAM\", \"MTL\", \"SEN\", \"TSP\"]\n\n        teams_1924 = [\"BOS\", \"HAM\", \"MMR\", \"MTL\", \"SEN\", \"TSP\"]\n\n        teams_1925 = [\"BOS\", \"MMR\", \"MTL\", \"NYA\", \"PIR\", \"SEN\", \"TSP\"]\n\n        teams_1926 = [\"BOS\", \"CHI\", \"DCG\", \"MMR\", \"MTL\", \"NYA\", \"NYR\", \"PIR\", \"SEN\", \"TSP\"]\n\n        teams_1927 = [\"BOS\", \"CHI\", \"DCG\", \"MMR\", \"MTL\", \"NYA\", \"NYR\", \"PIR\", \"SEN\", \"TOR\"]\n\n        teams_1930 = [\"BOS\", \"CHI\", \"DFL\", \"MMR\", \"MTL\", \"NYA\", \"NYR\", \"QUA\", \"SEN\", \"TOR\"]\n\n        teams_1931 = [\"BOS\", \"CHI\", \"DFL\", \"MMR\", \"MTL\", \"NYA\", \"NYR\", \"TOR\"]\n\n        teams_1932 = [\"BOS\", \"CHI\", \"DET\", \"MMR\", \"MTL\", \"NYA\", \"NYR\", \"SEN\", \"TOR\"]\n\n        teams_1934 = [\"BOS\", \"CHI\", \"DET\", \"MMR\", \"MTL\", \"NYA\", \"NYR\", \"SLE\", \"TOR\"]\n\n        teams_1935 = [\"BOS\", \"CHI\", \"DET\", \"MMR\", \"MTL\", \"NYA\", \"NYR\", \"TOR\"]\n\n        teams_1938 = [\"BOS\", \"CHI\", \"DET\", \"MTL\", \"NYA\", \"NYR\", \"TOR\"]\n\n        teams_1941 = [\"BOS\", \"BRK\", \"CHI\", \"DET\", \"MTL\", \"NYR\", \"TOR\"]\n\n        teams_1942 = [\"BOS\", \"CHI\", \"DET\", \"MTL\", \"NYR\", \"TOR\"]\n\n        teams_1967 = [\"BOS\", \"CHI\", \"DET\", \"LAK\", \"MNS\", \"MTL\", \"NYR\", \"OAK\", \"PHI\", \"PIT\", \"STL\", \"TOR\"]\n\n        teams_1970 = [\"BOS\", \"BUF\", \"CGS\", \"CHI\", \"DET\", \"LAK\", \"MNS\", \"MTL\", \"NYR\", \"PHI\", \"PIT\", \"STL\", \"TOR\", \"VAN\"]\n\n        teams_1972 = [\n            \"AFM\",\n            \"BOS\",\n            \"BUF\",\n            \"CGS\",\n            \"CHI\",\n            \"DET\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n        ]\n\n        teams_1974 = [\n            \"AFM\",\n            \"BOS\",\n            \"BUF\",\n            \"CGS\",\n            \"CHI\",\n            \"DET\",\n            \"KCS\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_1976 = [\n            \"AFM\",\n            \"BOS\",\n            \"BUF\",\n            \"CHI\",\n            \"CLE\",\n            \"CLR\",\n            \"DET\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_1978 = [\n            \"AFM\",\n            \"BOS\",\n            \"BUF\",\n            \"CHI\",\n            \"CLR\",\n            \"DET\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_1979 = [\n            \"AFM\",\n            \"BOS\",\n            \"BUF\",\n            \"CHI\",\n            \"CLR\",\n            \"DET\",\n            \"EDM\",\n            \"HFD\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"QUE\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1980 = [\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"CLR\",\n            \"DET\",\n            \"EDM\",\n            \"HFD\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"QUE\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1982 = [\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"DET\",\n            \"EDM\",\n            \"HFD\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"QUE\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1991 = [\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"DET\",\n            \"EDM\",\n            \"HFD\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"QUE\",\n            \"SJS\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1992 = [\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"DET\",\n            \"EDM\",\n            \"HFD\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PIT\",\n            \"QUE\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1993 = [\n            \"ANA\",\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"HFD\",\n            \"LAK\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PIT\",\n            \"QUE\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1995 = [\n            \"ANA\",\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"HFD\",\n            \"LAK\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1996 = [\n            \"ANA\",\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"HFD\",\n            \"LAK\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PHX\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_1997 = [\n            \"ANA\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PHX\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_1998 = [\n            \"ANA\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PHX\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_1999 = [\n            \"ANA\",\n            \"ATL\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PHX\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_2000 = [\n            \"ANA\",\n            \"ATL\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CBJ\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MIN\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PHX\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_2011 = [\n            \"ANA\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CBJ\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MIN\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PHX\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WPG\",\n            \"WSH\",\n        ]\n\n        teams_2014 = [\n            \"ANA\",\n            \"ARI\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CBJ\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MIN\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WPG\",\n            \"WSH\",\n        ]\n\n        teams_2017 = [\n            \"ANA\",\n            \"ARI\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CBJ\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MIN\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"VGK\",\n            \"WPG\",\n            \"WSH\",\n        ]\n\n        teams_2021 = [\n            \"ANA\",\n            \"ARI\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CBJ\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MIN\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PIT\",\n            \"SEA\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"VGK\",\n            \"WPG\",\n            \"WSH\",\n        ]\n\n        teams_2024 = [\n            \"ANA\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CBJ\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MIN\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PIT\",\n            \"SEA\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"UTA\",\n            \"VAN\",\n            \"VGK\",\n            \"WPG\",\n            \"WSH\",\n        ]\n\n        self._teams_dict = {\n            1917: teams_1917,\n            1918: teams_1918,\n            1919: teams_1919,\n            1920: teams_1920,\n            1921: teams_1920,\n            1922: teams_1920,\n            1923: teams_1920,\n            1924: teams_1924,\n            1925: teams_1925,\n            1926: teams_1926,\n            1927: teams_1927,\n            1928: teams_1927,\n            1929: teams_1927,\n            1930: teams_1930,\n            1931: teams_1931,\n            1932: teams_1932,\n            1933: teams_1932,\n            1934: teams_1934,\n            1935: teams_1935,\n            1936: teams_1935,\n            1937: teams_1935,\n            1938: teams_1938,\n            1939: teams_1938,\n            1940: teams_1938,\n            1941: teams_1941,\n            1942: teams_1942,\n            1943: teams_1942,\n            1944: teams_1942,\n            1945: teams_1942,\n            1946: teams_1942,\n            1947: teams_1942,\n            1948: teams_1942,\n            1949: teams_1942,\n            1950: teams_1942,\n            1951: teams_1942,\n            1952: teams_1942,\n            1953: teams_1942,\n            1954: teams_1942,\n            1955: teams_1942,\n            1956: teams_1942,\n            1957: teams_1942,\n            1958: teams_1942,\n            1959: teams_1942,\n            1960: teams_1942,\n            1961: teams_1942,\n            1962: teams_1942,\n            1963: teams_1942,\n            1964: teams_1942,\n            1965: teams_1942,\n            1966: teams_1942,\n            1967: teams_1967,\n            1968: teams_1967,\n            1969: teams_1967,\n            1970: teams_1970,\n            1971: teams_1970,\n            1972: teams_1972,\n            1973: teams_1972,\n            1974: teams_1974,\n            1975: teams_1974,\n            1976: teams_1976,\n            1977: teams_1976,\n            1978: teams_1978,\n            1979: teams_1979,\n            1980: teams_1980,\n            1981: teams_1980,\n            1982: teams_1982,\n            1983: teams_1982,\n            1984: teams_1982,\n            1985: teams_1982,\n            1986: teams_1982,\n            1987: teams_1982,\n            1988: teams_1982,\n            1989: teams_1982,\n            1990: teams_1982,\n            1991: teams_1991,\n            1992: teams_1992,\n            1993: teams_1993,\n            1994: teams_1993,\n            1995: teams_1995,\n            1996: teams_1996,\n            1997: teams_1997,\n            1998: teams_1998,\n            1999: teams_1999,\n            2000: teams_2000,\n            2001: teams_2000,\n            2002: teams_2000,\n            2003: teams_2000,\n            2004: teams_2000,\n            2005: teams_2000,\n            2006: teams_2000,\n            2007: teams_2000,\n            2008: teams_2000,\n            2009: teams_2000,\n            2010: teams_2000,\n            2011: teams_2011,\n            2012: teams_2011,\n            2013: teams_2011,\n            2014: teams_2014,\n            2015: teams_2014,\n            2016: teams_2014,\n            2017: teams_2017,\n            2018: teams_2017,\n            2019: teams_2017,\n            2020: teams_2017,\n            2021: teams_2021,\n            2022: teams_2021,\n            2023: teams_2021,\n            2024: teams_2024,\n        }\n\n        self.teams = self._teams_dict.get(first_year)\n\n        if self._teams_dict.get(first_year) is None:\n            raise Exception(f\"{first_year} IS NOT SUPPORTED\")\n\n        self._schedule = []\n\n        self._scraped_schedule_teams = []\n\n        self._scraped_schedule = []\n\n        self._standings = []\n\n        self._requests_session = ChickenSession()\n\n        self._season_str = str(self.season)[:4] + \"-\" + str(self.season)[6:8]\n\n    def _scrape_schedule(\n        self, team_schedule: str = \"all\", sessions: list[str] | str | None = None, disable_progress_bar=False\n    ) -&gt; None:\n        \"\"\"Method to scrape the schedule from NHL API endpoint.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Season object\n            &gt;&gt;&gt; season = Season(2023)\n\n            Before scraping the data, any of the storage objects are None\n            &gt;&gt;&gt; season.schedule  # Returns an empty list\n\n            You can use the `_scrape_schedule` method to get any data\n            &gt;&gt;&gt; season._scrape_schedule()  # Scrapes all teams, all games available\n            &gt;&gt;&gt; season._schedule  # Returns schedule\n        \"\"\"\n        schedule_list = []\n\n        if team_schedule not in self._scraped_schedule_teams:\n            with self._requests_session as s:\n                with ChickenProgress(disable=disable_progress_bar) as progress:\n                    if team_schedule == \"all\":\n                        teams = self.teams\n\n                        pbar_stub = f\"{self._season_str} schedule information\"\n\n                        pbar_message = f\"Downloading {pbar_stub} for all teams...\"\n\n                        sched_task = progress.add_task(pbar_message, total=len(teams))\n\n                        for team in teams:\n                            if team in self._scraped_schedule_teams:  # Not covered by tests\n                                if team != teams[-1]:\n                                    pbar_message = f\"Downloading {pbar_stub} for {team}...\"\n                                else:\n                                    pbar_message = f\"Finished downloading {pbar_stub}\"\n                                progress.update(sched_task, description=pbar_message, advance=1, refresh=True)\n\n                                continue\n\n                            url = f\"https://api-web.nhle.com/v1/club-schedule-season/{team}/{self.season}\"\n\n                            response = s.get(url).json()\n                            if response[\"games\"]:\n                                games = [x for x in response[\"games\"] if x[\"id\"] not in self._scraped_schedule]\n                                games = self._munge_schedule(games, sessions)\n                                schedule_list.extend(games)\n                                self._scraped_schedule_teams.append(team)\n                                self._scraped_schedule.extend(x[\"game_id\"] for x in games)\n                            if team != teams[-1]:\n                                pbar_message = f\"Downloading {pbar_stub} for {team}...\"\n                            else:\n                                pbar_message = f\"Finished downloading {pbar_stub}\"\n                            progress.update(sched_task, description=pbar_message, advance=1, refresh=True)\n                    else:\n                        if team_schedule not in self._scraped_schedule_teams:\n                            pbar_stub = f\"{self._season_str} schedule information for {team_schedule}\"\n                            pbar_message = f\"Downloading {pbar_stub}...\"\n                            sched_task = progress.add_task(pbar_message, total=1)\n\n                            url = f\"https://api-web.nhle.com/v1/club-schedule-season/{team_schedule}/{self.season}\"\n                            response = s.get(url).json()\n                            if response[\"games\"]:\n                                games = [x for x in response[\"games\"] if x[\"id\"] not in self._scraped_schedule]\n                                games = self._munge_schedule(games, sessions)\n                                schedule_list.extend(games)\n                                self._scraped_schedule.extend(x[\"game_id\"] for x in games)\n                                self._scraped_schedule_teams.append(team_schedule)\n\n                            pbar_message = f\"Finished downloading {pbar_stub}\"\n                            progress.update(sched_task, description=pbar_message, advance=1, refresh=True)\n\n        schedule_list = sorted(schedule_list, key=lambda x: (x[\"game_date_dt\"], x[\"game_id\"]))\n\n        self._schedule.extend(schedule_list)\n\n    @staticmethod\n    def _munge_schedule(games: list[dict], sessions: list[str] | str | None) -&gt; list[dict]:\n        \"\"\"Method to munge the schedule from NHL API endpoint.\n\n        Nested within `_scrape_schedule` method.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n        \"\"\"\n        returned_games = []\n\n        for game in games:\n            if not sessions:\n                if int(game[\"gameType\"]) not in [2, 3]:\n                    continue\n\n            else:\n                session_dict = {\"PR\": 1, \"R\": 2, \"P\": 3}\n\n                if isinstance(sessions, list):\n                    session_codes = [session_dict[x] for x in sessions]\n\n                if isinstance(sessions, str):\n                    session_codes = [session_dict[sessions]]\n\n                if int(game[\"gameType\"]) not in session_codes:\n                    continue\n\n            local_time = pytz.timezone(game[\"venueTimezone\"])\n\n            if \"Z\" in game[\"startTimeUTC\"]:\n                game[\"startTimeUTC\"] = game[\"startTimeUTC\"][:-1] + \"+00:00\"\n\n            start_time_utc_dt: dt = dt.fromisoformat(game[\"startTimeUTC\"])\n            game_date_dt: dt = start_time_utc_dt.astimezone(local_time)\n\n            start_time = game_date_dt.strftime(\"%H:%M\")\n            game_date = game_date_dt.strftime(\"%Y-%m-%d\")\n\n            game_info = {\n                \"season\": game[\"season\"],\n                \"session\": game[\"gameType\"],\n                \"game_id\": game[\"id\"],\n                \"game_date\": game_date,\n                \"start_time\": start_time,\n                \"game_state\": game[\"gameState\"],\n                \"home_team\": game[\"homeTeam\"][\"abbrev\"],\n                \"home_team_id\": game[\"homeTeam\"][\"id\"],\n                \"home_score\": game[\"homeTeam\"].get(\"score\", 0),\n                \"away_team\": game[\"awayTeam\"][\"abbrev\"],\n                \"away_team_id\": game[\"awayTeam\"][\"id\"],\n                \"away_score\": game[\"awayTeam\"].get(\"score\", 0),\n                \"venue\": game[\"venue\"][\"default\"].upper(),\n                \"venue_timezone\": game[\"venueTimezone\"],\n                \"neutral_site\": int(game[\"neutralSite\"]),\n                \"game_date_dt\": game_date_dt,\n                \"tv_broadcasts\": game[\"tvBroadcasts\"],\n                \"home_logo\": game[\"homeTeam\"].get(\"logo\"),\n                \"home_logo_dark\": game[\"homeTeam\"].get(\"darkLogo\"),\n                \"away_logo\": game[\"awayTeam\"].get(\"logo\"),\n                \"away_logo_dark\": game[\"awayTeam\"].get(\"darkLogo\"),\n            }\n\n            returned_games.append(ScheduleGame.model_validate(game_info).model_dump())\n\n        return returned_games\n\n    @staticmethod\n    def _finalize_schedule(games: list[dict]) -&gt; pd.DataFrame:\n        \"\"\"Method to finalize the schedule from NHL API endpoint into a Pandas DataFrame.\n\n        Nested within `schedule` method.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n        \"\"\"\n        df = pd.DataFrame(games)\n\n        return df\n\n    def schedule(\n        self,\n        team_schedule: str | None = \"all\",\n        sessions: list[str] | str | None = None,\n        disable_progress_bar: bool = False,\n    ) -&gt; pd.DataFrame:\n        \"\"\"Scrapes NHL schedule. Can return whole or season or subset of teams' schedules.\n\n        Parameters:\n            team_schedule (str | None):\n                Three-letter team's schedule to scrape, e.g., NSH\n            sessions: (list | None | str | int):\n                Whether to scrape regular season (2), playoffs (3), or pre-season (1), if left blank,\n                scrapes regular season and playoffs\n            disable_progress_bar (bool):\n                Whether to disable progress bar\n\n        Returns:\n            season (int):\n                8-digit season identifier, e.g., 20232024\n            session (int):\n                Type of game played - pre-season (1), regular season (2), or playoffs (3), e.g., 2\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020015\n            game_date (str):\n                Date the game is played, in local time, e.g., 2023-10-12\n            start_time (str):\n                Start time for the game in the home time zone, in military time, e.g., 19:00\n            game_state (str):\n                Status of the game, whether official or future, e.g., OFF\n            home_team (str):\n                Three-letter code for the home team, e.g., NSH\n            home_team_id (int):\n                Two-digit code assigned to the home franchise by the NHL, e.g., 18\n            home_score (int):\n                Number of goals scored by the home team, e.g., 3\n            away_team (str):\n                Three-letter code for the away team, e.g., SEA\n            away_team_id (int):\n                Two-digit code assigned to the away franchise by the NHL, e.g., 55\n            away_score (int):\n                Number of goals scored by the away team, e.g., 0\n            venue (str):\n                Name of the venue where game is / was played, e.g., BRIDGESTONE ARENA\n            venue_timezone (str):\n                Name of the venue timezone, e.g., US/Central\n            neutral_site (int):\n                Whether game is / was played at a neutral site location, e.g., 0\n            game_date_dt (dt.datetime):\n                Game date as datetime object, e.g., 2023-10-12 19:00:00-05:00\n            tv_broadcasts (list):\n                Where the game was broadcast, as a list of dictionaries, e.g., [{'id': 386, 'market': 'A',\n                'countryCode': 'US', 'network': 'ROOT-NW', 'sequenceNumber': 65}, {'id': 375, 'market': 'H',\n                'countryCode': 'US', 'network': 'BSSO', 'sequenceNumber': 70}]\n            home_logo (str):\n                URL for the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/NSH_light.svg\n            home_logo_dark (str):\n                URL for the dark version of the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/NSH_dark.svg\n            away_logo (str):\n                URL for the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/TBL_light.svg\n            away_logo_dark (str):\n                URL for the dark version of the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/TBL_dark.svg\n\n        Examples:\n            Scrape schedule for all teams\n            &gt;&gt;&gt; season = Season(2023)\n            &gt;&gt;&gt; schedule = season.schedule()\n\n            Get schedule for a single team\n            &gt;&gt;&gt; schedule = season.schedule(\"NSH\")\n\n        \"\"\"\n        if team_schedule not in self._scraped_schedule_teams:\n            self._scrape_schedule(\n                team_schedule=team_schedule, sessions=sessions, disable_progress_bar=disable_progress_bar\n            )\n\n        if team_schedule != \"all\":\n            return_list = [\n                x for x in self._schedule if x[\"home_team\"] == team_schedule or x[\"away_team\"] == team_schedule\n            ]\n\n            return_list = sorted(return_list, key=lambda x: (x[\"game_date_dt\"], x[\"game_id\"]))\n\n            return self._finalize_schedule(return_list)\n\n        else:\n            return self._finalize_schedule(self._schedule)\n\n    def _scrape_standings(self):\n        \"\"\"Scrape standings from NHL API endpoint.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Season object\n            &gt;&gt;&gt; season = Season(2023)\n\n            Before scraping the data, any of the storage objects are None\n            &gt;&gt;&gt; season._standings  # Returns an empty list\n\n            You can use the `_scrape_standings` method to get any data\n            &gt;&gt;&gt; season._scrape_standings()  # Scrapes all teams, all games available\n            &gt;&gt;&gt; season._standings  # Returns raw standings data\n\n            However, then need to manually clean the data\n            &gt;&gt;&gt; season._munge_standings()\n            &gt;&gt;&gt; season._standings  # Returns standings data\n        \"\"\"\n        url = \"https://api-web.nhle.com/v1/standings/now\"\n\n        with self._requests_session as s:\n            r = s.get(url).json()\n\n        self._standings = r[\"standings\"]\n\n    def _munge_standings(self):\n        \"\"\"Function to munge standings from NHL API endpoint.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Season object\n            &gt;&gt;&gt; season = Season(2023)\n\n            Before scraping the data, any of the storage objects are None\n            &gt;&gt;&gt; season._standings  # Returns an empty list\n\n            You can use the `_scrape_standings` method to get any data\n            &gt;&gt;&gt; season._scrape_standings()  # Scrapes all teams, all games available\n            &gt;&gt;&gt; season._standings  # Returns raw standings data\n\n            However, then need to manually clean the data\n            &gt;&gt;&gt; season._munge_standings()\n            &gt;&gt;&gt; season._standings  # Returns standings data\n        \"\"\"\n        final_standings = []\n\n        for team in self._standings:\n            team_data = {\n                \"conference\": team[\"conferenceName\"],\n                \"date\": team[\"date\"],\n                \"division\": team[\"divisionName\"],\n                \"games_played\": team[\"gamesPlayed\"],\n                \"goal_differential\": team[\"goalDifferential\"],\n                \"goal_differential_pct\": team[\"goalDifferentialPctg\"],\n                \"goals_against\": team[\"goalAgainst\"],\n                \"goals_for\": team[\"goalFor\"],\n                \"goals_for_pct\": team[\"goalsForPctg\"],\n                \"home_games_played\": team[\"homeGamesPlayed\"],\n                \"home_goal_differential\": team[\"homeGoalDifferential\"],\n                \"home_goals_against\": team[\"homeGoalsAgainst\"],\n                \"home_goals_for\": team[\"homeGoalsFor\"],\n                \"home_losses\": team[\"homeLosses\"],\n                \"home_ot_losses\": team[\"homeOtLosses\"],\n                \"home_points\": team[\"homePoints\"],\n                \"home_wins\": team[\"homeWins\"],\n                \"home_regulation_wins\": team[\"homeRegulationWins\"],\n                \"home_ties\": team[\"homeTies\"],\n                \"l10_goal_differential\": team[\"l10GoalDifferential\"],\n                \"l10_goals_against\": team[\"l10GoalsAgainst\"],\n                \"l10_goals_for\": team[\"l10GoalsFor\"],\n                \"l10_losses\": team[\"l10Losses\"],\n                \"l10_ot_losses\": team[\"l10OtLosses\"],\n                \"l10_points\": team[\"l10Points\"],\n                \"l10_regulation_wins\": team[\"l10RegulationWins\"],\n                \"l10_ties\": team[\"l10Ties\"],\n                \"l10_wins\": team[\"l10Wins\"],\n                \"losses\": team[\"losses\"],\n                \"ot_losses\": team[\"otLosses\"],\n                \"points_pct\": team[\"pointPctg\"],\n                \"points\": team[\"points\"],\n                \"regulation_win_pct\": team[\"regulationWinPctg\"],\n                \"regulation_wins\": team[\"regulationWins\"],\n                \"road_games_played\": team[\"roadGamesPlayed\"],\n                \"road_goal_differential\": team[\"roadGoalDifferential\"],\n                \"road_goals_against\": team[\"roadGoalsAgainst\"],\n                \"road_goals_for\": team[\"roadGoalsFor\"],\n                \"road_losses\": team[\"roadLosses\"],\n                \"road_ot_losses\": team[\"roadOtLosses\"],\n                \"road_points\": team[\"roadPoints\"],\n                \"road_regulation_wins\": team[\"roadRegulationWins\"],\n                \"road_ties\": team[\"roadTies\"],\n                \"road_wins\": team[\"roadWins\"],\n                \"season\": team[\"seasonId\"],\n                \"shootoutLosses\": team[\"shootoutLosses\"],\n                \"shootout_wins\": team[\"shootoutWins\"],\n                \"streak_code\": team[\"streakCode\"],\n                \"streak_count\": team[\"streakCount\"],\n                \"team_name\": team[\"teamName\"][\"default\"],\n                \"team\": team[\"teamAbbrev\"][\"default\"],\n                \"team_logo\": team[\"teamLogo\"],\n                \"ties\": team[\"ties\"],\n                \"waivers_sequence\": team[\"waiversSequence\"],\n                \"wildcard_sequence\": team[\"wildcardSequence\"],\n                \"win_pct\": team[\"winPctg\"],\n                \"wins\": team[\"wins\"],\n            }\n\n            final_standings.append(StandingsTeam.model_validate(team_data).model_dump())\n\n        self._standings = final_standings\n\n    def _finalize_standings(self):\n        df = pd.DataFrame(self._standings)\n\n        return df\n\n    @property\n    def standings(self):\n        \"\"\"Pandas DataFrame of the standings from the NHL API.\n\n        Returns:\n            season (int):\n                8-digit season identifier, e.g., 20232024\n            date (str):\n                Date standings scraped, e.g., 2024-04-08\n            team (str):\n                Three-letter team code, e.g., NSH\n            team_name (str):\n                Full team name, e.g., Nashville Predators\n            conference (str):\n                Name of the conference in which the team plays, e.g., Western\n            division (str):\n                Name of the division in which the team plays, e.g., Central\n            games_played (int):\n                Number of games played, e.g., 78\n            points (int):\n                Number of points accumulated, e.g., 94\n            points_pct (float):\n                Points percentage, e.g., 0.602564\n            wins (int):\n                Number of wins, e.g., 45\n            regulation_wins (int):\n                Number of wins in regulation time, e.g., 36\n            shootout_wins (int):\n                Number of wins by shootout, e.g., 3\n            losses (int):\n                Number of losses, e.g., 29\n            ot_losses (int):\n                Number of losses in overtime play, e.g., 4\n            shootout_losses (int | np.nan):\n                Number of losses due during shootout, e.g., NaN\n            ties (int):\n                Number of ties, e.g., 0\n            win_pct (float):\n                Win percentage, e.g., 0.576923\n            regulation_win_pct (float):\n                Win percentage in regulation time, e.g., 0.461538\n            streak_code (str):\n                Whether streak is a winning or losing streak, e.g., W\n            streak_count (int):\n                Number of games won or lost, e.g., 1\n            goals_for (int):\n                Number of goals scored, e.g., 253\n            goals_against (int):\n                Number of goals against, e.g., 235\n            goals_for_pct (float):\n                Goals scored per game played, e.g., 3.24359\n            goal_differential (int):\n                Difference in goals scored and goals allowed, e.g., 18\n            goal_differential_pct (float):\n                Difference in goals scored and goals allowed as a percentage of...something, e.g., 0.230769\n            home_games_played (int):\n                Number of home games played, e.g., 39\n            home_points (int):\n                Number of home points accumulated, e.g., 45\n            home_goals_for (int):\n                Number of goals scored in home games, e.g., 126\n            home_goals_against (int):\n                Number of goals allowed in home games, e.g., 118\n            home_goal_differential (int):\n                Difference in home goals scored and home goals allowed, e.g., 8\n            home_wins (int):\n                Number of wins at home, e.g., 22\n            home_losses (int):\n                Number of losses at home, e.g., 16\n            home_ot_losses (int):\n                Number of home losses in overtime, e.g., 1\n            home_ties (int):\n                Number of ties at home, e.g., 0\n            home_regulation_wins (int):\n                Number of wins at home in regulation, e.g., 17\n            road_games_played (int):\n                Number of games played on the road, e.g., 39\n            road_points (int):\n                Number of points accumulated on the road, e.g., 49\n            road_goals_for (int):\n                Number of goals scored on the road, e.g., 127\n            road_goals_against (int):\n                Number of goals allowed on the road, e.g., 117\n            road_goal_differential (int):\n                Difference in goals scored and goals allowed on the road, e.g., 10\n            road_wins (int):\n                Number of wins on the road, e.g., 23\n            road_losses (int):\n                Number of losses on the road, e.g., 13\n            road_ot_losses (int):\n                Number of losses on the road in overtime, e.g., 3\n            road_ties (int):\n                Number of ties on the road, e.g., 0\n            road_regulation_wins (int):\n                Number of wins on the road in regulation, e.g., 19\n            l10_points (int):\n                Number of points accumulated in last ten games, e.g., 12\n            l10_goals_for (int):\n                Number of goals scored in last ten games, e.g., 34\n            l10_goals_against (int):\n                Number of goals allowed in last ten games, e.g., 31\n            l10_goal_differential (int):\n                Difference in goals scored and allowed in last ten games, e.g., 3\n            l10_wins (int):\n                Number of wins in last ten games, e.g., 6\n            l10_losses (int):\n                Number of losses in last ten games, e.g., 4\n            l10_ot_losses (int):\n                Number of losses in overtime in last ten games, e.g., 0\n            l10_ties (int):\n                Number of  ties in last ten games, e.g., 0\n            l10_regulation_wins (int):\n                Number of wins in regulation in last ten games, e.g., 4\n            team_logo (str):\n                URL for the team logo, e.g., https://assets.nhle.com/logos/nhl/svg/NSH_light.svg\n            wildcard_sequence (int):\n                Order for wildcard rankings, e.g., 1\n            waivers_sequence (int):\n                Order for waiver wire, e.g., 19\n\n        Examples:\n            &gt;&gt;&gt; season = Season(2023)\n            &gt;&gt;&gt; standings = season.standings\n\n        \"\"\"\n        if not self._standings:\n            self._scrape_standings()\n            self._munge_standings()\n\n        return self._finalize_standings()\n</code></pre>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Season._scrape_schedule","title":"_scrape_schedule","text":"<pre><code>_scrape_schedule(\n    team_schedule=\"all\",\n    sessions=None,\n    disable_progress_bar=False,\n)\n</code></pre> <p>Method to scrape the schedule from NHL API endpoint.</p> <p>For more information and usage, see https://chickenstats.com/latest/contribute/contribute/</p> <p>Examples:</p> <p>First, instantiate the Season object</p> <pre><code>&gt;&gt;&gt; season = Season(2023)\n</code></pre> <p>Before scraping the data, any of the storage objects are None</p> <pre><code>&gt;&gt;&gt; season.schedule  # Returns an empty list\n</code></pre> <p>You can use the <code>_scrape_schedule</code> method to get any data</p> <pre><code>&gt;&gt;&gt; season._scrape_schedule()  # Scrapes all teams, all games available\n&gt;&gt;&gt; season._schedule  # Returns schedule\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _scrape_schedule(\n    self, team_schedule: str = \"all\", sessions: list[str] | str | None = None, disable_progress_bar=False\n) -&gt; None:\n    \"\"\"Method to scrape the schedule from NHL API endpoint.\n\n    For more information and usage, see\n    https://chickenstats.com/latest/contribute/contribute/\n\n    Examples:\n        First, instantiate the Season object\n        &gt;&gt;&gt; season = Season(2023)\n\n        Before scraping the data, any of the storage objects are None\n        &gt;&gt;&gt; season.schedule  # Returns an empty list\n\n        You can use the `_scrape_schedule` method to get any data\n        &gt;&gt;&gt; season._scrape_schedule()  # Scrapes all teams, all games available\n        &gt;&gt;&gt; season._schedule  # Returns schedule\n    \"\"\"\n    schedule_list = []\n\n    if team_schedule not in self._scraped_schedule_teams:\n        with self._requests_session as s:\n            with ChickenProgress(disable=disable_progress_bar) as progress:\n                if team_schedule == \"all\":\n                    teams = self.teams\n\n                    pbar_stub = f\"{self._season_str} schedule information\"\n\n                    pbar_message = f\"Downloading {pbar_stub} for all teams...\"\n\n                    sched_task = progress.add_task(pbar_message, total=len(teams))\n\n                    for team in teams:\n                        if team in self._scraped_schedule_teams:  # Not covered by tests\n                            if team != teams[-1]:\n                                pbar_message = f\"Downloading {pbar_stub} for {team}...\"\n                            else:\n                                pbar_message = f\"Finished downloading {pbar_stub}\"\n                            progress.update(sched_task, description=pbar_message, advance=1, refresh=True)\n\n                            continue\n\n                        url = f\"https://api-web.nhle.com/v1/club-schedule-season/{team}/{self.season}\"\n\n                        response = s.get(url).json()\n                        if response[\"games\"]:\n                            games = [x for x in response[\"games\"] if x[\"id\"] not in self._scraped_schedule]\n                            games = self._munge_schedule(games, sessions)\n                            schedule_list.extend(games)\n                            self._scraped_schedule_teams.append(team)\n                            self._scraped_schedule.extend(x[\"game_id\"] for x in games)\n                        if team != teams[-1]:\n                            pbar_message = f\"Downloading {pbar_stub} for {team}...\"\n                        else:\n                            pbar_message = f\"Finished downloading {pbar_stub}\"\n                        progress.update(sched_task, description=pbar_message, advance=1, refresh=True)\n                else:\n                    if team_schedule not in self._scraped_schedule_teams:\n                        pbar_stub = f\"{self._season_str} schedule information for {team_schedule}\"\n                        pbar_message = f\"Downloading {pbar_stub}...\"\n                        sched_task = progress.add_task(pbar_message, total=1)\n\n                        url = f\"https://api-web.nhle.com/v1/club-schedule-season/{team_schedule}/{self.season}\"\n                        response = s.get(url).json()\n                        if response[\"games\"]:\n                            games = [x for x in response[\"games\"] if x[\"id\"] not in self._scraped_schedule]\n                            games = self._munge_schedule(games, sessions)\n                            schedule_list.extend(games)\n                            self._scraped_schedule.extend(x[\"game_id\"] for x in games)\n                            self._scraped_schedule_teams.append(team_schedule)\n\n                        pbar_message = f\"Finished downloading {pbar_stub}\"\n                        progress.update(sched_task, description=pbar_message, advance=1, refresh=True)\n\n    schedule_list = sorted(schedule_list, key=lambda x: (x[\"game_date_dt\"], x[\"game_id\"]))\n\n    self._schedule.extend(schedule_list)\n</code></pre>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Season._munge_schedule","title":"_munge_schedule  <code>staticmethod</code>","text":"<pre><code>_munge_schedule(games, sessions)\n</code></pre> <p>Method to munge the schedule from NHL API endpoint.</p> <p>Nested within <code>_scrape_schedule</code> method.</p> <p>For more information and usage, see https://chickenstats.com/latest/contribute/contribute/</p> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>@staticmethod\ndef _munge_schedule(games: list[dict], sessions: list[str] | str | None) -&gt; list[dict]:\n    \"\"\"Method to munge the schedule from NHL API endpoint.\n\n    Nested within `_scrape_schedule` method.\n\n    For more information and usage, see\n    https://chickenstats.com/latest/contribute/contribute/\n    \"\"\"\n    returned_games = []\n\n    for game in games:\n        if not sessions:\n            if int(game[\"gameType\"]) not in [2, 3]:\n                continue\n\n        else:\n            session_dict = {\"PR\": 1, \"R\": 2, \"P\": 3}\n\n            if isinstance(sessions, list):\n                session_codes = [session_dict[x] for x in sessions]\n\n            if isinstance(sessions, str):\n                session_codes = [session_dict[sessions]]\n\n            if int(game[\"gameType\"]) not in session_codes:\n                continue\n\n        local_time = pytz.timezone(game[\"venueTimezone\"])\n\n        if \"Z\" in game[\"startTimeUTC\"]:\n            game[\"startTimeUTC\"] = game[\"startTimeUTC\"][:-1] + \"+00:00\"\n\n        start_time_utc_dt: dt = dt.fromisoformat(game[\"startTimeUTC\"])\n        game_date_dt: dt = start_time_utc_dt.astimezone(local_time)\n\n        start_time = game_date_dt.strftime(\"%H:%M\")\n        game_date = game_date_dt.strftime(\"%Y-%m-%d\")\n\n        game_info = {\n            \"season\": game[\"season\"],\n            \"session\": game[\"gameType\"],\n            \"game_id\": game[\"id\"],\n            \"game_date\": game_date,\n            \"start_time\": start_time,\n            \"game_state\": game[\"gameState\"],\n            \"home_team\": game[\"homeTeam\"][\"abbrev\"],\n            \"home_team_id\": game[\"homeTeam\"][\"id\"],\n            \"home_score\": game[\"homeTeam\"].get(\"score\", 0),\n            \"away_team\": game[\"awayTeam\"][\"abbrev\"],\n            \"away_team_id\": game[\"awayTeam\"][\"id\"],\n            \"away_score\": game[\"awayTeam\"].get(\"score\", 0),\n            \"venue\": game[\"venue\"][\"default\"].upper(),\n            \"venue_timezone\": game[\"venueTimezone\"],\n            \"neutral_site\": int(game[\"neutralSite\"]),\n            \"game_date_dt\": game_date_dt,\n            \"tv_broadcasts\": game[\"tvBroadcasts\"],\n            \"home_logo\": game[\"homeTeam\"].get(\"logo\"),\n            \"home_logo_dark\": game[\"homeTeam\"].get(\"darkLogo\"),\n            \"away_logo\": game[\"awayTeam\"].get(\"logo\"),\n            \"away_logo_dark\": game[\"awayTeam\"].get(\"darkLogo\"),\n        }\n\n        returned_games.append(ScheduleGame.model_validate(game_info).model_dump())\n\n    return returned_games\n</code></pre>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Season._finalize_schedule","title":"_finalize_schedule  <code>staticmethod</code>","text":"<pre><code>_finalize_schedule(games)\n</code></pre> <p>Method to finalize the schedule from NHL API endpoint into a Pandas DataFrame.</p> <p>Nested within <code>schedule</code> method.</p> <p>For more information and usage, see https://chickenstats.com/latest/contribute/contribute/</p> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>@staticmethod\ndef _finalize_schedule(games: list[dict]) -&gt; pd.DataFrame:\n    \"\"\"Method to finalize the schedule from NHL API endpoint into a Pandas DataFrame.\n\n    Nested within `schedule` method.\n\n    For more information and usage, see\n    https://chickenstats.com/latest/contribute/contribute/\n    \"\"\"\n    df = pd.DataFrame(games)\n\n    return df\n</code></pre>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Season._scrape_standings","title":"_scrape_standings","text":"<pre><code>_scrape_standings()\n</code></pre> <p>Scrape standings from NHL API endpoint.</p> <p>For more information and usage, see https://chickenstats.com/latest/contribute/contribute/</p> <p>Examples:</p> <p>First, instantiate the Season object</p> <pre><code>&gt;&gt;&gt; season = Season(2023)\n</code></pre> <p>Before scraping the data, any of the storage objects are None</p> <pre><code>&gt;&gt;&gt; season._standings  # Returns an empty list\n</code></pre> <p>You can use the <code>_scrape_standings</code> method to get any data</p> <pre><code>&gt;&gt;&gt; season._scrape_standings()  # Scrapes all teams, all games available\n&gt;&gt;&gt; season._standings  # Returns raw standings data\n</code></pre> <p>However, then need to manually clean the data</p> <pre><code>&gt;&gt;&gt; season._munge_standings()\n&gt;&gt;&gt; season._standings  # Returns standings data\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _scrape_standings(self):\n    \"\"\"Scrape standings from NHL API endpoint.\n\n    For more information and usage, see\n    https://chickenstats.com/latest/contribute/contribute/\n\n    Examples:\n        First, instantiate the Season object\n        &gt;&gt;&gt; season = Season(2023)\n\n        Before scraping the data, any of the storage objects are None\n        &gt;&gt;&gt; season._standings  # Returns an empty list\n\n        You can use the `_scrape_standings` method to get any data\n        &gt;&gt;&gt; season._scrape_standings()  # Scrapes all teams, all games available\n        &gt;&gt;&gt; season._standings  # Returns raw standings data\n\n        However, then need to manually clean the data\n        &gt;&gt;&gt; season._munge_standings()\n        &gt;&gt;&gt; season._standings  # Returns standings data\n    \"\"\"\n    url = \"https://api-web.nhle.com/v1/standings/now\"\n\n    with self._requests_session as s:\n        r = s.get(url).json()\n\n    self._standings = r[\"standings\"]\n</code></pre>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Season._munge_standings","title":"_munge_standings","text":"<pre><code>_munge_standings()\n</code></pre> <p>Function to munge standings from NHL API endpoint.</p> <p>For more information and usage, see https://chickenstats.com/latest/contribute/contribute/</p> <p>Examples:</p> <p>First, instantiate the Season object</p> <pre><code>&gt;&gt;&gt; season = Season(2023)\n</code></pre> <p>Before scraping the data, any of the storage objects are None</p> <pre><code>&gt;&gt;&gt; season._standings  # Returns an empty list\n</code></pre> <p>You can use the <code>_scrape_standings</code> method to get any data</p> <pre><code>&gt;&gt;&gt; season._scrape_standings()  # Scrapes all teams, all games available\n&gt;&gt;&gt; season._standings  # Returns raw standings data\n</code></pre> <p>However, then need to manually clean the data</p> <pre><code>&gt;&gt;&gt; season._munge_standings()\n&gt;&gt;&gt; season._standings  # Returns standings data\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _munge_standings(self):\n    \"\"\"Function to munge standings from NHL API endpoint.\n\n    For more information and usage, see\n    https://chickenstats.com/latest/contribute/contribute/\n\n    Examples:\n        First, instantiate the Season object\n        &gt;&gt;&gt; season = Season(2023)\n\n        Before scraping the data, any of the storage objects are None\n        &gt;&gt;&gt; season._standings  # Returns an empty list\n\n        You can use the `_scrape_standings` method to get any data\n        &gt;&gt;&gt; season._scrape_standings()  # Scrapes all teams, all games available\n        &gt;&gt;&gt; season._standings  # Returns raw standings data\n\n        However, then need to manually clean the data\n        &gt;&gt;&gt; season._munge_standings()\n        &gt;&gt;&gt; season._standings  # Returns standings data\n    \"\"\"\n    final_standings = []\n\n    for team in self._standings:\n        team_data = {\n            \"conference\": team[\"conferenceName\"],\n            \"date\": team[\"date\"],\n            \"division\": team[\"divisionName\"],\n            \"games_played\": team[\"gamesPlayed\"],\n            \"goal_differential\": team[\"goalDifferential\"],\n            \"goal_differential_pct\": team[\"goalDifferentialPctg\"],\n            \"goals_against\": team[\"goalAgainst\"],\n            \"goals_for\": team[\"goalFor\"],\n            \"goals_for_pct\": team[\"goalsForPctg\"],\n            \"home_games_played\": team[\"homeGamesPlayed\"],\n            \"home_goal_differential\": team[\"homeGoalDifferential\"],\n            \"home_goals_against\": team[\"homeGoalsAgainst\"],\n            \"home_goals_for\": team[\"homeGoalsFor\"],\n            \"home_losses\": team[\"homeLosses\"],\n            \"home_ot_losses\": team[\"homeOtLosses\"],\n            \"home_points\": team[\"homePoints\"],\n            \"home_wins\": team[\"homeWins\"],\n            \"home_regulation_wins\": team[\"homeRegulationWins\"],\n            \"home_ties\": team[\"homeTies\"],\n            \"l10_goal_differential\": team[\"l10GoalDifferential\"],\n            \"l10_goals_against\": team[\"l10GoalsAgainst\"],\n            \"l10_goals_for\": team[\"l10GoalsFor\"],\n            \"l10_losses\": team[\"l10Losses\"],\n            \"l10_ot_losses\": team[\"l10OtLosses\"],\n            \"l10_points\": team[\"l10Points\"],\n            \"l10_regulation_wins\": team[\"l10RegulationWins\"],\n            \"l10_ties\": team[\"l10Ties\"],\n            \"l10_wins\": team[\"l10Wins\"],\n            \"losses\": team[\"losses\"],\n            \"ot_losses\": team[\"otLosses\"],\n            \"points_pct\": team[\"pointPctg\"],\n            \"points\": team[\"points\"],\n            \"regulation_win_pct\": team[\"regulationWinPctg\"],\n            \"regulation_wins\": team[\"regulationWins\"],\n            \"road_games_played\": team[\"roadGamesPlayed\"],\n            \"road_goal_differential\": team[\"roadGoalDifferential\"],\n            \"road_goals_against\": team[\"roadGoalsAgainst\"],\n            \"road_goals_for\": team[\"roadGoalsFor\"],\n            \"road_losses\": team[\"roadLosses\"],\n            \"road_ot_losses\": team[\"roadOtLosses\"],\n            \"road_points\": team[\"roadPoints\"],\n            \"road_regulation_wins\": team[\"roadRegulationWins\"],\n            \"road_ties\": team[\"roadTies\"],\n            \"road_wins\": team[\"roadWins\"],\n            \"season\": team[\"seasonId\"],\n            \"shootoutLosses\": team[\"shootoutLosses\"],\n            \"shootout_wins\": team[\"shootoutWins\"],\n            \"streak_code\": team[\"streakCode\"],\n            \"streak_count\": team[\"streakCount\"],\n            \"team_name\": team[\"teamName\"][\"default\"],\n            \"team\": team[\"teamAbbrev\"][\"default\"],\n            \"team_logo\": team[\"teamLogo\"],\n            \"ties\": team[\"ties\"],\n            \"waivers_sequence\": team[\"waiversSequence\"],\n            \"wildcard_sequence\": team[\"wildcardSequence\"],\n            \"win_pct\": team[\"winPctg\"],\n            \"wins\": team[\"wins\"],\n        }\n\n        final_standings.append(StandingsTeam.model_validate(team_data).model_dump())\n\n    self._standings = final_standings\n</code></pre>"},{"location":"contribute/backend/chicken_nhl/#chicken_nhl.scrape.Season._finalize_standings","title":"_finalize_standings","text":"<pre><code>_finalize_standings()\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def _finalize_standings(self):\n    df = pd.DataFrame(self._standings)\n\n    return df\n</code></pre>"},{"location":"contribute/backend/design/","title":"<code>chickenstats</code> design","text":"<p>The library is composed of two modules, each for a different data source: <code>chickensstats.chicken_nhl</code> and <code>chickenstats.evolving_hockey</code></p>"},{"location":"contribute/backend/design/#chicken_nhl","title":"<code>chicken_nhl</code>","text":"<p><code>chickenstats.chicken_nhl</code> provides tools to scrape data from official NHL sources(1) &amp; construct a play-by-play dataframe with 70+ potential fields(2) for each event.(3) Each game is scraped in approximately 3-4 seconds, with minimal performance degradation after scraping hundreds or thousands of games.(4) All underlying data is stored after retrieval and processing.(5)</p> <ol> <li>Sources include (non-exhaustive):  HTML shifts,  events, &amp;  rosters, as well as  events,  rosters, &amp;  game information from the NHL's API endpoints.</li> <li>Fields include (non-exhaustive) primary player idenfitication &amp; information (e.g., position), various game state characteristics (e.g., strength-state, score-state, score differential), Cartesian event coordinates, shot type (e.g., wrist, slap, deflection), distance &amp; angle from net,  &amp; on-ice teammate &amp; opponent identification &amp; information.</li> <li>Supported events include:  goals (including assists),  shots on net,  missed shots,  blocked shots,  faceoffs,  penalties &amp; delayed penalties,  giveaways, &amp;  takeaways.</li> <li>This can be improved (and will be as the library is refactored). However, the library was designed with known negative impacts (e.g., Pydantic-based data validation).</li> <li>For example, HTML &amp; API events data, key inputs for the play-by-play DataFrame, are retained after scraping play-by-play data. This reduces the burden on public endpoints &amp; improves debugging.</li> </ol> Data are supported from 2010-11 to present <p>With some exceptions for individual games, the <code>Game</code> &amp; <code>Scraper</code> objects  will return data for games occurring since the start of the 2010-2011 season. However, the <code>Season</code> object (including the <code>schedule()</code> &amp; <code>standings()</code> methods) will return data extending to the NHL's founding in 1917.</p> <p>The module includes three classes for accessing data. First, import the relevant classes:</p> <pre><code>from chickenstats.chicken_nhl import Scraper, Season, Game\n</code></pre> <code>Scraper</code><code>Game</code><code>Season</code> <p>Scrapes individual &amp; multiple games. It takes a single game ID or a list-like object of game IDs &amp; scrapes publicly-accessible, official NHL endpoints and returns a Pandas DataFrame.</p> <p>Data include (non-exhaustive):  HTML shifts,  events, &amp;  rosters, as well as  events,  rosters, &amp;  game information from the NHL's API endpoints.</p> Example <p>Scrape play-by-play data for the first ten games of the 2023-24 regular season</p> <pre><code>game_ids = list(range(2023020001, 2023020011))\nscraper = Scraper(game_ids)\npbp = scraper.play_by_play\n</code></pre> <p>Scrape roster data for the first ten games of the 2023-24 regular season</p> <pre><code>game_ids = list(range(2023020001, 2023020011))\nscraper = Scraper(game_ids)\nrosters = scraper.rosters\n</code></pre> <p>The module is designed to minimize repeatedly scraping or aggregating data that has already been scraped or aggregated. If you've already called the <code>scraper.play_by_play</code> attribute, the <code>Scraper</code> object won't  re-scrape the data, unless you've added new game IDs.</p> Example <p>This will scrape data the first time called</p> <pre><code>game_ids = list(range(2023020001, 2023020011))\nscraper = Scraper(game_ids)\npbp = scraper.play_by_play\n</code></pre> <p>Subsequent calls allow you to re-access the data without re-scraping</p> <pre><code>scraper.play_by_play\n</code></pre> <p>If you add new game IDs to the <code>Scraper</code> object, then the new data are re-scraped</p> <pre><code>new_ids = list(range(2023020012, 2023020015))\nscraper.add_games(new_ids)\n\npbp = scraper.play_by_play\n</code></pre> <p>The same dynamic is true for aggregating individual, line and team statistics. Once an aggregation has been completed, subsequent calls to the attribute will return the data without having to re-run calculations. The saved data can be reset with relevant <code>prep_</code> method.</p> Example <p>First scrape some play-by-play data</p> <pre><code>game_ids = list(range(2023020001, 2023020011))\nscraper = Scraper(game_ids)\npbp = scraper.play_by_play\n</code></pre> <p>You can access individual stats with the default aggregations with the <code>scraper.stats</code> property</p> <pre><code>stats = scraper.stats\n</code></pre> <p>If you don't want to change the aggregation, you can re-call the stats using the <code>scraper.stats</code> property.  If you want to change the aggregation, you can reset the data</p> <pre><code>scraper.prep_stats(teammates=True)\nstats = scraper.stats\n</code></pre> <p>Functionality is similar for line and team statistics. If you want to access a different level of aggregation, you can reset the saved data</p> <pre><code>scraper.prep_lines(position=\"f\") # (1)!\nforwards = scraper.lines\n\nscraper.prep_lines(position=\"d\") # (2)!\ndefense = scraper.lines\n\nteam_stats = scraper.team_stats # (3)!\n</code></pre> <ol> <li>This is isn't technically necessary, as the forwards are the defaults for line aggregations</li> <li>Specificy \"d\" for the position parameter to reset the data to defensive lines</li> <li>No need to prep team stats data, you can access the defaults through the property</li> </ol> <p>Scrapes data for a single game. A series of <code>Game</code> objects functions as the backbone of any <code>Scraper</code> object - the data &amp; fields returned are identical. Because of this, I'd recommend sticking with the <code>Scraper</code>, unless you're planning to contribute to the library.</p> Example <p>The <code>Game</code> object functions similarly to the <code>Scraper</code> object, with the major exception that data are returned as a list by default.</p> <p>To return a list of play-by-play events</p> <pre><code>game_id = 2023020001\ngame = Game(game_id)\npbp = game.play_by_play\n</code></pre> <p>To return the equivalent Pandas DataFrame, simply append \"_df\" to the property</p> <pre><code>game_id = 2023020001\ngame = Game(game_id)\npbp = game.play_by_play_df\n</code></pre> <p>If you'd like to contribute, most bugs are addressed &amp; most new features added will be at the <code>Game</code>, rather than the <code>Scraper</code> level.</p> <p>Prototypical usage for the <code>Game</code> object is debugging. There are various non-public methods to access data at intermediate processing stages. The below returns a list of raw HTML events, prior to any processing. For more information &amp; direction, see  Contribute</p> Example <p>Data are stored and processed with non-public methods with <code>Game</code> object. They generally follow the same few steps, illustrated with the html events flow below</p> <pre><code>from chickenstats.chicken_nhl import Game\n\ngame_id = 2023020001\ngame = Game(game_id)\ngame._scrape_html_events() # (1)!\ngame._munge_html_events() # (2)!\n\nhtml_events = game._html_events # (3)!\n</code></pre> <ol> <li>Scrapes the data initially. Stores raw data using <code>game._html_events</code> attribute</li> <li>Cleans the data after scraping. Can access the now cleaned data from <code>game._html_events</code> attribute</li> <li>This is functionally the same as game.html_events</li> </ol> <p>Scrapes schedule and standings information for a given season. The standings returned are for that exact moment in time - I don't know of a way to access historical information.</p> Example <p>Scrape schedule data for every team for the current (2023-24) season</p> <pre><code>season = Season(2023)\nschedule = season.schedule()\n</code></pre> <p>For a specific team, just provide the three-letter abbreviation</p> <pre><code>season = Season(2023)\nschedule = season.schedule('NSH')\n</code></pre> <p>To get the latest standings for that season</p> <pre><code>season = Season(2023)\nstandings = season.standings\n</code></pre>"},{"location":"contribute/backend/design/#evolving_hockey","title":"<code>evolving_hockey</code>","text":"<p><code>chickenstats.evolving_hockey</code> provides tools to munge data from official Evolving-Hockey sources.(1) The module's functions combine raw play-by-play and shift csv files available from the queries section of the site, then  aggregate the data.(2) The resulting aggregations have additional fields(3) that are not currently available.</p> <ol> <li>Subscription (and I cannot emphasize this enough) required.</li> <li>Aggregations include line and team level, as well as groupings by score state, teammates, and opposition.</li> <li>Additional fields include:  high-danger events,  score- and venue-adjusted events, using evolving-hockey's methodology and figures  forwards and defensemen on-ice.</li> </ol> <p>The module includes four functions for accessing data. First, import the relevant functions</p> <pre><code>from chickenstats.evolving_hockey import prep_pbp, prep_stats, prep_lines, prep_team\n</code></pre> <code>prep_pbp()</code><code>prep_stats()</code><code>prep_lines()</code><code>prep_team()</code> <p>Combines the raw play-by-play and shifts CSV files into a Pandas DataFrame with additional fields for analysis and aggregation.</p> Example <p>Combine CSV files into Pandas DataFrame</p> <pre><code>shifts_raw = pd.read_csv('shifts_raw.csv')\npbp_raw = pd.read_csv('pbp_raw.csv')\n\npbp = prep_pbp(pbp_raw, shifts_raw)\n</code></pre> <p>Aggregates an individual player's stats and on-ice stats. Can be grouped by score state, teammates, and opposition.</p> Example <p>First, have a cleaned play-by-play DataFrame handy</p> <pre><code>shifts_raw = pd.read_csv('shifts_raw.csv')\npbp_raw = pd.read_csv('pbp_raw.csv')\n\npbp = prep_pbp(pbp_raw, shifts_raw)\n</code></pre> <p>Basic game-level stats, with no teammates or opposition</p> <pre><code>stats = prep_stats(pbp)\n</code></pre> <p>Period-level stats, grouped by teammates</p> <pre><code>stats = prep_stats(pbp, level = 'period', teammates=True)\n</code></pre> <p>Session-level (e.g., regular seasion) stats, grouped by teammates and opposition</p> <pre><code>stats = prep_stats(pbp, level='session', teammates=True, opposition=True)\n</code></pre> <p>Aggregates forward or defensive line statistics, with options to group by teammates, opposition, and score state</p> Example <p>First, have a cleaned play-by-play DataFrame handy</p> <pre><code>shifts_raw = pd.read_csv('shifts_raw.csv')\npbp_raw = pd.read_csv('pbp_raw.csv')\n\npbp = prep_pbp(pbp_raw, shifts_raw)\n</code></pre> <p>Basic game-level stats for forwards, with no teammates or opposition</p> <pre><code>lines = prep_lines(pbp, position='f')\n</code></pre> <p>Period-level stats for defense, grouped by teammates</p> <pre><code>lines = prep_lines(pbp, position='d', level='period', teammates=True)\n</code></pre> <p>Session-level (e.g., regular seasion) stats, grouped by teammates and opposition</p> <pre><code>lines = prep_lines(pbp, position='f', level='session', teammates=True, opposition=True)\n</code></pre> <p>Aggregates team statistics, can be grouped by score state.</p> Example <p>First, have a cleaned play-by-play DataFrame handy</p> <pre><code>shifts_raw = pd.read_csv('shifts_raw.csv')\npbp_raw = pd.read_csv('pbp_raw.csv')\n\npbp = prep_pbp(pbp_raw, shifts_raw)\n</code></pre> <p>Basic game-level stats for teams</p> <pre><code>team = prep_team(pbp)\n</code></pre> <p>Period-level team stats, grouped by score state</p> <p><code>python team = prep_team(pbp, level='period', score=True)</code></p>"},{"location":"contribute/backend/evolving_hockey/","title":"<code>evolving_hockey.base</code>","text":"<p>Reference materials for the non-public elements of <code>chickenstats.evolving_hockey.base</code>. These are nested within the other <code>chickenstats.evolving_hockey.stats</code> functions and can be used for debugging, or for implementing new features.</p> <p>For more information about how to contribute, report bugs, or request new features, see  Contribute</p>"},{"location":"contribute/backend/evolving_hockey/#evolving_hockey.base.munge_pbp","title":"munge_pbp","text":"<pre><code>munge_pbp(pbp)\n</code></pre> <p>Prepares csv file of play-by-play data for use in the <code>prep_pbp</code> function.</p> <p>Parameters:</p> Name Type Description Default <code>pbp</code> <code>DataFrame</code> <p>Pandas Dataframe of play-by-play data available from the queries section of evolving-hockey.com. Subscription required.</p> required Source code in <code>src/chickenstats/evolving_hockey/base.py</code> <pre><code>def munge_pbp(pbp: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"Prepares csv file of play-by-play data for use in the `prep_pbp` function.\n\n    Parameters:\n        pbp (pd.DataFrame):\n            Pandas Dataframe of play-by-play data available from the queries section\n            of evolving-hockey.com. Subscription required.\n\n    \"\"\"\n    df = pbp.copy()\n\n    # Common column names for ease of typing later\n\n    EVENT_TEAM = df.event_team\n    HOME_TEAM = df.home_team\n    AWAY_TEAM = df.away_team\n    EVENT_TYPE = df.event_type\n\n    # Adding opp_team\n\n    conditions = [EVENT_TEAM == HOME_TEAM, EVENT_TEAM == AWAY_TEAM]\n    values = [AWAY_TEAM, HOME_TEAM]\n\n    df[\"opp_team\"] = np.select(conditions, values, np.nan)\n\n    # Adding opp_goalie and own goalie\n\n    values = [df.away_goalie, df.home_goalie]\n    df[\"opp_goalie\"] = np.select(conditions, values, np.nan)  # Uses same conditions as opp_team\n    df.opp_goalie = df.opp_goalie.fillna(\"EMPTY NET\")\n\n    values.reverse()\n    df[\"own_goalie\"] = np.select(conditions, values, np.nan)  # Uses same conditions as opp_team\n    df.own_goalie = df.own_goalie.fillna(\"EMPTY NET\")\n\n    # Adding event_on and opp_on\n\n    for num in range(1, 8):\n        home = df[f\"home_on_{num}\"]\n        away = df[f\"away_on_{num}\"]\n\n        conditions = [EVENT_TEAM == HOME_TEAM, EVENT_TEAM == AWAY_TEAM]\n        values = [home, away]\n\n        df[f\"event_on_{num}\"] = np.select(conditions, values, np.nan)\n\n        values.reverse()\n\n        df[f\"opp_on_{num}\"] = np.select(conditions, values, np.nan)\n\n    # Adding zone_start\n\n    conds_1 = np.logical_and(\n        np.logical_and(EVENT_TYPE == \"CHANGE\", EVENT_TYPE.shift(-1) == \"FAC\"),\n        np.logical_and(df.game_seconds == df.game_seconds.shift(-1), df.game_period == df.game_period.shift(-1)),\n    )\n\n    conds_2 = np.logical_and(\n        np.logical_and(EVENT_TYPE == \"CHANGE\", EVENT_TYPE.shift(-2) == \"FAC\"),\n        np.logical_and(df.game_seconds == df.game_seconds.shift(-2), df.game_period == df.game_period.shift(-2)),\n    )\n\n    conds_3 = np.logical_and(\n        np.logical_and(EVENT_TYPE == \"CHANGE\", EVENT_TYPE.shift(-3) == \"FAC\"),\n        np.logical_and(df.game_seconds == df.game_seconds.shift(-3), df.game_period == df.game_period.shift(-3)),\n    )\n\n    conds_4 = np.logical_and(\n        np.logical_and(EVENT_TYPE == \"CHANGE\", EVENT_TYPE.shift(-4) == \"FAC\"),\n        np.logical_and(df.game_seconds == df.game_seconds.shift(-4), df.game_period == df.game_period.shift(-4)),\n    )\n\n    conds_5 = np.logical_and(\n        np.logical_and(EVENT_TYPE == \"CHANGE\", EVENT_TYPE.shift(-5) == \"FAC\"),\n        np.logical_and(df.game_seconds == df.game_seconds.shift(-5), df.game_period == df.game_period.shift(-5)),\n    )\n\n    conds_6 = np.logical_and(\n        np.logical_and(EVENT_TYPE == \"CHANGE\", EVENT_TYPE.shift(-6) == \"FAC\"),\n        np.logical_and(df.game_seconds == df.game_seconds.shift(-6), df.game_period == df.game_period.shift(-6)),\n    )\n\n    conditions = [conds_1, conds_2, conds_3, conds_4, conds_5, conds_6]\n\n    values = [\n        df.home_zone.shift(-1),\n        df.home_zone.shift(-2),\n        df.home_zone.shift(-3),\n        df.home_zone.shift(-4),\n        df.home_zone.shift(-5),\n        df.home_zone.shift(-6),\n    ]\n\n    df[\"zone_start\"] = np.select(conditions, values, np.nan)\n\n    is_away = EVENT_TEAM == AWAY_TEAM\n\n    conditions = [np.logical_and(is_away, df.zone_start == \"Off\"), np.logical_and(is_away, df.zone_start == \"Def\")]\n\n    values = [\"Def\", \"Off\"]\n\n    df.zone_start = np.select(conditions, values, df.zone_start)\n\n    df.zone_start = np.where(np.logical_and(EVENT_TYPE == \"CHANGE\", pd.isna(df.zone_start)), \"otf\", df.zone_start)\n\n    # df.zone_start = np.where(\n    #    np.logical_or(df.clock_time == \"0:00\", df.clock_time == \"20:00\"),\n    #    np.nan,\n    #    df.zone_start,\n    # )\n\n    df.zone_start = df.zone_start.str.upper()\n\n    df.event_zone = df.event_zone.str.upper()\n\n    # Fixing strength states for changes preceding different strength states\n\n    conditions = [conds_1, conds_2, conds_3, conds_4]\n\n    values = [\n        df.game_strength_state.shift(-1),\n        df.game_strength_state.shift(-2),\n        df.game_strength_state.shift(-3),\n        df.game_strength_state.shift(-4),\n    ]\n\n    df.game_strength_state = np.select(conditions, values, df.game_strength_state)\n\n    # Adding strength state &amp; score state\n\n    conditions = [EVENT_TEAM == HOME_TEAM, EVENT_TEAM == AWAY_TEAM]\n\n    strength_split = df.game_strength_state.str.split(\"v\", expand=True)\n\n    values = [df.game_strength_state, strength_split[1] + \"v\" + strength_split[0]]\n    df[\"strength_state\"] = np.select(conditions, values, np.nan)\n\n    values.reverse()\n    df[\"opp_strength_state\"] = np.select(conditions, values, np.nan)\n\n    df.strength_state = np.where(df.game_strength_state == \"illegal\", \"illegal\", df.strength_state)\n\n    df.opp_strength_state = np.where(df.game_strength_state == \"illegal\", \"illegal\", df.opp_strength_state)\n\n    score_split = df.game_score_state.str.split(\"v\", expand=True)\n\n    values = [df.game_score_state, score_split[1] + \"v\" + score_split[0]]\n    df[\"score_state\"] = np.select(conditions, values, np.nan)\n\n    values.reverse()\n    df[\"opp_score_state\"] = np.select(conditions, values, np.nan)\n\n    # Swapping faceoff event_players\n\n    conditions = np.logical_and(df.event_type == \"FAC\", EVENT_TEAM == HOME_TEAM)\n\n    df.event_player_1, df.event_player_2 = np.where(\n        conditions, [df.event_player_2, df.event_player_1], [df.event_player_1, df.event_player_2]\n    )\n\n    # Adding is_home dummy variable\n\n    conditions = [df.event_team == df.home_team, df.event_team == df.away_team]\n    values = [1, 0]\n\n    df[\"is_home\"] = np.select(conditions, values, np.nan)\n\n    # Adding dummy variables\n\n    dummies = pd.get_dummies(df.event_type, dtype=int)\n\n    new_cols = {x: x.lower() for x in dummies.columns}\n\n    df = pd.concat([df.copy(), dummies], axis=1).rename(columns=new_cols)\n\n    conds = df.event_type == \"FAC\"\n\n    columns = {\"DEF\": \"dzf\", \"NEU\": \"nzf\", \"OFF\": \"ozf\"}\n\n    df = df.merge(\n        pd.get_dummies(df[conds].event_zone, dtype=int).rename(columns=columns),\n        how=\"left\",\n        left_index=True,\n        right_index=True,\n    )\n\n    conds = df.event_type == \"CHANGE\"\n\n    columns = {\"DEF\": \"dzs\", \"NEU\": \"nzs\", \"OFF\": \"ozs\", \"OTF\": \"otf\"}\n\n    df = df.merge(\n        pd.get_dummies(df[conds].zone_start, dtype=int).rename(columns=columns),\n        how=\"left\",\n        left_index=True,\n        right_index=True,\n    )\n\n    dummy_cols = [\"dzf\", \"nzf\", \"ozf\", \"dzs\", \"nzs\", \"ozs\", \"otf\"]\n\n    df[dummy_cols] = df[dummy_cols].fillna(0).astype(int)\n\n    # Calculating shots, corsi, &amp; fenwick\n\n    df[\"corsi\"] = df.goal + df.shot + df.miss + df.block\n\n    df[\"fenwick\"] = df.goal + df.shot + df.miss\n\n    df.shot = df.goal + df.shot\n\n    # Adding penalty columns\n\n    is_penalty = df.event_type == \"PENL\"\n\n    penalty_list = [\"0min\", \"2min\", \"4min\", \"5min\", \"10min\"]\n\n    conditions = [np.logical_and(is_penalty, df.event_detail == penalty) for penalty in penalty_list]\n\n    values = [\"pen0\", \"pen2\", \"pen4\", \"pen5\", \"pen10\"]\n\n    df[\"penalty_type\"] = np.select(conditions, values, \"\")\n\n    df = pd.concat([df.copy(), pd.get_dummies(df.penalty_type, dtype=int)], axis=1)\n\n    pen_cols = [\"pen0\", \"pen2\", \"pen4\", \"pen5\", \"pen10\"]\n\n    for pen_col in pen_cols:\n        if pen_col not in df.columns:\n            df[pen_col] = 0\n\n    # Fixing opening change\n\n    conditions = (df.event_type == \"CHANGE\") &amp; (df.clock_time == \"20:00\") &amp; (df.strength_state.str.contains(\"E\"))\n\n    df.strength_state = np.where(conditions, df.strength_state.shift(-1), df.strength_state)\n\n    df.opp_strength_state = np.where(conditions, df.opp_strength_state.shift(-1), df.opp_strength_state)\n\n    df.opp_goalie = np.where(conditions, df.opp_goalie.shift(-1), df.opp_goalie)\n\n    df.own_goalie = np.where(conditions, df.own_goalie.shift(-1), df.own_goalie)\n\n    # Converting names to plain text\n\n    player_cols = [\n        col\n        for col in pbp.columns\n        if (\"event_player\" in col or \"on_\" in col or \"_goalie\" in col) and (\"s_on\" not in col)\n    ]\n\n    for col in player_cols:\n        pbp[col] = pbp[col].astype(str).str.normalize(\"NFKD\").str.encode(\"ascii\", errors=\"ignore\").str.decode(\"utf-8\")\n\n    # Replacing team names with codes that match NHL API\n\n    replace_teams = {\"S.J\": \"SJS\", \"N.J\": \"NJD\", \"T.B\": \"TBL\", \"L.A\": \"LAK\"}\n\n    for old, new in replace_teams.items():\n        replace_cols = [col for col in df.columns if \"_team\" in col] + [\n            \"players_on\",\n            \"players_off\",\n            \"event_description\",\n        ]\n\n        for col in replace_cols:\n            df[col] = df[col].str.replace(old, new, regex=False)\n\n    df[\"period_seconds\"] = df.game_seconds - ((df.game_period - 1) * 1200)\n\n    df.period_seconds = np.where(np.logical_and(df.game_period == 5, df.session == \"R\"), 0, df.period_seconds)\n\n    # Adding danger and high danger dummy columns\n\n    coords = gpd.GeoSeries(data=gpd.points_from_xy(df.coords_x, df.coords_y), index=df.index)\n\n    high_danger1 = Polygon(np.array([[69, -9], [89, -9], [89, 9], [69, 9]]))\n    high_danger2 = Polygon(np.array([[-69, -9], [-89, -9], [-89, 9], [-69, 9]]))\n\n    danger1 = Polygon(\n        np.array([[89, 9], [89, -9], [69, -22], [54, -22], [54, -9], [44, -9], [44, 9], [54, 9], [54, 22], [69, 22]])\n    )\n\n    danger2 = Polygon(\n        np.array(\n            [\n                [-89, 9],\n                [-89, -9],\n                [-69, -22],\n                [-54, -22],\n                [-54, -9],\n                [-44, -9],\n                [-44, 9],\n                [-54, 9],\n                [-54, 22],\n                [-69, 22],\n            ]\n        )\n    )\n\n    high_danger1 = gpd.GeoSeries(data=high_danger1, index=df.index)\n    high_danger2 = gpd.GeoSeries(data=high_danger2, index=df.index)\n\n    danger1 = gpd.GeoSeries(data=danger1, index=df.index)\n    danger2 = gpd.GeoSeries(data=danger2, index=df.index)\n\n    shot_list = [\"GOAL\", \"SHOT\", \"MISS\"]\n\n    conds = np.logical_or(\n        np.logical_and.reduce([coords.within(high_danger1), df.event_zone == \"OFF\", df.event_type.isin(shot_list)]),\n        np.logical_and.reduce([coords.within(high_danger2), df.event_zone == \"OFF\", df.event_type.isin(shot_list)]),\n    )\n\n    df[\"high_danger\"] = np.where(conds, 1, 0)\n\n    conds = np.logical_and(\n        np.logical_and(~coords.within(high_danger1), ~coords.within(high_danger2)),\n        np.logical_or(\n            np.logical_and.reduce([coords.within(danger1), df.event_zone == \"OFF\", df.event_type.isin(shot_list)]),\n            np.logical_and.reduce([coords.within(danger2), df.event_zone == \"OFF\", df.event_type.isin(shot_list)]),\n        ),\n    )\n\n    df[\"danger\"] = np.where(conds, 1, 0)\n\n    df[\"hd_goal\"] = df.high_danger * df.goal\n\n    df[\"hd_shot\"] = df.high_danger * df.shot\n\n    df[\"hd_fenwick\"] = df.high_danger * df.fenwick\n\n    df[\"hd_miss\"] = df.high_danger * df.miss\n\n    # Adding adjusted G, xG, shot, corsi, and fenwick figures\n\n    conds = [\n        # 5v5\n        np.logical_and.reduce([df.strength_state == \"5v5\", df.is_home == 1, df.home_score - df.away_score &lt;= -3]),\n        np.logical_and.reduce([df.strength_state == \"5v5\", df.is_home == 1, df.home_score - df.away_score == -2]),\n        np.logical_and.reduce([df.strength_state == \"5v5\", df.is_home == 1, df.home_score - df.away_score == -1]),\n        np.logical_and.reduce([df.strength_state == \"5v5\", df.is_home == 1, df.home_score - df.away_score == 0]),\n        np.logical_and.reduce([df.strength_state == \"5v5\", df.is_home == 1, df.home_score - df.away_score == 1]),\n        np.logical_and.reduce([df.strength_state == \"5v5\", df.is_home == 1, df.home_score - df.away_score == 2]),\n        np.logical_and.reduce([df.strength_state == \"5v5\", df.is_home == 1, df.home_score - df.away_score &gt;= 3]),\n        np.logical_and.reduce([df.strength_state == \"5v5\", df.is_home == 0, df.home_score - df.away_score &lt;= -3]),\n        np.logical_and.reduce([df.strength_state == \"5v5\", df.is_home == 0, df.home_score - df.away_score == -2]),\n        np.logical_and.reduce([df.strength_state == \"5v5\", df.is_home == 0, df.home_score - df.away_score == -1]),\n        np.logical_and.reduce([df.strength_state == \"5v5\", df.is_home == 0, df.home_score - df.away_score == 0]),\n        np.logical_and.reduce([df.strength_state == \"5v5\", df.is_home == 0, df.home_score - df.away_score == 1]),\n        np.logical_and.reduce([df.strength_state == \"5v5\", df.is_home == 0, df.home_score - df.away_score == 2]),\n        np.logical_and.reduce([df.strength_state == \"5v5\", df.is_home == 0, df.home_score - df.away_score &gt;= 3]),\n        # 4v4\n        np.logical_and.reduce([df.strength_state == \"4v4\", df.is_home == 1, df.home_score - df.away_score &lt;= -3]),\n        np.logical_and.reduce([df.strength_state == \"4v4\", df.is_home == 1, df.home_score - df.away_score == -2]),\n        np.logical_and.reduce([df.strength_state == \"4v4\", df.is_home == 1, df.home_score - df.away_score == -1]),\n        np.logical_and.reduce([df.strength_state == \"4v4\", df.is_home == 1, df.home_score - df.away_score == 0]),\n        np.logical_and.reduce([df.strength_state == \"4v4\", df.is_home == 1, df.home_score - df.away_score == 1]),\n        np.logical_and.reduce([df.strength_state == \"4v4\", df.is_home == 1, df.home_score - df.away_score == 2]),\n        np.logical_and.reduce([df.strength_state == \"4v4\", df.is_home == 1, df.home_score - df.away_score &gt;= 3]),\n        np.logical_and.reduce([df.strength_state == \"4v4\", df.is_home == 0, df.home_score - df.away_score &lt;= -3]),\n        np.logical_and.reduce([df.strength_state == \"4v4\", df.is_home == 0, df.home_score - df.away_score == -2]),\n        np.logical_and.reduce([df.strength_state == \"4v4\", df.is_home == 0, df.home_score - df.away_score == -1]),\n        np.logical_and.reduce([df.strength_state == \"4v4\", df.is_home == 0, df.home_score - df.away_score == 0]),\n        np.logical_and.reduce([df.strength_state == \"4v4\", df.is_home == 0, df.home_score - df.away_score == 1]),\n        np.logical_and.reduce([df.strength_state == \"4v4\", df.is_home == 0, df.home_score - df.away_score == 2]),\n        np.logical_and.reduce([df.strength_state == \"4v4\", df.is_home == 0, df.home_score - df.away_score &gt;= 3]),\n        # 3v3\n        np.logical_and(df.strength_state == \"3v3\", df.is_home == 1),\n        np.logical_and(df.strength_state == \"3v3\", df.is_home == 0),\n        # 5v4\n        np.logical_and.reduce([df.strength_state == \"5v4\", df.is_home == 1, df.home_score - df.away_score &lt; 0]),\n        np.logical_and.reduce([df.strength_state == \"5v4\", df.is_home == 1, df.home_score - df.away_score == 0]),\n        np.logical_and.reduce([df.strength_state == \"5v4\", df.is_home == 1, df.home_score - df.away_score &gt; 0]),\n        np.logical_and.reduce([df.strength_state == \"5v4\", df.is_home == 0, df.home_score - df.away_score &lt; 0]),\n        np.logical_and.reduce([df.strength_state == \"5v4\", df.is_home == 0, df.home_score - df.away_score == 0]),\n        np.logical_and.reduce([df.strength_state == \"5v4\", df.is_home == 0, df.home_score - df.away_score &gt; 0]),\n        np.logical_and.reduce([df.strength_state == \"4v5\", df.is_home == 1, df.home_score - df.away_score &lt; 0]),\n        # 4v5\n        np.logical_and.reduce([df.strength_state == \"4v5\", df.is_home == 1, df.home_score - df.away_score == 0]),\n        np.logical_and.reduce([df.strength_state == \"4v5\", df.is_home == 1, df.home_score - df.away_score &gt; 0]),\n        np.logical_and.reduce([df.strength_state == \"4v5\", df.is_home == 0, df.home_score - df.away_score &lt; 0]),\n        np.logical_and.reduce([df.strength_state == \"4v5\", df.is_home == 0, df.home_score - df.away_score == 0]),\n        np.logical_and.reduce([df.strength_state == \"4v5\", df.is_home == 0, df.home_score - df.away_score &gt; 0]),\n        # 5v3\n        np.logical_and.reduce([df.strength_state == \"5v3\", df.is_home == 1, df.home_score - df.away_score &lt; 0]),\n        np.logical_and.reduce([df.strength_state == \"5v3\", df.is_home == 1, df.home_score - df.away_score == 0]),\n        np.logical_and.reduce([df.strength_state == \"5v3\", df.is_home == 1, df.home_score - df.away_score &gt; 0]),\n        np.logical_and.reduce([df.strength_state == \"5v3\", df.is_home == 0, df.home_score - df.away_score &lt; 0]),\n        np.logical_and.reduce([df.strength_state == \"5v3\", df.is_home == 0, df.home_score - df.away_score == 0]),\n        np.logical_and.reduce([df.strength_state == \"5v3\", df.is_home == 0, df.home_score - df.away_score &gt; 0]),\n        # 3v5\n        np.logical_and.reduce([df.strength_state == \"3v5\", df.is_home == 1, df.home_score - df.away_score &lt; 0]),\n        np.logical_and.reduce([df.strength_state == \"3v5\", df.is_home == 1, df.home_score - df.away_score == 0]),\n        np.logical_and.reduce([df.strength_state == \"3v5\", df.is_home == 1, df.home_score - df.away_score &gt; 0]),\n        np.logical_and.reduce([df.strength_state == \"3v5\", df.is_home == 0, df.home_score - df.away_score &lt; 0]),\n        np.logical_and.reduce([df.strength_state == \"3v5\", df.is_home == 0, df.home_score - df.away_score == 0]),\n        np.logical_and.reduce([df.strength_state == \"3v5\", df.is_home == 0, df.home_score - df.away_score &gt; 0]),\n        # 4v3\n        np.logical_and.reduce([df.strength_state == \"4v3\", df.is_home == 1, df.home_score - df.away_score &lt; 0]),\n        np.logical_and.reduce([df.strength_state == \"4v3\", df.is_home == 1, df.home_score - df.away_score == 0]),\n        np.logical_and.reduce([df.strength_state == \"4v3\", df.is_home == 1, df.home_score - df.away_score &gt; 0]),\n        np.logical_and.reduce([df.strength_state == \"4v3\", df.is_home == 0, df.home_score - df.away_score &lt; 0]),\n        np.logical_and.reduce([df.strength_state == \"4v3\", df.is_home == 0, df.home_score - df.away_score == 0]),\n        np.logical_and.reduce([df.strength_state == \"4v3\", df.is_home == 0, df.home_score - df.away_score &gt; 0]),\n        # 3v4\n        np.logical_and.reduce([df.strength_state == \"3v4\", df.is_home == 1, df.home_score - df.away_score &lt; 0]),\n        np.logical_and.reduce([df.strength_state == \"3v4\", df.is_home == 1, df.home_score - df.away_score == 0]),\n        np.logical_and.reduce([df.strength_state == \"3v4\", df.is_home == 1, df.home_score - df.away_score &gt; 0]),\n        np.logical_and.reduce([df.strength_state == \"3v4\", df.is_home == 0, df.home_score - df.away_score &lt; 0]),\n        np.logical_and.reduce([df.strength_state == \"3v4\", df.is_home == 0, df.home_score - df.away_score == 0]),\n        np.logical_and.reduce([df.strength_state == \"3v4\", df.is_home == 0, df.home_score - df.away_score &gt; 0]),\n        # 1v0\n        np.logical_and.reduce([df.strength_state == \"1v0\", df.is_home == 1, df.home_score - df.away_score &lt; 0]),\n        np.logical_and.reduce([df.strength_state == \"1v0\", df.is_home == 1, df.home_score - df.away_score == 0]),\n        np.logical_and.reduce([df.strength_state == \"1v0\", df.is_home == 1, df.home_score - df.away_score &gt; 0]),\n        np.logical_and.reduce([df.strength_state == \"1v0\", df.is_home == 0, df.home_score - df.away_score &lt; 0]),\n        np.logical_and.reduce([df.strength_state == \"1v0\", df.is_home == 0, df.home_score - df.away_score == 0]),\n        np.logical_and.reduce([df.strength_state == \"1v0\", df.is_home == 0, df.home_score - df.away_score &gt; 0]),\n    ]\n\n    weights = (\n        # Home goal, while home team trailing, at 5v5\n        ([0.938] * 3)\n        +\n        # Home goal, score tied at 5v5\n        [0.945]\n        +\n        # Home goal, while home team leading, at 5v5\n        ([0.988] * 3)\n        +\n        # Away goal, while home team trailing, at 5v5\n        ([1.071] * 3)\n        +\n        # Away goal, score tied at 5v5\n        [1.061]\n        +\n        # Away goal, while home team leading, at 5v5\n        ([1.012] * 3)\n        +\n        # Home goal, at 4v4\n        ([0.929] * 7)\n        +\n        # Away goal at 4v4\n        ([1.082] * 7)\n        +\n        # Home goal at 3v3\n        [1.033]\n        +\n        # Away goal at 3v3\n        [0.969]\n        +\n        # Home goal, while home team trailing, at 5v4\n        [0.860]\n        +\n        # Home goal, while score tied, at 5v4\n        [0.933]\n        +\n        # Home goal, while home team leading, at 5v4\n        [0.980]\n        +\n        # Away goal, while home team trailing, at 5v4\n        [1.183]\n        +\n        # Away goal, while score tied, at 5v4\n        [1.077]\n        +\n        # Away goal, while home team leading, at 5v4\n        [1.006]\n        +\n        # Home goal, while home team trailing, at 4v5\n        [1.183]\n        +\n        # Home goal, while score tied, at 4v5\n        [1.077]\n        +\n        # Home goal, while home team leading, at 4v5\n        [1.006]\n        +\n        # Away goal, while home team trailing, at 4v5\n        [0.860]\n        +\n        # Away goal, while score tied, at 4v5\n        [0.933]\n        +\n        # Away goal, while home team leading, at 4v5\n        [0.980]\n        +\n        # Home goal, while home team trailing, at 5v3\n        [0.840]\n        +\n        # Home goal, while score tied, at 5v3\n        [0.927]\n        +\n        # Home goal, while home team leading, at 5v3\n        [0.935]\n        +\n        # Away goal, while home team trailing, at 5v3\n        [1.234]\n        +\n        # Away goal, while score tied, at 5v3\n        [1.085]\n        +\n        # Away goal, while home team leading, at 5v3\n        [1.075]\n        +\n        # Home goal, while home team trailing, at 3v5\n        [1.234]\n        +\n        # Home goal, while score tied, at 3v5\n        [1.085]\n        +\n        # Home goal, while home team leading, at 3v5\n        [1.075]\n        +\n        # Away goal, while home team trailing, at 3v5\n        [0.840]\n        +\n        # Away goal, while score tied, at 3v5\n        [0.927]\n        +\n        # Away goal, while home team leading, at 3v5\n        [0.935]\n        +\n        # Home goal, while home team trailing, at 4v3\n        [0.769]\n        +\n        # Home goal, while score tied, at 4v3\n        [0.923]\n        +\n        # Home goal, while home team leading, at 4v3\n        [0.883]\n        +\n        # Away goal, while home team trailing, at 4v3\n        [1.429]\n        +\n        # Away goal, while score tied, at 4v3\n        [1.091]\n        +\n        # Away goal, while home team leading, at 4v3\n        [1.153]\n        +\n        # Home goal, while home team trailing, at 3v4\n        [1.429]\n        +\n        # Home goal, while score tied, at 3v4\n        [1.091]\n        +\n        # Home goal, while home team leading, at 3v4\n        [1.153]\n        +\n        # Away goal, while home team trailing, at 3v4\n        [0.769]\n        +\n        # Away goal, while score tied, at 3v4\n        [0.923]\n        +\n        # Away goal, while home team leading, at 3v4\n        [0.883]\n        +\n        # Home goal, while home team trailing, at 1v0\n        [1.172]\n        +\n        # Home goal, score tied at 1v0\n        [1.053]\n        +\n        # Home goal, while home team leading, at 1v0\n        [0.958]\n        +\n        # Away goal, while home team trailing, at 1v0\n        [0.872]\n        +\n        # Away goal, score tied at 1v0\n        [0.952]\n        +\n        # Away goal, while home team leading, at 1v0\n        [1.045]\n    )\n\n    values = [df.goal * weight for weight in weights]\n\n    df[\"goal_adj\"] = np.select(conds, values)\n\n    conds = conds[:-6]  # Don't need the 1v0 conditions for the other adjustments\n\n    # xG weights\n\n    weights = (\n        # Home xG, while home team trailing, at 5v5\n        ([0.923] * 3)\n        +\n        # Home xG, score tied at 5v5\n        [0.954]\n        +\n        # Home xG, while home team leading, at 5v5\n        ([0.991] * 3)\n        +\n        # Away xG, while home team trailing, at 5v5\n        ([1.091] * 3)\n        +\n        # Away xG, score tied at 5v5\n        [1.051]\n        +\n        # Away xG, while home team leading, at 5v5\n        ([1.010] * 3)\n        +\n        # Home xG, at 4v4\n        ([0.951] * 7)\n        +\n        # Away xG at 4v4\n        ([1.055] * 7)\n        +\n        # Home xG at 3v3\n        [1.006]\n        +\n        # Away xG at 3v3\n        [0.994]\n        +\n        # Home xG, while home team trailing, at 5v4\n        [0.844]\n        +\n        # Home xG, while score tied, at 5v4\n        [0.912]\n        +\n        # Home xG, while home team leading, at 5v4\n        [1.006]\n        +\n        # Away xG, while home team trailing, at 5v4\n        [1.226]\n        +\n        # Away xG, while score tied, at 5v4\n        [1.107]\n        +\n        # Away xG, while home team leading, at 5v4\n        [0.994]\n        +\n        # Home xG, while home team trailing, at 4v5\n        [1.226]\n        +\n        # Home xG, while score tied, at 4v5\n        [1.107]\n        +\n        # Home xG, while home team leading, at 4v5\n        [0.994]\n        +\n        # Away xG, while home team trailing, at 4v5\n        [0.844]\n        +\n        # Away xG, while score tied, at 4v5\n        [0.912]\n        +\n        # Away xG, while home team leading, at 4v5\n        [1.006]\n        +\n        # Home xG, while home team trailing, at 5v3\n        [0.801]\n        +\n        # Home xG, while score tied, at 5v3\n        [0.896]\n        +\n        # Home xG, while home team leading, at 5v3\n        [0.913]\n        +\n        # Away xG, while home team trailing, at 5v3\n        [1.330]\n        +\n        # Away xG, while score tied, at 5v3\n        [1.131]\n        +\n        # Away xG, while home team leading, at 5v3\n        [1.105]\n        +\n        # Home xG, while home team trailing, at 3v5\n        [1.330]\n        +\n        # Home xG, while score tied, at 3v5\n        [1.131]\n        +\n        # Home xG, while home team leading, at 3v5\n        [1.105]\n        +\n        # Away xG, while home team trailing, at 3v5\n        [0.801]\n        +\n        # Away xG, while score tied, at 3v5\n        [0.896]\n        +\n        # Away xG, while home team leading, at 3v5\n        [0.913]\n        +\n        # Home xG, while home team trailing, at 4v3\n        [0.820]\n        +\n        # Home xG, while score tied, at 4v3\n        [0.912]\n        +\n        # Home xG, while home team leading, at 4v3\n        [0.898]\n        +\n        # Away xG, while home team trailing, at 4v3\n        [1.282]\n        +\n        # Away xG, while score tied, at 4v3\n        [1.106]\n        +\n        # Away xG, while home team leading, at 4v3\n        [1.129]\n        +\n        # Home xG, while home team trailing, at 3v4\n        [1.282]\n        +\n        # Home xG, while score tied, at 3v4\n        [1.106]\n        +\n        # Home xG, while home team leading, at 3v4\n        [1.129]\n        +\n        # Away xG, while home team trailing, at 3v4\n        [0.820]\n        +\n        # Away xG, while score tied, at 3v4\n        [0.912]\n        +\n        # Away xG, while home team leading, at 3v4\n        [0.898]\n    )\n\n    values = [df.pred_goal * weight for weight in weights]\n\n    df[\"pred_goal_adj\"] = np.select(conds, values)\n\n    # shot weights\n\n    weights = (\n        # Home shot, while home team trailing by more than 3, at 5v5\n        [0.862]\n        +\n        # Home shot, while home team trailing by 2, at 5v5\n        [0.890]\n        +\n        # Home shot, while home team trailing by 1, at 5v5\n        [0.915]\n        +\n        # Home shot, score tied at 5v5\n        [0.972]\n        +\n        # Home shot, while home team leading by 1, at 5v5\n        [1.037]\n        +\n        # Home shot, while home team leading by 2, at 5v5\n        [1.077]\n        +\n        # Home shot, while home team leading by more than 3, at 5v5\n        [1.104]\n        +\n        # Away shot, while home team trailing by more than 3, at 5v5\n        [1.191]\n        +\n        # Away shot, while home team trailing by 2, at 5v5\n        [1.141]\n        +\n        # Away shot, while home team trailing by 1, at 5v5\n        [1.102]\n        +\n        # Away shot, score tied at 5v5\n        [1.029]\n        +\n        # Away shot, while home team leading by 1, at 5v5\n        [0.966]\n        +\n        # Away shot, while home team leading by 2, at 5v5\n        [0.933]\n        +\n        # Away shot, while home team leading by more than 3, at 5v5\n        [0.914]\n        +\n        # Home shot, while home team trailing, at 4v4\n        ([0.939] * 3)\n        +\n        # Home shot, score tied at 4v4\n        [0.969]\n        +\n        # Home shot, while home team leading, at 4v4\n        ([1.029] * 3)\n        +\n        # Away shot, while home team trailing, at 4v4\n        ([1.070] * 3)\n        +\n        # Away shot, score tied at 4v4\n        [1.033]\n        +\n        # Away shot, while home team leading, at 4v4\n        ([0.973] * 3)\n        +\n        # Home shot at 3v3\n        [0.991]\n        +\n        # Away shot at 3v3\n        [1.009]\n        +\n        # Home shot, while home team trailing, at 5v4\n        [0.844]\n        +\n        # Home shot, while score tied, at 5v4\n        [0.930]\n        +\n        # Home shot, while home team leading, at 5v4\n        [1.046]\n        +\n        # Away shot, while home team trailing, at 5v4\n        [1.226]\n        +\n        # Away shot, while score tied, at 5v4\n        [1.081]\n        +\n        # Away shot, while home team leading, at 5v4\n        [0.958]\n        +\n        # Home shot, while home team trailing, at 4v5\n        [1.226]\n        +\n        # Home shot, while score tied, at 4v5\n        [1.081]\n        +\n        # Home shot, while home team leading, at 4v5\n        [0.958]\n        +\n        # Away shot, while home team trailing, at 4v5\n        [0.844]\n        +\n        # Away shot, while score tied, at 4v5\n        [0.930]\n        +\n        # Away shot, while home team leading, at 4v5\n        [1.046]\n        +\n        # Home shot, while home team trailing, at 5v3\n        [0.799]\n        +\n        # Home shot, while score tied, at 5v3\n        [0.915]\n        +\n        # Home shot, while home team leading, at 5v3\n        [0.949]\n        +\n        # Away shot, while home team trailing, at 5v3\n        [1.336]\n        +\n        # Away shot, while score tied, at 5v3\n        [1.102]\n        +\n        # Away shot, while home team leading, at 5v3\n        [1.057]\n        +\n        # Home shot, while home team trailing, at 3v5\n        [1.336]\n        +\n        # Home shot, while score tied, at 3v5\n        [1.102]\n        +\n        # Home shot, while home team leading, at 3v5\n        [1.057]\n        +\n        # Away shot, while home team trailing, at 3v5\n        [0.799]\n        +\n        # Away shot, while score tied, at 3v5\n        [0.915]\n        +\n        # Away shot, while home team leading, at 3v5\n        [0.949]\n        +\n        # Home shot, while home team trailing, at 4v3\n        [0.839]\n        +\n        # Home shot, while score tied, at 4v3\n        [0.913]\n        +\n        # Home shot, while home team leading, at 4v3\n        [0.975]\n        +\n        # Away shot, while home team trailing, at 4v3\n        [1.238]\n        +\n        # Away shot, while score tied, at 4v3\n        [1.105]\n        +\n        # Away shot, while home team leading, at 4v3\n        [1.026]\n        +\n        # Home shot, while home team trailing, at 3v4\n        [1.238]\n        +\n        # Home shot, while score tied, at 3v4\n        [1.105]\n        +\n        # Home shot, while home team leading, at 3v4\n        [1.026]\n        +\n        # Away shot, while home team trailing, at 3v4\n        [0.839]\n        +\n        # Away shot, while score tied, at 3v4\n        [0.913]\n        +\n        # Away shot, while home team leading, at 3v4\n        [0.975]\n    )\n\n    values = [df.shot * weight for weight in weights]\n\n    df[\"shot_adj\"] = np.select(conds, values)\n\n    # fenwwick weights\n\n    weights = (\n        # Home fenwick, while home team trailing by more than 3, at 5v5\n        [0.859]\n        +\n        # Home fenwick, while home team trailing by 2, at 5v5\n        [0.881]\n        +\n        # Home fenwick, while home team trailing by 1, at 5v5\n        [0.909]\n        +\n        # Home fenwick, score tied at 5v5\n        [0.968]\n        +\n        # Home fenwick, while home team leading by 1, at 5v5\n        [1.037]\n        +\n        # Home fenwick, while home team leading by 2, at 5v5\n        [1.078]\n        +\n        # Home fenwick, while home team leading by more than 3, at 5v5\n        [1.109]\n        +\n        # Away fenwick, while home team trailing by more than 3, at 5v5\n        [1.197]\n        +\n        # Away fenwick, while home team trailing by 2, at 5v5\n        [1.155]\n        +\n        # Away fenwick, while home team trailing by 1, at 5v5\n        [1.111]\n        +\n        # Away fenwick, score tied at 5v5\n        [1.034]\n        +\n        # Away fenwick, while home team leading by 1, at 5v5\n        [0.966]\n        +\n        # Away fenwick, while home team leading by 2, at 5v5\n        [0.933]\n        +\n        # Away fenwick, while home team leading by more than 3, at 5v5\n        [0.911]\n        +\n        # Home fenwick, while home team trailing by more than 3, at 4v4\n        [0.933]\n        +\n        # Home fenwick, while home team trailing by 2, at 4v4\n        [0.931]\n        +\n        # Home fenwick, while home team trailing by 1, at 4v4\n        [0.938]\n        +\n        # Home fenwick, score tied at 4v4\n        [0.973]\n        +\n        # Home fenwick, while home team leading by 1, at 4v4\n        [1.027]\n        +\n        # Home fenwick, while home team leading by 2, at 4v4\n        [1.040]\n        +\n        # Home fenwick, while home team leading by more than 3, at 4v4\n        [1.060]\n        +\n        # Away fenwick, while home team trailing by more than 3, at 4v4\n        [1.077]\n        +\n        # Away fenwick, while home team trailing by 2, at 4v4\n        [1.079]\n        +\n        # Away fenwick, while home team trailing by 1, at 4v4\n        [1.071]\n        +\n        # Away fenwick, score tied at 4v4\n        [1.029]\n        +\n        # Away fenwick, while home team leading by 1, at 4v4\n        [0.975]\n        +\n        # Away fenwick, while home team leading by 2, at 4v4\n        [0.963]\n        +\n        # Away fenwick, while home team leading by more than 3, at 4v4\n        [0.947]\n        +\n        # Home fenwick at 3v3\n        [1.001]\n        +\n        # Away fenwick at 3v3\n        [0.999]\n        +\n        # Home fenwick, while home team trailing, at 5v4\n        [0.843]\n        +\n        # Home fenwick, while score tied, at 5v4\n        [0.926]\n        +\n        # Home fenwick, while home team leading, at 5v4\n        [1.039]\n        +\n        # Away fenwick, while home team trailing, at 5v4\n        [1.229]\n        +\n        # Away fenwick, while score tied, at 5v4\n        [1.087]\n        +\n        # Away fenwick, while home team leading, at 5v4\n        [0.964]\n        +\n        # Home fenwick, while home team trailing, at 4v5\n        [1.229]\n        +\n        # Home fenwick, while score tied, at 4v5\n        [1.087]\n        +\n        # Home fenwick, while home team leading, at 4v5\n        [0.964]\n        +\n        # Away fenwick, while home team trailing, at 4v5\n        [0.843]\n        +\n        # Away fenwick, while score tied, at 4v5\n        [0.926]\n        +\n        # Away fenwick, while home team leading, at 4v5\n        [1.039]\n        +\n        # Home fenwick, while home team trailing, at 5v3\n        [0.798]\n        +\n        # Home fenwick, while score tied, at 5v3\n        [0.906]\n        +\n        # Home fenwick, while home team leading, at 5v3\n        [0.932]\n        +\n        # Away fenwick, while home team trailing, at 5v3\n        [1.340]\n        +\n        # Away fenwick, while score tied, at 5v3\n        [1.115]\n        +\n        # Away fenwick, while home team leading, at 5v3\n        [1.078]\n        +\n        # Home fenwick, while home team trailing, at 3v5\n        [1.340]\n        +\n        # Home fenwick, while score tied, at 3v5\n        [1.115]\n        +\n        # Home fenwick, while home team leading, at 3v5\n        [1.078]\n        +\n        # Away fenwick, while home team trailing, at 3v5\n        [0.798]\n        +\n        # Away fenwick, while score tied, at 3v5\n        [0.906]\n        +\n        # Away fenwick, while home team leading, at 3v5\n        [0.932]\n        +\n        # Home fenwick, while home team trailing, at 4v3\n        [0.814]\n        +\n        # Home fenwick, while score tied, at 4v3\n        [0.921]\n        +\n        # Home fenwick, while home team leading, at 4v3\n        [0.941]\n        +\n        # Away fenwick, while home team trailing, at 4v3\n        [1.297]\n        +\n        # Away fenwick, while score tied, at 4v3\n        [1.093]\n        +\n        # Away fenwick, while home team leading, at 4v3\n        [1.066]\n        +\n        # Home fenwick, while home team trailing, at 3v4\n        [1.297]\n        +\n        # Home fenwick, while score tied, at 3v4\n        [1.093]\n        +\n        # Home fenwick, while home team leading, at 3v4\n        [1.066]\n        +\n        # Away fenwick, while home team trailing, at 3v4\n        [0.814]\n        +\n        # Away fenwick, while score tied, at 3v4\n        [0.921]\n        +\n        # Away fenwick, while home team leading, at 3v4\n        [0.941]\n    )\n\n    values = [df.fenwick * weight for weight in weights]\n\n    df[\"fenwick_adj\"] = np.select(conds, values)\n\n    # corsi weights\n\n    weights = (\n        # Home corsi, while home team trailing by more than 3, at 5v5\n        [0.843]\n        +\n        # Home corsi, while home team trailing by 2, at 5v5\n        [0.866]\n        +\n        # Home corsi, while home team trailing by 1, at 5v5\n        [0.899]\n        +\n        # Home corsi, score tied at 5v5\n        [0.970]\n        +\n        # Home corsi, while home team leading by 1, at 5v5\n        [1.053]\n        +\n        # Home corsi, while home team leading by 2, at 5v5\n        [1.105]\n        +\n        # Home corsi, while home team leading by more than 3, at 5v5\n        [1.140]\n        +\n        # Away corsi, while home team trailing by more than 3, at 5v5\n        [1.230]\n        +\n        # Away corsi, while home team trailing by 2, at 5v5\n        [1.182]\n        +\n        # Away corsi, while home team trailing by 1, at 5v5\n        [1.127]\n        +\n        # Away corsi, score tied at 5v5\n        [1.032]\n        +\n        # Away corsi, while home team leading by 1, at 5v5\n        [0.952]\n        +\n        # Away corsi, while home team leading by 2, at 5v5\n        [0.913]\n        +\n        # Away corsi, while home team leading by more than 3, at 5v5\n        [0.891]\n        +\n        # Home corsi, while home team trailing by more than 3, at 4v4\n        [0.890]\n        +\n        # Home corsi, while home team trailing by 2, at 4v4\n        [0.914]\n        +\n        # Home corsi, while home team trailing by 1, at 4v4\n        [0.923]\n        +\n        # Home corsi, score tied at 4v4\n        [0.977]\n        +\n        # Home corsi, while home team leading by 1, at 4v4\n        [1.043]\n        +\n        # Home corsi, while home team leading by 2, at 4v4\n        [1.050]\n        +\n        # Home corsi, while home team leading by more than 3, at 4v4\n        [1.089]\n        +\n        # Away corsi, while home team trailing by more than 3, at 4v4\n        [1.141]\n        +\n        # Away corsi, while home team trailing by 2, at 4v4\n        [1.103]\n        +\n        # Away corsi, while home team trailing by 1, at 4v4\n        [1.091]\n        +\n        # Away corsi, score tied at 4v4\n        [1.024]\n        +\n        # Away corsi, while home team leading by 1, at 4v4\n        [0.960]\n        +\n        # Away corsi, while home team leading by 2, at 4v4\n        [0.954]\n        +\n        # Away corsi, while home team leading by more than 3, at 4v4\n        [0.925]\n        +\n        # Home corsi at 3v3\n        [0.99]\n        +\n        # Away corsi at 3v3\n        [1.01]\n        +\n        # Home corsi, while home team trailing, at 5v4\n        [0.841]\n        +\n        # Home corsi, while score tied, at 5v4\n        [0.930]\n        +\n        # Home corsi, while home team leading, at 5v4\n        [1.052]\n        +\n        # Away corsi, while home team trailing, at 5v4\n        [1.233]\n        +\n        # Away corsi, while score tied, at 5v4\n        [1.082]\n        +\n        # Away corsi, while home team leading, at 5v4\n        [0.953]\n        +\n        # Home corsi, while home team trailing, at 4v5\n        [1.233]\n        +\n        # Home corsi, while score tied, at 4v5\n        [1.082]\n        +\n        # Home corsi, while home team leading, at 4v5\n        [0.953]\n        +\n        # Away corsi, while home team trailing, at 4v5\n        [0.841]\n        +\n        # Away corsi, while score tied, at 4v5\n        [0.930]\n        +\n        # Away corsi, while home team leading, at 4v5\n        [1.052]\n        +\n        # Home corsi, while home team trailing, at 5v3\n        [0.798]\n        +\n        # Home corsi, while score tied, at 5v3\n        [0.903]\n        +\n        # Home corsi, while home team leading, at 5v3\n        [0.954]\n        +\n        # Away corsi, while home team trailing, at 5v3\n        [1.338]\n        +\n        # Away corsi, while score tied, at 5v3\n        [1.121]\n        +\n        # Away corsi, while home team leading, at 5v3\n        [1.051]\n        +\n        # Home corsi, while home team trailing, at 3v5\n        [1.338]\n        +\n        # Home corsi, while score tied, at 3v5\n        [1.121]\n        +\n        # Home corsi, while home team leading, at 3v5\n        [1.051]\n        +\n        # Away corsi, while home team trailing, at 3v5\n        [0.798]\n        +\n        # Away corsi, while score tied, at 3v5\n        [0.903]\n        +\n        # Away corsi, while home team leading, at 3v5\n        [0.954]\n        +\n        # Home corsi, while home team trailing, at 4v3\n        [0.841]\n        +\n        # Home corsi, while score tied, at 4v3\n        [0.925]\n        +\n        # Home corsi, while home team leading, at 4v3\n        [0.953]\n        +\n        # Away corsi, while home team trailing, at 4v3\n        [1.234]\n        +\n        # Away corsi, while score tied, at 4v3\n        [1.088]\n        +\n        # Away corsi, while home team leading, at 4v3\n        [1.052]\n        +\n        # Home corsi, while home team trailing, at 3v4\n        [1.234]\n        +\n        # Home corsi, while score tied, at 3v4\n        [1.088]\n        +\n        # Home corsi, while home team leading, at 3v4\n        [1.052]\n        +\n        # Away corsi, while home team trailing, at 3v4\n        [0.841]\n        +\n        # Away corsi, while score tied, at 3v4\n        [0.925]\n        +\n        # Away corsi, while home team leading, at 3v4\n        [0.953]\n    )\n\n    values = [df.corsi * weight for weight in weights]\n\n    df[\"corsi_adj\"] = np.select(conds, values)\n\n    df.game_period = np.where(pd.isna(df.game_period), 0, df.game_period)\n    df.game_seconds = np.where(pd.isna(df.game_seconds), 0, df.game_seconds)\n    df.period_seconds = np.where(pd.isna(df.period_seconds), 0, df.period_seconds)\n\n    game_id_str = df.game_id.astype(str)\n    event_index_str = df.event_index.astype(str)\n\n    conds = [\n        event_index_str.str.len() == 1,\n        event_index_str.str.len() == 2,\n        event_index_str.str.len() == 3,\n        event_index_str.str.len() == 4,\n    ]\n    values = [\n        game_id_str + \"000\" + event_index_str,\n        game_id_str + \"00\" + event_index_str,\n        game_id_str + \"0\" + event_index_str,\n        game_id_str + event_index_str,\n    ]\n\n    df[\"id\"] = np.select(conds, values).astype(np.int64)\n\n    return df\n</code></pre>"},{"location":"contribute/backend/evolving_hockey/#evolving_hockey.base.munge_rosters","title":"munge_rosters","text":"<pre><code>munge_rosters(shifts)\n</code></pre> <p>Prepares rosters from csv file of shifts data for use in the <code>prep_pbp</code> function.</p> <p>Parameters:</p> Name Type Description Default <code>shifts</code> <code>DataFrame</code> <p>Pandas Dataframe of shifts data available from the queries section of evolving-hockey.com. Subscription required.</p> required Source code in <code>src/chickenstats/evolving_hockey/base.py</code> <pre><code>def munge_rosters(shifts: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"Prepares rosters from csv file of shifts data for use in the `prep_pbp` function.\n\n    Parameters:\n        shifts (pd.DataFrame):\n            Pandas Dataframe of shifts data available from the queries section\n            of evolving-hockey.com. Subscription required.\n\n    \"\"\"\n    keep = [\"player\", \"team_num\", \"position\", \"game_id\", \"season\", \"session\", \"team\"]\n\n    df = shifts[keep].copy().drop_duplicates()\n\n    DUOS = {\n        \"SEBASTIAN.AHO\": df.position == \"D\",\n        \"COLIN.WHITE\": df.season &gt;= 20162017,\n        \"SEAN.COLLINS\": df.season &gt;= 20162017,\n        \"ALEX.PICARD\": df.position != \"D\",\n        \"ERIK.GUSTAFSSON\": df.season &gt;= 20152016,\n        \"MIKKO.LEHTONEN\": df.season &gt;= 20202021,\n        \"NATHAN.SMITH\": df.season &gt;= 20212022,\n        \"DANIIL.TARASOV\": df.position == \"G\",\n    }\n\n    DUOS = [np.logical_and(df.player == player, condition) for player, condition in DUOS.items()]\n\n    df.player = df.player.str.normalize(\"NFKD\").str.encode(\"ascii\", errors=\"ignore\").str.decode(\"utf-8\")\n\n    df[\"eh_id\"] = np.where(np.logical_or.reduce(DUOS), df.player + \"2\", df.player)\n\n    replace_teams = {\"S.J\": \"SJS\", \"N.J\": \"NJD\", \"T.B\": \"TBL\", \"L.A\": \"LAK\"}\n\n    df.team = df.team.replace(replace_teams)\n\n    for old_team, new_team in replace_teams.items():\n        df.team_num = df.team_num.str.replace(old_team, new_team, regex=False)\n\n    return df\n</code></pre>"},{"location":"contribute/backend/evolving_hockey/#evolving_hockey.base.add_positions","title":"add_positions","text":"<pre><code>add_positions(pbp, rosters)\n</code></pre> <p>Adds position data to the play-by-play data from evolving-hockey.com.</p> <p>Nested within <code>prep_pbp</code> function.</p> <p>Parameters:</p> Name Type Description Default <code>pbp</code> <code>DataFrame</code> <p>Data returned from <code>munge_pbp</code> function</p> required <code>rosters</code> <code>DataFrame</code> <p>Data returned from <code>munge_rosters</code> function</p> required Source code in <code>src/chickenstats/evolving_hockey/base.py</code> <pre><code>def add_positions(pbp: pd.DataFrame, rosters: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"Adds position data to the play-by-play data from evolving-hockey.com.\n\n    Nested within `prep_pbp` function.\n\n    Parameters:\n        pbp (pd.DataFrame):\n            Data returned from `munge_pbp` function\n        rosters (pd.DataFrame):\n            Data returned from `munge_rosters` function\n\n    \"\"\"\n    pbp = pbp.copy()\n\n    rosters = rosters.copy()\n\n    player_cols = [col for col in pbp.columns if (\"event_player\" in col or \"on_\" in col) and (\"s_on\" not in col)]\n\n    for col in player_cols:\n        pbp[col] = (\n            pbp[col].astype(str).str.normalize(\"NFKD\").str.encode(\"ascii\", errors=\"ignore\").str.decode(\"utf-8\")\n        )  # .replace(EH_REPLACE[year])\n\n        keep_list = [\"game_id\", \"player\", \"eh_id\", \"position\"]\n\n        left_on = [\"game_id\", col]\n\n        right_on = [\"game_id\", \"player\"]\n\n        pbp = pbp.merge(rosters[keep_list], how=\"left\", left_on=left_on, right_on=right_on)\n\n        pbp = pbp.rename(columns={\"position\": col + \"_pos\", \"eh_id\": col + \"_id\"}).drop(\"player\", axis=1)\n\n    # Adding names and positions for players changing\n\n    change_players = pbp.players_on.str.split(\", \", expand=True)\n\n    pbp = pbp.drop(\"players_on\", axis=1)\n\n    columns = change_players.columns\n\n    change_players[\"game_id\"] = pbp.game_id\n\n    for player_num, change_player in enumerate(columns, start=1):\n        keep_list = [\"game_id\", \"team_num\", \"player\", \"eh_id\", \"position\"]\n\n        left_on = [\"game_id\", change_player]\n\n        right_on = [\"game_id\", \"team_num\"]\n\n        change_players = change_players.merge(rosters[keep_list], how=\"left\", left_on=left_on, right_on=right_on)\n\n        new_cols = {\"eh_id\": f\"id_{player_num}\", \"position\": f\"position_{player_num}\", \"player\": f\"player_{player_num}\"}\n\n        change_players = change_players.rename(columns=new_cols).drop(\"team_num\", axis=1)\n\n    cols = [f\"player_{x}\" for x in range(1, len(columns))]\n\n    change_players[\"players_on\"] = change_players[cols].apply(lambda x: x.str.cat(sep=\", \"), axis=1)\n\n    cols = [f\"id_{x}\" for x in range(1, len(columns))]\n\n    change_players[\"players_on_id\"] = change_players[cols].apply(lambda x: x.str.cat(sep=\", \"), axis=1)\n\n    cols = [f\"position_{x}\" for x in range(1, len(columns))]\n\n    change_players[\"players_on_pos\"] = change_players[cols].apply(lambda x: x.str.cat(sep=\", \"), axis=1)\n\n    keep_cols = [\"players_on\", \"players_on_id\", \"players_on_pos\"]\n\n    change_players = change_players[keep_cols].copy()\n\n    pbp = pbp.merge(change_players, left_index=True, right_index=True, how=\"left\")\n\n    change_players = pbp.players_off.str.split(\", \", expand=True)\n\n    pbp = pbp.drop(\"players_off\", axis=1)\n\n    columns = change_players.columns\n\n    change_players[\"game_id\"] = pbp.game_id\n\n    for player_num, change_player in enumerate(columns, start=1):\n        keep_list = [\"game_id\", \"team_num\", \"player\", \"eh_id\", \"position\"]\n\n        left_on = [\"game_id\", change_player]\n\n        right_on = [\"game_id\", \"team_num\"]\n\n        change_players = change_players.merge(rosters[keep_list], how=\"left\", left_on=left_on, right_on=right_on)\n\n        new_cols = {\"eh_id\": f\"id_{player_num}\", \"position\": f\"position_{player_num}\", \"player\": f\"player_{player_num}\"}\n\n        change_players = change_players.rename(columns=new_cols).drop(\"team_num\", axis=1)\n\n    cols = [f\"player_{x}\" for x in range(1, len(columns))]\n\n    change_players[\"players_off\"] = change_players[cols].apply(lambda x: x.str.cat(sep=\", \"), axis=1)\n\n    cols = [f\"id_{x}\" for x in range(1, len(columns))]\n\n    change_players[\"players_off_id\"] = change_players[cols].apply(lambda x: x.str.cat(sep=\", \"), axis=1)\n\n    cols = [f\"position_{x}\" for x in range(1, len(columns))]\n\n    change_players[\"players_off_pos\"] = change_players[cols].apply(lambda x: x.str.cat(sep=\", \"), axis=1)\n\n    keep_cols = [\"players_off\", \"players_off_id\", \"players_off_pos\"]\n\n    change_players = change_players[keep_cols].copy()\n\n    pbp = pbp.merge(change_players, left_index=True, right_index=True, how=\"left\")\n\n    player_groups = [\"event\", \"opp\"]\n\n    for player_group in player_groups:\n        player_types = {\"f\": [\"L\", \"C\", \"R\"], \"d\": [\"D\"], \"g\": [\"G\"]}\n\n        for position_group, positions in player_types.items():\n            col = f\"{player_group}_on_{position_group}\"\n\n            pbp[col] = \"\"\n\n            id_col = f\"{player_group}_on_{position_group}_id\"\n\n            pbp[id_col] = \"\"\n\n            player_cols = [f\"{player_group}_on_{x}\" for x in range(1, 7)]\n\n            for player_col in player_cols:\n                cond = pbp[f\"{player_col}_pos\"].isin(positions)\n\n                pbp[col] = np.where(cond, pbp[col] + pbp[player_col] + \"_\", pbp[col])\n\n                pbp[id_col] = np.where(cond, pbp[id_col] + pbp[f\"{player_col}_id\"] + \"_\", pbp[id_col])\n\n            pbp[col] = pbp[col].str.split(\"_\").map(lambda x: \", \".join(sorted(x)))\n\n            pbp[col] = pbp[col].str.replace(r\"(^, )\", \"\", regex=True)\n\n            pbp[id_col] = pbp[id_col].str.split(\"_\").map(lambda x: \", \".join(sorted(x)))\n\n            pbp[id_col] = pbp[id_col].str.replace(r\"(^, )\", \"\", regex=True)\n\n    return pbp\n</code></pre>"},{"location":"contribute/backend/evolving_hockey/#evolving_hockey.base.prep_ind","title":"prep_ind","text":"<pre><code>prep_ind(\n    pbp,\n    level=\"game\",\n    score=False,\n    teammates=False,\n    opposition=False,\n)\n</code></pre> <p>Prepares DataFrame of individual stats from play-by-play data.</p> <p>Nested within <code>prep_stats</code> function.</p> <p>Parameters:</p> Name Type Description Default <code>pbp</code> <code>DataFrame</code> <p>Data returned from <code>prep_pbp</code> function</p> required <code>level</code> <code>str</code> <p>Determines the level of aggregation. One of season, session, game, period</p> <code>'game'</code> <code>score</code> <code>bool</code> <p>Determines if stats are cut by score state</p> <code>False</code> <code>teammates</code> <code>bool</code> <p>Determines if stats are cut by teammates on ice</p> <code>False</code> <code>opposition</code> <code>bool</code> <p>Determines if stats are cut by opponents on ice</p> <code>False</code> Source code in <code>src/chickenstats/evolving_hockey/base.py</code> <pre><code>def prep_ind(\n    pbp: pd.DataFrame,\n    level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n    score: bool = False,\n    teammates: bool = False,\n    opposition: bool = False,\n) -&gt; pd.DataFrame:\n    \"\"\"Prepares DataFrame of individual stats from play-by-play data.\n\n    Nested within `prep_stats` function.\n\n    Parameters:\n        pbp (pd.DataFrame):\n            Data returned from `prep_pbp` function\n        level (str):\n            Determines the level of aggregation. One of season, session, game, period\n        score (bool):\n            Determines if stats are cut by score state\n        teammates (bool):\n            Determines if stats are cut by teammates on ice\n        opposition (bool):\n            Determines if stats are cut by opponents on ice\n\n    \"\"\"\n    df = pbp.copy()\n\n    players = [\"event_player_1\", \"event_player_2\", \"event_player_3\"]\n\n    if level == \"session\" or level == \"season\":\n        merge_list = [\"season\", \"session\", \"player\", \"player_id\", \"position\", \"team\", \"strength_state\"]\n\n    if level == \"game\":\n        merge_list = [\n            \"season\",\n            \"session\",\n            \"player\",\n            \"player_id\",\n            \"position\",\n            \"team\",\n            \"strength_state\",\n            \"game_id\",\n            \"game_date\",\n            \"opp_team\",\n        ]\n\n    if level == \"period\":\n        merge_list = [\n            \"season\",\n            \"session\",\n            \"player\",\n            \"player_id\",\n            \"position\",\n            \"team\",\n            \"strength_state\",\n            \"game_id\",\n            \"game_date\",\n            \"opp_team\",\n            \"game_period\",\n        ]\n\n    if score is True:\n        merge_list.append(\"score_state\")\n\n    if teammates is True:\n        merge_list = merge_list + [\"forwards\", \"forwards_id\", \"defense\", \"defense_id\", \"own_goalie\", \"own_goalie_id\"]\n\n    if opposition is True:\n        merge_list = merge_list + [\n            \"opp_forwards\",\n            \"opp_forwards_id\",\n            \"opp_defense\",\n            \"opp_defense_id\",\n            \"opp_goalie\",\n            \"opp_goalie_id\",\n        ]\n\n        if \"opp_team\" not in merge_list:\n            merge_list.append(\"opp_team\")\n\n    ind_stats = pd.DataFrame(columns=merge_list)\n\n    for player in players:\n        player_id = f\"{player}_id\"\n\n        position = f\"{player}_pos\"\n\n        if level == \"session\" or level == \"season\":\n            group_base = [\"season\", \"session\", \"event_team\", player, player_id, position]\n\n        if level == \"game\":\n            group_base = [\n                \"season\",\n                \"game_id\",\n                \"game_date\",\n                \"session\",\n                \"event_team\",\n                \"opp_team\",\n                player,\n                player_id,\n                position,\n            ]\n\n        if level == \"period\":\n            group_base = [\n                \"season\",\n                \"game_id\",\n                \"game_date\",\n                \"session\",\n                \"event_team\",\n                \"opp_team\",\n                \"game_period\",\n                player,\n                player_id,\n                position,\n            ]\n\n        if opposition is True and \"opp_team\" not in group_base:\n            group_base.append(\"opp_team\")\n\n        mask = df[player] != \"BENCH\"\n\n        if player == \"event_player_1\":\n            strength_group = [\"strength_state\"]\n            group_list = group_base + strength_group\n\n            if teammates is True:\n                teammates_group = [\n                    \"event_on_f\",\n                    \"event_on_f_id\",\n                    \"event_on_d\",\n                    \"event_on_d_id\",\n                    \"event_on_g\",\n                    \"event_on_g_id\",\n                ]\n\n                group_list = group_list + teammates_group\n\n            if score is True:\n                score_group = [\"score_state\"]\n                group_list = group_list + score_group\n\n            if opposition is True:\n                opposition_group = [\"opp_on_f\", \"opp_on_f_id\", \"opp_on_d\", \"opp_on_d_id\", \"opp_on_g\", \"opp_on_g_id\"]\n\n                group_list = group_list + opposition_group\n\n            stats_list = [\n                \"block\",\n                \"fac\",\n                \"give\",\n                \"goal\",\n                \"hd_fenwick\",\n                \"hd_goal\",\n                \"hd_miss\",\n                \"hd_shot\",\n                \"hit\",\n                \"miss\",\n                \"pen0\",\n                \"pen2\",\n                \"pen4\",\n                \"pen5\",\n                \"pen10\",\n                \"shot\",\n                \"take\",\n                \"corsi\",\n                \"fenwick\",\n                \"pred_goal\",\n                \"ozf\",\n                \"nzf\",\n                \"dzf\",\n            ]\n\n            stats_dict = {x: \"sum\" for x in stats_list if x in df.columns}\n\n            new_cols = {\n                \"block\": \"isb\",\n                \"fac\": \"ifow\",\n                \"give\": \"igive\",\n                \"goal\": \"g\",\n                \"hd_fenwick\": \"ihdf\",\n                \"hd_goal\": \"ihdg\",\n                \"hd_miss\": \"ihdm\",\n                \"hd_shot\": \"ihdsf\",\n                \"hit\": \"ihf\",\n                \"miss\": \"imsf\",\n                \"pen0\": \"ipent0\",\n                \"pen2\": \"ipent2\",\n                \"pen4\": \"ipent4\",\n                \"pen5\": \"ipent5\",\n                \"pen10\": \"ipent10\",\n                \"shot\": \"isf\",\n                \"take\": \"itake\",\n                \"corsi\": \"icf\",\n                \"fenwick\": \"iff\",\n                \"pred_goal\": \"ixg\",\n                \"ozf\": \"iozfw\",\n                \"nzf\": \"inzfw\",\n                \"dzf\": \"idzfw\",\n                \"event_team\": \"team\",\n                player: \"player\",\n                player_id: \"player_id\",\n                position: \"position\",\n                \"event_on_f\": \"forwards\",\n                \"event_on_f_id\": \"forwards_id\",\n                \"event_on_d\": \"defense\",\n                \"event_on_d_id\": \"defense_id\",\n                \"event_on_g\": \"own_goalie\",\n                \"event_on_g_id\": \"own_goalie_id\",\n                \"opp_on_f\": \"opp_forwards\",\n                \"opp_on_f_id\": \"opp_forwards_id\",\n                \"opp_on_d\": \"opp_defense\",\n                \"opp_on_d_id\": \"opp_defense_id\",\n                \"opp_on_g\": \"opp_goalie\",\n                \"opp_on_g_id\": \"opp_goalie_id\",\n            }\n\n            player_df = df[mask].copy().groupby(group_list, as_index=False).agg(stats_dict).rename(columns=new_cols)\n\n            # drop_list = [x for x in stats if x not in new_cols.keys() and x in player_df.columns]\n\n        if player == \"event_player_2\":\n            # Getting on-ice stats against for player 2\n\n            opp_strength = [\"opp_strength_state\"]\n            event_strength = [\"strength_state\"]\n\n            opp_group_list = group_base + opp_strength\n            event_group_list = group_base + event_strength\n\n            if not opposition and level in [\"season\", \"session\"]:\n                opp_group_list.remove(\"event_team\")\n                opp_group_list.append(\"opp_team\")\n\n            if teammates is True:\n                opp_teammates = [\"opp_on_f\", \"opp_on_f_id\", \"opp_on_d\", \"opp_on_d_id\", \"opp_on_g\", \"opp_on_g_id\"]\n\n                event_teammates = [\n                    \"event_on_f\",\n                    \"event_on_f_id\",\n                    \"event_on_d\",\n                    \"event_on_d_id\",\n                    \"event_on_g\",\n                    \"event_on_g_id\",\n                ]\n\n                opp_group_list = opp_group_list + opp_teammates\n                event_group_list = event_group_list + event_teammates\n\n            if score is True:\n                opp_score = [\"opp_score_state\"]\n                event_score = [\"score_state\"]\n\n                opp_group_list = opp_group_list + opp_score\n                event_group_list = event_group_list + event_score\n\n            if opposition is True:\n                opp_opposition = [\n                    \"event_on_f\",\n                    \"event_on_f_id\",\n                    \"event_on_d\",\n                    \"event_on_d_id\",\n                    \"event_on_g\",\n                    \"event_on_g_id\",\n                ]\n\n                event_opposition = [\"opp_on_f\", \"opp_on_f_id\", \"opp_on_d\", \"opp_on_d_id\", \"opp_on_g\", \"opp_on_g_id\"]\n\n                opp_group_list = opp_group_list + opp_opposition\n                event_group_list = event_group_list + event_opposition\n\n            stats_1 = [\"block\", \"fac\", \"hit\", \"pen0\", \"pen2\", \"pen4\", \"pen5\", \"pen10\", \"ozf\", \"nzf\", \"dzf\"]\n\n            stats_1 = {x: \"sum\" for x in stats_1 if x.lower() in df.columns}\n\n            new_cols_1 = {\n                \"opp_on_g\": \"own_goalie\",\n                \"opp_on_g_id\": \"own_goalie_id\",\n                \"event_on_g\": \"opp_goalie\",\n                \"event_on_g_id\": \"opp_goalie_id\",\n                \"opp_team\": \"team\",\n                \"event_team\": \"opp_team\",\n                \"opp_score_state\": \"score_state\",\n                \"opp_strength_state\": \"strength_state\",\n                \"pen0\": \"ipend0\",\n                \"pen2\": \"ipend2\",\n                \"pen4\": \"ipend4\",\n                \"pen5\": \"ipend5\",\n                \"pen10\": \"ipend10\",\n                player: \"player\",\n                player_id: \"player_id\",\n                position: \"position\",\n                \"fac\": \"ifol\",\n                \"hit\": \"iht\",\n                \"ozf\": \"iozfl\",\n                \"nzf\": \"inzfl\",\n                \"dzf\": \"idzfl\",\n                \"block\": \"ibs\",\n                \"opp_on_f\": \"forwards\",\n                \"opp_on_f_id\": \"forwards_id\",\n                \"opp_on_d\": \"defense\",\n                \"opp_on_d_id\": \"defense_id\",\n                \"event_on_f\": \"opp_forwards\",\n                \"event_on_f_id\": \"opp_forwards_id\",\n                \"event_on_d\": \"opp_defense\",\n                \"event_on_d_id\": \"opp_defense_id\",\n            }\n\n            event_types = [\"BLOCK\", \"FAC\", \"HIT\", \"PENL\"]\n\n            mask_1 = np.logical_and(df[player] != \"BENCH\", df.event_type.isin(event_types))\n\n            opps = df[mask_1].copy().groupby(opp_group_list, as_index=False).agg(stats_1).rename(columns=new_cols_1)\n\n            # Getting primary assists and primary assists xG from player 2\n\n            stats_2 = [\"goal\", \"pred_goal\"]\n\n            stats_2 = {x: \"sum\" for x in stats_2 if x in df.columns}\n\n            new_cols_2 = {\n                \"event_team\": \"team\",\n                player: \"player\",\n                player_id: \"player_id\",\n                \"goal\": \"a1\",\n                \"pred_goal\": \"a1_xg\",\n                position: \"position\",\n                \"event_on_f\": \"forwards\",\n                \"event_on_f_id\": \"forwards_id\",\n                \"event_on_d\": \"defense\",\n                \"event_on_d_id\": \"defense_id\",\n                \"event_on_g\": \"own_goalie\",\n                \"event_on_g_id\": \"own_goalie_id\",\n                \"opp_on_f\": \"opp_forwards\",\n                \"opp_on_f_id\": \"opp_forwards_id\",\n                \"opp_on_d\": \"opp_defense\",\n                \"opp_on_d_id\": \"opp_defense_id\",\n                \"opp_on_g\": \"opp_goalie\",\n                \"opp_on_g_id\": \"opp_goalie_id\",\n            }\n\n            mask_2 = np.logical_and(df[player] != \"BENCH\", df.event_type.isin([x.upper() for x in stats_2]))\n\n            own = df[mask_2].copy().groupby(event_group_list, as_index=False).agg(stats_2).rename(columns=new_cols_2)\n\n            player_df = opps.merge(own, left_on=merge_list, right_on=merge_list, how=\"outer\").fillna(0)\n\n        if player == \"event_player_3\":\n            group_list = group_base + strength_group\n\n            if teammates is True:\n                group_list = group_list + teammates_group\n\n            if score is True:\n                group_list = group_list + score_group\n\n            if opposition is True:\n                group_list = group_list + opposition_group\n\n                if \"opp_team\" not in group_list:\n                    group_list.append(\"opp_team\")\n\n            stats_list = [\"goal\", \"pred_goal\"]\n\n            stats_dict = {x: \"sum\" for x in stats_list if x in df.columns}\n\n            player_df = df[mask].groupby(group_list, as_index=False).agg(stats_dict)\n\n            new_cols = {\n                \"goal\": \"a2\",\n                \"pred_goal\": \"a2_xg\",\n                \"event_team\": \"team\",\n                player: \"player\",\n                player_id: \"player_id\",\n                position: \"position\",\n                \"event_on_f\": \"forwards\",\n                \"event_on_f_id\": \"forwards_id\",\n                \"event_on_d\": \"defense\",\n                \"event_on_d_id\": \"defense_id\",\n                \"event_on_g\": \"own_goalie\",\n                \"event_on_g_id\": \"own_goalie_id\",\n                \"opp_on_f\": \"opp_forwards\",\n                \"opp_on_f_id\": \"opp_forwards_id\",\n                \"opp_on_d\": \"opp_defense\",\n                \"opp_on_d_id\": \"opp_defense_id\",\n                \"opp_on_g\": \"opp_goalie\",\n                \"opp_on_g_id\": \"opp_goalie_id\",\n            }\n\n            player_df = player_df.rename(columns=new_cols)\n\n        ind_stats = ind_stats.merge(player_df, on=merge_list, how=\"outer\").fillna(0)\n\n    # Fixing some stats\n\n    ind_stats[\"gax\"] = ind_stats.g - ind_stats.ixg\n\n    columns = [\n        \"season\",\n        \"session\",\n        \"game_id\",\n        \"game_date\",\n        \"player\",\n        \"player_id\",\n        \"position\",\n        \"team\",\n        \"opp_team\",\n        \"game_period\",\n        \"strength_state\",\n        \"score_state\",\n        \"opp_goalie\",\n        \"opp_goalie_id\",\n        \"own_goalie\",\n        \"own_goalie_id\",\n        \"forwards\",\n        \"forwards_id\",\n        \"defense\",\n        \"defense_id\",\n        \"opp_forwards\",\n        \"opp_forwards_id\",\n        \"opp_defense\",\n        \"opp_defense_id\",\n        \"g\",\n        \"a1\",\n        \"a2\",\n        \"isf\",\n        \"iff\",\n        \"icf\",\n        \"ixg\",\n        \"gax\",\n        \"ihdg\",\n        \"ihdf\",\n        \"ihdsf\",\n        \"ihdm\",\n        \"imsf\",\n        \"isb\",\n        \"ibs\",\n        \"igive\",\n        \"itake\",\n        \"ihf\",\n        \"iht\",\n        \"ifow\",\n        \"ifol\",\n        \"iozfw\",\n        \"iozfl\",\n        \"inzfw\",\n        \"inzfl\",\n        \"idzfw\",\n        \"idzfl\",\n        \"a1_xg\",\n        \"a2_xg\",\n        \"ipent0\",\n        \"ipent2\",\n        \"ipent4\",\n        \"ipent5\",\n        \"ipent10\",\n        \"ipend0\",\n        \"ipend2\",\n        \"ipend4\",\n        \"ipend5\",\n        \"ipend10\",\n    ]\n\n    columns = [x for x in columns if x in ind_stats.columns]\n\n    ind_stats = ind_stats[columns]\n\n    stats = [\n        \"g\",\n        \"a1\",\n        \"a2\",\n        \"isf\",\n        \"iff\",\n        \"icf\",\n        \"ixg\",\n        \"gax\",\n        \"ihdg\",\n        \"ihdf\",\n        \"ihdsf\",\n        \"ihdm\",\n        \"imsf\",\n        \"isb\",\n        \"ibs\",\n        \"igive\",\n        \"itake\",\n        \"ihf\",\n        \"iht\",\n        \"ifow\",\n        \"ifol\",\n        \"iozfw\",\n        \"iozfl\",\n        \"inzfw\",\n        \"inzfl\",\n        \"idzfw\",\n        \"idzfl\",\n        \"a1_xg\",\n        \"a2_xg\",\n        \"ipent0\",\n        \"ipent2\",\n        \"ipent4\",\n        \"ipent5\",\n        \"ipent10\",\n        \"ipend0\",\n        \"ipend2\",\n        \"ipend4\",\n        \"ipend5\",\n        \"ipend10\",\n    ]\n\n    stats = [x for x in stats if x in ind_stats.columns]\n\n    ind_stats = ind_stats.loc[(ind_stats[stats] != 0).any(axis=1)]\n\n    return ind_stats\n</code></pre>"},{"location":"contribute/backend/evolving_hockey/#evolving_hockey.base.prep_oi","title":"prep_oi","text":"<pre><code>prep_oi(\n    pbp,\n    level=\"game\",\n    score=False,\n    teammates=False,\n    opposition=False,\n)\n</code></pre> <p>Prepares DataFrame of on-ice stats from play-by-play data.</p> <p>Nested within <code>prep_stats</code> function.</p> <p>Parameters:</p> Name Type Description Default <code>pbp</code> <code>DataFrame</code> <p>Data returned from <code>prep_pbp</code> function</p> required <code>level</code> <code>str</code> <p>Determines the level of aggregation. One of season, session, game, period</p> <code>'game'</code> <code>score</code> <code>bool</code> <p>Determines if stats are cut by score state</p> <code>False</code> <code>teammates</code> <code>bool</code> <p>Determines if stats are cut by teammates on ice</p> <code>False</code> <code>opposition</code> <code>bool</code> <p>Determines if stats are cut by opponents on ice</p> <code>False</code> Source code in <code>src/chickenstats/evolving_hockey/base.py</code> <pre><code>def prep_oi(\n    pbp: pd.DataFrame,\n    level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n    score: bool = False,\n    teammates: bool = False,\n    opposition: bool = False,\n) -&gt; pd.DataFrame:\n    \"\"\"Prepares DataFrame of on-ice stats from play-by-play data.\n\n    Nested within `prep_stats` function.\n\n    Parameters:\n        pbp (pd.DataFrame):\n            Data returned from `prep_pbp` function\n        level (str):\n            Determines the level of aggregation. One of season, session, game, period\n        score (bool):\n            Determines if stats are cut by score state\n        teammates (bool):\n            Determines if stats are cut by teammates on ice\n        opposition (bool):\n            Determines if stats are cut by opponents on ice\n\n    \"\"\"\n    df = pbp.copy()\n\n    stats_list = [\n        \"block\",\n        \"fac\",\n        \"goal\",\n        \"goal_adj\",\n        \"hd_fenwick\",\n        \"hd_goal\",\n        \"hd_miss\",\n        \"hd_shot\",\n        \"hit\",\n        \"miss\",\n        \"pen0\",\n        \"pen2\",\n        \"pen4\",\n        \"pen5\",\n        \"pen10\",\n        \"shot\",\n        \"shot_adj\",\n        \"corsi\",\n        \"corsi_adj\",\n        \"fenwick\",\n        \"fenwick_adj\",\n        \"pred_goal\",\n        \"pred_goal_adj\",\n        \"ozf\",\n        \"nzf\",\n        \"dzf\",\n        \"event_length\",\n    ]\n\n    stats_dict = {x: \"sum\" for x in stats_list if x in df.columns}\n\n    players = [f\"event_on_{x}\" for x in range(1, 8)] + [f\"opp_on_{x}\" for x in range(1, 8)]\n\n    event_list = []\n\n    opp_list = []\n\n    for player in players:\n        position = f\"{player}_pos\"\n\n        player_id = f\"{player}_id\"\n\n        if level == \"session\" or level == \"season\":\n            group_list = [\"season\", \"session\"]\n\n        if level == \"game\":\n            group_list = [\"season\", \"game_id\", \"game_date\", \"session\", \"event_team\", \"opp_team\"]\n\n        if level == \"period\":\n            group_list = [\"season\", \"game_id\", \"game_date\", \"session\", \"event_team\", \"opp_team\", \"game_period\"]\n\n        # Accounting for desired player\n\n        if \"event_on\" in player:\n            if level == \"session\" or level == \"season\":\n                group_list.append(\"event_team\")\n\n            strength_group = [\"strength_state\"]\n\n            teammates_group = [\n                \"event_on_f\",\n                \"event_on_f_id\",\n                \"event_on_d\",\n                \"event_on_d_id\",\n                \"event_on_g\",\n                \"event_on_g_id\",\n            ]\n\n            score_group = [\"score_state\"]\n\n            opposition_group = [\"opp_on_f\", \"opp_on_f_id\", \"opp_on_d\", \"opp_on_d_id\", \"opp_on_g\", \"opp_on_g_id\"]\n\n            col_names = {\n                \"event_team\": \"team\",\n                player: \"player\",\n                player_id: \"player_id\",\n                position: \"position\",\n                \"goal\": \"gf\",\n                \"goal_adj\": \"gf_adj\",\n                \"hit\": \"hf\",\n                \"miss\": \"msf\",\n                \"block\": \"bsf\",\n                \"pen0\": \"pent0\",\n                \"pen2\": \"pent2\",\n                \"pen4\": \"pent4\",\n                \"pen5\": \"pent5\",\n                \"pen10\": \"pent10\",\n                \"corsi\": \"cf\",\n                \"corsi_adj\": \"cf_adj\",\n                \"fenwick\": \"ff\",\n                \"fenwick_adj\": \"ff_adj\",\n                \"pred_goal\": \"xgf\",\n                \"pred_goal_adj\": \"xgf_adj\",\n                \"FAC\": \"fow\",\n                \"ozf\": \"ozfw\",\n                \"dzf\": \"dzfw\",\n                \"nzf\": \"nzfw\",\n                \"shot\": \"sf\",\n                \"shot_adj\": \"sf_adj\",\n                \"hd_goal\": \"hdgf\",\n                \"hd_shot\": \"hdsf\",\n                \"hd_fenwick\": \"hdff\",\n                \"hd_miss\": \"hdmsf\",\n                \"event_on_f\": \"forwards\",\n                \"event_on_f_id\": \"forwards_id\",\n                \"event_on_d\": \"defense\",\n                \"event_on_d_id\": \"defense_id\",\n                \"event_on_g\": \"own_goalie\",\n                \"event_on_g_id\": \"own_goalie_id\",\n                \"opp_on_f\": \"opp_forwards\",\n                \"opp_on_f_id\": \"opp_forwards_id\",\n                \"opp_on_d\": \"opp_defense\",\n                \"opp_on_d_id\": \"opp_defense_id\",\n                \"opp_on_g\": \"opp_goalie\",\n                \"opp_on_g_id\": \"opp_goalie_id\",\n            }\n\n        if \"opp_on\" in player:\n            if level == \"session\" or level == \"season\":\n                group_list.append(\"opp_team\")\n\n            strength_group = [\"opp_strength_state\"]\n\n            teammates_group = [\"opp_on_f\", \"opp_on_f_id\", \"opp_on_d\", \"opp_on_d_id\", \"opp_on_g\", \"opp_on_g_id\"]\n\n            score_group = [\"opp_score_state\"]\n\n            opposition_group = [\n                \"event_on_f\",\n                \"event_on_f_id\",\n                \"event_on_d\",\n                \"event_on_d_id\",\n                \"event_on_g\",\n                \"event_on_g_id\",\n            ]\n\n            col_names = {\n                \"opp_team\": \"team\",\n                \"event_team\": \"opp_team\",\n                \"opp_goalie\": \"own_goalie\",\n                \"own_goalie\": \"opp_goalie\",\n                \"opp_score_state\": \"score_state\",\n                \"opp_strength_state\": \"strength_state\",\n                player: \"player\",\n                player_id: \"player_id\",\n                position: \"position\",\n                \"block\": \"bsa\",\n                \"goal\": \"ga\",\n                \"goal_adj\": \"ga_adj\",\n                \"hit\": \"ht\",\n                \"miss\": \"msa\",\n                \"pen0\": \"pend0\",\n                \"pen2\": \"pend2\",\n                \"pen4\": \"pend4\",\n                \"pen5\": \"pend5\",\n                \"pen10\": \"pend10\",\n                \"shot\": \"sa\",\n                \"shot_adj\": \"sa_adj\",\n                \"corsi\": \"ca\",\n                \"corsi_adj\": \"ca_adj\",\n                \"fenwick\": \"fa\",\n                \"fenwick_adj\": \"fa_adj\",\n                \"pred_goal\": \"xga\",\n                \"pred_goal_adj\": \"xga_adj\",\n                \"fac\": \"fol\",\n                \"ozf\": \"dzfl\",\n                \"dzf\": \"ozfl\",\n                \"nzf\": \"nzfl\",\n                \"hd_goal\": \"hdga\",\n                \"hd_shot\": \"hdsa\",\n                \"hd_fenwick\": \"hdfa\",\n                \"hd_miss\": \"hdmsa\",\n                \"event_on_f\": \"opp_forwards\",\n                \"event_on_f_id\": \"opp_forwards_id\",\n                \"event_on_d\": \"opp_defense\",\n                \"event_on_d_id\": \"opp_defense_id\",\n                \"event_on_g\": \"opp_goalie\",\n                \"event_on_g_id\": \"opp_goalie_id\",\n                \"opp_on_f\": \"forwards\",\n                \"opp_on_f_id\": \"forwards_id\",\n                \"opp_on_d\": \"defense\",\n                \"opp_on_d_id\": \"defense_id\",\n                \"opp_on_g\": \"own_goalie\",\n                \"opp_on_g_id\": \"own_goalie_id\",\n            }\n\n        group_list = group_list + [player, player_id, position] + strength_group\n\n        if teammates is True:\n            group_list = group_list + teammates_group\n\n        if score is True:\n            group_list = group_list + score_group\n\n        if opposition is True:\n            group_list = group_list + opposition_group\n\n        player_df = df.groupby(group_list, as_index=False).agg(stats_dict)\n\n        col_names = {key: value for key, value in col_names.items() if key in player_df.columns}\n\n        player_df = player_df.rename(columns=col_names)\n\n        if \"event_on\" in player:\n            event_list.append(player_df)\n\n        else:\n            opp_list.append(player_df)\n\n    # On-ice stats\n\n    merge_cols = [\n        \"season\",\n        \"session\",\n        \"game_id\",\n        \"game_date\",\n        \"team\",\n        \"opp_team\",\n        \"player\",\n        \"player_id\",\n        \"position\",\n        \"game_period\",\n        \"strength_state\",\n        \"score_state\",\n        \"opp_goalie\",\n        \"opp_goalie_id\",\n        \"own_goalie\",\n        \"own_goalie_id\",\n        \"forwards\",\n        \"forwards_id\",\n        \"defense\",\n        \"defense_id\",\n        \"opp_forwards\",\n        \"opp_forwards_id\",\n        \"opp_defense\",\n        \"opp_defense_id\",\n    ]\n\n    event_stats = pd.concat(event_list, ignore_index=True)\n\n    stats_dict = {x: \"sum\" for x in event_stats.columns if x not in merge_cols}\n\n    group_list = [x for x in merge_cols if x in event_stats.columns]\n\n    event_stats = event_stats.groupby(group_list, as_index=False).agg(stats_dict)\n\n    opp_stats = pd.concat(opp_list, ignore_index=True)\n\n    stats_dict = {x: \"sum\" for x in opp_stats.columns if x not in merge_cols}\n\n    group_list = [x for x in merge_cols if x in opp_stats.columns]\n\n    opp_stats = opp_stats.groupby(group_list, as_index=False).agg(stats_dict)\n\n    merge_cols = [x for x in merge_cols if x in event_stats.columns and x in opp_stats.columns]\n\n    oi_stats = event_stats.merge(opp_stats, on=merge_cols, how=\"outer\").fillna(0)\n\n    oi_stats[\"toi\"] = (oi_stats.event_length_x + oi_stats.event_length_y) / 60\n\n    oi_stats = oi_stats.drop([\"event_length_x\", \"event_length_y\"], axis=1)\n\n    fo_list = [\"ozf\", \"dzf\", \"nzf\"]\n\n    for fo in fo_list:\n        oi_stats[fo] = oi_stats[f\"{fo}w\"] + oi_stats[f\"{fo}l\"]\n\n    oi_stats[\"fac\"] = oi_stats.ozf + oi_stats.nzf + oi_stats.dzf\n\n    columns = [\n        \"season\",\n        \"session\",\n        \"game_id\",\n        \"game_date\",\n        \"player\",\n        \"player_id\",\n        \"position\",\n        \"team\",\n        \"opp_team\",\n        \"game_period\",\n        \"strength_state\",\n        \"score_state\",\n        \"opp_goalie\",\n        \"opp_goalie_id\",\n        \"own_goalie\",\n        \"own_goalie_id\",\n        \"forwards\",\n        \"forwards_id\",\n        \"defense\",\n        \"defense_id\",\n        \"opp_forwards\",\n        \"opp_forwards_id\",\n        \"opp_defense\",\n        \"opp_defense_id\",\n        \"toi\",\n        \"gf\",\n        \"gf_adj\",\n        \"hdgf\",\n        \"sf\",\n        \"sf_adj\",\n        \"hdsf\",\n        \"ff\",\n        \"ff_adj\",\n        \"hdff\",\n        \"cf\",\n        \"cf_adj\",\n        \"xgf\",\n        \"xgf_adj\",\n        \"bsf\",\n        \"msf\",\n        \"hdmsf\",\n        \"ga\",\n        \"ga_adj\",\n        \"hdga\",\n        \"sa\",\n        \"sa_adj\",\n        \"hdsa\",\n        \"fa\",\n        \"fa_adj\",\n        \"hdfa\",\n        \"ca\",\n        \"ca_adj\",\n        \"xga\",\n        \"xga_adj\",\n        \"bsa\",\n        \"msa\",\n        \"hdmsa\",\n        \"hf\",\n        \"ht\",\n        \"ozf\",\n        \"nzf\",\n        \"dzf\",\n        \"fow\",\n        \"fol\",\n        \"ozfw\",\n        \"ozfl\",\n        \"nzfw\",\n        \"nzfl\",\n        \"dzfw\",\n        \"dzfl\",\n        \"pent0\",\n        \"pent2\",\n        \"pent4\",\n        \"pent5\",\n        \"pent10\",\n        \"pend0\",\n        \"pend2\",\n        \"pend4\",\n        \"pend5\",\n        \"pend10\",\n    ]\n\n    columns = [x for x in columns if x in oi_stats.columns]\n\n    oi_stats = oi_stats[columns]\n\n    stats = [\n        \"toi\",\n        \"gf\",\n        \"gf_adj\",\n        \"hdgf\",\n        \"sf\",\n        \"sf_adj\",\n        \"hdsf\",\n        \"ff\",\n        \"ff_adj\",\n        \"hdff\",\n        \"cf\",\n        \"cf_adj\",\n        \"xgf\",\n        \"xgf_adj\",\n        \"bsf\",\n        \"msf\",\n        \"hdmsf\",\n        \"ga\",\n        \"ga_adj\",\n        \"hdga\",\n        \"sa\",\n        \"sa_adj\",\n        \"hdsa\",\n        \"fa\",\n        \"fa_adj\",\n        \"hdfa\",\n        \"ca\",\n        \"ca_adj\",\n        \"xga\",\n        \"xga_adj\",\n        \"bsa\",\n        \"msa\",\n        \"hdmsa\",\n        \"hf\",\n        \"ht\",\n        \"ozf\",\n        \"nzf\",\n        \"dzf\",\n        \"fow\",\n        \"fol\",\n        \"ozfw\",\n        \"ozfl\",\n        \"nzfw\",\n        \"nzfl\",\n        \"dzfw\",\n        \"dzfl\",\n        \"pent0\",\n        \"pent2\",\n        \"pent4\",\n        \"pent5\",\n        \"pent10\",\n        \"pend0\",\n        \"pend2\",\n        \"pend4\",\n        \"pend5\",\n        \"pend10\",\n    ]\n\n    stats = [x.lower() for x in stats if x.lower() in oi_stats.columns]\n\n    oi_stats = oi_stats.loc[(oi_stats[stats] != 0).any(axis=1)]\n\n    return oi_stats\n</code></pre>"},{"location":"contribute/backend/evolving_hockey/#evolving_hockey.base.prep_zones","title":"prep_zones","text":"<pre><code>prep_zones(\n    pbp,\n    level=\"game\",\n    score=False,\n    teammates=False,\n    opposition=False,\n)\n</code></pre> <p>Prepares DataFrame of zone stats from play-by-play data.</p> <p>Nested within <code>prep_stats</code> function.</p> <p>Parameters:</p> Name Type Description Default <code>pbp</code> <code>DataFrame</code> <p>Data returned from <code>prep_pbp</code> function</p> required <code>level</code> <code>str</code> <p>Determines the level of aggregation. One of season, session, game, period</p> <code>'game'</code> <code>score</code> <code>bool</code> <p>Determines if stats are cut by score state</p> <code>False</code> <code>teammates</code> <code>bool</code> <p>Determines if stats are cut by teammates on ice</p> <code>False</code> <code>opposition</code> <code>bool</code> <p>Determines if stats are cut by opponents on ice</p> <code>False</code> Source code in <code>src/chickenstats/evolving_hockey/base.py</code> <pre><code>def prep_zones(\n    pbp: pd.DataFrame,\n    level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n    score: bool = False,\n    teammates: bool = False,\n    opposition: bool = False,\n) -&gt; pd.DataFrame:\n    \"\"\"Prepares DataFrame of zone stats from play-by-play data.\n\n    Nested within `prep_stats` function.\n\n    Parameters:\n        pbp (pd.DataFrame):\n            Data returned from `prep_pbp` function\n        level (str):\n            Determines the level of aggregation. One of season, session, game, period\n        score (bool):\n            Determines if stats are cut by score state\n        teammates (bool):\n            Determines if stats are cut by teammates on ice\n        opposition (bool):\n            Determines if stats are cut by opponents on ice\n\n    \"\"\"\n    conds = np.logical_and(\n        pbp.event_type == \"CHANGE\", np.logical_or.reduce([pbp.ozs &gt; 0, pbp.nzs &gt; 0, pbp.dzs &gt; 0, pbp.otf &gt; 0])\n    )\n\n    df = pbp.loc[conds].copy()\n\n    players_on = df.players_on.str.split(\", \", expand=True)\n\n    new_cols = {x: f\"player_{x+1}\" for x in players_on.columns}\n\n    players_on = players_on.rename(columns=new_cols)\n\n    players_on_id = df.players_on_id.str.split(\", \", expand=True)\n\n    new_cols = {x: f\"player_{x+1}_id\" for x in players_on_id.columns}\n\n    players_on_id = players_on_id.rename(columns=new_cols)\n\n    players_on_pos = df.players_on_pos.str.split(\", \", expand=True)\n\n    new_cols = {x: f\"player_{x+1}_pos\" for x in players_on_pos.columns}\n\n    players_on_pos = players_on_pos.rename(columns=new_cols)\n\n    players_on = players_on.merge(players_on_id, left_index=True, right_index=True)\n\n    players_on = players_on.merge(players_on_pos, left_index=True, right_index=True)\n\n    if level == \"session\" or level == \"season\":\n        group_list = [\"season\", \"session\", \"event_team\", \"strength_state\"]\n\n    if level == \"game\":\n        group_list = [\"season\", \"session\", \"game_id\", \"game_date\", \"event_team\", \"strength_state\", \"opp_team\"]\n\n    if level == \"period\":\n        group_list = [\n            \"season\",\n            \"session\",\n            \"game_id\",\n            \"game_date\",\n            \"game_period\",\n            \"event_team\",\n            \"strength_state\",\n            \"opp_team\",\n        ]\n\n    if score:\n        group_list.append(\"score_state\")\n\n    if teammates:\n        group_list = group_list + [\n            \"event_on_f\",\n            \"event_on_f_id\",\n            \"event_on_d\",\n            \"event_on_d_id\",\n            \"event_on_g\",\n            \"event_on_g_id\",\n        ]\n\n    if opposition:\n        group_list = group_list + [\"opp_on_f\", \"opp_on_f_id\", \"opp_on_d\", \"opp_on_d_id\", \"opp_on_g\", \"opp_on_g_id\"]\n\n    stats = [\"ozs\", \"nzs\", \"dzs\", \"otf\"]\n\n    keep_cols = group_list + stats\n\n    players_on = df[keep_cols].merge(players_on, left_index=True, right_index=True)\n\n    zones = pd.DataFrame(columns=group_list + [\"player\", \"player_id\", \"position\"])\n\n    player_list = [f\"player_{x}\" for x in range(1, 6)]\n\n    zones_list = []\n\n    for player in player_list:\n        group_cols = group_list + [player, f\"{player}_id\", f\"{player}_pos\"]\n\n        new_cols = {player: \"player\", f\"{player}_id\": \"player_id\", f\"{player}_pos\": \"position\"}\n\n        agg_stats = {x: \"sum\" for x in stats}\n\n        player_df = players_on.groupby(group_cols, as_index=False).agg(agg_stats).rename(columns=new_cols)\n\n        # zones = zones.merge(player_df, how = 'outer', on = group_list + ['player', 'player_id'])\n\n        zones_list.append(player_df)\n\n    zones = pd.concat(zones_list, ignore_index=True)\n\n    agg_stats = {x: \"sum\" for x in stats}\n\n    zones = zones.groupby(group_list + [\"player\", \"player_id\", \"position\"], as_index=False).agg(agg_stats)\n\n    new_cols = {\n        \"event_team\": \"team\",\n        \"event_on_f\": \"forwards\",\n        \"event_on_f_id\": \"forwards_id\",\n        \"event_on_d\": \"defense\",\n        \"event_on_d_id\": \"defense_id\",\n        \"event_on_g\": \"own_goalie\",\n        \"event_on_g_id\": \"own_goalie_id\",\n        \"opp_on_f\": \"opp_forwards\",\n        \"opp_on_f_id\": \"opp_forwards_id\",\n        \"opp_on_d\": \"opp_defense\",\n        \"opp_on_d_id\": \"opp_defense_id\",\n        \"opp_on_g\": \"opp_goalie\",\n        \"opp_on_g_id\": \"opp_goalie_id\",\n    }\n\n    zones = zones.rename(columns=new_cols)\n\n    columns = [\n        \"season\",\n        \"session\",\n        \"game_id\",\n        \"game_date\",\n        \"team\",\n        \"player\",\n        \"player_id\",\n        \"position\",\n        \"strength_state\",\n        \"score_state\",\n        \"game_period\",\n        \"opp_team\",\n        \"forwards\",\n        \"forwards_id\",\n        \"defense\",\n        \"defense_id\",\n        \"own_goalie\",\n        \"own_goalie_id\",\n        \"opp_forwards\",\n        \"opp_forwards_id\",\n        \"opp_defense\",\n        \"opp_defense_id\",\n        \"opp_goalie\",\n        \"opp_goalie_id\",\n        \"ozs\",\n        \"nzs\",\n        \"dzs\",\n        \"otf\",\n    ]\n\n    columns = [x for x in columns if x in zones.columns]\n\n    zones = zones[columns]\n\n    zones[[\"player\", \"player_id\"]] = zones[[\"player\", \"player_id\"]].replace(\"\", np.nan)\n\n    zones = zones.dropna(subset=[\"player\", \"player_id\"])\n\n    return zones\n</code></pre>"},{"location":"guide/guide/","title":"User Guide","text":"<p>Start here for an introduction and guides to getting started with both <code>chickenstats.chicken_nhl</code> and <code>chickenstats.evolving_hockey</code>, stick around for the example tutorials and gallery for inspiration.</p> Info <p>To be included in the gallery or original research, you can find me on  Bluesky at @chickenandstats.com or  email me at chicken@chickenandstats.com.</p> <p>For in-depth reference information, please consult the  Reference</p>"},{"location":"guide/guide/#module-specific-guides","title":"Module-specific guides","text":"<ul> <li> <p> chicken_nhl</p> <p>Overview of basic <code>chicken_nhl</code> usage &amp; functionalities</p> <p> Read more</p> </li> <li> <p> evolving_hockey</p> <p>Overview of basic <code>evolving_hockey</code> usage &amp; functionalities</p> <p> Read more</p> </li> </ul>"},{"location":"guide/guide/#tutorials","title":"Tutorials","text":"<ul> <li> <p> Shot Maps</p> <p>Plot shot locations</p> <p> Go to page</p> </li> <li> <p> Forward lines</p> <p>Analyze forward lines' xGF and xGA </p> <p> Go to page</p> </li> <li> <p> Goals Saved Above Expected</p> <p>Analyze goals allowed vs. expected</p> <p> Go to page</p> </li> <li> <p> Rolling average xG per 60</p> <p>Three-game rolling average xGF and xGA / 60</p> <p> Go to page</p> </li> <li> <p> Lollipop xG</p> <p>Single game lollipop charts</p> <p> Go to page</p> </li> <li> <p> Network graphs</p> <p>Network graphs based on time on-ice</p> <p> Go to page</p> </li> </ul>"},{"location":"guide/guide/#examples","title":"Examples","text":"<ul> <li> <p> Gallery</p> <p>Collection of charts produced using <code>chickenstats</code> &amp; accompanying source code </p> <p> Go to page</p> </li> <li> <p> Original Research</p> <p>Links to original research conducted &amp; other works published using <code>chickenstats</code></p> <p> Go to page</p> </li> </ul>"},{"location":"guide/chicken_nhl/chicken_nhl/","title":"chicken_nhl","text":"<p>Usage information about the <code>chicken_nhl</code> module.</p> <p>For in-depth materials, please consult the  Reference</p>"},{"location":"guide/chicken_nhl/chicken_nhl/#basic-usage","title":"Basic usage","text":""},{"location":"guide/chicken_nhl/chicken_nhl/#import-module","title":"Import module","text":"<p><code>chicken_nhl</code> scrapes data from various official NHL endpoints, combining them into a usable play-by-play dataframe. The module and the most relevant classes can be imported using the below snippet:</p> <pre><code>from chickenstats.chicken_nhl import Scraper, Season\n</code></pre>"},{"location":"guide/chicken_nhl/chicken_nhl/#season-and-game-ids","title":"<code>Season</code> and Game IDs","text":"<p>The module relies on game IDs, which can be found using the <code>schedule</code> method of <code>Season</code> class:</p> <pre><code>season = Season(2023)\nnsh_schedule = season.schedule(sessions=\"P\") # (1)! \n\ngame_ids = nsh_schedule.game_id.tolist()[:10]\n</code></pre> <ol> <li>You could provide three-letter code for subset of schedule, as well as scrape from regular season</li> </ol>"},{"location":"guide/chicken_nhl/chicken_nhl/#scraper","title":"<code>Scraper</code>","text":"<p>The <code>Scraper</code> object is used for scraping data from the API and HTML endpoints:</p> <pre><code>scraper = Scraper(game_ids) # (1)! \n\npbp = scraper.play_by_play # (2)!\n</code></pre> <ol> <li>The scraper object takes a list of game IDs</li> <li>Access play-by-play data as a Pandas DataFrame</li> </ol> <p>The <code>Scraper</code> object can also be used with individual game IDs:</p> <pre><code>scraper = Scraper(game_ids[0]) # (1)!\npbp = scraper.play_by_play\n</code></pre> <ol> <li>The scraper object takes a single game ID</li> </ol> <p>To see the first 5 goals of the 2023-24 playoffs</p> <pre><code>pbp.loc[pbp.event == \"GOAL\"].head(5)\n</code></pre> id season session game_id game_date event_idx period period_seconds game_seconds strength_state event_team opp_team event description zone coords_x coords_y danger high_danger player_1 player_1_eh_id player_1_eh_id_api player_1_api_id player_1_position player_1_type player_2 player_2_eh_id player_2_eh_id_api player_2_api_id player_2_position player_2_type player_3 player_3_eh_id player_3_eh_id_api player_3_api_id player_3_position player_3_type score_state score_diff forwards_percent opp_forwards_percent shot_type event_length event_distance pbp_distance event_angle penalty penalty_length home_score home_score_diff away_score away_score_diff is_home is_away home_team away_team home_skaters away_skaters home_on home_on_eh_id home_on_api_id home_on_positions away_on away_on_eh_id away_on_api_id away_on_positions event_team_skaters teammates teammates_eh_id teammates_api_id teammates_positions own_goalie own_goalie_eh_id own_goalie_api_id forwards forwards_eh_id forwards_api_id forwards_count defense defense_eh_id defense_api_id defense_count opp_strength_state opp_score_state opp_score_diff opp_team_skaters opp_team_on opp_team_on_eh_id opp_team_on_api_id opp_team_on_positions opp_goalie opp_goalie_eh_id opp_goalie_api_id opp_forwards opp_forwards_eh_id opp_forwards_api_id opp_forwards_count opp_defense opp_defense_eh_id opp_defense_api_id opp_defense_count home_forwards home_forwards_eh_id home_forwards_api_id home_forwards_count home_forwards_percent home_defense home_defense_eh_id home_defense_api_id home_defense_count home_goalie home_goalie_eh_id home_goalie_api_id away_forwards away_forwards_eh_id away_forwards_api_id away_forwards_count away_forwards_percent away_defense away_defense_eh_id away_defense_api_id away_defense_count away_goalie away_goalie_eh_id away_goalie_api_id change_on_count change_off_count change_on change_on_eh_id change_on_api_id change_on_positions change_off change_off_eh_id change_off_api_id change_off_positions change_on_forwards_count change_off_forwards_count change_on_forwards change_on_forwards_eh_id change_on_forwards_api_id change_off_forwards change_off_forwards_eh_id change_off_forwards_api_id change_on_defense_count change_off_defense_count change_on_defense change_on_defense_eh_id change_on_defense_api_id change_off_defense change_off_defense_eh_id change_off_defense_api_id change_on_goalie_count change_off_goalie_count change_on_goalie change_on_goalie_eh_id change_on_goalie_api_id change_off_goalie change_off_goalie_eh_id change_off_goalie_api_id goal hd_goal shot hd_shot miss hd_miss fenwick hd_fenwick corsi block teammate_block hit give take fac penl change stop chl ozf nzf dzf ozc nzc dzc otf pen0 pen2 pen4 pen5 pen10 pred_goal 20230301410033 20232024 P 2023030141 2024-04-20 33 1 95 95 5v4 CAR NYI GOAL CAR #92 KUZNETSOV(1), WRIST , OFF. ZONE, 28 FT.ASSISTS: #88 NECAS(1); #76 SKJEI(1) OFF -75 -25 0 0 EVGENY KUZNETSOV EVGENY.KUZNETSOV EVGENY.KUZNETSOV 8475744 C GOAL SCORER MARTIN NECAS MARTIN.NECAS MARTIN.NECAS 8.48004e+06 C PRIMARY ASSIST BRADY SKJEI BRADY.SKJEI BRADY.SKJEI 8.47687e+06 D SECONDARY ASSIST 0v0 0 0.8 0.5 WRIST 0 28.6531 28 60.7512 nan nan 0 0 0 0 1 0 CAR NYI 5 4 STEFAN NOESEN, ANDREI SVECHNIKOV, MARTIN NECAS, EVGENY KUZNETSOV, BRADY SKJEI STEFAN.NOESEN, ANDREI.SVECHNIKOV, MARTIN.NECAS, EVGENY.KUZNETSOV, BRADY.SKJEI 8476474, 8480830, 8480039, 8475744, 8476869 R, R, C, C, D BO HORVAT, KYLE PALMIERI, ADAM PELECH, RYAN PULOCK BO.HORVAT, KYLE.PALMIERI, ADAM.PELECH, RYAN.PULOCK 8477500, 8475151, 8476917, 8477506 C, C, D, D 5 STEFAN NOESEN, ANDREI SVECHNIKOV, MARTIN NECAS, EVGENY KUZNETSOV, BRADY SKJEI STEFAN.NOESEN, ANDREI.SVECHNIKOV, MARTIN.NECAS, EVGENY.KUZNETSOV, BRADY.SKJEI 8476474, 8480830, 8480039, 8475744, 8476869 R, R, C, C, D FREDERIK ANDERSEN FREDERIK.ANDERSEN 8475883 STEFAN NOESEN, ANDREI SVECHNIKOV, MARTIN NECAS, EVGENY KUZNETSOV STEFAN.NOESEN, ANDREI.SVECHNIKOV, MARTIN.NECAS, EVGENY.KUZNETSOV 8476474, 8480830, 8480039, 8475744 4 BRADY SKJEI BRADY.SKJEI 8476869 1 4v5 0v0 0 4 BO HORVAT, KYLE PALMIERI, ADAM PELECH, RYAN PULOCK BO.HORVAT, KYLE.PALMIERI, ADAM.PELECH, RYAN.PULOCK 8477500, 8475151, 8476917, 8477506 C, C, D, D SEMYON VARLAMOV SEMYON.VARLAMOV 8.47358e+06 BO HORVAT, KYLE PALMIERI BO.HORVAT, KYLE.PALMIERI 8477500, 8475151 2 ADAM PELECH, RYAN PULOCK ADAM.PELECH, RYAN.PULOCK 8476917, 8477506 2 STEFAN NOESEN, ANDREI SVECHNIKOV, MARTIN NECAS, EVGENY KUZNETSOV STEFAN.NOESEN, ANDREI.SVECHNIKOV, MARTIN.NECAS, EVGENY.KUZNETSOV 8476474, 8480830, 8480039, 8475744 4 0.8 BRADY SKJEI BRADY.SKJEI 8476869 1 FREDERIK ANDERSEN FREDERIK.ANDERSEN 8475883 BO HORVAT, KYLE PALMIERI BO.HORVAT, KYLE.PALMIERI 8477500, 8475151 2 0.5 ADAM PELECH, RYAN PULOCK ADAM.PELECH, RYAN.PULOCK 8476917, 8477506 2 SEMYON VARLAMOV SEMYON.VARLAMOV 8.47358e+06 nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.0542172 20230301410135 20232024 P 2023030141 2024-04-20 135 1 500 500 5v5 NYI CAR GOAL NYI #32 MACLEAN(1), SNAP , OFF. ZONE, 3 FT.ASSISTS: #27 LEE(1); #28 ROMANOV(1) OFF 87 -3 0 1 KYLE MACLEAN KYLE.MACLEAN KYLE.MACLEAN 8481237 C GOAL SCORER ANDERS LEE ANDERS.LEE ANDERS.LEE 8.47531e+06 L PRIMARY ASSIST ALEX ROMANOV ALEX.ROMANOV ALEX.ROMANOV 8.48101e+06 D SECONDARY ASSIST 0v1 -1 0.6 0.6 SNAP 0 3.60555 3 56.3099 nan nan 1 1 0 -1 0 1 CAR NYI 5 5 JESPERI KOTKANIEMI, TEUVO TERAVAINEN, MARTIN NECAS, BRENT BURNS, JACCOB SLAVIN JESPERI.KOTKANIEMI, TEUVO.TERAVAINEN, MARTIN.NECAS, BRENT.BURNS, JACCOB.SLAVIN 8480829, 8476882, 8480039, 8470613, 8476958 C, L, C, D, D PIERRE ENGVALL, ANDERS LEE, KYLE MACLEAN, NOAH DOBSON, ALEX ROMANOV PIERRE.ENGVALL, ANDERS.LEE, KYLE.MACLEAN, NOAH.DOBSON, ALEX.ROMANOV 8478115, 8475314, 8481237, 8480865, 8481014 L, L, C, D, D 5 PIERRE ENGVALL, ANDERS LEE, KYLE MACLEAN, NOAH DOBSON, ALEX ROMANOV PIERRE.ENGVALL, ANDERS.LEE, KYLE.MACLEAN, NOAH.DOBSON, ALEX.ROMANOV 8478115, 8475314, 8481237, 8480865, 8481014 L, L, C, D, D SEMYON VARLAMOV SEMYON.VARLAMOV 8473575 PIERRE ENGVALL, ANDERS LEE, KYLE MACLEAN PIERRE.ENGVALL, ANDERS.LEE, KYLE.MACLEAN 8478115, 8475314, 8481237 3 NOAH DOBSON, ALEX ROMANOV NOAH.DOBSON, ALEX.ROMANOV 8480865, 8481014 2 5v5 1v0 1 5 JESPERI KOTKANIEMI, TEUVO TERAVAINEN, MARTIN NECAS, BRENT BURNS, JACCOB SLAVIN JESPERI.KOTKANIEMI, TEUVO.TERAVAINEN, MARTIN.NECAS, BRENT.BURNS, JACCOB.SLAVIN 8480829, 8476882, 8480039, 8470613, 8476958 C, L, C, D, D FREDERIK ANDERSEN FREDERIK.ANDERSEN 8.47588e+06 JESPERI KOTKANIEMI, TEUVO TERAVAINEN, MARTIN NECAS JESPERI.KOTKANIEMI, TEUVO.TERAVAINEN, MARTIN.NECAS 8480829, 8476882, 8480039 3 BRENT BURNS, JACCOB SLAVIN BRENT.BURNS, JACCOB.SLAVIN 8470613, 8476958 2 JESPERI KOTKANIEMI, TEUVO TERAVAINEN, MARTIN NECAS JESPERI.KOTKANIEMI, TEUVO.TERAVAINEN, MARTIN.NECAS 8480829, 8476882, 8480039 3 0.6 BRENT BURNS, JACCOB SLAVIN BRENT.BURNS, JACCOB.SLAVIN 8470613, 8476958 2 FREDERIK ANDERSEN FREDERIK.ANDERSEN 8475883 PIERRE ENGVALL, ANDERS LEE, KYLE MACLEAN PIERRE.ENGVALL, ANDERS.LEE, KYLE.MACLEAN 8478115, 8475314, 8481237 3 0.6 NOAH DOBSON, ALEX ROMANOV NOAH.DOBSON, ALEX.ROMANOV 8480865, 8481014 2 SEMYON VARLAMOV SEMYON.VARLAMOV 8.47358e+06 nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan 1 1 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.216331 20230301410603 20232024 P 2023030141 2024-04-20 603 3 224 2624 5v5 CAR NYI GOAL CAR #23 NOESEN(1), BACKHAND , OFF. ZONE, 6 FT.ASSISTS: #76 SKJEI(2); #92 KUZNETSOV(1) OFF -83 3 0 1 STEFAN NOESEN STEFAN.NOESEN STEFAN.NOESEN 8476474 R GOAL SCORER BRADY SKJEI BRADY.SKJEI BRADY.SKJEI 8.47687e+06 D PRIMARY ASSIST EVGENY KUZNETSOV EVGENY.KUZNETSOV EVGENY.KUZNETSOV 8.47574e+06 C SECONDARY ASSIST 1v1 0 0.6 0.6 BACKHAND 0 6.7082 6 26.5651 nan nan 1 0 1 0 1 0 CAR NYI 5 5 JACK DRURY, STEFAN NOESEN, EVGENY KUZNETSOV, BRETT PESCE, BRADY SKJEI JACK.DRURY, STEFAN.NOESEN, EVGENY.KUZNETSOV, BRETT.PESCE, BRADY.SKJEI 8480835, 8476474, 8475744, 8477488, 8476869 C, R, C, D, D CAL CLUTTERBUCK, MATT MARTIN, BROCK NELSON, ADAM PELECH, RYAN PULOCK CAL.CLUTTERBUCK, MATT.MARTIN, BROCK.NELSON, ADAM.PELECH, RYAN.PULOCK 8473504, 8474709, 8475754, 8476917, 8477506 R, L, C, D, D 5 JACK DRURY, STEFAN NOESEN, EVGENY KUZNETSOV, BRETT PESCE, BRADY SKJEI JACK.DRURY, STEFAN.NOESEN, EVGENY.KUZNETSOV, BRETT.PESCE, BRADY.SKJEI 8480835, 8476474, 8475744, 8477488, 8476869 C, R, C, D, D FREDERIK ANDERSEN FREDERIK.ANDERSEN 8475883 JACK DRURY, STEFAN NOESEN, EVGENY KUZNETSOV JACK.DRURY, STEFAN.NOESEN, EVGENY.KUZNETSOV 8480835, 8476474, 8475744 3 BRETT PESCE, BRADY SKJEI BRETT.PESCE, BRADY.SKJEI 8477488, 8476869 2 5v5 1v1 0 5 CAL CLUTTERBUCK, MATT MARTIN, BROCK NELSON, ADAM PELECH, RYAN PULOCK CAL.CLUTTERBUCK, MATT.MARTIN, BROCK.NELSON, ADAM.PELECH, RYAN.PULOCK 8473504, 8474709, 8475754, 8476917, 8477506 R, L, C, D, D SEMYON VARLAMOV SEMYON.VARLAMOV 8.47358e+06 CAL CLUTTERBUCK, MATT MARTIN, BROCK NELSON CAL.CLUTTERBUCK, MATT.MARTIN, BROCK.NELSON 8473504, 8474709, 8475754 3 ADAM PELECH, RYAN PULOCK ADAM.PELECH, RYAN.PULOCK 8476917, 8477506 2 JACK DRURY, STEFAN NOESEN, EVGENY KUZNETSOV JACK.DRURY, STEFAN.NOESEN, EVGENY.KUZNETSOV 8480835, 8476474, 8475744 3 0.6 BRETT PESCE, BRADY SKJEI BRETT.PESCE, BRADY.SKJEI 8477488, 8476869 2 FREDERIK ANDERSEN FREDERIK.ANDERSEN 8475883 CAL CLUTTERBUCK, MATT MARTIN, BROCK NELSON CAL.CLUTTERBUCK, MATT.MARTIN, BROCK.NELSON 8473504, 8474709, 8475754 3 0.6 ADAM PELECH, RYAN PULOCK ADAM.PELECH, RYAN.PULOCK 8476917, 8477506 2 SEMYON VARLAMOV SEMYON.VARLAMOV 8.47358e+06 nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan 1 1 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.260917 20230301410809 20232024 P 2023030141 2024-04-20 809 3 1108 3508 5vE CAR NYI GOAL CAR #88 NECAS(1), SNAP , NEU. ZONE, 86 FT.ASSISTS: #22 PESCE(1); #18 DRURY(1) NEU -13 41 0 0 MARTIN NECAS MARTIN.NECAS MARTIN.NECAS 8480039 C GOAL SCORER BRETT PESCE BRETT.PESCE BRETT.PESCE 8.47749e+06 D PRIMARY ASSIST JACK DRURY JACK.DRURY JACK.DRURY 8.48084e+06 C SECONDARY ASSIST 2v1 1 0.6 0.833333 SNAP 0 86.3539 86 28.3457 nan nan 2 1 1 -1 1 0 CAR NYI 5 6 JACK DRURY, TEUVO TERAVAINEN, MARTIN NECAS, BRETT PESCE, BRADY SKJEI JACK.DRURY, TEUVO.TERAVAINEN, MARTIN.NECAS, BRETT.PESCE, BRADY.SKJEI 8480835, 8476882, 8480039, 8477488, 8476869 C, L, C, D, D MATHEW BARZAL, BO HORVAT, KYLE PALMIERI, ANDERS LEE, BROCK NELSON, NOAH DOBSON MATHEW.BARZAL, BO.HORVAT, KYLE.PALMIERI, ANDERS.LEE, BROCK.NELSON, NOAH.DOBSON 8478445, 8477500, 8475151, 8475314, 8475754, 8480865 C, C, C, L, C, D 5 JACK DRURY, TEUVO TERAVAINEN, MARTIN NECAS, BRETT PESCE, BRADY SKJEI JACK.DRURY, TEUVO.TERAVAINEN, MARTIN.NECAS, BRETT.PESCE, BRADY.SKJEI 8480835, 8476882, 8480039, 8477488, 8476869 C, L, C, D, D FREDERIK ANDERSEN FREDERIK.ANDERSEN 8475883 JACK DRURY, TEUVO TERAVAINEN, MARTIN NECAS JACK.DRURY, TEUVO.TERAVAINEN, MARTIN.NECAS 8480835, 8476882, 8480039 3 BRETT PESCE, BRADY SKJEI BRETT.PESCE, BRADY.SKJEI 8477488, 8476869 2 Ev5 1v2 -1 6 MATHEW BARZAL, BO HORVAT, KYLE PALMIERI, ANDERS LEE, BROCK NELSON, NOAH DOBSON MATHEW.BARZAL, BO.HORVAT, KYLE.PALMIERI, ANDERS.LEE, BROCK.NELSON, NOAH.DOBSON 8478445, 8477500, 8475151, 8475314, 8475754, 8480865 C, C, C, L, C, D nan nan nan MATHEW BARZAL, BO HORVAT, KYLE PALMIERI, ANDERS LEE, BROCK NELSON MATHEW.BARZAL, BO.HORVAT, KYLE.PALMIERI, ANDERS.LEE, BROCK.NELSON 8478445, 8477500, 8475151, 8475314, 8475754 5 NOAH DOBSON NOAH.DOBSON 8480865 1 JACK DRURY, TEUVO TERAVAINEN, MARTIN NECAS JACK.DRURY, TEUVO.TERAVAINEN, MARTIN.NECAS 8480835, 8476882, 8480039 3 0.6 BRETT PESCE, BRADY SKJEI BRETT.PESCE, BRADY.SKJEI 8477488, 8476869 2 FREDERIK ANDERSEN FREDERIK.ANDERSEN 8475883 MATHEW BARZAL, BO HORVAT, KYLE PALMIERI, ANDERS LEE, BROCK NELSON MATHEW.BARZAL, BO.HORVAT, KYLE.PALMIERI, ANDERS.LEE, BROCK.NELSON 8478445, 8477500, 8475151, 8475314, 8475754 5 0.833333 NOAH DOBSON NOAH.DOBSON 8480865 1 nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.528484 20230301210047 20232024 P 2023030121 2024-04-20 47 1 146 146 5v5 BOS TOR GOAL BOS #19 BEECHER(1), SNAP , OFF. ZONE, 20 FT.ASSISTS: #70 BOQVIST(1); #61 MAROON(1) OFF 71 10 1 0 JOHN BEECHER JOHN.BEECHER JOHN.BEECHER 8481556 C GOAL SCORER JESPER BOQVIST JESPER.BOQVIST JESPER.BOQVIST 8.48e+06 C PRIMARY ASSIST PATRICK MAROON PATRICK.MAROON PATRICK.MAROON 8.47403e+06 L SECONDARY ASSIST 0v0 0 0.6 0.6 SNAP 0 20.5913 20 29.0546 nan nan 0 0 0 0 1 0 BOS TOR 5 5 JOHN BEECHER, PATRICK MAROON, JESPER BOQVIST, BRANDON CARLO, HAMPUS LINDHOLM JOHN.BEECHER, PATRICK.MAROON, JESPER.BOQVIST, BRANDON.CARLO, HAMPUS.LINDHOLM 8481556, 8474034, 8480003, 8478443, 8476854 C, L, C, D, D CONNOR DEWAR, DAVID KAMPF, RYAN REAVES, JOEL EDMUNDSON, TIMOTHY LILJEGREN CONNOR.DEWAR, DAVID.KAMPF, RYAN.REAVES, JOEL.EDMUNDSON, TIMOTHY.LILJEGREN 8480980, 8480144, 8471817, 8476441, 8480043 C, C, R, D, D 5 JOHN BEECHER, PATRICK MAROON, JESPER BOQVIST, BRANDON CARLO, HAMPUS LINDHOLM JOHN.BEECHER, PATRICK.MAROON, JESPER.BOQVIST, BRANDON.CARLO, HAMPUS.LINDHOLM 8481556, 8474034, 8480003, 8478443, 8476854 C, L, C, D, D JEREMY SWAYMAN JEREMY.SWAYMAN 8480280 JOHN BEECHER, PATRICK MAROON, JESPER BOQVIST JOHN.BEECHER, PATRICK.MAROON, JESPER.BOQVIST 8481556, 8474034, 8480003 3 BRANDON CARLO, HAMPUS LINDHOLM BRANDON.CARLO, HAMPUS.LINDHOLM 8478443, 8476854 2 5v5 0v0 0 5 CONNOR DEWAR, DAVID KAMPF, RYAN REAVES, JOEL EDMUNDSON, TIMOTHY LILJEGREN CONNOR.DEWAR, DAVID.KAMPF, RYAN.REAVES, JOEL.EDMUNDSON, TIMOTHY.LILJEGREN 8480980, 8480144, 8471817, 8476441, 8480043 C, C, R, D, D ILYA SAMSONOV ILYA.SAMSONOV 8.47849e+06 CONNOR DEWAR, DAVID KAMPF, RYAN REAVES CONNOR.DEWAR, DAVID.KAMPF, RYAN.REAVES 8480980, 8480144, 8471817 3 JOEL EDMUNDSON, TIMOTHY LILJEGREN JOEL.EDMUNDSON, TIMOTHY.LILJEGREN 8476441, 8480043 2 JOHN BEECHER, PATRICK MAROON, JESPER BOQVIST JOHN.BEECHER, PATRICK.MAROON, JESPER.BOQVIST 8481556, 8474034, 8480003 3 0.6 BRANDON CARLO, HAMPUS LINDHOLM BRANDON.CARLO, HAMPUS.LINDHOLM 8478443, 8476854 2 JEREMY SWAYMAN JEREMY.SWAYMAN 8480280 CONNOR DEWAR, DAVID KAMPF, RYAN REAVES CONNOR.DEWAR, DAVID.KAMPF, RYAN.REAVES 8480980, 8480144, 8471817 3 0.6 JOEL EDMUNDSON, TIMOTHY LILJEGREN JOEL.EDMUNDSON, TIMOTHY.LILJEGREN 8476441, 8480043 2 ILYA SAMSONOV ILYA.SAMSONOV 8.47849e+06 nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.193912"},{"location":"guide/chicken_nhl/chicken_nhl/#stats-and-aggregations","title":"Stats and aggregations","text":"<p>Start fresh with a new scraper:</p> <pre><code>scraper = Scraper(game_ids)\nplay_by_play = scraper.play_by_play # (1)!\n</code></pre> <ol> <li>We won't strictly use the play-by-play data here, but it will get the scraping started</li> </ol> <p>If you just want game-level individual stats, without accounting for teammates or opposition, just call the <code>stats</code> attributes:</p> <pre><code>stats = scraper.stats\n</code></pre> <p>If you want anything besides the default options, or if you change your desired aggregation / level of detail, you can reset the data with the <code>prep_stats()</code> method:</p> <pre><code>scraper.prep_stats(level=\"game\", teammates=True, opposition=True) # (1)!\nstats = scraper.stats # (2)!\n</code></pre> <ol> <li>Now the individual and on-ice stats are aggregated and account for the teammates and opponents on the ice</li> <li>You can access the data with the <code>stats</code> attribute</li> </ol> <p>Functionality is very similar for lines and team stats:</p> <pre><code>scraper.prep_lines(position=\"f\") # (1)!\nforward_lines = scraper.lines\n\nscraper.prep_lines(position=\"d\") # (2)!\ndefense_lines = scraper.lines # (3)!\n\nteam_stats = scraper.team_stats # (4)!\n</code></pre> <ol> <li>Not strictly necessary, the forwards are the default for line aggregations</li> <li>Resets the saved line stats to be defensive lines, rather than forward lines</li> <li>You can access the new line stats with the <code>lines</code> attribute</li> <li>None of the above is necessary with the <code>team_stats</code>, if you're fine with the default parameters</li> </ol>"},{"location":"guide/chicken_nhl/chicken_nhl/#standings","title":"Standings","text":"<p>You can also use a <code>Season</code> object to return that season's standings:</p> <pre><code>from chickenstats.chicken_nhl import Season\n\nseason = Season(2023)\nstandings = season.standings\n</code></pre>"},{"location":"guide/chicken_nhl/chicken_nhl/#advanced-usage","title":"Advanced usage","text":"<p>The <code>Scraper</code> object should be best for most of your scraping needs. However, there are additional  properties available with the <code>Game</code> object that can be helpful.</p>"},{"location":"guide/chicken_nhl/chicken_nhl/#other-scraper-data","title":"Other <code>Scraper</code> data","text":"<p>You can also access other data with the scraper object. The data will be scraped if it has not already been retrieved, which saves time and is friendlier to data sources:</p> <pre><code>from chickenstats.chicken_nhl import Season, Scraper\n\nseason = Season(2024)\nschedule = season.schedule(\"NSH\")\ngame_ids = schedule.game_id.tolist()[:5]\n\nscraper = Scraper(game_ids)\n\npbp = scraper.rosters # (1)! \n\nhtml_rosters = scraper.html_rosters # (2)! \n\nhtml_events = scraper.html_events # (3)! \n</code></pre> <ol> <li>Access roster data from both API and html endpoints</li> <li>HTML rosters are retrieved quickly because they have already been scraped</li> <li>HTML events are scraped, then combined with rosters already stored locally</li> </ol>"},{"location":"guide/chicken_nhl/chicken_nhl/#game-object","title":"<code>Game</code> object","text":"<p>The <code>Game</code> object only works with a single game ID:</p> <pre><code>game = Game(2023020001)\n</code></pre>"},{"location":"guide/chicken_nhl/chicken_nhl/#lists-not-dataframes","title":"Lists, not DataFrames","text":"<p>The <code>Game</code> object's familiar functions return lists, instead of Pandas DataFrames:</p> <pre><code>game.play_by_play # (1)! \n\ngame.play_by_play_df # (2)! \n</code></pre> <ol> <li>Returns a list of play-by-play events</li> <li>Returns a Pandas DataFrame of play-by-play events</li> </ol>"},{"location":"guide/chicken_nhl/chicken_nhl/#pre-processing","title":"Pre-processing","text":"<p>Data can be inspected at various processing stages through the <code>Game</code> object's non-public properties:</p> <pre><code>game._scrape_html_events # (1)! \n\ngame._munge_html_events # (2)!\n</code></pre> <ol> <li>Get the raw HTML events and store the without processing</li> <li>Process the raw HTML events and store them</li> </ol> <p>A list of the non-public properties can be found in  Contribute</p>"},{"location":"guide/evolving_hockey/evolving_hockey/","title":"evolving_hockey","text":"<p>Usage information about the <code>evolving_hockey</code> module.</p> <p>For in-depth materials, please consult the  Reference</p>"},{"location":"guide/evolving_hockey/evolving_hockey/#basic-usage","title":"Basic usage","text":""},{"location":"guide/evolving_hockey/evolving_hockey/#import-module","title":"Import module","text":"<p>The <code>evolving_hockey</code> module and relevant functions can be imported using the below snippet:</p> <pre><code>from chickenstats.evolving_hockey import prep_pbp, prep_stats, prep_lines, prep_team\n</code></pre>"},{"location":"guide/evolving_hockey/evolving_hockey/#play-by-play-data","title":"Play-by-play data","text":"<p>All functions will need a cleaned play-by-play dataframe in order to aggregate the statistics:</p> <pre><code>shifts_raw = pd.read_csv('shifts_raw.csv') # (1)! \npbp_raw = pd.read_csv('pbp_raw.csv') # (2)!\n\npbp = prep_pbp(pbp_raw, shifts_raw)\n</code></pre> <ol> <li>Get a Pandas DataFrame of shifts data from Evolving-Hockey.com</li> <li>Ditto for play-by-play data from Evolving-Hockey.com</li> </ol>"},{"location":"guide/evolving_hockey/evolving_hockey/#individual-stats","title":"Individual stats","text":"<p>You can use the cleaned play-by-play data to see individual stats, grouped at various levels. This example aggregates skaters' individual and on-ice statistics to the game level, grouped by teammates and opposition:</p> <pre><code>stats = prep_stats(pbp, level = \"game\", teammates = True, opposition = True)\n</code></pre> <p>This example groups individual and on-ice stats to the session level, grouping by score state:</p> <pre><code>stats = prep_stats(pbp, level = \"period\", score_state = True)\n</code></pre> <p>Basic game-level statistics can be viewed with the default keyword arguments:</p> <pre><code>stats = prep_stats(pbp)\n</code></pre>"},{"location":"guide/evolving_hockey/evolving_hockey/#line-stats","title":"Line stats","text":"<p>You can also aggregate the data for forward or defensive (or both) line stats. This first example aggregates line stats to the game level, grouped by opposition:</p> <pre><code>lines = prep_lines(pbp, positions = 'f', opposition = True)\n</code></pre> <p>Similarly to the <code>prep_stats</code> function, you can group by teammates and score state:</p> <pre><code>lines = prep_lines(pbp, positions = 'd', teammates = True, score_state = True)\n</code></pre>"},{"location":"guide/evolving_hockey/evolving_hockey/#team-stats","title":"Team stats","text":"<p>Aggregate team statistics in the same way as <code>prep_stats</code> and <code>prep_lines</code> functions. This examples aggregates team stats to game level:</p> <pre><code>teams = prep_teams(pbp, level = 'game')\n</code></pre> <p>You can also group by score state:</p> <pre><code>teams = prep_teams(pbp, level = 'period', score_state = True)\n</code></pre>"},{"location":"guide/examples/gallery/","title":"Gallery","text":"<p>See below for a collection charts and graphics created using the <code>chickenstats</code> library</p> <ul> <li> <p>All forwards' xGF &amp; xGA</p> <p></p> </li> <li> <p>All teams' rolling xGF &amp; xGA</p> <p></p> </li> <li> <p>NSH forwards' xGF &amp; xGA</p> <p></p> </li> <li> <p>Rolling xGF &amp; xGA per 60</p> <p></p> </li> <li> <p>Rolling xGF &amp; xGA per 60 (dark)</p> <p></p> </li> <li> <p>NSH time-on-ice network</p> <p></p> </li> <li> <p>NSH vs. WPG lollipop chart</p> <p></p> </li> <li> <p>Juuse Saros cumulative GSaX</p> <p></p> </li> <li> <p>Top-6 goalies by GSaX</p> <p></p> </li> <li> <p>NSH forward lines' rink maps</p> <p></p> </li> </ul>"},{"location":"guide/examples/original_research/","title":"Original Research","text":"<p>Coming soon...</p> <p></p>"},{"location":"guide/tutorials/forward_lines/","title":"Forward line performance tutorial","text":""},{"location":"guide/tutorials/forward_lines/#intro","title":"Intro","text":"<p>Evaluate forward line performance, based on goals scored or allowed vs. expected.</p> <p>Parts of this tutorial are optional and will be clearly marked as such. For help, or any questions, please don't hesitate to reach out to chicken@chickenandstats.com or @chickenandstats.com on Blue Sky.</p>"},{"location":"guide/tutorials/forward_lines/#housekeeping","title":"Housekeeping","text":""},{"location":"guide/tutorials/forward_lines/#import-dependencies","title":"Import dependencies","text":"<p>Import the dependencies we'll need for the guide</p> <pre><code>import pandas as pd\nimport numpy as np\n\nfrom chickenstats.chicken_nhl import Season, Scraper\nfrom chickenstats.chicken_nhl.info import NHL_COLORS\nimport chickenstats.utilities\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom pathlib import Path\n\nimport datetime as dt\n</code></pre>"},{"location":"guide/tutorials/forward_lines/#pandas-options","title":"Pandas options","text":"<p>Sets different pandas options. This cell is optional</p> <pre><code>pd.set_option(\"display.max_columns\", None)\npd.set_option(\"display.max_rows\", 100)\n</code></pre>"},{"location":"guide/tutorials/forward_lines/#chickenstats-matplotlib-style","title":"Chickenstats matplotlib style","text":"<p>chickenstats.utilities includes a custom style package - this activates it. This cell is also optional</p> <pre><code>plt.style.use(\"chickenstats\")\n</code></pre>"},{"location":"guide/tutorials/forward_lines/#scrape-data","title":"Scrape data","text":""},{"location":"guide/tutorials/forward_lines/#schedule-standings-and-game-ids","title":"Schedule, standings, and game IDs","text":"<p>Scrape the schedule and standings using the <code>Season</code> object. Then, create a list of game IDs to scrape</p> <pre><code>season = Season(2024)\n</code></pre> <pre><code>schedule = season.schedule(disable_progress_bar=True)\n</code></pre> <pre><code>standings = season.standings\n</code></pre> <pre><code>game_ids = schedule.loc[schedule.game_state == \"OFF\"].game_id.tolist()\n</code></pre>"},{"location":"guide/tutorials/forward_lines/#play-by-play","title":"Play-by-play","text":"<p>Scrape the play-by-play data for the chosen game ID. First instantiate the <code>Scraper</code> object, then call the play_by_play attribute</p> <pre><code>scraper = Scraper(game_ids, disable_progress_bar=True)\n</code></pre> <pre><code>pbp = scraper.play_by_play\n</code></pre>"},{"location":"guide/tutorials/forward_lines/#stats","title":"Stats","text":"<p>Aggregate statistics to season and game level</p> <pre><code>scraper.prep_stats(level=\"season\", disable_progress_bar=True)\nstats = scraper.stats.reset_index(drop=True)\n</code></pre> <pre><code>scraper.prep_lines(level=\"season\", disable_progress_bar=True)\nlines = scraper.lines.reset_index(drop=True)\n</code></pre> <pre><code>scraper.prep_team_stats(level=\"game\", disable_progress_bar=True)\nteam_stats = scraper.team_stats.reset_index(drop=True)\n</code></pre>"},{"location":"guide/tutorials/forward_lines/#single-team-scatter-plots","title":"Single team scatter plots","text":""},{"location":"guide/tutorials/forward_lines/#filter-conditions","title":"Filter conditions","text":"<p>Select your team, strength state, and TOI minimum</p> <pre><code># Setting single team and other filter conditions\nteam = \"NSH\"\nstrength_state = \"5v5\"\ntoi_min = 20\n</code></pre>"},{"location":"guide/tutorials/forward_lines/#xgf-and-xga","title":"xGF and xGA","text":"<p>Plot xGF vs. xGA to analyze chances created and chances allowed, highlighting the selected team</p> <pre><code># Setting filter conditions and filtering data\nconds = np.logical_and(lines.strength_state == strength_state, lines.toi &gt;= toi_min)\nplot_lines = (\n    lines.loc[conds]\n    .sort_values(by=\"xgf_percent\", ascending=False)\n    .reset_index(drop=True)\n)\n\n# Setting overall figures\nfig, ax = plt.subplots(dpi=650, figsize=(8, 5))\n\n# Aesthetics, likes the tight layout and despining axes\nfig.tight_layout()\nsns.despine()\n\n# Getting the averages and drawing the average lines\nxga_mean = plot_lines.xga_p60.mean()\nxgf_mean = plot_lines.xgf_p60.mean()\n\nax.axvline(x=xga_mean, zorder=-1, alpha=0.5)\nax.axhline(y=xgf_mean, zorder=-1, alpha=0.5)\n\n# Setting the size norm so bubbles are consistent across figures\nsize_norm = (plot_lines.toi.min(), plot_lines.toi.max())\n\n# Getting plot colors based on team\ncolors = NHL_COLORS[team]\n\n# Filtering data and plotting the non-selected teams first\nconds = plot_lines.team != team\nplot_data = plot_lines.loc[conds]\n\n# They all get gray colors\nfacecolor = colors[\"MISS\"]\nedgecolor = colors[\"MISS\"]\n\n# Plotting the non-selected teams' data\nsns.scatterplot(\n    data=plot_data,\n    x=\"xga_p60\",\n    y=\"xgf_p60\",\n    size=\"toi\",\n    sizes=(20, 150),\n    size_norm=size_norm,\n    lw=1.5,\n    facecolor=facecolor,\n    edgecolor=edgecolor,\n    alpha=0.5,\n    legend=True,\n)\n\n# Filtering the data and plotting the selected team\nconds = plot_lines.team == team\nplot_data = plot_lines.loc[conds]\n\n# Setting the colors\nfacecolor = colors[\"GOAL\"]\nedgecolor = colors[\"SHOT\"]\n\n# Plotting the selected teams' data\nsns.scatterplot(\n    data=plot_data,\n    x=\"xga_p60\",\n    y=\"xgf_p60\",\n    size=\"toi\",\n    sizes=(20, 150),\n    size_norm=size_norm,\n    lw=1.5,\n    facecolor=facecolor,\n    edgecolor=edgecolor,\n    alpha=0.8,\n    legend=False,\n)\n\n# # Iterating through the dataframe to label the bubbles\n# for row, line in plot_data.iterrows():\n#     # Setting x and y positions that are slightly offset from the data they point to\n#     x_position = line.xga_p60 + 0.25\n#     y_position = line.xgf_p60 - 0.25\n\n#     # Annotation options\n#     arrow_props = {\"arrowstyle\": \"simple\", \"linewidth\": 0.25, \"color\": \"tab:gray\"}\n\n#     # Plotting the annotation\n#     ax.annotate(\n#         text=f\"{line.forwards}\",\n#         xy=(line.xga_p60, line.xgf_p60),\n#         xytext=(x_position, y_position),\n#         fontsize=6,\n#         bbox={\"facecolor\": \"white\", \"alpha\": 0.5, \"edgecolor\": \"white\", \"pad\": 0},\n#         arrowprops=arrow_props,\n#     )\n\n# Setting axis lables\nax.axes.set_xlabel(\"xGA per 60 minutes\")\nax.axes.set_ylabel(\"xGF per 60 minutes\")\n\n# Setting figure suptitle and subtitle\nfig_suptitle = \"Nashville Predators forwards are generating 5v5 offense at rates above the NHL average\"\nfig.suptitle(\n    fig_suptitle,\n    x=0.01,\n    y=1.08,\n    fontsize=11,\n    fontweight=\"bold\",\n    horizontalalignment=\"left\",\n)\n\ntodays_date = dt.datetime.now().strftime(\"%Y-%m-%d\")\nsubtitle = f\"NHL forward line combinations | &gt;{toi_min} min. TOI at 5v5 | 2024-25 season, as of {todays_date}\"\nfig.text(s=subtitle, x=0.01, y=1.02, fontsize=10, horizontalalignment=\"left\")\n\n# Attribution\nattribution = f\"Data &amp; xG model @chickenandstats | Viz @chickenandstats\"\nfig.text(\n    s=attribution,\n    x=0.99,\n    y=-0.05,\n    fontsize=8,\n    horizontalalignment=\"right\",\n    style=\"italic\",\n)\n\n# Save figure\nsavepath = Path(f\"./charts/5v5_xgf_xga_{team}.png\")\nfig.savefig(savepath, transparent=False, bbox_inches=\"tight\")\n</code></pre> <p></p>"},{"location":"guide/tutorials/forward_lines/#xgf-and-gf","title":"xGF and GF","text":"<p>Plot xGF vs. GF to analyze chances created and converted, highlighting the selected team</p> <pre><code># Setting filter conditions and filtering data\nconds = np.logical_and(lines.strength_state == strength_state, lines.toi &gt;= toi_min)\nplot_lines = (\n    lines.loc[conds]\n    .sort_values(by=\"xgf_percent\", ascending=False)\n    .reset_index(drop=True)\n)\n\n# Setting overall figures\nfig, ax = plt.subplots(dpi=650, figsize=(8, 5))\n\n# Aesthetics, likes the tight tight layout and despining axes\nfig.tight_layout()\nsns.despine()\n\n# Getting the averages and drawing the average lines\nxgf_mean = plot_lines.xgf_p60.mean()\ngf_mean = plot_lines.gf_p60.mean()\n\nax.axhline(y=xgf_mean, zorder=-1, alpha=0.5)\nax.axvline(x=gf_mean, zorder=-1, alpha=0.5)\n\n# Setting the size norm so bubbles are consistent across figures\nsize_norm = (plot_lines.toi.min(), plot_lines.toi.max())\n\n# Getting plot colors based on team\ncolors = NHL_COLORS[team]\n\n# Filtering data and plotting the non-selected teams first\nconds = plot_lines.team != team\nplot_data = plot_lines.loc[conds]\n\n# They all get gray colors\nfacecolor = colors[\"MISS\"]\nedgecolor = colors[\"MISS\"]\n\n# Plotting the non-selected teams' data\nsns.scatterplot(\n    data=plot_data,\n    x=\"gf_p60\",\n    y=\"xgf_p60\",\n    size=\"toi\",\n    sizes=(20, 150),\n    size_norm=size_norm,\n    lw=1.5,\n    facecolor=facecolor,\n    edgecolor=edgecolor,\n    alpha=0.5,\n    legend=True,\n)\n\n# Filtering and plotting the selected teams' data\nconds = plot_lines.team == team\nplot_data = plot_lines.loc[conds]\n\n# Setting the colors\nfacecolor = colors[\"GOAL\"]\nedgecolor = colors[\"SHOT\"]\n\n# Plotting the selected team's data\nsns.scatterplot(\n    data=plot_data,\n    x=\"gf_p60\",\n    y=\"xgf_p60\",\n    size=\"toi\",\n    sizes=(20, 150),\n    size_norm=size_norm,\n    lw=1.5,\n    facecolor=facecolor,\n    edgecolor=edgecolor,\n    alpha=0.8,\n    legend=False,\n)\n\n# # Iterating through the dataframe for annotations\n# for row, line in plot_data.iterrows():\n#     # Offset x and y positions\n#     if line.xga_p60 &gt;= gf_mean:\n#         x_position = line.gf_p60 + 0.5\n\n#     else:\n#         x_position = line.gf_p60 - 0.5\n\n#     if line.xgf_p60 &gt;= xgf_mean:\n#         y_position = line.xgf_p60 + 0.5\n\n#     else:\n#         y_position = line.xgf_p60 - 0.5\n\n#     # Custom positioning\n#     if line.forwards == \"MARK JANKOWSKI, LUKE EVANGELISTA, THOMAS NOVAK\":\n#         y_position = line.xgf_p60 - 0.5\n\n#     if line.forwards == \"FILIP FORSBERG, GUSTAV NYQUIST, RYAN O'REILLY\":\n#         y_position = line.xgf_p60 - 0.1\n#         x_position = line.xgf_p60 + 0.5\n\n#     if line.forwards == \"MARK JANKOWSKI, COLE SMITH, MICHAEL MCCARRON\":\n#         y_position = line.xgf_p60 - 0.1\n\n#     # Annotation box options\n#     arrow_props = {\"arrowstyle\": \"simple\", \"linewidth\": 0.25, \"color\": \"tab:gray\"}\n\n#     # Plotting the annotations\n#     ax.annotate(\n#         text=f\"{line.forwards}\",\n#         xy=(line.gf_p60, line.xgf_p60),\n#         xytext=(x_position, y_position),\n#         fontsize=6,\n#         bbox={\"facecolor\": \"white\", \"alpha\": 0.5, \"edgecolor\": \"white\", \"pad\": 0},\n#         arrowprops=arrow_props,\n#     )\n\n# Setting x and y axes labels\nax.axes.set_xlabel(\"GF per 60 minutes\")\nax.axes.set_ylabel(\"xGF per 60 minutes\")\n\n# Figure suptitle and subtitle\nfig_suptitle = \"Nashville Predators forwards aren't converting 5v5 offensive chances\"\nfig.suptitle(\n    fig_suptitle,\n    x=0.01,\n    y=1.08,\n    fontsize=11,\n    fontweight=\"bold\",\n    horizontalalignment=\"left\",\n)\n\ntodays_date = dt.datetime.now().strftime(\"%Y-%m-%d\")\nsubtitle = f\"NHL forward line combinations | &gt;{toi_min} min. TOI at 5v5 | 2024-25 season, as of {todays_date}\"\nfig.text(s=subtitle, x=0.01, y=1.02, fontsize=10, horizontalalignment=\"left\")\n\n# Figure attribution\nattribution = f\"Data &amp; xG model @chickenandstats | Viz @chickenandstats\"\nfig.text(\n    s=attribution,\n    x=0.99,\n    y=-0.05,\n    fontsize=8,\n    horizontalalignment=\"right\",\n    style=\"italic\",\n)\n\n# Save figure\nsavepath = Path(f\"./charts/5v5_xgf_gf_{team}.png\")\nfig.savefig(savepath, transparent=False, bbox_inches=\"tight\")\n</code></pre> <p></p>"},{"location":"guide/tutorials/forward_lines/#xga-and-ga","title":"xGA and GA","text":"<p>Plot GA vs. xGA to analyze chances allowed and converted against, highlighting the selected team</p> <pre><code># Setting filter conditions and filtering data\nconds = np.logical_and(lines.strength_state == strength_state, lines.toi &gt;= toi_min)\nplot_lines = (\n    lines.loc[conds]\n    .sort_values(by=\"xgf_percent\", ascending=False)\n    .reset_index(drop=True)\n)\n\n# Setting overall figures\nfig, ax = plt.subplots(dpi=650, figsize=(8, 5))\n\n# Aesthetics, likes the tight tight layout and despining axes\nfig.tight_layout()\nsns.despine()\n\n# Getting the averages and drawing the average lines\nxga_mean = plot_lines.xga_p60.mean()\nga_mean = plot_lines.ga_p60.mean()\n\nax.axhline(y=xga_mean, zorder=-1, alpha=0.5)\nax.axvline(x=ga_mean, zorder=-1, alpha=0.5)\n\n# Setting the size norm so bubbles are consistent across figures\nsize_norm = (plot_lines.toi.min(), plot_lines.toi.max())\n\n# Getting plot colors based on team\ncolors = NHL_COLORS[team]\n\n# Filtering data and plotting the non-selected teams first\nconds = plot_lines.team != team\nplot_data = plot_lines.loc[conds]\n\n# They all get gray colors\nfacecolor = colors[\"MISS\"]\nedgecolor = colors[\"MISS\"]\n\n# Plotting the non-selected teams' data\nsns.scatterplot(\n    data=plot_data,\n    x=\"xga_p60\",\n    y=\"ga_p60\",\n    size=\"toi\",\n    sizes=(20, 150),\n    size_norm=size_norm,\n    lw=1.5,\n    facecolor=facecolor,\n    edgecolor=edgecolor,\n    alpha=0.5,\n    legend=True,\n)\n\n# Filtering and plotting the non-selected team's data\nconds = plot_lines.team == team\nplot_data = plot_lines.loc[conds]\n\n# Setting the colors\nfacecolor = colors[\"GOAL\"]\nedgecolor = colors[\"SHOT\"]\n\n# Plotting the selected team's data\nsns.scatterplot(\n    data=plot_data,\n    x=\"xga_p60\",\n    y=\"ga_p60\",\n    size=\"toi\",\n    sizes=(20, 150),\n    size_norm=size_norm,\n    lw=1.5,\n    facecolor=facecolor,\n    edgecolor=edgecolor,\n    alpha=0.8,\n    legend=False,\n)\n\n# # Iterating through the dataframe for annotations\n# for row, line in plot_data.iterrows():\n#     # Offset x and y positions\n#     if line.xga_p60 &gt;= gf_mean:\n#         x_position = line.xga_p60 + 0.25\n\n#     else:\n#         x_position = line.xga_p60 - 0.25\n\n#     if line.xgf_p60 &gt;= xgf_mean:\n#         y_position = line.ga_p60 + 0.5\n\n#     else:\n#         y_position = line.ga_p60 - 0.5\n\n#     # Custom positioning\n#     if line.forwards == \"COLTON SISSONS, JONATHAN MARCHESSAULT, STEVEN STAMKOS\":\n#         x_position = line.xga_p60 - 1.5\n\n#     if line.forwards == \"COLTON SISSONS, MARK JANKOWSKI, JONATHAN MARCHESSAULT\":\n#         y_position = line.ga_p60 - 0.1\n#         x_position = line.xga_p60 + 0.5\n\n#     if line.forwards == \"FILIP FORSBERG, GUSTAV NYQUIST, RYAN O'REILLY\":\n#         y_position = line.ga_p60 - 0.5\n\n#     # Annotation box options\n#     arrow_props = {\"arrowstyle\": \"simple\", \"linewidth\": 0.25, \"color\": \"tab:gray\"}\n\n#     # Plotting the annotations\n#     ax.annotate(\n#         text=f\"{line.forwards}\",\n#         xy=(line.xga_p60, line.ga_p60),\n#         xytext=(x_position, y_position),\n#         fontsize=6,\n#         bbox={\"facecolor\": \"white\", \"alpha\": 0.5, \"edgecolor\": \"white\", \"pad\": 0},\n#         arrowprops=arrow_props,\n#     )\n\n# Setting the x and y axes labels\nax.axes.set_xlabel(\"xGA per 60 minutes\")\nax.axes.set_ylabel(\"GA per 60 minutes\")\n\n# Figure suptitle and subtitle\nfig_suptitle = (\n    \"Nashville Predators forwards aren't allowing excessive 5v5 chances against\"\n)\nfig.suptitle(\n    fig_suptitle,\n    x=0.01,\n    y=1.08,\n    fontsize=11,\n    fontweight=\"bold\",\n    horizontalalignment=\"left\",\n)\n\ntodays_date = dt.datetime.now().strftime(\"%Y-%m-%d\")\nsubtitle = f\"NHL forward line combinations | &gt;{toi_min} min. TOI at 5v5 | 2024-25 season, as of {todays_date}\"\nfig.text(s=subtitle, x=0.01, y=1.02, fontsize=10, horizontalalignment=\"left\")\n\n# Attribution\nattribution = f\"Data &amp; xG model @chickenandstats | Viz @chickenandstats\"\nfig.text(\n    s=attribution,\n    x=0.99,\n    y=-0.05,\n    fontsize=8,\n    horizontalalignment=\"right\",\n    style=\"italic\",\n)\n\n# Save figure\nsavepath = Path(f\"./charts/5v5_ga_xga_{team}.png\")\nfig.savefig(savepath, transparent=False, bbox_inches=\"tight\")\n</code></pre> <p></p>"},{"location":"guide/tutorials/forward_lines/#whole-nhl","title":"Whole NHL","text":""},{"location":"guide/tutorials/forward_lines/#xgf-and-xga_1","title":"xGF and xGA","text":"<p>Plot xGF vs. xGA to analyze chances created and chances allowed, with subplots highlighting each individual NHL team</p> <pre><code># Setting filter conditions and filtering data\nconds = np.logical_and(lines.strength_state == strength_state, lines.toi &gt;= toi_min)\nplot_lines = (\n    lines.loc[conds]\n    .sort_values(by=\"xgf_percent\", ascending=False)\n    .reset_index(drop=True)\n)\n\n# Setting overall figures\nfig, axes = plt.subplots(nrows=8, ncols=4, dpi=650, figsize=(12, 18))\n\nfig.tight_layout(pad=1.5)\n\naxes = axes.reshape(-1)\n\n# Getting the averages and drawing the average lines\nxga_mean = plot_lines.xga_p60.mean()\nxgf_mean = plot_lines.xgf_p60.mean()\n\n# Setting the size norm so bubbles are consistent across figures\nsize_norm = (plot_lines.toi.min(), plot_lines.toi.max())\n\n# Getting the teams and standings data to iterate through\nteams = standings.team.unique().tolist()\nteam_names = dict(zip(standings.team, standings.team_name))\n\n# Iterating through the standings data\nfor idx, row in standings.iterrows():\n    # Setting the team\n    team = row.team\n\n    # Setting the axis\n    ax = axes[idx]\n\n    # Average lines\n    ax.axvline(x=xga_mean, zorder=-1, alpha=0.5)\n    ax.axhline(y=xgf_mean, zorder=-1, alpha=0.5)\n\n    # Getting plot colors based on team\n    colors = NHL_COLORS[team]\n\n    # Filtering data and plotting the non-selected teams first\n    conds = plot_lines.team != team\n    plot_data = plot_lines.loc[conds]\n\n    # They all get gray colors\n    facecolor = colors[\"MISS\"]\n    edgecolor = \"white\"  # colors[\"MISS\"]\n\n    # Plotting the non-selected teams' data\n    sns.scatterplot(\n        data=plot_data,\n        x=\"xga_p60\",\n        y=\"xgf_p60\",\n        size=\"toi\",\n        sizes=(20, 150),\n        size_norm=size_norm,\n        lw=1.5,\n        facecolor=facecolor,\n        edgecolor=edgecolor,\n        alpha=0.5,\n        legend=False,\n        ax=ax,\n    )\n\n    # Filtering and plotting the selected team's data\n    conds = plot_lines.team == team\n    plot_data = plot_lines.loc[conds]\n\n    # Setting the colors\n    facecolor = colors[\"GOAL\"]\n    edgecolor = colors[\"SHOT\"]\n\n    # Plotting the selected team's data\n    sns.scatterplot(\n        data=plot_data,\n        x=\"xga_p60\",\n        y=\"xgf_p60\",\n        size=\"toi\",\n        sizes=(20, 150),\n        size_norm=size_norm,\n        lw=1.5,\n        facecolor=facecolor,\n        edgecolor=edgecolor,\n        alpha=0.8,\n        legend=False,\n        ax=ax,\n    )\n\n    # Setting x and y axes labels\n    x_labels = [28, 29, 30, 31]\n\n    if idx in x_labels:\n        ax.axes.set_xlabel(\"xGA per 60 minutes\", fontsize=8)\n    else:\n        ax.axes.set_xlabel(\"\")\n\n    y_labels = [0, 4, 8, 12, 16, 20, 24, 28]\n\n    if idx in y_labels:\n        ax.axes.set_ylabel(\"xGF per 60 minutes\", fontsize=8)\n    else:\n        ax.axes.set_ylabel(\"\")\n\n    # Setting tick params font size\n    ax.tick_params(axis=\"both\", which=\"major\", labelsize=8)\n\n    # Setting the ax title\n    ax_title = f\"{row.team_name} | {row.points} points | {row.wins} - {row.losses} - {row.ot_losses}\"\n    ax.set_title(ax_title, fontsize=8, x=-0.085, y=1.03, horizontalalignment=\"left\")\n\n# Figure suptitle and subtitle\nfig_suptitle = \"Forward line combinations' chances created vs. chances allowed\"\nfig.suptitle(\n    fig_suptitle,\n    x=0.01,\n    y=1.029,\n    fontsize=11,\n    fontweight=\"bold\",\n    horizontalalignment=\"left\",\n)\n\ntodays_date = dt.datetime.now().strftime(\"%Y-%m-%d\")\nsubtitle = f\"NHL forward line combinations | &gt;{toi_min} min. TOI at 5v5 (size indicates TOI) | 2024-25 season, as of {todays_date}\"\nfig.text(s=subtitle, x=0.01, y=1.0115, fontsize=10, horizontalalignment=\"left\")\n\n# Attribution\nattribution = f\"Data &amp; xG model @chickenandstats.com | Viz @chickenandstats.com\"\nfig.text(\n    s=attribution,\n    x=0.99,\n    y=-0.01,\n    fontsize=8,\n    horizontalalignment=\"right\",\n    style=\"italic\",\n)\n\nsavepath = Path(f\"./charts/5v5_xgf_xga_nhl.png\")\nfig.savefig(savepath, transparent=False, bbox_inches=\"tight\")\n</code></pre> <p></p>"},{"location":"guide/tutorials/forward_lines/#xgf-and-gf_1","title":"xGF and GF","text":"<p>Plot xGF vs. GF to analyze chances created and converted, with subplots highlighting each individual NHL team</p> <pre><code># Setting filter conditions and filtering data\nconds = np.logical_and(lines.strength_state == strength_state, lines.toi &gt;= toi_min)\nplot_lines = (\n    lines.loc[conds]\n    .sort_values(by=\"xgf_percent\", ascending=False)\n    .reset_index(drop=True)\n)\n\n# Setting overall figures\nfig, axes = plt.subplots(nrows=8, ncols=4, dpi=650, figsize=(12, 18))\n\nfig.tight_layout(pad=1.5)\n\naxes = axes.reshape(-1)\n\n# Getting the averages and drawing the average lines\ngf_mean = plot_lines.gf_p60.mean()\nxgf_mean = plot_lines.xgf_p60.mean()\n\nsize_norm = (plot_lines.toi.min(), plot_lines.toi.max())\n\n\nteams = standings.team.unique().tolist()\nteam_names = dict(zip(standings.team, standings.team_name))\n\nfor idx, row in standings.iterrows():\n    team = row.team\n\n    ax = axes[idx]\n\n    ax.axvline(x=gf_mean, zorder=-1, alpha=0.5)\n    ax.axhline(y=xgf_mean, zorder=-1, alpha=0.5)\n\n    # Getting plot colors based on team\n    colors = NHL_COLORS[team]\n\n    # Filtering data and plotting the non-selected teams first\n    conds = plot_lines.team != team\n    plot_data = plot_lines.loc[conds]\n\n    # They all get gray colors\n    facecolor = colors[\"MISS\"]\n    edgecolor = \"white\"  # colors[\"MISS\"]\n\n    # Plotting the non-selected teams' data\n    sns.scatterplot(\n        data=plot_data,\n        x=\"gf_p60\",\n        y=\"xgf_p60\",\n        size=\"toi\",\n        sizes=(20, 150),\n        size_norm=size_norm,\n        lw=1.5,\n        facecolor=facecolor,\n        edgecolor=edgecolor,\n        alpha=0.5,\n        legend=False,\n        ax=ax,\n    )\n\n    # Plotting the\n    conds = plot_lines.team == team\n    plot_data = plot_lines.loc[conds]\n\n    facecolor = colors[\"GOAL\"]\n    edgecolor = colors[\"SHOT\"]\n\n    sns.scatterplot(\n        data=plot_data,\n        x=\"gf_p60\",\n        y=\"xgf_p60\",\n        size=\"toi\",\n        sizes=(20, 150),\n        size_norm=size_norm,\n        lw=1.5,\n        facecolor=facecolor,\n        edgecolor=edgecolor,\n        alpha=0.8,\n        legend=False,\n        ax=ax,\n    )\n\n    x_labels = [28, 29, 30, 31]\n\n    if idx in x_labels:\n        ax.axes.set_xlabel(\"GF per 60 minutes\", fontsize=8)\n    else:\n        ax.axes.set_xlabel(\"\")\n\n    y_labels = [0, 4, 8, 12, 16, 20, 24, 28]\n\n    if idx in y_labels:\n        ax.axes.set_ylabel(\"xGF per 60 minutes\", fontsize=8)\n    else:\n        ax.axes.set_ylabel(\"\")\n\n    ax.tick_params(axis=\"both\", which=\"major\", labelsize=8)\n\n    ax_title = f\"{row.team_name} | {row.points} points | {row.wins} - {row.losses} - {row.ot_losses}\"\n\n    ax.set_title(ax_title, fontsize=8, x=-0.085, y=1.03, horizontalalignment=\"left\")\n\nfig_suptitle = \"Forward line combinations' chances created vs. goals scored\"\nfig.suptitle(\n    fig_suptitle,\n    x=0.01,\n    y=1.029,\n    fontsize=11,\n    fontweight=\"bold\",\n    horizontalalignment=\"left\",\n)\n\ntodays_date = dt.datetime.now().strftime(\"%Y-%m-%d\")\nsubtitle = f\"NHL forward line combinations | &gt;{toi_min} min. TOI at 5v5 (size indicates TOI) | 2024-25 season, as of {todays_date}\"\nfig.text(s=subtitle, x=0.01, y=1.0115, fontsize=10, horizontalalignment=\"left\")\n\nattribution = f\"Data &amp; xG model @chickenandstats.com | Viz @chickenandstats.com\"\nfig.text(\n    s=attribution,\n    x=0.99,\n    y=-0.01,\n    fontsize=8,\n    horizontalalignment=\"right\",\n    style=\"italic\",\n)\n\nsavepath = Path(f\"./charts/5v5_xgf_gf_nhl.png\")\nfig.savefig(savepath, transparent=False, bbox_inches=\"tight\")\n</code></pre> <p></p>"},{"location":"guide/tutorials/forward_lines/#ga-and-xga","title":"GA and xGA","text":"<p>Plot GA vs. xGA to analyze chances created and converted against, with subplots highlighting each individual NHL team</p> <pre><code># Setting filter conditions and filtering data\nconds = np.logical_and(lines.strength_state == strength_state, lines.toi &gt;= toi_min)\nplot_lines = (\n    lines.loc[conds]\n    .sort_values(by=\"xgf_percent\", ascending=False)\n    .reset_index(drop=True)\n)\n\n# Setting overall figures\nfig, axes = plt.subplots(nrows=8, ncols=4, dpi=650, figsize=(12, 18))\n\nfig.tight_layout(pad=1.5)\n\naxes = axes.reshape(-1)\n\n# Getting the averages and drawing the average lines\nxga_mean = plot_lines.xga_p60.mean()\nga_mean = plot_lines.ga_p60.mean()\n\nsize_norm = (plot_lines.toi.min(), plot_lines.toi.max())\n\n\nteams = standings.team.unique().tolist()\nteam_names = dict(zip(standings.team, standings.team_name))\n\nfor idx, row in standings.iterrows():\n    team = row.team\n\n    ax = axes[idx]\n\n    ax.axvline(x=xga_mean, zorder=-1, alpha=0.5)\n    ax.axhline(y=ga_mean, zorder=-1, alpha=0.5)\n\n    # Getting plot colors based on team\n    colors = NHL_COLORS[team]\n\n    # Filtering data and plotting the non-selected teams first\n    conds = plot_lines.team != team\n    plot_data = plot_lines.loc[conds]\n\n    # They all get gray colors\n    facecolor = colors[\"MISS\"]\n    edgecolor = \"white\"  # colors[\"MISS\"]\n\n    # Plotting the non-selected teams' data\n    sns.scatterplot(\n        data=plot_data,\n        x=\"xga_p60\",\n        y=\"ga_p60\",\n        size=\"toi\",\n        sizes=(20, 150),\n        size_norm=size_norm,\n        lw=1.5,\n        facecolor=facecolor,\n        edgecolor=edgecolor,\n        alpha=0.5,\n        legend=False,\n        ax=ax,\n    )\n\n    # Plotting the\n    conds = plot_lines.team == team\n    plot_data = plot_lines.loc[conds]\n\n    facecolor = colors[\"GOAL\"]\n    edgecolor = colors[\"SHOT\"]\n\n    sns.scatterplot(\n        data=plot_data,\n        x=\"xga_p60\",\n        y=\"ga_p60\",\n        size=\"toi\",\n        sizes=(20, 150),\n        size_norm=size_norm,\n        lw=1.5,\n        facecolor=facecolor,\n        edgecolor=edgecolor,\n        alpha=0.8,\n        legend=False,\n        ax=ax,\n    )\n\n    x_labels = [28, 29, 30, 31]\n\n    if idx in x_labels:\n        ax.axes.set_xlabel(\"xGA per 60 minutes\", fontsize=8)\n    else:\n        ax.axes.set_xlabel(\"\")\n\n    y_labels = [0, 4, 8, 12, 16, 20, 24, 28]\n\n    if idx in y_labels:\n        ax.axes.set_ylabel(\"GA per 60 minutes\", fontsize=8)\n    else:\n        ax.axes.set_ylabel(\"\")\n\n    ax.tick_params(axis=\"both\", which=\"major\", labelsize=8)\n\n    ax_title = f\"{row.team_name} | {row.points} points | {row.wins} - {row.losses} - {row.ot_losses}\"\n\n    ax.set_title(ax_title, fontsize=8, x=-0.085, y=1.03, horizontalalignment=\"left\")\n\nfig_suptitle = \"Forward line combinations' chances allowed vs. goals allowed\"\nfig.suptitle(\n    fig_suptitle,\n    x=0.01,\n    y=1.029,\n    fontsize=11,\n    fontweight=\"bold\",\n    horizontalalignment=\"left\",\n)\n\ntodays_date = dt.datetime.now().strftime(\"%Y-%m-%d\")\nsubtitle = f\"NHL forward line combinations | &gt;{toi_min} min. TOI at 5v5 (size indicates TOI) | 2024-25 season, as of {todays_date}\"\nfig.text(s=subtitle, x=0.01, y=1.0115, fontsize=10, horizontalalignment=\"left\")\n\nattribution = f\"Data &amp; xG model @chickenandstats.com | Viz @chickenandstats.com\"\nfig.text(\n    s=attribution,\n    x=0.99,\n    y=-0.01,\n    fontsize=8,\n    horizontalalignment=\"right\",\n    style=\"italic\",\n)\n\nsavepath = Path(f\"./charts/5v5_ga_xga_nhl.png\")\nfig.savefig(savepath, transparent=False, bbox_inches=\"tight\")\n</code></pre> <p></p>"},{"location":"guide/tutorials/gsax/","title":"Tutorial for goals saved above expected","text":""},{"location":"guide/tutorials/gsax/#intro","title":"Intro","text":"<p>Use the <code>chickenstats</code> library to scrape play-by-play data and analyze goalies' goals saved above expected.</p> <p>Parts of this tutorial are optional and will be clearly marked as such. For help, or any questions, please don't hesitate to reach out to chicken@chickenandstats.com or @chickenandstats.com on Blue Sky.</p>"},{"location":"guide/tutorials/gsax/#housekeeping","title":"Housekeeping","text":""},{"location":"guide/tutorials/gsax/#import-dependencies","title":"Import dependencies","text":"<p>Import the dependencies we'll need for the guide</p> <pre><code>import pandas as pd\nimport numpy as np\n\nfrom chickenstats.chicken_nhl import Season, Scraper\nfrom chickenstats.chicken_nhl.info import NHL_COLORS\nimport chickenstats.utilities\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.lines import Line2D\nimport matplotlib.patheffects as mpe\nimport matplotlib.ticker as ticker\nimport seaborn as sns\n\nimport datetime as dt\n</code></pre>"},{"location":"guide/tutorials/gsax/#pandas-options","title":"Pandas options","text":"<p>Set different pandas options. This cell is optional</p> <pre><code>pd.set_option(\"display.max_columns\", None)\npd.set_option(\"display.max_rows\", 100)\n</code></pre>"},{"location":"guide/tutorials/gsax/#chickenstats-matplotlib-style","title":"Chickenstats matplotlib style","text":"<p>chickenstats.utilities includes a custom style package - this activates it. This cell is also optional</p> <pre><code>plt.style.use(\"chickenstats\")\n</code></pre>"},{"location":"guide/tutorials/gsax/#scrape-data","title":"Scrape data","text":""},{"location":"guide/tutorials/gsax/#schedule","title":"Schedule","text":"<p>Scrape the schedule using the <code>Season</code> object</p> <pre><code>season = Season(2024)\n</code></pre> <pre><code>schedule = season.schedule(disable_progress_bar=True)\n</code></pre>"},{"location":"guide/tutorials/gsax/#standings-and-team-names","title":"Standings and team names","text":"<p>Scrape the standings and create team name dictionaries to use later</p> <pre><code>standings = season.standings.copy(deep=True)\n</code></pre> <pre><code>team_names = standings.sort_values(by=\"team_name\").team_name.str.upper().tolist()\nteam_codes = standings.sort_values(by=\"team_name\").team.str.upper().tolist()\nteam_names_dict = dict(zip(team_codes, team_names))\n</code></pre>"},{"location":"guide/tutorials/gsax/#game-ids","title":"Game IDs","text":"<p>Create a list of game IDs to crape</p> <pre><code>conds = schedule.game_state == \"OFF\"\n\ngame_ids = schedule.loc[conds].game_id.unique().tolist()\n</code></pre>"},{"location":"guide/tutorials/gsax/#play-by-play","title":"Play-by-play","text":"<p>Scrape play-by-play data using the <code>Scraper</code> object</p> <pre><code>scraper = Scraper(game_ids, disable_progress_bar=True)\n</code></pre> <pre><code>pbp = scraper.play_by_play\n</code></pre>"},{"location":"guide/tutorials/gsax/#stats","title":"Stats","text":"<p>Aggregate statistics to season and game level</p> <pre><code>scraper.prep_stats(level=\"season\", disable_progress_bar=True)\nseason_stats = scraper.stats.copy(deep=True)\n</code></pre> <pre><code>scraper.prep_stats(level=\"game\", disable_progress_bar=True)\ngame_stats = scraper.stats.copy(deep=True)\n</code></pre>"},{"location":"guide/tutorials/gsax/#goalie-dataframes","title":"Goalie dataframes","text":"<p>Filter the dataframes for goalies and add goals saved above expected stats</p> <pre><code>def prep_goalie_df(data: pd.DataFrame, strengths: bool) -&gt; pd.DataFrame:\n    \"\"\"Prep goalie dataframes for later analysis.\n\n    Parameters:\n        data (pd.DataFrame):\n            Pandas dataframe of individual statistics scraped using `chickenstats` library\n        strengths (bool):\n            If False, aggregates data to all strengths states. If True, data are aggregated\n            to strength state level\n\n    \"\"\"\n    df = data.copy(deep=True)\n\n    df = df.loc[df.position == \"G\"].reset_index(drop=True)\n\n    if not strengths:\n        group_cols = [\n            \"season\",\n            \"session\",\n            \"game_id\",\n            \"game_date\",\n            \"player\",\n            \"eh_id\",\n            \"api_id\",\n            \"position\",\n            \"team\",\n            \"opp_team\",\n        ]\n\n        group_cols = [x for x in group_cols if x in df.columns]\n\n        agg_stats = {\n            x: \"sum\"\n            for x in df.columns\n            if x not in group_cols\n            and x != \"strength_state\"\n            and \"percent\" not in x\n            and \"p60\" not in x\n        }\n\n        df = df.groupby(group_cols, as_index=False).agg(agg_stats)\n\n    df[\"gsax\"] = df.xga - df.ga\n    df[\"gsax_p60\"] = df.gsax / df.toi * 60\n\n    return df\n</code></pre> <pre><code>goalies_game = prep_goalie_df(data=game_stats, strengths=True)\n</code></pre> <pre><code>goalies_game_all_sit = prep_goalie_df(data=game_stats, strengths=False)\n</code></pre> <pre><code>goalies_season = prep_goalie_df(data=season_stats, strengths=True)\n</code></pre> <pre><code>goalies_season_all_sit = prep_goalie_df(data=season_stats, strengths=False)\n</code></pre>"},{"location":"guide/tutorials/gsax/#gsax-line-charts","title":"GSaX line charts","text":""},{"location":"guide/tutorials/gsax/#prepping-data","title":"Prepping data","text":"<p>Calculating cumlative stats</p> <pre><code>def calc_cumulative_stats(data: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"Calculate cumulative TOI and xG against.\n\n    Parameters:\n        data (pd.DataFrame):\n            Pandas dataframe of statistics aggregated from the `chickenstats` library and\n            prepped for goalie analysis\n    \"\"\"\n    df = data.copy(deep=True)\n\n    group_list = [\"season\", \"session\", \"player\", \"eh_id\", \"api_id\", \"team\"]\n\n    df[\"cum_gp\"] = df.groupby(group_list)[\"game_id\"].transform(\"cumcount\") + 1\n\n    df[\"cum_toi\"] = df.groupby(group_list)[\"toi\"].transform(\"cumsum\")\n\n    df[\"cum_gsax\"] = df.groupby(group_list)[\"gsax\"].transform(\"cumsum\")\n\n    return df\n</code></pre> <pre><code>goalies_game_all_sit = calc_cumulative_stats(data=goalies_game_all_sit)\n</code></pre>"},{"location":"guide/tutorials/gsax/#plot-line-chart-function","title":"Plot line chart function","text":"<p>Function to plot cumulative GSaX and TOI for a given goalie</p> <pre><code>def plot_line_chart(\n    data: pd.DataFrame,\n    goalie: pd.Series,\n    ax: plt.axes,\n    ax_title: str | None = None,\n    legend_label: str | None = None,\n    x_label: bool = False,\n    y_label: bool = False,\n):\n    \"\"\"Function to plot a seaborn line chart of cumulative time-on-ice and goals scored above expected.\n\n    Parameters:\n        data (pd.DataFrame):\n            Pandas dataframe of game-level goalie data to plot\n        goalie (pd.Series):\n            Row of data from season-level goalie data\n        ax (plt.axes):\n            The matplotlib axes to return after plotting the chart\n        ax_title (str | None):\n            Customize ax title, or, if None, use the goalie's name\n        legend_label (str | None):\n            Customize the legend label, or, if None, list the cumulative GSaX and TOI\n        x_label (bool):\n            Whether to print or hide the x-axis label\n        y_label (bool):\n            Whether to print or hide the y-axis label\n\n    \"\"\"\n    plot_df = data.copy()\n\n    color_palette = np.where(\n        plot_df.api_id == goalie.api_id,\n        NHL_COLORS[goalie.team][\"SHOT\"],\n        NHL_COLORS[goalie.team][\"MISS\"],\n    )\n\n    color_palette = dict(zip(plot_df.player, color_palette))\n\n    line_color = NHL_COLORS[goalie.team][\"MISS\"]\n    line_width = 3\n\n    conds = plot_df.player != goalie.player\n\n    sns.lineplot(\n        x=\"cum_toi\",\n        y=\"cum_gsax\",\n        data=plot_df[conds],\n        hue=\"player\",\n        palette=color_palette,\n        ax=ax,\n        lw=line_width,\n    )\n\n    conds = plot_df.player == goalie.player\n    line_color = NHL_COLORS[goalie.team][\"SHOT\"]\n    line_width = 6\n    path_effect_ec = NHL_COLORS[goalie.team][\"GOAL\"]\n\n    path_effect = [\n        mpe.Stroke(foreground=path_effect_ec, alpha=1, linewidth=7),\n        mpe.Normal(),\n    ]\n\n    sns.lineplot(\n        x=\"cum_toi\",\n        y=\"cum_gsax\",\n        data=plot_df[conds],\n        hue=\"player\",\n        palette=color_palette,\n        ax=ax,\n        zorder=3,\n        lw=3.5,\n        path_effects=path_effect,\n    )\n\n    if ax_title == \"\":\n        ax_title = \"\"\n\n    elif not ax_title:\n        ax_title = goalie.player\n\n    ax.set_title(ax_title, size=18, weight=\"heavy\", pad=15)\n\n    if y_label:\n        ax.set_ylabel(\"Cumulative GSaX\", size=16, labelpad=15, weight=\"heavy\")\n\n    else:\n        ax.set_ylabel(\"\")\n        ax.yaxis.set_tick_params(which=\"both\", labelbottom=True)\n\n    if x_label:\n        ax.set_xlabel(\n            \"Cumulative time-on-ice (minutes)\", size=16, labelpad=15, weight=\"heavy\"\n        )\n\n    else:\n        ax.set_xlabel(\"\")\n        ax.xaxis.set_tick_params(which=\"both\", labelbottom=True)\n\n    legend_elements = list()\n    color = NHL_COLORS[goalie.team][\"SHOT\"]\n    edge_color = color\n\n    xG = round(goalie.gsax, 2)\n\n    toi_max = round(goalie.toi, 2)\n\n    if not legend_label:\n        legend_label = f\"{xG} GSaX in {toi_max} minutes\"\n\n    element = Line2D(\n        [0], [0], lw=3, label=legend_label, color=color, path_effects=path_effect\n    )\n\n    legend_elements.append(element)\n\n    legend = ax.legend(\n        handles=legend_elements,\n        loc=\"upper left\",\n        ncol=1,\n        fontsize=14,\n        title_fontsize=12,\n        facecolor=\"white\",\n        framealpha=1,\n        edgecolor=\"gray\",\n    ).set_zorder(-1)\n\n    ax.xaxis.set_tick_params(labelsize=16)\n    ax.yaxis.set_tick_params(labelsize=16)\n\n    return ax\n</code></pre>"},{"location":"guide/tutorials/gsax/#juuse-saros","title":"Juuse Saros","text":"<p>Plot single goalie's goals saved above expected and time-on-ice</p> <pre><code>selected_goalie = \"JUUSE.SAROS\"\nconds = goalies_season_all_sit.eh_id == selected_goalie\n\nfig_size = (8, 5)\n\nfig, ax = plt.subplots(figsize=fig_size, dpi=650)\n\nfor idx, goalie in goalies_season_all_sit.loc[conds].iterrows():\n    plot_df = goalies_game_all_sit.copy()\n\n    plot_line_chart(\n        data=plot_df, goalie=goalie, ax=ax, ax_title=\"\", x_label=True, y_label=True\n    )\n\n\ntitle = \"Saros is having an NHL-average year\"\nfig.suptitle(title, ha=\"center\", va=\"center\", y=1.027, size=16, weight=\"heavy\")\n\ntodays_date = dt.datetime.now().strftime(\"%Y-%m-%d\")\nsubtitle = (\n    f\"Cumulative GSaX &amp; TOI, all situations | 2024-25 season, as of {todays_date}\"\n)\nfig.text(s=subtitle, ha=\"center\", va=\"center\", x=0.5, y=0.98, size=12)\n\n\n# Attribution\nattribution = f\"Data &amp; xG model @chickenandstats.com | Viz @chickenandstats.com\"\nfig.text(\n    s=attribution,\n    x=0.95,\n    y=-0.095,\n    fontsize=8,\n    horizontalalignment=\"right\",\n    style=\"italic\",\n)\n\nfig.savefig(\"./charts/saros_gsax.png\", dpi=650, bbox_inches=\"tight\", facecolor=\"white\")\n</code></pre> <p></p>"},{"location":"guide/tutorials/gsax/#top-6-goalies","title":"Top-6 goalies","text":"<p>Create the top goalies dataframe to iterate through for plotting</p> <pre><code>top_goalies = (\n    goalies_season_all_sit.sort_values(by=\"gsax\", ascending=False)\n    .head(6)\n    .reset_index(drop=True)\n)\n</code></pre>"},{"location":"guide/tutorials/gsax/#plot-cumulative-gsax-and-toi","title":"Plot cumulative GSaX and TOI","text":"<p>Cumulative time-on-ice and goals saved above expected for top-6 goalies in NHL</p> <pre><code>## setting figure size\n\nfig_size = (15, 15)\n\nfig, axes = plt.subplots(3, 2, figsize=fig_size, dpi=650, sharex=True, sharey=True)\n\nfig.tight_layout(pad=5)\n\naxes = axes.reshape(-1)\n\nfor idx, top_goalie in top_goalies.iterrows():\n    ax = axes[idx]\n\n    if idx &gt;= 4:\n        x_label = True\n\n    else:\n        x_label = False\n\n    if idx in [0, 2, 4]:\n        y_label = True\n\n    else:\n        y_label = False\n\n    plot_df = goalies_game_all_sit.copy()\n\n    plot_line_chart(\n        data=plot_df, goalie=top_goalie, ax=ax, x_label=x_label, y_label=y_label\n    )\n\n\ntitle = \"Top-6 goaltenders by cumulative goals saved above expected\"\nfig.suptitle(title, ha=\"center\", va=\"center\", y=1.027, size=24, weight=\"heavy\")\n\ntodays_date = dt.datetime.now().strftime(\"%Y-%m-%d\")\nsubtitle = f\"Cumulative GSaX &amp; cumulative TOI, all situations | 2024-25 season, as of {todays_date}\"\nfig.text(s=subtitle, ha=\"center\", va=\"center\", x=0.5, y=1.001, size=18)\n\n\n# Attribution\nattribution = f\"Data &amp; xG model @chickenandstats.com | Viz @chickenandstats.com\"\nfig.text(\n    s=attribution,\n    x=0.99,\n    y=-0.0125,\n    fontsize=12,\n    horizontalalignment=\"right\",\n    style=\"italic\",\n)\n\nfig.savefig(\"./charts/top_6_gsax.png\", dpi=650, bbox_inches=\"tight\", facecolor=\"white\")\n</code></pre> <p></p>"},{"location":"guide/tutorials/gsax/#gsax-and-time-between-games","title":"GSaX and time between games","text":""},{"location":"guide/tutorials/gsax/#prepping-data_1","title":"Prepping data","text":"<p>Getting game winners and calculating time between games with the schedule object</p> <pre><code>def prep_hours_since(\n    data: pd.DataFrame, schedule: pd.DataFrame, strengths: list = [\"5v5\"]\n) -&gt; pd.DataFrame:\n    \"\"\"Function to prep dataframe of gsax and hours since for an individual goalie.\n\n    Parameters:\n        data (pd.DataFrame):\n            Pandas dataframe of goalie stats from `chickenstats` library\n        strengths (list):\n            List of strength states to filter the dataframe\n\n    \"\"\"\n    df = data.copy()\n\n    winners = np.where(\n        schedule.home_score &gt; schedule.away_score,\n        schedule.home_team,\n        schedule.away_team,\n    )\n    winners_map = dict(zip(schedule.game_id.astype(str), winners))\n\n    game_date_dt = pd.to_datetime(schedule.game_date_dt, utc=True)\n    game_date_map = dict(zip(schedule.game_id.astype(str), game_date_dt))\n\n    df[\"game_date_dt\"] = df.game_id.map(game_date_map)\n    df[\"win\"] = df.game_id.map(winners_map)\n    df.win = np.where(df.team == df.win, 1, 0)\n\n    conds = df.strength_state.isin(strengths)\n\n    df = df.loc[conds].reset_index(drop=True)\n\n    group_list = [\"season\", \"session\", \"team\", \"player\", \"eh_id\"]\n\n    df[\"hours_since\"] = df.groupby(group_list).game_date_dt.transform(\n        lambda x: x - x.shift(1)\n    ).astype(\"timedelta64[s]\") / pd.Timedelta(hours=1)\n\n    conds = np.logical_and.reduce(\n        [df.hours_since &gt; 0, df.hours_since &lt;= 175, df.toi &gt;= 10]\n    )\n\n    df = df.loc[conds].reset_index(drop=True)\n\n    return df\n</code></pre>"},{"location":"guide/tutorials/gsax/#plotting-function","title":"Plotting function","text":"<p>Plot individual goalie GSaX / 60 and time since last game</p> <pre><code>def plot_hours_since(\n    data: pd.DataFrame,\n    goalie: pd.Series,\n    ax: plt.axes,\n    ax_title: str | None = None,\n    legend_label: str | None = None,\n    x_label: bool = False,\n    y_label: bool = False,\n):\n    \"\"\"Function to plot a seaborn line chart of cumulative time-on-ice and goals scored above expected.\n\n    Parameters:\n        data (pd.DataFrame):\n            Pandas dataframe of game-level goalie data to plot\n        goalie (pd.Series):\n            Row of data from season-level goalie data\n        ax (plt.axes):\n            The matplotlib axes to return after plotting the chart\n        ax_title (str | None):\n            Customize ax title, or, if None, use the goalie's name\n        x_label (bool):\n            Whether to print or hide the x-axis label\n        y_label (bool):\n            Whether to print or hide the y-axis label\n\n    \"\"\"\n    sns.despine(right=False, top=False, ax=ax)\n\n    df = data.copy()\n\n    min_size = df.fa_p60.min()\n    max_size = df.fa_p60.max()\n    mean_size = df.fa_p60.mean()\n    size_norm = (min_size, max_size)\n    sizes = (10, 500)\n\n    alpha = 0.65\n    line_width = 1.3\n\n    colors = NHL_COLORS[goalie.team]\n\n    conds = df.eh_id != goalie.eh_id\n\n    sns.scatterplot(\n        x=\"hours_since\",\n        y=\"gsax_p60\",\n        data=df[conds],\n        color=colors[\"MISS\"],\n        size=\"fa_p60\",\n        size_norm=size_norm,\n        sizes=sizes,\n        alpha=alpha,\n        edgecolor=\"white\",\n        linewidth=line_width,\n        legend=\"full\",\n        ax=ax,\n    )\n\n    color_palette = {0: colors[\"SHOT\"], 1: colors[\"GOAL\"]}\n\n    for result, color in color_palette.items():\n        conds = df.eh_id == goalie.eh_id\n\n        if result == 0:\n            edge_color = \"white\"\n\n        else:\n            edge_color = colors[\"SHOT\"]\n\n        sns.scatterplot(\n            x=\"hours_since\",\n            y=\"gsax_p60\",\n            data=df[conds],\n            hue=\"win\",\n            palette=color_palette,\n            size=\"fa_p60\",\n            size_norm=size_norm,\n            sizes=sizes,\n            alpha=alpha,\n            edgecolor=edge_color,\n            linewidth=line_width,\n            legend=False,\n            ax=ax,\n        )\n\n    legend_elements = []\n\n    legend_element_labels = [\"Win\", \"Loss\", \"Other goalies\"]\n\n    for label in legend_element_labels:\n        if label == \"Win\":\n            color = colors[\"GOAL\"]\n            edge_color = colors[\"SHOT\"]\n\n        if label == \"Loss\":\n            color = colors[\"SHOT\"]\n            edge_color = \"white\"\n\n        if label == \"Other goalies\":\n            color = colors[\"MISS\"]\n            edge_color = \"white\"\n\n        element = Line2D(\n            [0],\n            [0],\n            lw=0,\n            label=label,\n            markersize=14,\n            marker=\"o\",\n            color=color,\n            mec=edge_color,\n            alpha=alpha,\n        )\n\n        legend_elements.append(element)\n\n    legend = ax.legend(\n        handles=legend_elements,\n        loc=\"upper left\",\n        ncol=1,\n        fontsize=12,\n        title_fontsize=16,\n        facecolor=\"white\",\n        framealpha=1,\n        edgecolor=\"gray\",\n    )\n\n    ax.add_artist(legend).set_zorder(-1)\n\n    if not ax_title:\n        if ax_title != \"\":\n            ax_title = goalie.player\n\n    if ax_title:\n        ax.set_title(ax_title, size=18, weight=\"heavy\", pad=15)\n\n    if x_label:\n        ax.set_xlabel(\"Hours since last game\", size=18, labelpad=15, weight=\"heavy\")\n\n    else:\n        ax.set_xlabel(\"\", size=18, weight=\"heavy\")\n        ax.xaxis.set_tick_params(which=\"both\", labelbottom=True)\n\n    if y_label:\n        ax.set_ylabel(\"GSaX / 60\", size=18, labelpad=15, weight=\"heavy\")\n\n    else:\n        ax.set_ylabel(\"\")\n        ax.yaxis.set_tick_params(which=\"both\", labelleft=True)\n\n    ax.xaxis.set_tick_params(labelsize=14)\n    ax.yaxis.set_tick_params(labelsize=14)\n\n    ax.yaxis.set_major_locator(ticker.MultipleLocator(2))\n    ax.yaxis.set_minor_locator(ticker.MultipleLocator(1))\n\n    return ax\n</code></pre>"},{"location":"guide/tutorials/gsax/#data","title":"Data","text":"<p>Prepping the data for plotting the next two charts</p> <pre><code>hours_since_data = prep_hours_since(data=goalies_game, schedule=schedule)\n</code></pre>"},{"location":"guide/tutorials/gsax/#plotting-juuse-saros","title":"Plotting Juuse Saros","text":"<p>You can also change to plot to whichever goalie you prefer</p> <pre><code>goalie = \"JUUSE.SAROS\"\nstrengths = [\"5v5\"]\n\nfig_size = (8, 8)\n\nfig, ax = plt.subplots(figsize=fig_size, dpi=650)\nfig.tight_layout()\nsns.despine(right=False, top=False)\n\ngoalie_df = goalies_season.loc[\n    np.logical_and(\n        goalies_season.strength_state.isin(strengths), goalies_season.eh_id == goalie\n    )\n]\n\nfor idx, goalie in goalie_df.iterrows():\n    ax = plot_hours_since(\n        data=hours_since_data,\n        goalie=goalie,\n        ax=ax,\n        ax_title=\"\",\n        x_label=True,\n        y_label=True,\n    )\n\ntitle = \"Saros's worst games after long breaks\"\n\nfig.suptitle(title, ha=\"center\", va=\"center\", y=1.045, size=16, weight=\"heavy\")\n\nsubtitle = f\"GSaX / 60 &amp; hours since last game (bubbles sized for FA / 60) | 2024-25 season, as of {todays_date}\"\nfig.text(s=subtitle, ha=\"center\", va=\"center\", x=0.5, y=1.015, size=12)\n\nattribution = \"Data &amp; xG model @chickenandstats | Viz @chickenandstats\"\nfig.text(\n    s=attribution, ha=\"right\", va=\"center\", y=-0.1, x=0.95, size=10, style=\"italic\"\n)\n\nfig.savefig(\n    \"./charts/saros_gsax_hours_since.png\",\n    dpi=650,\n    bbox_inches=\"tight\",\n    facecolor=\"white\",\n)\n</code></pre> <p></p>"},{"location":"guide/tutorials/gsax/#elite-goalies","title":"Elite goalies","text":"<p>Plotting performance and hours since last game for top-6 goalies</p> <pre><code>## setting figure size\n\nfig_size = (15, 15)\n\nfig, axes = plt.subplots(3, 2, figsize=fig_size, dpi=650)\n\nfig.tight_layout(pad=5)\n\naxes = axes.reshape(-1)\n\nfor idx, top_goalie in top_goalies.iterrows():\n    ax = axes[idx]\n\n    if idx &gt;= 4:\n        x_label = True\n\n    else:\n        x_label = False\n\n    if idx in [0, 2, 4]:\n        y_label = True\n\n    else:\n        y_label = False\n\n    ax = plot_hours_since(\n        data=hours_since_data,\n        goalie=top_goalie,\n        ax=ax,\n        x_label=x_label,\n        y_label=y_label,\n    )\n\n\ntitle = \"Top-6 goaltenders by cumulative goals saved above expected\"\nfig.suptitle(title, ha=\"center\", va=\"center\", y=1.027, size=24, weight=\"heavy\")\n\ntodays_date = dt.datetime.now().strftime(\"%Y-%m-%d\")\nsubtitle = f\"GSaX / 60 and hours since last game (bubbles sized for FA / 60), 5v5 | 2024-25 season, as of {todays_date}\"\nfig.text(s=subtitle, ha=\"center\", va=\"center\", x=0.5, y=1.001, size=18)\n\n\n# Attribution\nattribution = f\"Data &amp; xG model @chickenandstats.com | Viz @chickenandstats.com\"\nfig.text(\n    s=attribution,\n    x=0.99,\n    y=-0.0125,\n    fontsize=12,\n    horizontalalignment=\"right\",\n    style=\"italic\",\n)\n\nfig.savefig(\n    \"./charts/top_6_gsax_hours_since.png\",\n    dpi=650,\n    bbox_inches=\"tight\",\n    facecolor=\"white\",\n)\n</code></pre> <p></p>"},{"location":"guide/tutorials/lollipop/","title":"Lollipop charts tutorial","text":""},{"location":"guide/tutorials/lollipop/#intro","title":"Intro","text":"<p>Use the <code>chickenstats</code> library to scrape play-by-play data and plot shot events as a lollipop chart, with the length of the stem indicating the predicted goal value. </p> <p>Parts of this tutorial are optional and will be clearly marked as such. For help, or any questions, please don't hesitate to reach out to chicken@chickenandstats.com or @chickenandstats.com on Blue Sky.</p>"},{"location":"guide/tutorials/lollipop/#housekeeping","title":"Housekeeping","text":""},{"location":"guide/tutorials/lollipop/#import-dependencies","title":"Import dependencies","text":"<p>Import the dependencies we'll need for the guide</p> <pre><code>import pandas as pd\nimport numpy as np\n\nimport chickenstats.utilities  # This imports the chickenstats matplotlib style below\nfrom chickenstats.chicken_nhl import Season, Scraper\nfrom chickenstats.chicken_nhl.info import NHL_COLORS\n\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nfrom matplotlib.lines import Line2D\nimport matplotlib.ticker as ticker\n</code></pre>"},{"location":"guide/tutorials/lollipop/#pandas-options","title":"Pandas options","text":"<p>Sets different pandas options. This cell is optional</p> <pre><code>pd.set_option(\"display.max_columns\", None)\npd.set_option(\"display.max_rows\", 100)\n</code></pre>"},{"location":"guide/tutorials/lollipop/#chickenstats-matplotlib-style","title":"Chickenstats matplotlib style","text":"<p>chickenstats.utilities includes a custom style package - this activates it. This cell is also optional</p> <pre><code>plt.style.use(\"chickenstats\")\n</code></pre>"},{"location":"guide/tutorials/lollipop/#scrape-data","title":"Scrape data","text":""},{"location":"guide/tutorials/lollipop/#schedule-standings-and-team-names","title":"Schedule, standings, and team names","text":"<p>Scrape the schedule and standings using the <code>Season</code> object. Then, create some name dictionaries for convenience later</p> <pre><code>season = Season(2024)\n</code></pre> <pre><code>schedule = season.schedule(\n    disable_progress_bar=True\n)  # Progress bar renders poorly in ipynb to md conversions\n</code></pre> <pre><code>standings = season.standings  # Standings as a dataframe for the team name dictionaries\n</code></pre> <pre><code>team_names = standings.sort_values(by=\"team_name\").team_name.str.upper().tolist()\nteam_codes = standings.sort_values(by=\"team_name\").team.str.upper().tolist()\nteam_names_dict = dict(zip(team_codes, team_names))  # These are helpful for later\n</code></pre>"},{"location":"guide/tutorials/lollipop/#game-ids","title":"Game IDs","text":"<p>Select the team and games to plot. The default is the most recent game for the Nashville Predators :). Feel free to change for your chosen team code </p> <pre><code>team = \"NSH\"\n\nconds = np.logical_and(\n    schedule.game_state == \"OFF\",\n    np.logical_or(schedule.home_team == team, schedule.away_team == team),\n)\n\ngame_ids = schedule.loc[conds].game_id.unique().tolist()\ngame_id = game_ids[-1]\n</code></pre>"},{"location":"guide/tutorials/lollipop/#play-by-play","title":"Play-by-play","text":"<p>Scrape the play-by-play data for the chosen game ID. First instantiate the <code>Scraper</code> object, then call the play_by_play attribute</p> <pre><code>scraper = Scraper(game_id, disable_progress_bar=True)\n</code></pre> <pre><code>pbp = scraper.play_by_play\n</code></pre>"},{"location":"guide/tutorials/lollipop/#plotting-the-lollipop-chart","title":"Plotting the lollipop chart","text":""},{"location":"guide/tutorials/lollipop/#helper-functions","title":"Helper functions","text":"<p>This helper function formats numbers for the x-axis</p> <pre><code>def numfmt(x: int, pos) -&gt; str:\n    \"\"\"Function to convert the game-time values as minutes, then format them for the x-axis.\n\n    Used within the matplotlib FuncFormatter.\n\n    Parameters:\n        x (int):\n            The game time, in seconds, to convert.\n        pos:\n            Required by the FuncFormatter\n\n    \"\"\"\n    s = str(int(x / 60))\n    return s\n</code></pre>"},{"location":"guide/tutorials/lollipop/#plotting-function","title":"Plotting function","text":"<p>This function plots the actual lollipop chart. You can select the strength states, while the team parameter determines which team is in the upper portion of the chart. </p> <p>Strength state options include: * 5v5 * even strength * special teams (i.e., powerplay and shorthanded) * empty net * all strength states</p> <pre><code>def plot_lollipop(\n    data: pd.DataFrame,\n    ax: plt.axes,\n    team: str | None = None,\n    strengths: str | None = None,\n) -&gt; plt.axes:\n    \"\"\"Function to plot the lollipop chart, with the given in the upper portion.\n\n    Parameters:\n        data (pd.DataFrame):\n            Play-by-play data for a single game scraped using the chickenstats package.\n        ax (plt.axes):\n            The axes on which to plot the lollipop chart.\n        team (str):\n            Three-letter team code to determine which team is in the upper portion of the chart.\n            Default is the home team\n        strengths (str):\n            The strength states to include in the chart. Default is 5v5\n\n    \"\"\"\n    strengths_dict = {\n        \"5v5\": {\"name\": \"5v5\", \"list\": [\"5v5\"]},\n        \"even\": {\"name\": \"even_strength\", \"list\": [\"5v5\", \"4v4\", \"3v3\"]},\n        \"special\": {\"name\": \"special_teams\", \"list\": [\"5v4\", \"5v3\", \"4v5\", \"3v5\"]},\n        \"empty\": {\n            \"name\": \"empty_net\",\n            \"list\": [\"Ev5\", \"Ev4\", \"Ev3\", \"5vE\", \"4vE\", \"3vE\"],\n        },\n        \"all\": {\n            \"name\": \"all\",\n            \"list\": [\"5v5\", \"4v4\", \"3v3\", \"5v4\", \"5v3\", \"4v5\", \"3v5\"],\n        },\n    }\n\n    if not strengths:\n        strengths = \"5v5\"\n\n    strengths = strengths_dict[strengths]\n\n    strengths_list = strengths[\"list\"]\n\n    conds = data.strength_state.isin(strengths_list)\n\n    df = data.loc[conds].reset_index(drop=True)\n\n    if not team:\n        team = df.home_team.iloc[0]\n\n    ax.set_ylim(-1.05, 1.05)\n    # ax.axhline(y = 0, lw=1, alpha=.8)\n    ax.axhline(y=0.5, lw=1, zorder=-1, alpha=0.25)\n    ax.axhline(y=1, lw=1, zorder=-1, alpha=0.25)\n    ax.axhline(y=-0.5, lw=1, zorder=-1, alpha=0.25)\n    ax.axhline(y=-1, lw=1, zorder=-1, alpha=0.25)\n    ax.set_yticks([1, 0.5, 0, -0.5, -1], labels=[1, 0.5, 0, 0.5, 1])\n\n    max_game_seconds = data.game_seconds.max()\n\n    ax.set_xlim(-5, max_game_seconds + 35)\n    ax.spines.bottom.set_position(\"zero\")\n\n    ax.xaxis.set_major_locator(ticker.MultipleLocator(1200))\n\n    xfmt = ticker.FuncFormatter(numfmt)\n    ax.xaxis.set_major_formatter(xfmt)\n    ax.xaxis.set_minor_locator(ticker.MultipleLocator(60))\n\n    ax.set_ylabel(\"EXPECTED GOAL VALUE\", fontsize=8)\n\n    events = [\"GOAL\", \"SHOT\", \"MISS\"]\n\n    conds = np.logical_and(df.event_team == team, df.event.isin(events))\n\n    plot_data = df.loc[conds]\n\n    team_post = 0\n\n    for idx, play in plot_data.iterrows():\n        colors = NHL_COLORS[play.event_team]\n\n        marker = \"o\"\n\n        facecolor = colors[play.event]\n        edgecolor = colors[play.event]\n\n        if play.event == \"GOAL\":\n            z_order = 3\n            alpha = 1\n            hatch = \"\"\n            edgecolor = colors[\"SHOT\"]\n\n        else:\n            hatch = \"\"\n            alpha = 0.65\n            z_order = 2\n\n        if play.event == \"MISS\":\n            if \"POST\" in play.description:\n                team_post += 1\n                hatch = \"////////\"\n\n            edgecolor = colors[\"SHOT\"]\n\n        ax.scatter(\n            [play.game_seconds],\n            [play.pred_goal],\n            marker=marker,\n            s=60,\n            color=facecolor,\n            lw=1.15,\n            ec=edgecolor,\n            zorder=z_order,\n            hatch=hatch,\n            alpha=alpha,\n        )\n        if play.event == \"MISS\":\n            edgecolor = colors[\"MISS\"]\n\n        ax.plot(\n            [play.game_seconds, play.game_seconds],\n            [0, play.pred_goal],\n            lw=1.85,\n            color=edgecolor,\n            zorder=0,\n            alpha=0.65,\n        )\n\n    conds = np.logical_and(df.event_team != team, df.event.isin(events))\n\n    plot_data = df.loc[conds]\n\n    not_team_post = 0\n\n    for idx, play in plot_data.iterrows():\n        colors = NHL_COLORS[play.event_team]\n\n        marker = \"o\"\n\n        facecolor = colors[play.event]\n        edgecolor = colors[play.event]\n\n        if play.event == \"GOAL\":\n            z_order = 3\n            alpha = 1\n            edgecolor = colors[\"SHOT\"]\n\n        else:\n            alpha = 0.65\n            z_order = 2\n\n        if play.event == \"MISS\":\n            if \"POST\" in play.description:\n                hatch = \"////////\"\n\n                not_team_post += 1\n\n            edgecolor = colors[\"SHOT\"]\n\n        ax.scatter(\n            [play.game_seconds],\n            [play.pred_goal * -1],\n            marker=marker,\n            s=60,\n            color=facecolor,\n            lw=1.15,\n            ec=edgecolor,\n            zorder=z_order,\n            alpha=alpha,\n        )\n\n        if play.event == \"MISS\":\n            edgecolor = colors[\"MISS\"]\n        ax.plot(\n            [play.game_seconds, play.game_seconds],\n            [0, play.pred_goal * -1],\n            lw=1.85,\n            color=edgecolor,\n            zorder=0,\n            alpha=0.65,\n        )\n\n    not_team = df.loc[\n        np.logical_and(df.event_team != team, pd.notnull(df.event_team))\n    ].event_team.iloc[0]\n\n    # legends\n\n    legend_handles = []\n\n    for event in [\"GOAL\", \"SHOT\", \"MISS\"]:\n        colors = NHL_COLORS[team]\n\n        linecolor = colors[\"SHOT\"]\n        facecolor = colors[event]\n\n        legend_handle = Line2D(\n            [],\n            [],\n            color=linecolor,\n            markeredgecolor=linecolor,\n            markerfacecolor=facecolor,\n            marker=marker,\n            markersize=5,\n            label=event,\n            alpha=0.65,\n        )\n\n        legend_handles.append(legend_handle)\n\n    legend1 = ax.legend(\n        handles=legend_handles,\n        loc=(0.01, 0.8575),\n        ncols=len(legend_handles),\n        fontsize=\"small\",\n        title=team_names_dict[team],\n        title_fontsize=\"small\",\n    )\n    ax.add_artist(legend1)\n\n    legend_handles = []\n\n    for event in [\"GOAL\", \"SHOT\", \"MISS\"]:\n        colors = NHL_COLORS[not_team]\n\n        linecolor = colors[\"SHOT\"]\n        facecolor = colors[event]\n\n        legend_handle = Line2D(\n            [],\n            [],\n            color=linecolor,\n            markeredgecolor=linecolor,\n            markerfacecolor=facecolor,\n            marker=marker,\n            markersize=5,\n            label=event,\n            alpha=0.65,\n        )\n\n        legend_handles.append(legend_handle)\n\n    legend2 = ax.legend(\n        handles=legend_handles,\n        loc=(0.01, 0.0575),\n        ncols=len(legend_handles),\n        fontsize=\"small\",\n        title=team_names_dict[not_team],\n        title_fontsize=\"small\",\n    )\n    ax.add_artist(legend2)\n\n    team_g = df.loc[df.event_team == team].goal.sum()\n    team_xg = df.loc[df.event_team == team].pred_goal.sum()\n\n    not_team_g = df.loc[df.event_team != team].goal.sum()\n    not_team_xg = df.loc[df.event_team != team].pred_goal.sum()\n\n    ax_title = f\"{team_names_dict[team]} vs. {team_names_dict[not_team]}\"\n    ax.set_title(ax_title, ha=\"left\", x=-0.055, y=1.06)\n\n    strengths_name = strengths[\"name\"].replace(\"_\", \" \").upper()\n    score_subtitle = f\"{team_g}G ({round(team_xg, 2)} xG) - {not_team_g}G ({round(not_team_xg, 2)} xG)\"\n    game_date = df.game_date.iloc[0]\n\n    ax_subtitle = f\"{score_subtitle} | {strengths_name} |  {game_date}\"\n    ax.text(s=ax_subtitle, ha=\"left\", x=-0.055, y=1.035, transform=ax.transAxes)\n\n    attribution = \"Viz @chickenandstats.com | xG model @chickenandstats.com\"\n    ax.text(\n        s=attribution,\n        ha=\"right\",\n        x=0.99,\n        y=-0.05,\n        transform=ax.transAxes,\n        fontsize=8,\n        fontstyle=\"italic\",\n    )\n\n    return ax\n</code></pre>"},{"location":"guide/tutorials/lollipop/#plot-the-lollipop-chart","title":"Plot the lollipop chart","text":"<p>Plot the lollipop for your chosen team and strength state below. To save the figure, ensure you have a charts folder in your working directory</p> <pre><code>fig, ax = plt.subplots(dpi=650, figsize=(8, 5))\n\nfig.tight_layout()\n\nax = plot_lollipop(data=pbp, team=team, strengths=\"even\", ax=ax)\n\nfig.savefig(f\"./charts/{game_id}.png\", bbox_inches=\"tight\", transparent=False)\n</code></pre> <p></p>"},{"location":"guide/tutorials/network/","title":"Network charts tutorial","text":""},{"location":"guide/tutorials/network/#intro","title":"Intro","text":"<p>Use the <code>chickenstats</code> library to scrape play-by-play data, aggregate statistics,  and generate network graphs for forward line combinations</p> <p>Parts of this tutorial are optional and will be clearly marked as such. For help, or any questions, please don't hesitate to reach out to chicken@chickenandstats.com or @chickenandstats.com on Blue Sky.</p>"},{"location":"guide/tutorials/network/#housekeeping","title":"Housekeeping","text":""},{"location":"guide/tutorials/network/#import-dependencies","title":"Import dependencies","text":"<p>Import the dependencies we'll need for the guide</p> <pre><code>import networkx\nimport pandas as pd\nimport numpy as np\n\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n\nfrom chickenstats.chicken_nhl import Season, Scraper\nfrom chickenstats.chicken_nhl.info import NHL_COLORS\nimport chickenstats.utilities  # This imports the chickenstats matplotlib style below\n\nfrom pathlib import Path\n\nimport datetime as dt\n\nimport networkx as nx\n</code></pre>"},{"location":"guide/tutorials/network/#pandas-options","title":"Pandas options","text":"<p>Sets different pandas options. This cell is optional</p> <pre><code>pd.set_option(\"display.max_columns\", None)\npd.set_option(\"display.max_rows\", 100)\n</code></pre>"},{"location":"guide/tutorials/network/#chickenstats-matplotlib-style","title":"Chickenstats matplotlib style","text":"<p>chickenstats.utilities includes a custom style package - this activates it. This cell is also optional</p> <pre><code>plt.style.use(\"chickenstats\")\n</code></pre>"},{"location":"guide/tutorials/network/#scrape-data","title":"Scrape data","text":""},{"location":"guide/tutorials/network/#schedule-standings-and-team-names","title":"Schedule, standings, and team names","text":"<p>Scrape the schedule and standings using the <code>Season</code> object. Then, create some name dictionaries for convenience later</p> <pre><code>season = Season(2024)\n</code></pre> <pre><code>schedule = season.schedule(\n    disable_progress_bar=True\n)  # Progress bar renders poorly in ipynb to md conversions\n</code></pre> <pre><code>standings = season.standings  # Standings as a dataframe for the team name dictionaries\n</code></pre> <pre><code>team_names = standings.sort_values(by=\"team_name\").team_name.str.upper().tolist()\nteam_codes = standings.sort_values(by=\"team_name\").team.str.upper().tolist()\nteam_names_dict = dict(zip(team_codes, team_names))  # These are helpful for later\n</code></pre>"},{"location":"guide/tutorials/network/#game-ids","title":"Game IDs","text":"<p>Select the team and games to plot. The default are all of the most recent season's games  for the Nashville Predators :). Feel free to change for your chosen team code </p> <pre><code>team = \"NSH\"\n</code></pre> <pre><code>game_ids = schedule.loc[\n    np.logical_and(\n        np.logical_or(schedule.home_team == team, schedule.away_team == team),\n        schedule.game_state == \"OFF\",\n    )\n].game_id.tolist()\n</code></pre>"},{"location":"guide/tutorials/network/#play-by-play","title":"Play-by-play","text":"<p>Scrape the play-by-play data for the chosen game ID. First instantiate the <code>Scraper</code> object, then call the play_by_play attribute</p> <pre><code>scraper = Scraper(game_ids, disable_progress_bar=True)\n</code></pre> <pre><code>pbp = scraper.play_by_play.copy(deep=True)\n</code></pre>"},{"location":"guide/tutorials/network/#stats","title":"Stats","text":"<p>Aggregate individual statistics after scraping the play-by-play data</p> <pre><code>scraper.prep_stats(level=\"season\", teammates=True, disable_progress_bar=True)\n</code></pre> <pre><code>stats = scraper.stats.copy(deep=True)\n</code></pre>"},{"location":"guide/tutorials/network/#plotting-network-data","title":"Plotting network data","text":""},{"location":"guide/tutorials/network/#helper-functions","title":"Helper functions","text":"<p>Create and draw the network graphs in a convenient plotting function</p> <pre><code>def create_network_graph(data: pd.DataFrame, team: str, strengths: list) -&gt; nx.Graph:\n    \"\"\"Creates a network for a given team and strength state, with time-on-ice as the weight.\n\n    Parameters:\n        data (pd.DataFrame):\n            Pandas dataframe of individual statistics, aggregated from play-by-play\n            data scraped with chickenstats package\n        team (str): \n            Three-letter team code which determines the coloring used for the chart\n        strengths (list):\n            List of strength states to aggregate for data\n    \"\"\"\n    conds = np.logical_and.reduce(\n        [\n            data.team == team,\n            data.strength_state.isin(strengths),\n            data.position.isin(\n                [\"C\", \"L\", \"R\", \"L/R\", \"L/C\", \"R/L\", \"R/C\", \"C/L\", \"C/R\"]\n            ),\n        ]\n    )\n\n    df = data.loc[conds].reset_index(drop=True)\n\n    players = df.player.sort_values().unique().tolist()\n\n    concat_list = [df.player.copy(deep=True)]\n\n    for player in players:\n        conds = [\n            df.player == player,\n            np.logical_and(\n                df.player != player,\n                np.logical_or(\n                    df.forwards.str.contains(player), df.defense.str.contains(player)\n                ),\n            ),\n        ]\n\n        values = [np.nan, df.toi]\n\n        player_series = pd.Series(np.select(conds, values, 0), name=player)\n\n        concat_list.append(player_series)\n\n    df = pd.concat(concat_list, axis=1).groupby(\"player\", as_index=False).sum()\n\n    df = df.set_index(\"player\", drop=True)\n\n    df = (df - df.min().min()) / (df.max().max() - df.min().min()) * 75\n\n    df = df.reset_index()\n\n    df = df.melt(\n        id_vars=[\"player\"],\n        value_vars=[x for x in df.columns if x != \"player\"],\n        var_name=\"target\",\n        value_name=\"weight\",\n    ).rename(columns={\"player\": \"source\"})\n\n    network_graph = nx.from_pandas_edgelist(df, edge_attr=True)\n\n    return network_graph\n</code></pre> <pre><code># Helper function to draw any graph\ndef draw_graph(\n    g: nx.Graph, team: str, edge_options: dict, edge_labels: dict | None = None\n) -&gt; plt.Figure:\n    \"\"\"Draws the graph G with the specified node and edge options.\n\n    Parameters:\n        g (networkx.Graph):\n            The graph to be drawn.\n        team (str):\n            Team code for colors.\n        edge_options (dict):\n            Options for drawing edges.\n        edge_labels (dict, optional):\n            Labels for the edges. Defaults to None.\n    \"\"\"\n    fig, ax = plt.subplots(dpi=650, figsize=(8, 5))\n\n    # Global color properties\n    graph_color = \"#4986e8\"\n    label_color = \"#ffffff\"\n    node_options = {\n        \"node_color\": NHL_COLORS[team][\"GOAL\"],\n        \"node_size\": 1000,\n        \"edgecolors\": NHL_COLORS[team][\"SHOT\"],\n        \"linewidths\": 2,\n    }\n\n    # Define the layout of the graph\n    pos = nx.spring_layout(g, iterations=10, seed=20000)\n\n    # Draw the nodes with the specified options\n    nx.draw_networkx_nodes(g, pos, **node_options)\n\n    # Draw the node labels with specified font properties\n    nx.draw_networkx_labels(\n        g,\n        pos,\n        font_size=8,\n        font_color=NHL_COLORS[team][\"SHOT\"],\n        font_weight=\"bold\",\n        bbox={\"alpha\": 0.5, \"color\": \"white\"},\n    )\n\n    # Draw the edges with the specified options\n    nx.draw_networkx_edges(g, pos, **edge_options)\n\n    # Draw edge labels if they are provided\n    if edge_labels:\n        nx.draw_networkx_edge_labels(\n            g,\n            pos,\n            edge_labels=edge_labels,\n            connectionstyle=\"arc3, rad=0.3\",\n            font_size=12,\n            font_color=NHL_COLORS[team][\"MISS\"],\n            bbox={\"alpha\": 0.5, \"color\": \"white\"},\n        )\n\n    sns.despine(left=True, bottom=True)\n\n    return fig\n</code></pre> <pre><code>def plot_network(stats: pd.DataFrame, team: str, strengths: list, edge_labels=None):\n    \"\"\"This function plots and saves the actual matplotlib figures.\n\n    Parameters:\n        stats (pd.DataFrame):\n            Pandas dataframe of individual statistics, aggregated from play-by-play\n            data scraped with chickenstats package\n        team (str):\n            Three-letter team code which determines the coloring used for the chart\n        strengths (list):\n            List of strength states to plot and pass to the network graph function\n        edge_labels (dict, optional):\n            Labels for the edges\n    \"\"\"\n    g = create_network_graph(data=stats, team=team, strengths=strengths)\n\n    weights = nx.get_edge_attributes(g, \"weight\")\n\n    edge_options = {\n        \"edge_color\": NHL_COLORS[team][\"SHOT\"],\n        #'width': 2.5,\n        \"alpha\": 0.7,\n        \"width\": [weights[edge] / 10 for edge in g.edges()],\n    }\n\n    fig = draw_graph(g=g, edge_options=edge_options, team=team, edge_labels=edge_labels)\n\n    fig_suptitle = f\"{team_names_dict[team].title()} forward line combinations at 5v5\"\n    fig.suptitle(\n        fig_suptitle,\n        x=0.01,\n        y=1.08,\n        fontsize=11,\n        fontweight=\"bold\",\n        horizontalalignment=\"left\",\n    )\n\n    todays_date = dt.datetime.now().strftime(\"%Y-%m-%d\")\n    subtitle = f\"Width of connecting line indicates time-on-ice | 2024-25 season, as of {todays_date}\"\n    fig.text(s=subtitle, x=0.01, y=1.02, fontsize=10, horizontalalignment=\"left\")\n\n    # Attribution\n    attribution = f\"Data &amp; xG model @chickenandstats.com | Viz @chickenandstats.com\"\n    fig.text(\n        s=attribution,\n        x=0.99,\n        y=-0.05,\n        fontsize=8,\n        horizontalalignment=\"right\",\n        style=\"italic\",\n    )\n\n    # Save figure\n    savepath = Path(f\"./charts/{team}_forwards_network.png\")\n    fig.savefig(savepath, transparent=False, bbox_inches=\"tight\")\n</code></pre>"},{"location":"guide/tutorials/network/#plotting-the-data","title":"Plotting the data","text":""},{"location":"guide/tutorials/network/#nsh-network-chart","title":"NSH network chart","text":"<p>Plot the network chart with the cell below</p> <pre><code>plot_network(stats=stats, team=team, strengths=[\"5v5\"])\n</code></pre> <p></p>"},{"location":"guide/tutorials/rolling_xg/","title":"Rolling xG tutorial","text":""},{"location":"guide/tutorials/rolling_xg/#intro","title":"Intro","text":"<p>Use the <code>chickenstats</code> library to scrape play-by-play data and plot rolling average xGF and xGA. </p> <p>Parts of this tutorial are optional and will be clearly marked as such. For help, or any questions, please don't hesitate to reach out to chicken@chickenandstats.com or @chickenandstats.com on Blue Sky.</p>"},{"location":"guide/tutorials/rolling_xg/#housekeeping","title":"Housekeeping","text":""},{"location":"guide/tutorials/rolling_xg/#import-dependencies","title":"Import dependencies","text":"<p>Import the dependencies we'll need for the guide</p> <pre><code>import pandas as pd\nimport numpy as np\n\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mtick\nimport matplotlib.patches as patches\nimport matplotlib.patheffects as mpe\nimport matplotlib.ticker as ticker\n\nfrom chickenstats.chicken_nhl import Season, Scraper\nfrom chickenstats.chicken_nhl.info import NHL_COLORS\nimport chickenstats.utilities\n\nfrom pathlib import Path\n\nimport datetime as dt\n</code></pre>"},{"location":"guide/tutorials/rolling_xg/#pandas-options","title":"Pandas options","text":"<p>Sets different pandas options. This cell is optional</p> <pre><code>pd.set_option(\"display.max_columns\", None)\npd.set_option(\"display.max_rows\", 100)\n</code></pre>"},{"location":"guide/tutorials/rolling_xg/#chickenstats-matplotlib-style","title":"Chickenstats matplotlib style","text":"<p>chickenstats.utilities includes a custom style package - this activates it. This cell is also optional</p> <pre><code>plt.style.use(\"chickenstats\")\n</code></pre>"},{"location":"guide/tutorials/rolling_xg/#scrape-data","title":"Scrape data","text":""},{"location":"guide/tutorials/rolling_xg/#schedule-standings-and-team-names","title":"Schedule, standings, and team names","text":"<p>Scrape the schedule and standings using the Season object. Then, create a list of game IDs to scrape</p> <pre><code>season = Season(2024)\n</code></pre> <pre><code>schedule = season.schedule(disable_progress_bar=True)\n</code></pre> <pre><code>standings = season.standings\n</code></pre> <pre><code>game_ids = schedule.loc[schedule.game_state == \"OFF\"].game_id.tolist()\n</code></pre>"},{"location":"guide/tutorials/rolling_xg/#play-by-play","title":"Play-by-play","text":"<p>Scrape the play-by-play data for the chosen game ID. First instantiate the <code>Scraper</code> object, then call the play_by_play attribute</p> <pre><code>scraper = Scraper(game_ids, disable_progress_bar=True)\n</code></pre> <pre><code>pbp = scraper.play_by_play\n</code></pre>"},{"location":"guide/tutorials/rolling_xg/#stats","title":"Stats","text":"<p>Aggregate statistics </p> <pre><code>scraper.prep_stats(level=\"season\", disable_progress_bar=True)\nstats = scraper.stats.reset_index(drop=True)\n</code></pre> <pre><code>scraper.prep_lines(level=\"season\", disable_progress_bar=True)\nlines = scraper.lines.reset_index(drop=True)\n</code></pre> <pre><code>scraper.prep_team_stats(level=\"game\", disable_progress_bar=True)\nteam_stats = scraper.team_stats.reset_index(drop=True)\n</code></pre>"},{"location":"guide/tutorials/rolling_xg/#helper-function","title":"Helper function","text":"<p>Generates the rolling average figures for the specific team</p> <pre><code>def get_xg_rolling_data(\n    data: pd.DataFrame,\n    season: str,\n    session: str,\n    team: str,\n    strengths: list,\n    window: int = 10,\n):\n    \"\"\"This function returns rolling average xG figures for a specific team.\n\n    Parameters:\n        data (pd.DataFrame):\n            Pandas dataframe of team stats aggregated from play-by-play data scraped with the chickenstats package\n        season (str):\n            8-digit season code (start year + end year) as a string\n        session (str):\n            \"R\" or \"P,\" determines regular season or playoffs\n        team (str):\n            Three-digit team code to filter the data\n        strengths (list):\n            Strength states, e.g., 5v5, 5v4, to include in the grouping, as a list\n        window (int):\n            Number of games for the rolling average calculation, default is 10\n\n    \"\"\"\n    df = data.copy()\n\n    conds = [df.season == season, df.session == session, df.team == team]\n\n    game_num = df[np.logical_and.reduce(conds)].game_id.unique()\n\n    num_map = {x: idx + 1 for idx, x in enumerate(game_num)}\n\n    conds = [\n        df.season == season,\n        df.session == session,\n        df.team == team,\n        df.strength_state.isin(strengths),\n    ]\n    df = df[np.logical_and.reduce(conds)].copy()\n\n    df[\"game_num\"] = df.game_id.map(num_map)\n\n    for_list = [\n        \"cf_p60\",\n        \"ff_p60\",\n        \"hdff_p60\",\n        \"sf_p60\",\n        \"hdsf_p60\",\n        \"gf_p60\",\n        \"hdgf_p60\",\n        \"xgf_p60\",\n    ]\n    against_list = [\n        \"ca_p60\",\n        \"fa_p60\",\n        \"hdfa_p60\",\n        \"sa_p60\",\n        \"hdsa_p60\",\n        \"ga_p60\",\n        \"hdga_p60\",\n        \"xga_p60\",\n    ]\n\n    stats_dict = dict(zip(for_list, against_list))\n\n    for f, a in stats_dict.items():\n        df[f\"rolling_{f}\"] = df[f].rolling(window=window, min_periods=0).mean()\n\n        df[f\"rolling_{a}\"] = df[a].rolling(window=window, min_periods=0).mean()\n\n        df[f\"rolling_{f}_diff\"] = df[f\"rolling_{f}\"] - df[f\"rolling_{a}\"]\n\n    return df\n</code></pre>"},{"location":"guide/tutorials/rolling_xg/#plotting-data","title":"Plotting data","text":""},{"location":"guide/tutorials/rolling_xg/#whole-nhl","title":"Whole NHL","text":"<p>Plot each individual NHL team as its own subplot</p> <pre><code># Filter conditions\nyear = \"20242025\"\nstrengths = [\"5v5\"]\nsession = \"R\"\n</code></pre> <pre><code># Setting overall figures\nfig, axes = plt.subplots(nrows=8, ncols=4, dpi=650, figsize=(12, 18))\n\nfig.tight_layout(pad=1.5)\n\naxes = axes.reshape(-1)\n\n# Getting the teams and standings data to iterate through\nteams = standings.team.unique().tolist()\nteam_names = dict(zip(standings.team, standings.team_name))\n\n# Iterating through the standings data\nfor idx, row in standings.iterrows():\n    # Setting the team\n    team = row.team\n\n    # Setting the axis\n    ax = axes[idx]\n\n    # Setting uniform y limit\n\n    ax.set_ylim(0.75, 7.0)\n    ax.set_xlim(0, standings.games_played.max() + 2)\n\n    # Getting df for plotting\n\n    df = get_xg_rolling_data(team_stats, year, session, team, strengths, window=3)\n\n    # Getting the Y data to plot\n\n    Y_for = df.rolling_xgf_p60.copy().reset_index(drop=True)\n    Y_ag = df.rolling_xga_p60.copy().reset_index(drop=True)\n\n    # Getting the X data to plot\n\n    X = pd.Series(range(1, max(df.game_num) + 1))\n\n    # Setting colors\n\n    colors = NHL_COLORS[team]\n\n    for_c = colors[\"GOAL\"]\n\n    ag_c = colors[\"SHOT\"]\n\n    # Setting path effects for xGF line\n\n    if for_c == \"#FFFFFF\":\n        pe_ec = ag_c\n\n    else:\n        pe_ec = \"white\"\n\n    pe_for = [\n        mpe.Stroke(linewidth=3.25, foreground=for_c),\n        mpe.Stroke(foreground=pe_ec, alpha=1, linewidth=4),\n        mpe.Normal(),\n    ]\n\n    # Plotting xGF\n\n    sns.lineplot(x=X, y=Y_for, color=for_c, ax=ax, zorder=3, path_effects=pe_for)\n\n    # Setting path effects for xGA line\n\n    if ag_c == \"#FFFFFF\":\n        pe_ec = for_c\n\n    else:\n        pe_ec = \"white\"\n\n    pe_ag = [\n        mpe.Stroke(linewidth=3.25, foreground=ag_c),\n        mpe.Stroke(foreground=pe_ec, alpha=1, linewidth=4),\n        mpe.Normal(),\n    ]\n\n    # Plotting xGA line\n\n    sns.lineplot(x=X, y=Y_ag, color=ag_c, ax=ax, zorder=3, path_effects=pe_ag)\n\n    # Changing colors if for color is white\n\n    if for_c == \"#FFFFFF\":\n        # Filling between lines\n\n        ax.fill_between(\n            X,\n            Y_ag,\n            Y_for,\n            where=Y_for &gt; Y_ag,\n            interpolate=True,\n            alpha=0.9,\n            zorder=2,\n            facecolor=for_c,\n            edgecolor=ag_c,\n            hatch=\"/////\",\n            lw=1,\n        )\n\n        # Setting path effect for legend\n\n        pe_for = [\n            mpe.Stroke(linewidth=3.25, foreground=for_c),\n            mpe.Stroke(foreground=ag_c, alpha=1, linewidth=4),\n            mpe.Normal(),\n        ]\n\n        # Setting the legend figures\n\n        xgf_fill = patches.Patch(\n            facecolor=for_c, edgecolor=ag_c, hatch=\"/////\", label=\"+xG DIFFERENTIAL\"\n        )\n\n        xgf_l = patches.Patch(facecolor=for_c, label=\"xG FOR\", edgecolor=ag_c)\n\n    else:\n        # Fill between the lines\n\n        ax.fill_between(\n            X,\n            Y_ag,\n            Y_for,\n            where=Y_for &gt; Y_ag,\n            interpolate=True,\n            alpha=0.9,\n            zorder=2,\n            color=for_c,\n        )\n\n        # Setting the legend figures\n\n        xgf_fill = patches.Patch(\n            facecolor=for_c, edgecolor=for_c, label=\"+xG DIFFERENTIAL\"\n        )\n\n        xgf_l = patches.Patch(facecolor=for_c, label=\"xG FOR\", edgecolor=for_c)\n\n    if ag_c == \"#FFFFFF\":\n        # Fill between the lines\n\n        ax.fill_between(\n            X,\n            Y_ag,\n            Y_for,\n            where=Y_ag &gt;= Y_for,\n            interpolate=True,\n            alpha=0.9,\n            zorder=2,\n            edgecolor=for_c,\n            facecolor=ag_c,\n            hatch=\"////\",\n            lw=1,\n        )\n\n        # Setting the legend figures\n\n        xga_fill = patches.Patch(\n            facecolor=ag_c, edgecolor=for_c, hatch=\"/////\", label=\"-xG DIFFERENTIAL\"\n        )\n\n        xga_l = patches.Patch(facecolor=ag_c, label=\"xG AGAINST\", edgecolor=for_c)\n\n    else:\n        # Fill between the lines\n\n        ax.fill_between(\n            X,\n            Y_ag,\n            Y_for,\n            where=Y_ag &gt;= Y_for,\n            interpolate=True,\n            alpha=0.9,\n            zorder=2,\n            color=ag_c,\n        )\n\n        # Setting the legend figures\n\n        xga_fill = patches.Patch(\n            facecolor=ag_c, edgecolor=ag_c, label=\"-xG DIFFERENTIAL\"\n        )\n\n        xga_l = patches.Patch(facecolor=ag_c, label=\"xG AGAINST\", edgecolor=ag_c)\n\n    # Setting y-axis major locator\n\n    ax.yaxis.set_major_locator(mtick.MultipleLocator(1))\n\n    # Summary stats\n\n    stats = df\n\n    gf = stats.gf.sum()\n\n    xgf = stats.xgf.sum()\n\n    ga = stats.ga.sum()\n\n    xga = stats.xga.sum()\n\n    # Subtitle text\n\n    textstr = f\"{gf} GF - {ga} GA | {round(xgf, 2)} xGF - {round(xga, 2)} xGA\"\n\n    props = dict(boxstyle=\"round\", facecolor=\"white\", alpha=0.9, lw=0.8, ec=\"white\")\n\n    ax.text(\n        0.5,\n        0.99,\n        textstr,\n        transform=ax.transAxes,\n        fontsize=7,\n        ha=\"center\",\n        va=\"center\",\n        bbox=props,\n    )\n\n    # Legend elements\n\n    legend_elements = [xgf_l, xga_l, xgf_fill, xga_fill]\n\n    ax.legend(\n        handles=legend_elements,\n        loc=\"upper center\",\n        bbox_to_anchor=(0.5, 0.96),\n        fontsize=5,\n        ncol=2,\n        borderpad=0.55,\n    )\n\n    # Setting x and y axes labels\n    x_labels = [28, 29, 30, 31]\n\n    if idx in x_labels:\n        ax.axes.set_xlabel(\"Game number\", fontsize=8)\n    else:\n        ax.axes.set_xlabel(\"\")\n\n    y_labels = [0, 4, 8, 12, 16, 20, 24, 28]\n\n    if idx in y_labels:\n        ax.axes.set_ylabel(f\" 3-game rolling avg. xG / 60\", fontsize=8)\n    else:\n        ax.axes.set_ylabel(\"\")\n\n    # Setting tick params font size\n    ax.tick_params(axis=\"both\", which=\"major\", labelsize=8)\n\n    # Setting the ax title\n    ax_title = f\"{row.team_name} | {row.points} points | {row.wins} - {row.losses} - {row.ot_losses}\"\n    ax.set_title(ax_title, fontsize=8, x=-0.085, y=1.03, horizontalalignment=\"left\")\n\n# Figure suptitle and subtitle\nfig_suptitle = \"3-game rolling average 5v5 chances created vs. allowed (per 60 minutes)\"\nfig.suptitle(\n    fig_suptitle,\n    x=0.01,\n    y=1.029,\n    fontsize=11,\n    fontweight=\"bold\",\n    horizontalalignment=\"left\",\n)\n\ntodays_date = dt.datetime.now().strftime(\"%Y-%m-%d\")\nsubtitle = f\"5v5 team xGF / 60 and xGA / 60 | 2024-25 season, as of {todays_date}\"\nfig.text(s=subtitle, x=0.01, y=1.0115, fontsize=10, horizontalalignment=\"left\")\n\n# Attribution\nattribution = f\"Data &amp; xG model @chickenandstats.com | Viz @chickenandstats.com\"\nfig.text(\n    s=attribution,\n    x=0.99,\n    y=-0.01,\n    fontsize=8,\n    horizontalalignment=\"right\",\n    style=\"italic\",\n)\n\nsavepath = Path(f\"./charts/5v5_rolling_xgf_xga_nhl.png\")\nfig.savefig(savepath, transparent=False, bbox_inches=\"tight\")\n</code></pre> <p></p>"},{"location":"guide/tutorials/rolling_xg/#individual-team","title":"Individual team","text":"<p>Plot light and dark mode for an individual team</p> <pre><code># Filter conditions\nteam = \"NSH\"\nyear = \"20242025\"\nstrengths = [\"5v5\"]\nsession = \"R\"\n</code></pre>"},{"location":"guide/tutorials/rolling_xg/#light-mode","title":"Light mode","text":"<pre><code># Getting the teams and standings data to iterate through\nteams = standings.team.unique().tolist()\nteam_names = dict(zip(standings.team, standings.team_name))\n\nwith plt.style.context(\"chickenstats\"):\n    fig, ax = plt.subplots(dpi=650, figsize=(8, 5))\n\n    # Getting df for plotting\n\n    df = get_xg_rolling_data(team_stats, year, session, team, strengths, window=3)\n\n    # Getting the Y data to plot\n\n    Y_for = df.rolling_xgf_p60.copy().reset_index(drop=True)\n    Y_ag = df.rolling_xga_p60.copy().reset_index(drop=True)\n\n    # Getting the X data to plot\n\n    X = pd.Series(range(1, max(df.game_num) + 1))\n\n    # Setting colors\n\n    colors = NHL_COLORS[team]\n\n    for_c = colors[\"GOAL\"]\n\n    ag_c = colors[\"SHOT\"]\n\n    # Setting path effects for xGF line\n\n    if for_c == \"#FFFFFF\":\n        pe_ec = ag_c\n\n    else:\n        pe_ec = \"white\"\n\n    pe_for = [\n        mpe.Stroke(linewidth=3.25, foreground=for_c),\n        mpe.Stroke(foreground=pe_ec, alpha=1, linewidth=4),\n        mpe.Normal(),\n    ]\n\n    # Plotting xGF\n\n    sns.lineplot(x=X, y=Y_for, color=for_c, ax=ax, zorder=3, path_effects=pe_for)\n\n    # Setting path effects for xGA line\n\n    if ag_c == \"#FFFFFF\":\n        pe_ec = for_c\n\n    else:\n        pe_ec = \"white\"\n\n    pe_ag = [\n        mpe.Stroke(linewidth=3.25, foreground=ag_c),\n        mpe.Stroke(foreground=pe_ec, alpha=1, linewidth=4),\n        mpe.Normal(),\n    ]\n\n    # Plotting xGA line\n\n    sns.lineplot(x=X, y=Y_ag, color=ag_c, ax=ax, zorder=3, path_effects=pe_ag)\n\n    # Changing colors if for color is white\n\n    if for_c == \"#FFFFFF\":\n        # Filling between lines\n\n        ax.fill_between(\n            X,\n            Y_ag,\n            Y_for,\n            where=Y_for &gt; Y_ag,\n            interpolate=True,\n            alpha=0.9,\n            zorder=2,\n            facecolor=for_c,\n            edgecolor=ag_c,\n            hatch=\"/////\",\n            lw=1,\n        )\n\n        # Setting path effect for legend\n\n        pe_for = [\n            mpe.Stroke(linewidth=3.25, foreground=for_c),\n            mpe.Stroke(foreground=ag_c, alpha=1, linewidth=4),\n            mpe.Normal(),\n        ]\n\n        # Setting the legend figures\n\n        xgf_fill = patches.Patch(\n            facecolor=for_c, edgecolor=ag_c, hatch=\"/////\", label=\"+xG DIFFERENTIAL\"\n        )\n\n        xgf_l = patches.Patch(facecolor=for_c, label=\"xG FOR\", edgecolor=for_c)\n\n    else:\n        # Fill between the lines\n\n        ax.fill_between(\n            X,\n            Y_ag,\n            Y_for,\n            where=Y_for &gt; Y_ag,\n            interpolate=True,\n            alpha=0.9,\n            zorder=2,\n            color=for_c,\n        )\n\n        # Setting the legend figures\n\n        xgf_fill = patches.Patch(\n            facecolor=for_c, edgecolor=for_c, label=\"+xG DIFFERENTIAL\"\n        )\n\n        xgf_l = patches.Patch(facecolor=for_c, label=\"xG FOR\", edgecolor=for_c)\n\n    if ag_c == \"#FFFFFF\":\n        # Fill between the lines\n\n        ax.fill_between(\n            X,\n            Y_ag,\n            Y_for,\n            where=Y_ag &gt;= Y_for,\n            interpolate=True,\n            alpha=0.9,\n            zorder=2,\n            edgecolor=for_c,\n            facecolor=ag_c,\n            hatch=\"////\",\n            lw=1,\n        )\n\n        # Setting the legend figures\n\n        xga_fill = patches.Patch(\n            facecolor=ag_c, edgecolor=for_c, hatch=\"/////\", label=\"-xG DIFFERENTIAL\"\n        )\n\n        xga_l = patches.Patch(facecolor=ag_c, label=\"xG AGAINST\", edgecolor=ag_c)\n\n    else:\n        # Fill between the lines\n\n        ax.fill_between(\n            X,\n            Y_ag,\n            Y_for,\n            where=Y_ag &gt;= Y_for,\n            interpolate=True,\n            alpha=0.9,\n            zorder=2,\n            color=ag_c,\n        )\n\n        # Setting the legend figures\n\n        xga_fill = patches.Patch(\n            facecolor=ag_c, edgecolor=ag_c, label=\"-xG DIFFERENTIAL\"\n        )\n\n        xga_l = patches.Patch(facecolor=ag_c, label=\"xG AGAINST\", edgecolor=ag_c)\n\n    # Setting y-axis major locator\n\n    ax.yaxis.set_major_locator(mtick.MultipleLocator(1))\n\n    # Summary stats\n\n    stats = df\n\n    gf = stats.gf.sum()\n\n    xgf = stats.xgf.sum()\n\n    ga = stats.ga.sum()\n\n    xga = stats.xga.sum()\n\n    # Legend elements\n\n    legend_elements = [xgf_l, xga_l, xgf_fill, xga_fill]\n\n    ax.legend(\n        handles=legend_elements,\n        loc=\"upper left\",\n        fontsize=8,\n        ncol=2,\n        borderpad=0.55,\n        framealpha=0,\n        edgecolor=\"white\",\n    )\n\n    ax.axes.set_xlabel(\"Game number\", fontsize=8)\n    ax.axes.set_ylabel(f\" 3-game rolling avg. xG / 60\", fontsize=8)\n\n    ax.xaxis.set_major_locator(ticker.MultipleLocator(5))\n    ax.xaxis.set_minor_locator(ticker.MultipleLocator(1))\n\n    ax.yaxis.set_major_locator(ticker.MultipleLocator(1))\n    ax.yaxis.set_minor_locator(ticker.MultipleLocator(0.25))\n\n    # Setting tick params font size\n    ax.tick_params(axis=\"both\", which=\"major\", labelsize=8)\n\n    standings_team = standings.loc[standings.team == team].iloc[0]\n\n    ax_title = f\"{standings_team.team_name}\"\n\n    # Setting the ax title\n    ax_title = f\"{ax_title}\"\n    ax.set_title(ax_title, fontsize=10, x=-0.05, y=1.05, horizontalalignment=\"left\")\n\n    subtitle_standings = f\"{standings_team.points} points ({standings_team.wins} - {standings_team.losses} - {standings_team.ot_losses})\"\n    subtitle_goals = f\"{gf} GF ({round(xgf, 2)} xGF) - {ga} GA ({round(xga, 2)} xGA)\"\n    ax_subtitle = f\"{subtitle_standings} | {subtitle_goals} at 5v5\"\n\n    ax.text(\n        s=ax_subtitle,\n        fontsize=9,\n        x=-0.05,\n        y=1.025,\n        horizontalalignment=\"left\",\n        transform=ax.transAxes,\n    )\n\n    attribution = f\"Data &amp; xG model @chickenandstats.com | Viz @chickenandstats.com\"\n    ax.text(\n        s=attribution,\n        fontsize=7,\n        x=1,\n        y=-0.15,\n        horizontalalignment=\"right\",\n        transform=ax.transAxes,\n        fontstyle=\"italic\",\n    )\n\n    savepath = Path(f\"./charts/5v5_rolling_xgf_xga_{team.lower()}.png\")\n    fig.savefig(savepath, transparent=False, bbox_inches=\"tight\")\n</code></pre>"},{"location":"guide/tutorials/rolling_xg/#dark-mode","title":"Dark mode","text":"<pre><code>team = \"NSH\"\nyear = \"20242025\"\nstrengths = [\"5v5\"]\nsession = \"R\"\n\n# Getting the teams and standings data to iterate through\nteams = standings.team.unique().tolist()\nteam_names = dict(zip(standings.team, standings.team_name))\n\nwith plt.style.context(\"chickenstats_dark\"):\n    fig, ax = plt.subplots(dpi=650, figsize=(8, 5))\n\n    # Getting df for plotting\n\n    df = get_xg_rolling_data(team_stats, year, session, team, strengths, window=3)\n\n    # Getting the Y data to plot\n\n    Y_for = df.rolling_xgf_p60.copy().reset_index(drop=True)\n    Y_ag = df.rolling_xga_p60.copy().reset_index(drop=True)\n\n    # Getting the X data to plot\n\n    X = pd.Series(range(1, max(df.game_num) + 1))\n\n    # Setting colors\n\n    colors = NHL_COLORS[team]\n\n    for_c = colors[\"GOAL\"]\n\n    ag_c = colors[\"SHOT\"]\n\n    # Setting path effects for xGF line\n\n    if for_c == \"#FFFFFF\":\n        pe_ec = ag_c\n\n    else:\n        pe_ec = \"white\"\n\n    pe_for = [\n        mpe.Stroke(linewidth=3.25, foreground=for_c),\n        mpe.Stroke(foreground=pe_ec, alpha=1, linewidth=4),\n        mpe.Normal(),\n    ]\n\n    # Plotting xGF\n\n    sns.lineplot(x=X, y=Y_for, color=for_c, ax=ax, zorder=3, path_effects=pe_for)\n\n    # Setting path effects for xGA line\n\n    if ag_c == \"#FFFFFF\":\n        pe_ec = for_c\n\n    else:\n        pe_ec = \"white\"\n\n    pe_ag = [\n        mpe.Stroke(linewidth=3.25, foreground=ag_c),\n        mpe.Stroke(foreground=pe_ec, alpha=1, linewidth=4),\n        mpe.Normal(),\n    ]\n\n    # Plotting xGA line\n\n    sns.lineplot(x=X, y=Y_ag, color=ag_c, ax=ax, zorder=3, path_effects=pe_ag)\n\n    # Changing colors if for color is white\n\n    if for_c == \"#FFFFFF\":\n        # Filling between lines\n\n        ax.fill_between(\n            X,\n            Y_ag,\n            Y_for,\n            where=Y_for &gt; Y_ag,\n            interpolate=True,\n            alpha=0.9,\n            zorder=2,\n            facecolor=for_c,\n            edgecolor=ag_c,\n            hatch=\"/////\",\n            lw=1,\n        )\n\n        # Setting path effect for legend\n\n        pe_for = [\n            mpe.Stroke(linewidth=3.25, foreground=for_c),\n            mpe.Stroke(foreground=ag_c, alpha=1, linewidth=4),\n            mpe.Normal(),\n        ]\n\n        # Setting the legend figures\n\n        xgf_fill = patches.Patch(\n            facecolor=for_c, edgecolor=\"white\", hatch=\"/////\", label=\"+xG DIFFERENTIAL\"\n        )\n\n        xgf_l = patches.Patch(facecolor=for_c, label=\"xG FOR\", edgecolor=\"white\")\n\n    else:\n        # Fill between the lines\n\n        ax.fill_between(\n            X,\n            Y_ag,\n            Y_for,\n            where=Y_for &gt; Y_ag,\n            interpolate=True,\n            alpha=0.9,\n            zorder=2,\n            color=for_c,\n        )\n\n        # Setting the legend figures\n\n        xgf_fill = patches.Patch(\n            facecolor=for_c, edgecolor=\"white\", label=\"+xG DIFFERENTIAL\"\n        )\n\n        xgf_l = patches.Patch(facecolor=for_c, label=\"xG FOR\", edgecolor=\"white\")\n\n    if ag_c == \"#FFFFFF\":\n        # Fill between the lines\n\n        ax.fill_between(\n            X,\n            Y_ag,\n            Y_for,\n            where=Y_ag &gt;= Y_for,\n            interpolate=True,\n            alpha=0.9,\n            zorder=2,\n            edgecolor=for_c,\n            facecolor=ag_c,\n            hatch=\"////\",\n            lw=1,\n        )\n\n        # Setting the legend figures\n\n        xga_fill = patches.Patch(\n            facecolor=ag_c, edgecolor=\"white\", hatch=\"/////\", label=\"-xG DIFFERENTIAL\"\n        )\n\n        xga_l = patches.Patch(facecolor=ag_c, label=\"xG AGAINST\", edgecolor=\"white\")\n\n    else:\n        # Fill between the lines\n\n        ax.fill_between(\n            X,\n            Y_ag,\n            Y_for,\n            where=Y_ag &gt;= Y_for,\n            interpolate=True,\n            alpha=0.9,\n            zorder=2,\n            color=ag_c,\n        )\n\n        # Setting the legend figures\n\n        xga_fill = patches.Patch(\n            facecolor=ag_c, edgecolor=\"white\", label=\"-xG DIFFERENTIAL\"\n        )\n\n        xga_l = patches.Patch(facecolor=ag_c, label=\"xG AGAINST\", edgecolor=\"white\")\n\n    # Setting y-axis major locator\n\n    ax.yaxis.set_major_locator(mtick.MultipleLocator(1))\n\n    # Summary stats\n\n    stats = df\n\n    gf = stats.gf.sum()\n\n    xgf = stats.xgf.sum()\n\n    ga = stats.ga.sum()\n\n    xga = stats.xga.sum()\n\n    # Legend elements\n\n    legend_elements = [xgf_l, xga_l, xgf_fill, xga_fill]\n\n    ax.legend(\n        handles=legend_elements,\n        loc=\"upper left\",\n        fontsize=8,\n        ncol=2,\n        borderpad=0.55,\n        framealpha=0,\n        edgecolor=\"white\",\n    )\n\n    ax.axes.set_xlabel(\"Game number\", fontsize=8)\n    ax.axes.set_ylabel(f\" 3-game rolling avg. xG / 60\", fontsize=8)\n\n    ax.xaxis.set_major_locator(ticker.MultipleLocator(5))\n    ax.xaxis.set_minor_locator(ticker.MultipleLocator(1))\n\n    ax.yaxis.set_major_locator(ticker.MultipleLocator(1))\n    ax.yaxis.set_minor_locator(ticker.MultipleLocator(0.25))\n\n    # Setting tick params font size\n    ax.tick_params(axis=\"both\", which=\"major\", labelsize=8)\n\n    standings_team = standings.loc[standings.team == team].iloc[0]\n\n    ax_title = f\"{standings_team.team_name}\"\n\n    # Setting the ax title\n    ax_title = f\"{ax_title}\"\n    ax.set_title(ax_title, fontsize=10, x=-0.05, y=1.05, horizontalalignment=\"left\")\n\n    subtitle_standings = f\"{standings_team.points} points ({standings_team.wins} - {standings_team.losses} - {standings_team.ot_losses})\"\n    subtitle_goals = f\"{gf} GF ({round(xgf, 2)} xGF) - {ga} GA ({round(xga, 2)} xGA)\"\n    ax_subtitle = f\"{subtitle_standings} | {subtitle_goals} at 5v5\"\n\n    ax.text(\n        s=ax_subtitle,\n        fontsize=9,\n        x=-0.05,\n        y=1.025,\n        horizontalalignment=\"left\",\n        transform=ax.transAxes,\n    )\n\n    attribution = f\"Data &amp; xG model @chickenandstats.com | Viz @chickenandstats.com\"\n    ax.text(\n        s=attribution,\n        fontsize=7,\n        x=1,\n        y=-0.15,\n        horizontalalignment=\"right\",\n        transform=ax.transAxes,\n        fontstyle=\"italic\",\n    )\n\n    savepath = Path(f\"./charts/5v5_rolling_xgf_xga_{team.lower()}_dark.png\")\n    fig.savefig(savepath, transparent=False, bbox_inches=\"tight\")\n</code></pre>"},{"location":"guide/tutorials/shot_maps/","title":"Tutorial for plotting data using the hockey-rink library","text":""},{"location":"guide/tutorials/shot_maps/#intro","title":"Intro","text":"<p>Use the <code>chickenstats</code> library to scrape play-by-play data and plot shot events using the hockey-rink library.</p> <p>Parts of this tutorial are optional and will be clearly marked as such. For help, or any questions, please don't hesitate to reach out to chicken@chickenandstats.com or @chickenandstats.com on Blue Sky.</p>"},{"location":"guide/tutorials/shot_maps/#housekeeping","title":"Housekeeping","text":""},{"location":"guide/tutorials/shot_maps/#import-dependencies","title":"Import dependencies","text":"<p>Import the dependencies we'll need for the guide</p> <pre><code>import pandas as pd\nimport numpy as np\n\nfrom chickenstats.chicken_nhl import Season, Scraper\nfrom chickenstats.chicken_nhl.info import NHL_COLORS\nfrom chickenstats.chicken_nhl.helpers import norm_coords\nimport chickenstats.utilities\n\nfrom hockey_rink import NHLRink\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom pathlib import Path\n</code></pre>"},{"location":"guide/tutorials/shot_maps/#pandas-options","title":"Pandas options","text":"<p>Sets different pandas options. This cell is optional</p> <pre><code>pd.set_option(\"display.max_columns\", None)\npd.set_option(\"display.max_rows\", 100)\n</code></pre>"},{"location":"guide/tutorials/shot_maps/#chickenstats-matplotlib-style","title":"Chickenstats matplotlib style","text":"<p>chickenstats.utilities includes a custom style package - this activates it. This cell is also optional</p> <pre><code>plt.style.use(\"chickenstats\")\n</code></pre>"},{"location":"guide/tutorials/shot_maps/#scrape-data","title":"Scrape data","text":""},{"location":"guide/tutorials/shot_maps/#schedule-and-game-ids","title":"Schedule and game IDs","text":"<p>Scrape the schedule and standings using the <code>Season</code> object. Then, create a list of game IDs to scrape</p> <pre><code>season = Season(2024)\n</code></pre> <pre><code>schedule = season.schedule(disable_progress_bar=True)\n</code></pre> <pre><code>standings = season.standings.copy(deep=True)\n</code></pre> <pre><code>game_ids = schedule.loc[schedule.game_state == \"OFF\"].game_id.tolist()\n</code></pre>"},{"location":"guide/tutorials/shot_maps/#play-by-play","title":"Play-by-play","text":"<p>Scrape the play-by-play data for the list of game IDs. First instantiate the <code>Scraper</code> object, then call the play_by_play attribute</p> <pre><code>scraper = Scraper(game_ids, disable_progress_bar=True)\n</code></pre> <pre><code>pbp = scraper.play_by_play\n</code></pre>"},{"location":"guide/tutorials/shot_maps/#stats","title":"Stats","text":"<p>Aggregate data using the <code>Scraper</code> object's built-in methods</p> <pre><code>scraper.prep_stats(level=\"season\", disable_progress_bar=True)\nstats = scraper.stats.reset_index(drop=True)\n</code></pre> <pre><code>scraper.prep_lines(level=\"season\", disable_progress_bar=True)\nlines = scraper.lines.reset_index(drop=True)\n</code></pre> <pre><code>scraper.prep_team_stats(level=\"season\", disable_progress_bar=True)\nteam_stats = scraper.team_stats.reset_index(drop=True)\n</code></pre>"},{"location":"guide/tutorials/shot_maps/#scatter-plots","title":"Scatter plots","text":""},{"location":"guide/tutorials/shot_maps/#drawing-the-rink","title":"Drawing the rink","text":"<p>Drawing the rink with the NHLRink class from the hockey-rink library</p> <pre><code>rink = NHLRink(rotation=90)\n</code></pre>"},{"location":"guide/tutorials/shot_maps/#filter-conditions","title":"Filter conditions","text":"<p>Set the team, strength state, minimum TOI, and maximum number of lines to plot, then filter the data</p> <pre><code>team = \"NSH\"\nstrength_state = \"5v5\"\ntoi_min = 12\nmax_lines = 3\n\nconds = np.logical_and.reduce(\n    [lines.team == team, lines.strength_state == strength_state, lines.toi &gt;= toi_min]\n)\n\nplot_lines = (\n    lines.loc[conds]\n    .sort_values(by=\"toi\", ascending=False)\n    .head(max_lines)\n    .reset_index(drop=True)\n)\n</code></pre>"},{"location":"guide/tutorials/shot_maps/#top-n-forward-line-combos","title":"Top-N forward line combos","text":"<p>Plot the top-N forward line combinations at the chosen strength state, from the prior cell</p> <pre><code># Setting overall figures\nfig, axes = plt.subplots(nrows=2, ncols=max_lines, dpi=650, figsize=(16, 8))\n\nfig.tight_layout(pad=1.5)\n\naxes = axes.reshape(-1)\n\nfor row, line in plot_lines.iterrows():\n    ax = axes[row]\n\n    if row &gt; 5:\n        ax_zone = \"dzone\"\n\n    else:\n        ax_zone = \"ozone\"\n\n    rink.draw(ax=ax, display_range=ax_zone)\n\n    shot_events = [\"MISS\", \"SHOT\", \"GOAL\"]\n\n    plot_conds = np.logical_and.reduce(\n        [\n            pbp.forwards == line.forwards,\n            pbp.forwards_api_id == line.forwards_api_id,\n            pbp.strength_state == strength_state,\n            pbp.event.isin(shot_events),\n        ]\n    )\n\n    plot_data = pbp.loc[plot_conds].reset_index(drop=True)\n\n    plot_data = norm_coords(\n        data=plot_data, norm_column=\"event_team\", norm_value=line.team\n    )\n\n    size_multiplier = 500\n\n    plot_data[\"pred_goal_size\"] = plot_data.pred_goal * size_multiplier\n\n    for shot_event in shot_events:\n        conds = np.logical_and(\n            plot_data.forwards_api_id == line.forwards_api_id,\n            plot_data.event == shot_event,\n        )\n\n        plot_data2 = plot_data.loc[conds]\n\n        if plot_data2.empty:\n            continue\n\n        colors = NHL_COLORS[plot_data2.iloc[0].event_team]\n\n        facecolor = colors[shot_event]\n\n        if shot_event == \"MISS\" or shot_event == \"SHOT\":\n            edgecolor = \"#FFFFFF\"\n\n        elif shot_event == \"GOAL\":\n            if facecolor == \"#FFFFFF\":\n                edgecolor = colors[\"SHOT\"]\n\n            else:\n                edgecolor = \"#FFFFFF\"\n\n        rink.plot_fn(\n            sns.scatterplot,\n            data=plot_data2,\n            x=\"norm_coords_x\",\n            y=\"norm_coords_y\",\n            color=facecolor,\n            edgecolor=edgecolor,\n            lw=0.75,\n            s=plot_data2.pred_goal_size,\n            # sizes=(0, size_multiplier),\n            size_norm=(0, size_multiplier),\n            zorder=100,\n            alpha=0.75,\n            ax=ax,\n        )\n\n    ax.set_title(\n        f\"{line.forwards}\", x=0.5, y=1.01, ha=\"center\", fontweight=\"bold\", fontsize=10\n    )\n\n\nfor row, line in plot_lines.iterrows():\n    row = row + max_lines\n\n    ax = axes[row]\n\n    if row &gt; max_lines - 1:\n        ax_zone = \"dzone\"\n\n    else:\n        ax_zone = \"ozone\"\n\n    rink.draw(ax=ax, display_range=ax_zone)\n\n    shot_events = [\"MISS\", \"SHOT\", \"GOAL\"]\n\n    plot_conds = np.logical_and.reduce(\n        [\n            pbp.opp_forwards == line.forwards,\n            pbp.opp_forwards_api_id == line.forwards_api_id,\n            pbp.strength_state == strength_state,\n            pbp.event.isin(shot_events),\n        ]\n    )\n\n    plot_data = pbp.loc[plot_conds].reset_index(drop=True)\n\n    plot_data = norm_coords(\n        data=plot_data, norm_column=\"event_team\", norm_value=line.team\n    )\n\n    size_multiplier = 500\n\n    plot_data[\"pred_goal_size\"] = plot_data.pred_goal * size_multiplier\n\n    for shot_event in shot_events:\n        conds = np.logical_and(\n            plot_data.opp_forwards_api_id == line.forwards_api_id,\n            plot_data.event == shot_event,\n        )\n\n        plot_data2 = plot_data.loc[conds]\n\n        if plot_data2.empty:\n            continue\n\n        colors = NHL_COLORS[plot_data2.iloc[0].opp_team]\n\n        facecolor = colors[shot_event]\n\n        if shot_event == \"MISS\" or shot_event == \"SHOT\":\n            edgecolor = \"#FFFFFF\"\n\n        elif shot_event == \"GOAL\":\n            if facecolor == \"#FFFFFF\":\n                edgecolor = colors[\"SHOT\"]\n\n            else:\n                edgecolor = \"#FFFFFF\"\n\n        rink.plot_fn(\n            sns.scatterplot,\n            data=plot_data2,\n            x=\"norm_coords_x\",\n            y=\"norm_coords_y\",\n            color=facecolor,\n            edgecolor=edgecolor,\n            lw=0.75,\n            s=plot_data2.pred_goal_size,\n            # sizes=(0, size_multiplier),\n            size_norm=(0, size_multiplier),\n            zorder=100,\n            alpha=0.75,\n            ax=ax,\n        )\n\n\nfig_title = \"Nashville forward lines aren't converting 5v5 scoring chances\"\n\nfig.suptitle(fig_title, x=0.5, y=1.1, fontweight=\"bold\", fontsize=14)\n\nsubtitle = f\"NSH top-{max_lines} forward line combinations by 5v5 TOI | 5v5 unblocked shot attempts for &amp; against, sized for xG\"\nfig.text(s=subtitle, x=0.5, y=1.05, fontsize=12, ha=\"center\")\n\nattribution = \"Data &amp; xG model @chickenandstats | Viz @chickenandstats\"\nfig.text(s=attribution, x=0.95, y=-0.02, fontsize=12, ha=\"right\", style=\"italic\")\n\nsavepath = Path(f\"./charts/{team}_5v5_lines.png\")\nfig.savefig(savepath, transparent=False, bbox_inches=\"tight\")\n</code></pre> <p></p>"},{"location":"guide/tutorials/shot_maps/#contour-plots","title":"Contour plots","text":""},{"location":"guide/tutorials/shot_maps/#drawing-the-rink_1","title":"Drawing the rink","text":"<p>Drawing the rink with the NHLRink class from the hockey-rink library</p> <pre><code>rink = NHLRink(rotation=90)\n</code></pre>"},{"location":"guide/tutorials/shot_maps/#filter-conditions_1","title":"Filter conditions","text":"<p>Set the team, strength state, minimum TOI, and maximum number of players to plot, then filter the data</p> <pre><code>team = \"NSH\"\nstrength_states = [\"5v4\", \"5v3\", \"4v3\"]\npositions = [\"L\", \"C\", \"R\", \"L/R\", \"C/R\", \"R/L\", \"R/C\"]\ntoi_min = 5\nmax_players = 6\ngroup_columns = [\"player\", \"api_id\", \"team\"]  # \"strength_state\"]\n\n\nconds = np.logical_and.reduce(\n    [\n        stats.team == team,\n        stats.strength_state.isin(strength_states),\n        stats.position.isin(positions),\n        stats.toi &gt;= toi_min,\n    ]\n)\n\nplot_stats = (\n    stats.loc[conds]\n    .groupby(group_columns, as_index=False)\n    .agg({\"ixg\": \"sum\", \"g\": \"sum\", \"toi\": \"sum\"})\n    .sort_values(by=\"toi\", ascending=False)\n    .head(max_players)\n    .reset_index(drop=True)\n)\n</code></pre>"},{"location":"guide/tutorials/shot_maps/#top-n-forward-shooters","title":"Top-N forward shooters","text":"<p>Plot the top-N forwards' xG using the hockey-rink library and seaborn's kdeplot</p> <pre><code>cmap = \"rocket_r\"\nweights = \"pred_goal\"\n\nfig, axes = plt.subplots(nrows=2, ncols=int(max_players / 2), dpi=650, figsize=(12, 8))\n\nfig.tight_layout(pad=1.5)\n\naxes = axes.reshape(-1)\n\nfor row, player in plot_stats.iterrows():\n    ax = axes[row]\n\n    rink.draw(ax=ax, display_range=\"ozone\")\n\n    shot_events = [\"MISS\", \"SHOT\", \"GOAL\"]\n\n    plot_conds = np.logical_and.reduce(\n        [\n            pbp.player_1 == player.player,\n            pbp.player_1_api_id == player.api_id,\n            pbp.strength_state.isin(strength_states),\n            pbp.event.isin(shot_events),\n        ]\n    )\n\n    plot_data = pbp.loc[plot_conds].reset_index(drop=True)\n\n    plot_data = norm_coords(\n        data=plot_data, norm_column=\"player_1_api_id\", norm_value=player.api_id\n    )\n\n    rink.plot_fn(\n        sns.kdeplot,\n        data=plot_data,\n        x=\"norm_coords_x\",\n        y=\"norm_coords_y\",\n        cmap=cmap,\n        fill=True,\n        levels=12,\n        weights=plot_data[weights],\n        zorder=100,\n        alpha=0.75,\n        ax=ax,\n        legend=True,\n    )\n\n    rink.plot_fn(\n        sns.kdeplot,\n        data=plot_data,\n        x=\"norm_coords_x\",\n        y=\"norm_coords_y\",\n        cmap=cmap,\n        fill=False,\n        levels=12,\n        linewidths=2,\n        weights=plot_data[weights],\n        zorder=110,\n        alpha=1,\n        ax=ax,\n    )\n\n    ax.set_title(\n        f\"{player.player}\", x=0.5, y=1.01, ha=\"center\", fontweight=\"bold\", fontsize=10\n    )\n\n\nsave_path = Path(f\"./charts/{team}_top_{max_players}_pp.png\")\n\nfig.savefig(save_path, transparent=False, bbox_inches=\"tight\")\n</code></pre> <p></p>"},{"location":"reference/reference/","title":"Reference","text":"<p>Home of in-depth explanations and debugging assistance. Navigate using the links below. For more detailed walk-throughs or examples, please consult the  User Guide.</p> <p>You can also find reference materials for non-public class methods available from objects in <code>chickenstats.chicken_nhl.scrape</code>. Nested functions for munging raw data from evolving-hockey.com can be found within <code>chickenstats.evolving_hockey.base</code> and <code>chickenstats.evolving_hockey.stats</code>.</p> <p>For the xG reference, or for questions about the underlying research &amp; data, please see  xG Model.</p>"},{"location":"reference/reference/#modules","title":"Modules","text":"<ul> <li> <p> <code>chicken_nhl</code></p> <p>Scrape data from official NHL endpoints</p> <p> Read more</p> </li> <li> <p> <code>evolving_hockey</code></p> <p>Munge data from Evolving Hockey</p> <p> Read more</p> </li> </ul>"},{"location":"reference/reference/#fancy-stats","title":"Fancy stats","text":"<ul> <li> <p> xG model</p> <p>Expected Goals (xG) model</p> <p> Read more</p> </li> <li> <p> Score and venue adjustments</p> <p>Adjusting corsi and fenwick events</p> <p> Read more</p> </li> <li> <p> Danger and high-danger</p> <p>Tagging danger and high-danger scoring chances</p> <p> Read more</p> </li> </ul>"},{"location":"reference/chicken_nhl/scrape/","title":"chicken_nhl.scrape","text":"<p>Reference materials for <code>chickenstats.chicken_nhl.scrape</code>. <code>Scraper</code>, <code>Season</code>, and <code>Game</code>  account for most of the functionality for <code>chickenstats.chicken_nhl</code>.</p> <p>For more detailed walk-throughs or examples, please consult the  User Guide</p>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper","title":"Scraper","text":"<p>Class instance for scraping play-by-play and other data for NHL games.</p> <p>Parameters:</p> Name Type Description Default <code>game_ids</code> <code>list[str | float | int] | Series | str | float | int</code> <p>List of 10-digit game identifier, e.g., <code>[2023020001, 2023020002, 2023020003]</code></p> required <code>disable_progress_bar</code> <code>bool</code> <p>If true, disables the progress bar</p> <code>False</code> <p>Attributes:</p> Name Type Description <code>game_ids</code> <code>list</code> <p>Game IDs that the Scraper will access, e.g., <code>[2023020001, 2023020002, 2023020003]</code></p> <p>Examples:</p> <p>First, instantiate the Scraper object</p> <pre><code>&gt;&gt;&gt; game_ids = list(range(2023020001, 2023020011))\n&gt;&gt;&gt; scraper = Scraper(game_ids)\n</code></pre> <p>Scrape play-by-play information</p> <pre><code>&gt;&gt;&gt; pbp = scraper.play_by_play\n</code></pre> <p>The object stores information from each component of the play-by-play data</p> <pre><code>&gt;&gt;&gt; shifts = scraper.shifts\n&gt;&gt;&gt; rosters = scraper.rosters\n&gt;&gt;&gt; changes = scraper.changes\n</code></pre> <p>Access data from API or HTML endpoints, or both</p> <pre><code>&gt;&gt;&gt; api_events = scraper.api_events\n&gt;&gt;&gt; api_rosters = scraper.api_rosters\n&gt;&gt;&gt; html_events = scraper.html_events\n&gt;&gt;&gt; html_rosters = scraper.html_rosters\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>class Scraper:\n    \"\"\"Class instance for scraping play-by-play and other data for NHL games.\n\n    Parameters:\n        game_ids (list[str | float | int] | pd.Series | str | float | int):\n            List of 10-digit game identifier, e.g., `[2023020001, 2023020002, 2023020003]`\n        disable_progress_bar (bool):\n            If true, disables the progress bar\n\n    Attributes:\n        game_ids (list):\n            Game IDs that the Scraper will access, e.g., `[2023020001, 2023020002, 2023020003]`\n\n    Examples:\n        First, instantiate the Scraper object\n        &gt;&gt;&gt; game_ids = list(range(2023020001, 2023020011))\n        &gt;&gt;&gt; scraper = Scraper(game_ids)\n\n        Scrape play-by-play information\n        &gt;&gt;&gt; pbp = scraper.play_by_play\n\n        The object stores information from each component of the play-by-play data\n        &gt;&gt;&gt; shifts = scraper.shifts\n        &gt;&gt;&gt; rosters = scraper.rosters\n        &gt;&gt;&gt; changes = scraper.changes\n\n        Access data from API or HTML endpoints, or both\n        &gt;&gt;&gt; api_events = scraper.api_events\n        &gt;&gt;&gt; api_rosters = scraper.api_rosters\n        &gt;&gt;&gt; html_events = scraper.html_events\n        &gt;&gt;&gt; html_rosters = scraper.html_rosters\n\n    \"\"\"\n\n    def __init__(\n        self, game_ids: list[str | float | int] | pd.Series | str | float | int, disable_progress_bar: bool = False\n    ):\n        \"\"\"Instantiates a Scraper object for a given game ID or list / list-like object of game IDs.\"\"\"\n        game_ids = convert_to_list(game_ids, \"game ID\")\n\n        self.disable_progress_bar = False\n\n        if disable_progress_bar:\n            self.disable_progress_bar = True\n\n        self.game_ids: list = game_ids\n        self._scraped_games: list = []\n        self._bad_games: list = []\n\n        self._requests_session = ChickenSession()\n\n        self._api_events: list = []\n        self._scraped_api_events: list = []\n\n        self._api_rosters: list = []\n        self._scraped_api_rosters: list = []\n\n        self._changes: list = []\n        self._scraped_changes: list = []\n\n        self._html_events: list = []\n        self._scraped_html_events: list = []\n\n        self._html_rosters: list = []\n        self._scraped_html_rosters: list = []\n\n        self._rosters: list = []\n        self._scraped_rosters: list = []\n\n        self._shifts: list = []\n        self._scraped_shifts: list = []\n\n        self._play_by_play: list = []\n        self._play_by_play_ext: list = []\n        self._scraped_play_by_play: list = []\n\n        self._ind_stats: pd.DataFrame = pd.DataFrame()\n        self._oi_stats: pd.DataFrame = pd.DataFrame()\n        self._zones: pd.DataFrame = pd.DataFrame()\n        self._stats: pd.DataFrame = pd.DataFrame()\n        self._stats_levels: dict = {\"level\": None, \"score\": None, \"teammates\": None, \"opposition\": None}\n\n        self._lines: pd.DataFrame = pd.DataFrame()\n        self._lines_levels: dict = {\n            \"position\": None,\n            \"level\": None,\n            \"score\": None,\n            \"teammates\": None,\n            \"opposition\": None,\n        }\n\n        self._team_stats: pd.DataFrame = pd.DataFrame()\n        self._team_stats_levels: dict = {\"level\": None, \"score\": None, \"strengths\": None, \"opposition\": None}\n\n    def _scrape(\n        self,\n        scrape_type: Literal[\n            \"api_events\", \"api_rosters\", \"changes\", \"html_events\", \"html_rosters\", \"play_by_play\", \"shifts\", \"rosters\"\n        ],\n    ) -&gt; None:\n        \"\"\"Method for scraping any data. Iterates through a list of game IDs using Game objects.\n\n        For more information and usage, see https://chickenstats.com/latest/contribute/contribute/.\n\n        Examples:\n            First, instantiate the Scraper object\n            &gt;&gt;&gt; game_ids = list(range(2023020001, 2023020011))\n            &gt;&gt;&gt; scraper = Scraper(game_ids)\n\n            Before scraping the data, any of the storage objects are None\n            &gt;&gt;&gt; scraper._shifts  # Returns None\n            &gt;&gt;&gt; scraper._play_by_play  # Also returns None\n\n            You can use the `_scrape` method to get any data\n            &gt;&gt;&gt; scraper._scrape(\"html_events\")\n            &gt;&gt;&gt; scraper._html_events  # Returns data as a list\n            &gt;&gt;&gt; scraper.html_events  # Returns data as a Pandas DataFrame\n        \"\"\"\n        pbar_stubs = {\n            \"api_events\": \"API events\",\n            \"api_rosters\": \"API rosters\",\n            \"changes\": \"changes\",\n            \"html_events\": \"HTML events\",\n            \"html_rosters\": \"HTML rosters\",\n            \"play_by_play\": \"play-by-play data\",\n            \"shifts\": \"shifts\",\n            \"rosters\": \"rosters\",\n        }\n\n        if scrape_type == \"api_events\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_api_events]\n\n        if scrape_type == \"api_rosters\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_api_rosters]\n\n        if scrape_type == \"changes\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_changes]\n\n        if scrape_type == \"html_events\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_html_events]\n\n        if scrape_type == \"html_rosters\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_html_rosters]\n\n        if scrape_type == \"play_by_play\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_play_by_play]\n\n        if scrape_type == \"shifts\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_rosters]\n\n        if scrape_type == \"rosters\":\n            game_ids = [x for x in self.game_ids if x not in self._scraped_rosters]\n\n        with self._requests_session as s:\n            with ChickenProgress(disable=self.disable_progress_bar) as progress:\n                pbar_stub = pbar_stubs[scrape_type]\n\n                pbar_message = f\"Downloading {pbar_stub} for {game_ids[0]}...\"\n\n                game_task = progress.add_task(pbar_message, total=len(game_ids))\n\n                for idx, game_id in enumerate(game_ids):\n                    game = Game(game_id, s)\n\n                    if scrape_type == \"api_events\":\n                        if game_id in self._scraped_api_events:  # Not covered by tests\n                            continue\n\n                        else:\n                            if game_id in self._scraped_api_rosters:  # Not covered by tests\n                                game._api_rosters = [x for x in self._api_rosters if x[\"game_id\"] == game_id]\n\n                            else:\n                                self._api_rosters.extend(game.api_rosters)\n                                self._scraped_api_rosters.append(game_id)\n\n                            self._api_events.extend(game.api_events)\n                            self._scraped_api_events.append(game_id)\n\n                    if scrape_type == \"api_rosters\":\n                        if game_id in self._scraped_api_rosters:  # Not covered by tests\n                            continue\n\n                        else:\n                            self._api_rosters.extend(game.api_rosters)\n                            self._scraped_api_rosters.append(game_id)\n\n                    if scrape_type == \"changes\":\n                        if game_id in self._scraped_changes:  # Not covered by tests\n                            continue\n\n                        else:\n                            if game_id in self._scraped_rosters:  # Not covered by tests\n                                game._rosters = [x for x in self._rosters if x[\"game_id\"] == game_id]\n\n                            else:\n                                if game_id in self._scraped_html_rosters:\n                                    game._html_rosters = [x for x in self._html_rosters if x[\"game_id\"] == game_id]\n\n                                else:\n                                    self._html_rosters.extend(game.html_rosters)\n                                    self._scraped_html_rosters.append(game_id)\n\n                                if game_id in self._scraped_api_rosters:\n                                    game._api_rosters = [x for x in self._api_rosters if x[\"game_id\"] == game_id]\n\n                                else:\n                                    self._api_rosters.extend(game.api_rosters)\n                                    self._scraped_api_rosters.append(game_id)\n\n                                self._rosters.extend(game.rosters)\n                                self._scraped_rosters.append(game_id)\n\n                            if game_id in self._scraped_shifts:  # Not covered by tests\n                                game._shifts = [x for x in self._shifts if x[\"game_id\"] == game_id]\n\n                            else:\n                                self._shifts.extend(game.shifts)\n                                self._scraped_shifts.append(game_id)\n\n                            self._changes.extend(game.changes)\n                            self._scraped_changes.append(game_id)\n\n                    if scrape_type == \"html_events\":\n                        if game_id in self._scraped_html_events:  # Not covered by tests\n                            continue\n\n                        else:\n                            if game_id in self._scraped_html_rosters:  # Not covered by tests\n                                game._html_rosters = [x for x in self._html_rosters if x[\"game_id\"] == game_id]\n\n                            else:\n                                self._html_rosters.extend(game.html_rosters)\n                                self._scraped_html_rosters.append(game_id)\n\n                            self._html_events.extend(game.html_events)\n                            self._scraped_html_events.append(game_id)\n\n                    if scrape_type == \"html_rosters\":\n                        if game_id in self._scraped_html_rosters:  # Not covered by tests\n                            continue\n\n                        else:\n                            self._html_rosters.extend(game.html_rosters)\n                            self._scraped_html_rosters.append(game_id)\n\n                    if scrape_type == \"play_by_play\":\n                        if game_id in self._scraped_play_by_play:  # Not covered by tests\n                            continue\n\n                        else:\n                            if game_id in self._scraped_rosters:  # Not covered by tests\n                                game._rosters = [x for x in self._rosters if x[\"game_id\"] == game_id]\n\n                            else:\n                                if game_id in self._scraped_html_rosters:  # Not covered by tests\n                                    game._html_rosters = [x for x in self._html_rosters if x[\"game_id\"] == game_id]\n\n                                else:\n                                    self._html_rosters.extend(game.html_rosters)\n                                    self._scraped_html_rosters.append(game_id)\n\n                                if game_id in self._scraped_api_rosters:  # Not covered by tests\n                                    game._api_rosters = [x for x in self._api_rosters if x[\"game_id\"] == game_id]\n\n                                else:\n                                    self._api_rosters.extend(game.api_rosters)\n                                    self._scraped_api_rosters.append(game_id)\n\n                                self._rosters.extend(game.rosters)\n                                self._scraped_rosters.append(game_id)\n\n                            if game_id in self._scraped_changes:  # Not covered by tests\n                                game._changes = [x for x in self._changes if x[\"game_id\"] == game_id]\n\n                            else:\n                                if game_id in self._scraped_shifts:  # Not covered by tests\n                                    game._shifts = [x for x in self._shifts if x[\"game_id\"] == game_id]\n\n                                else:\n                                    self._shifts.extend(game.shifts)\n                                    self._scraped_shifts.append(game_id)\n\n                                self._changes.extend(game.changes)\n                                self._scraped_changes.append(game_id)\n\n                            if game_id in self._scraped_html_events:  # Not covered by tests\n                                game._html_events = [x for x in self._html_events if x[\"game_id\"] == game_id]\n\n                            else:\n                                self._html_events.extend(game.html_events)\n                                self._scraped_html_events.append(game_id)\n\n                            if game_id in self._scraped_api_events:  # Not covered by tests\n                                game._api_events = [x for x in self._api_events if x[\"game_id\"] == game_id]\n\n                            else:\n                                self._api_events.extend(game.api_events)\n                                self._scraped_api_events.append(game_id)\n\n                            self._play_by_play.extend(game.play_by_play)\n                            self._play_by_play_ext.extend(game.play_by_play_ext)\n                            self._scraped_play_by_play.append(game_id)\n\n                    if scrape_type == \"rosters\":\n                        if game_id in self._scraped_rosters:  # Not covered by tests\n                            continue\n\n                        else:\n                            if game_id in self._scraped_html_rosters:  # Not covered by tests\n                                game._html_rosters = [x for x in self._html_rosters if x[\"game_id\"] == game_id]\n\n                            else:\n                                self._html_rosters.extend(game.html_rosters)\n                                self._scraped_html_rosters.append(game_id)\n\n                            if game_id in self._scraped_api_rosters:  # Not covered by tests\n                                game._api_rosters = [x for x in self._api_rosters if x[\"game_id\"] == game_id]\n\n                            else:\n                                self._api_rosters.extend(game.api_rosters)\n                                self._scraped_api_rosters.append(game_id)\n\n                            self._rosters.extend(game.rosters)\n                            self._scraped_rosters.append(game_id)\n\n                    if scrape_type == \"shifts\":\n                        if game_id in self._scraped_shifts:  # Not covered by tests\n                            continue\n\n                        else:\n                            if game_id in self._scraped_rosters:\n                                game._rosters = [x for x in self._rosters if x[\"game_id\"] == game_id]\n\n                            else:\n                                if game_id in self._scraped_html_rosters:  # Not covered by tests\n                                    game._html_rosters = [x for x in self._html_rosters if x[\"game_id\"] == game_id]\n                                else:\n                                    self._html_rosters.extend(game.html_rosters)\n                                    self._scraped_html_rosters.append(game_id)\n\n                                if game_id in self._scraped_api_rosters:  # Not covered by tests\n                                    game._api_rosters = [x for x in self._api_rosters if x[\"game_id\"] == game_id]\n                                else:\n                                    self._api_rosters.extend(game.api_rosters)\n                                    self._scraped_api_rosters.append(game_id)\n\n                                self._rosters.extend(game.rosters)\n                                self._scraped_rosters.append(game_id)\n\n                            self._shifts.extend(game.shifts)\n                            self._scraped_shifts.append(game_id)\n\n                    if game_id != self.game_ids[-1]:\n                        pbar_message = f\"Downloading {pbar_stub} for {self.game_ids[idx + 1]}...\"\n\n                    else:\n                        pbar_message = f\"Finished downloading {pbar_stub}\"\n\n                    progress.update(game_task, description=pbar_message, advance=1, refresh=True)\n\n    def add_games(self, game_ids: list[int | str | float] | int) -&gt; None:\n        \"\"\"Method to add games to the Scraper.\n\n        Parameters:\n            game_ids (list or int or float or str):\n                List-like object of or single 10-digit game identifier, e.g., 2023020001\n\n        Examples:\n            Instantiate Scraper\n            &gt;&gt;&gt; game_ids = list(range(2023020001, 2023020011))\n            &gt;&gt;&gt; scraper = Scraper(game_ids)\n\n            Scrape something\n            &gt;&gt;&gt; scraper.play_by_play\n\n            Add games\n            &gt;&gt;&gt; scraper.add_games(2023020011)\n\n            Scrape some more\n            &gt;&gt;&gt; scraper.play_by_play\n\n\n        \"\"\"\n        if isinstance(game_ids, str | int):  # Not covered by tests\n            game_ids = [game_ids]\n\n        game_ids = [int(x) for x in game_ids if x not in self.game_ids]  # Not covered by tests\n\n        self.game_ids.extend(game_ids)  # Not covered by tests\n\n    @property\n    def api_events(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas DataFrame of events scraped from API endpoint.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_idx (int):\n                Index ID for event, e.g., 689\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            event_code (str):\n                Code to indicate type of event that occured, e.g., 505\n            description (str | None):\n                Description of the event, e.g., None\n            coords_x (int):\n                x-coordinates where the event occurred, e.g, -96\n            coords_y (int):\n                y-coordinates where the event occurred, e.g., 11\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., D\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_1_type (str):\n                Type of player, e.g., GOAL SCORER\n            player_1_api_id (int):\n                NHL API ID for player_1, e.g., 8471469\n            player_1_team_jersey (str):\n                Combination of team and jersey used for player identification purposes, e.g, NSH35\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_2_type (str | None):\n                Type of player, e.g., None\n            player_2_api_id (str | None):\n                NHL API ID for player_2, e.g., None\n            player_2_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            player_3_type (str | None):\n                Type of player, e.g., None\n            player_3_api_id (str | None):\n                NHL API ID for player_3, e.g., None\n            player_3_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            strength (int):\n                Code to indication strength state, e.g., 1560\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            miss_reason (str | None):\n                Reason shot missed, e.g., None\n            opp_goalie (str | None):\n                Opposing goalie, e.g., None\n            opp_goalie_eh_id (str | None):\n                Evolving Hockey ID for opposing goalie, e.g., None\n            opp_goalie_api_id (str | None):\n                NHL API ID for opposing goalie, e.g., None\n            opp_goalie_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            event_team_id (int):\n                NHL ID for the event team, e.g., 18\n            stoppage_reason (str | None):\n                Reason the play was stopped, e.g., None\n            stoppage_reason_secondary (str | None):\n                Secondary reason play was stopped, e.g., None\n            penalty_type (str | None):\n                Type of penalty taken, e.g., None\n            penalty_reason (str | None):\n                Reason for the penalty, e.g., None\n            penalty_duration (int | None):\n                Duration of the penalty, e.g., None\n            home_team_defending_side (str):\n                Side of the ice the home team is defending, e.g., right\n            version (int):\n                Increases with simultaneous events, used for combining events in the scraper, e.g., 1\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.api_events\n\n        \"\"\"\n        if not self._api_events:\n            self._scrape(\"api_events\")\n\n        return pd.DataFrame(self._api_events)\n\n    @property\n    def api_rosters(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of players scraped from API endpoint.\n\n        Returns:\n            Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            api_id (str):\n                NHL API ID for the player, e.g., 8476887\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            position (str):\n                Player's position, e.g., L\n            first_name (str):\n                Player's first name, e.g., FILIP\n            last_name (str):\n                Player's last name, e.g., FORSBERG\n            headshot_url (str):\n                URL to retreive player's headshot\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.api_rosters\n        \"\"\"\n        if not self._api_rosters:\n            self._scrape(\"api_rosters\")\n\n        return pd.DataFrame(self._api_rosters)\n\n    @property\n    def changes(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of changes scraped from HTML shifts &amp; roster endpoints.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., CHANGE\n            event_type (str):\n                Type of change that occurred, e.g., AWAY CHANGE\n            description (str | None):\n                Description of the event, e.g.,\n                PLAYERS ON: MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n                / PLAYERS OFF: YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            change_on_count (int):\n                Number of players on, e.g., 4\n            change_off_count (int):\n                Number of players off, e.g., 4\n            change_on (str):\n                Names of players on, e.g., MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n            change_on_jersey (str):\n                Combination of jerseys and numbers for the players on, e.g., NSH14, NSH19, NSH64, NSH95\n            change_on_eh_id (str):\n                Evolving Hockey IDs of the players on, e.g.,\n                MATTIAS.EKHOLM, CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE\n            change_on_positions (str):\n                Positions of the players on, e.g., D, C, C, C\n            change_off (str):\n                Names of players off, e.g., YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            change_off_jersey (str):\n                Combination of jerseys and numbers for the players off, e.g., NSH7, NSH9, NSH33, NSH92\n            change_off_eh_id (str):\n                Evolving Hockey IDs of the players off, e.g.,\n                YANNICK.WEBER, FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN\n            change_off_positions (str):\n                Positions of the players off, e.g., D, L, L, C\n            change_on_forwards_count (int):\n                Number of forwards on, e.g.,\n            change_off_forwards_count (int):\n                Number of forwards off, e.g., 3\n            change_on_forwards (str):\n                Names of forwards on, e.g., CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n            change_on_forwards_jersey (str):\n                Combination of jerseys and numbers for the forwards on, e.g., NSH19, NSH64, NSH95\n            change_on_forwards_eh_id (str):\n                Evolving Hockey IDs of the forwards on, e.g.,\n                CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE\n            change_off_forwards (str):\n                Names of forwards off, e.g., FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            change_off_forwards_jersey (str):\n                Combination of jerseys and numbers for the forwards off, e.g., NSH9, NSH33, NSH92\n            change_off_forwards_eh_id (str):\n                Evolving Hockey IDs of the forwards off, e.g.,\n                FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN\n            change_on_defense_count (int):\n                Number of defense on, e.g., 1\n            change_off_defense_count (int):\n                Number of defense off, e.g., 1\n            change_on_defense (str):\n                Names of defense on, e.g., MATTIAS EKHOLM\n            change_on_defense_jersey (str):\n                Combination of jerseys and numbers for the defense on, e.g., NSH14\n            change_on_defense_eh_id (str):\n                Evolving Hockey IDs of the defense on, e.g., MATTIAS.EKHOLM\n            change_off_defense (str):\n                Names of defense off, e.g., YANNICK WEBER\n            change_off_defense_jersey (str):\n                Combination of jerseys and numbers for the defense off, e.g., NSH7\n            change_off_defebse_eh_id (str):\n                Evolving Hockey IDs of the defebse off, e.g., YANNICK.WEBER\n            change_on_goalie_count (int):\n                Number of goalies on, e.g., 0\n            change_off_goalie_count (int):\n                Number of goalies off, e.g., 0\n            change_on_goalies (str):\n                Names of goalies on, e.g., None\n            change_on_goalies_jersey (str):\n                Combination of jerseys and numbers for the goalies on, e.g., None\n            change_on_goalies_eh_id (str):\n                Evolving Hockey IDs of the goalies on, e.g., None\n            change_off_goalies (str):\n                Names of goalies off, e.g., None\n            change_off_goalies_jersey (str):\n                Combination of jerseys and numbers for the goalies off, e.g., None\n            change_off_goalies_eh_id (str):\n                Evolving Hockey IDs of the goalies off, e.g., None\n            is_home (int):\n                Dummy indicator whether change team is home, e.g., 0\n            is_away (int):\n                Dummy indicator whether change team is away, e.g., 1\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.changes\n        \"\"\"\n        # TODO: Add API ID columns to documentation\n\n        if not self._changes:\n            self._scrape(\"changes\")\n\n        return pd.DataFrame(self._changes)\n\n    @property\n    def html_events(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of events scraped from HTML endpoint.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_idx (int):\n                Index ID for event, e.g., 331\n            period (int):\n                Period number of the event, e.g., 3\n            period_time (str):\n                Time elapsed in the period, e.g., 19:38\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            description (str | None):\n                Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., DEF\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            penalty_length (str | None):\n                Duration of the penalty, e.g., None\n            penalty (str | None):\n                Reason for the penalty, e.g., None\n            strength (str | None):\n                Code to indication strength state, e.g., EV\n            away_skaters (str):\n                Away skaters on-ice, e.g., 13C, 19C, 64C, 14D, 59D, 35G\n            home_skaters (str):\n                Home skaters on-ice, e.g., 19C, 77C, 12R, 88R, 2D, 56D\n            version (int):\n                Increases with simultaneous events, used for combining events in the scraper, e.g., 1\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.html_events\n\n        \"\"\"\n        if not self._html_events:\n            self._scrape(\"html_events\")\n\n        return pd.DataFrame(self._html_events)\n\n    @property\n    def html_rosters(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of players scraped from HTML endpoint.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            jersey (int):\n                Player's jersey number, e.g., 9\n            position (str):\n                Player's position, e.g., L\n            starter (int):\n                Whether the player started the game, e.g., 0\n            status (str):\n                Whether player is active or scratched, e.g., ACTIVE\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.html_rosters\n\n        \"\"\"\n        if not self._html_rosters:\n            self._scrape(\"html_rosters\")\n\n        return pd.DataFrame(self._html_rosters)\n\n    @property\n    def play_by_play(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of play-by-play data.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            game_date (str):\n                Date game was played, e.g., 2020-01-09\n            event_idx (int):\n                Index ID for event, e.g., 667\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            strength_state (str):\n                Strength state, e.g., 5vE\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., CHI\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            description (str | None):\n                Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., DEF\n            coords_x (int):\n                x-coordinates where the event occurred, e.g, -96\n            coords_y (int):\n                y-coordinates where the event occurred, e.g., 11\n            danger (int):\n                Whether shot event occurred from danger area, e.g., 0\n            high_danger (int):\n                Whether shot event occurred from high-danger area, e.g., 0\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_eh_id_api (str):\n                Evolving Hockey ID for player_1 from the api_events (for debugging), e.g., PEKKA.RINNE\n            player_1_api_id (int):\n                NHL API ID for player_1, e.g., 8471469\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_1_type (str):\n                Type of player, e.g., GOAL SCORER\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_eh_id_api (str | None):\n                Evolving Hockey ID for player_2 from the api_events (for debugging), e.g., None\n            player_2_api_id (int | None):\n                NHL API ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_2_type (str | None):\n                Type of player, e.g., None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_eh_id_api (str | None):\n                Evolving Hockey ID for player_3 from the api_events (for debugging), e.g., None\n            player_3_api_id (int | None):\n                NHL API ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            player_3_type (str | None):\n                Type of player, e.g., None\n            score_state (str):\n                Score of the game from event team's perspective, e.g., 4v2\n            score_diff (int):\n                Score differential from event team's perspective, e.g., 2\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            event_length (int):\n                Time elapsed since previous event, e.g., 5\n            event_distance (float | None):\n                Calculated distance of event from goal, e.g, 185.32673849177834\n            pbp_distance (int):\n                Distance of event from goal from description, e.g., 185\n            event_angle (float | None):\n                Angle of event towards goal, e.g., 57.52880770915151\n            penalty (str | None):\n                Name of penalty, e.g., None\n            penalty_length (int | None):\n                Duration of penalty, e.g., None\n            home_score (int):\n                Home team's score, e.g., 2\n            home_score_diff (int):\n                Home team's score differential, e.g., -2\n            away_score (int):\n                Away team's score, e.g., 4\n            away_score_diff (int):\n                Away team's score differential, e.g., 2\n            is_home (int):\n                Whether event team is home, e.g., 0\n            is_away (int):\n                Whether event is away, e.g., 1\n            home_team (str):\n                Home team, e.g., CHI\n            away_team (str):\n                Away team, e.g., NSH\n            home_skaters (int):\n                Number of home team skaters on-ice (excl. goalies), e.g., 6\n            away_skaters (int):\n                Number of away team skaters on-ice (excl. goalies), e.g., 5\n            home_on (list | str | None):\n                Name of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            home_on_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_on_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            home_on_positions (list | str | None):\n                Positions of home team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            away_on (list | str | None):\n                Name of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            away_on_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            away_on_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            away_on_positions (list | str | None):\n                Positions of away team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            event_team_skaters (int | None):\n                Number of event team skaters on-ice (excl. goalies), e.g., 5\n            teammates (list | str | None):\n                Name of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            teammates_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            teammates_api_id (list | str | None = None):\n                NHL API IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            teammates_positions (list | str | None):\n                Positions of event team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            own_goalie (list | str | None):\n                Name of the event team's goalie, e.g., PEKKA RINNE\n            own_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the event team's goalie, e.g., PEKKA.RINNE\n            own_goalie_api_id (list | str | None):\n                NHL API ID of the event team's goalie, e.g., 8471469\n            forwards (list | str | None):\n                Name of event team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            forwards_api_id (list | str | None):\n                NHL API IDs of event team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            defense (list | str | None):\n                Name of event team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            defense_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            defense_api_id (list | str | None):\n                NHL API IDs of event team's skaters on-ice, e.g., 8475218, 8474600\n            opp_strength_state (str | None):\n                Strength state from opposing team's perspective, e.g., Ev5\n            opp_score_state (str | None):\n                Score state from opposing team's perspective, e.g., 2v4\n            opp_score_diff (int | None):\n                Score differential from opposing team's perspective, e.g., -2\n            opp_team_skaters (int | None):\n                Number of opposing team skaters on-ice (excl. goalies), e.g., 6\n            opp_team_on (list | str | None):\n                Name of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_team_on_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_team_on_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            opp_team_on_positions (list | str | None):\n                Positions of opposing team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            opp_goalie (list | str | None):\n                Name of the opposing team's goalie, e.g., None\n            opp_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the opposing team's goalie, e.g., None\n            opp_goalie_api_id (list | str | None):\n                NHL API ID of the opposing team's goalie, e.g., None\n            opp_forwards (list | str | None):\n                Name of opposing team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            opp_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            opp_forwards_api_id (list | str | None):\n                NHL API IDs of opposing team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            opp_defense (list | str | None):\n                Name of opposing team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_defense_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice, e.g., 8470281, 8476979\n            home_forwards (list | str | None):\n                Name of home team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            home_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            home_forwards_api_id (list | str | None = None):\n                NHL API IDs of home team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            home_defense (list | str | None):\n                Name of home team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            home_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_defense_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice, e.g., 8470281, 8476979\n            home_goalie (list | str | None):\n                Name of the home team's goalie, e.g., None\n            home_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the home team's goalie, e.g., None\n            home_goalie_api_id (list | str | None):\n                NHL API ID of the home team's goalie, e.g., None\n            away_forwards (list | str | None):\n                Name of away team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            away_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            away_forwards_api_id (list | str | None):\n                NHL API IDs of away team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            away_defense (list | str | None):\n                Name of away team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            away_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            away_defense_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice, e.g., 8475218, 8474600\n            away_goalie (list | str | None):\n                Name of the away team's goalie, e.g., PEKKA RINNE\n            away_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the away team's goalie, e.g., PEKKA.RINNE\n            away_goalie_api_id (list | str | None):\n                NHL API ID of the away team's goalie, e.g., 8471469\n            change_on_count (int | None):\n                Number of players on, e.g., None\n            change_off_count (int | None):\n                Number of players off, e.g., None\n            change_on (list | str | None):\n                Names of the players on, e.g., None\n            change_on_eh_id (list | str | None):\n                Evolving Hockey IDs of the players on, e.g., None\n            change_on_positions (list | str | None):\n                Postions of the players on, e.g., None\n            change_off (list | str | None):\n                Names of the players off, e.g., None\n            change_off_eh_id (list | str | None):\n                Evolving Hockey IDs of the players off, e.g., None\n            change_off_positions (list | str | None):\n                Positions of the players off, e.g., None\n            change_on_forwards_count (int | None):\n                Number of forwards changing on, e.g., None\n            change_off_forwards_count (int | None):\n                Number of forwards off, e.g., None\n            change_on_forwards (list | str | None):\n                Names of the forwards on, e.g., None\n            change_on_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards on, e.g., None\n            change_off_forwards (list | str | None):\n                Names of the forwards off, e.g., None\n            change_off_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards off, e.g., None\n            change_on_defense_count (int | None):\n                Number of defense on, e.g., None\n            change_off_defense_count (int | None):\n                Number of defense off, e.g., None\n            change_on_defense (list | str | None):\n                Names of the defense on, e.g., None\n            change_on_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense on, e.g., None\n            change_off_defense (list | str | None):\n                Names of the defense off, e.g., None\n            change_off_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense off, e.g., None\n            change_on_goalie_count (int | None):\n                Number of goalies on, e.g., None\n            change_off_goalie_count (int | None):\n                Number of goalies off, e.g., None\n            change_on_goalie (list | str | None):\n                Name of goalie on, e.g., None\n            change_on_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie on, e.g., None\n            change_off_goalie (list | str | None):\n                Name of the goalie off, e.g., None\n            change_off_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie off, e.g., None\n            goal (int):\n                Dummy indicator whether event is a goal, e.g., 1\n            shot (int):\n                Dummy indicator whether event is a shot, e.g., 1\n            miss (int):\n                Dummy indicator whether event is a miss, e.g., 0\n            fenwick (int):\n                Dummy indicator whether event is a fenwick event, e.g., 1\n            corsi (int):\n                Dummy indicator whether event is a corsi event, e.g., 1\n            block (int):\n                Dummy indicator whether event is a block, e.g., 0\n            hit (int):\n                Dummy indicator whether event is a hit, e.g., 0\n            give (int):\n                Dummy indicator whether event is a give, e.g., 0\n            take (int):\n                Dummy indicator whether event is a take, e.g., 0\n            fac (int):\n                Dummy indicator whether event is a faceoff, e.g., 0\n            penl (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            change (int):\n                Dummy indicator whether event is a change, e.g., 0\n            stop (int):\n                Dummy indicator whether event is a stop, e.g., 0\n            chl (int):\n                Dummy indicator whether event is a challenge, e.g., 0\n            ozf (int):\n                Dummy indicator whether event is a offensive zone faceoff, e.g., 0\n            nzf (int):\n                Dummy indicator whether event is a neutral zone faceoff, e.g., 0\n            dzf (int):\n                Dummy indicator whether event is a defensive zone faceoff, e.g., 0\n            ozc (int):\n                Dummy indicator whether event is a offensive zone change, e.g., 0\n            nzc (int):\n                Dummy indicator whether event is a neutral zone change, e.g., 0\n            dzc (int):\n                Dummy indicator whether event is a defensive zone change, e.g., 0\n            otf (int):\n                Dummy indicator whether event is an on-the-fly change, e.g., 0\n            pen0 (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            pen2 (int):\n                Dummy indicator whether event is a minor penalty, e.g., 0\n            pen4 (int):\n                Dummy indicator whether event is a double minor penalty, e.g., 0\n            pen5 (int):\n                Dummy indicator whether event is a major penalty, e.g., 0\n            pen10 (int):\n                Dummy indicator whether event is a game misconduct penalty, e.g., 0\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.play_by_play\n\n        \"\"\"\n        # TODO: Add change on / change off API ID columns to documentation\n\n        if self.game_ids != self._scraped_play_by_play:\n            self._scrape(\"play_by_play\")\n\n        return pd.DataFrame(self._play_by_play)\n\n    @property\n    def play_by_play_ext(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of play-by-play data.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            game_date (str):\n                Date game was played, e.g., 2020-01-09\n            event_idx (int):\n                Index ID for event, e.g., 667\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            strength_state (str):\n                Strength state, e.g., 5vE\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., CHI\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            description (str | None):\n                Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., DEF\n            coords_x (int):\n                x-coordinates where the event occurred, e.g, -96\n            coords_y (int):\n                y-coordinates where the event occurred, e.g., 11\n            danger (int):\n                Whether shot event occurred from danger area, e.g., 0\n            high_danger (int):\n                Whether shot event occurred from high-danger area, e.g., 0\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_eh_id_api (str):\n                Evolving Hockey ID for player_1 from the api_events (for debugging), e.g., PEKKA.RINNE\n            player_1_api_id (int):\n                NHL API ID for player_1, e.g., 8471469\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_1_type (str):\n                Type of player, e.g., GOAL SCORER\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_eh_id_api (str | None):\n                Evolving Hockey ID for player_2 from the api_events (for debugging), e.g., None\n            player_2_api_id (int | None):\n                NHL API ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_2_type (str | None):\n                Type of player, e.g., None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_eh_id_api (str | None):\n                Evolving Hockey ID for player_3 from the api_events (for debugging), e.g., None\n            player_3_api_id (int | None):\n                NHL API ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            player_3_type (str | None):\n                Type of player, e.g., None\n            score_state (str):\n                Score of the game from event team's perspective, e.g., 4v2\n            score_diff (int):\n                Score differential from event team's perspective, e.g., 2\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            event_length (int):\n                Time elapsed since previous event, e.g., 5\n            event_distance (float | None):\n                Calculated distance of event from goal, e.g, 185.32673849177834\n            pbp_distance (int):\n                Distance of event from goal from description, e.g., 185\n            event_angle (float | None):\n                Angle of event towards goal, e.g., 57.52880770915151\n            penalty (str | None):\n                Name of penalty, e.g., None\n            penalty_length (int | None):\n                Duration of penalty, e.g., None\n            home_score (int):\n                Home team's score, e.g., 2\n            home_score_diff (int):\n                Home team's score differential, e.g., -2\n            away_score (int):\n                Away team's score, e.g., 4\n            away_score_diff (int):\n                Away team's score differential, e.g., 2\n            is_home (int):\n                Whether event team is home, e.g., 0\n            is_away (int):\n                Whether event is away, e.g., 1\n            home_team (str):\n                Home team, e.g., CHI\n            away_team (str):\n                Away team, e.g., NSH\n            home_skaters (int):\n                Number of home team skaters on-ice (excl. goalies), e.g., 6\n            away_skaters (int):\n                Number of away team skaters on-ice (excl. goalies), e.g., 5\n            home_on (list | str | None):\n                Name of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            home_on_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_on_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            home_on_positions (list | str | None):\n                Positions of home team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            away_on (list | str | None):\n                Name of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            away_on_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            away_on_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            away_on_positions (list | str | None):\n                Positions of away team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            event_team_skaters (int | None):\n                Number of event team skaters on-ice (excl. goalies), e.g., 5\n            teammates (list | str | None):\n                Name of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            teammates_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            teammates_api_id (list | str | None = None):\n                NHL API IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            teammates_positions (list | str | None):\n                Positions of event team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            own_goalie (list | str | None):\n                Name of the event team's goalie, e.g., PEKKA RINNE\n            own_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the event team's goalie, e.g., PEKKA.RINNE\n            own_goalie_api_id (list | str | None):\n                NHL API ID of the event team's goalie, e.g., 8471469\n            forwards (list | str | None):\n                Name of event team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            forwards_api_id (list | str | None):\n                NHL API IDs of event team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            defense (list | str | None):\n                Name of event team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            defense_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            defense_api_id (list | str | None):\n                NHL API IDs of event team's skaters on-ice, e.g., 8475218, 8474600\n            opp_strength_state (str | None):\n                Strength state from opposing team's perspective, e.g., Ev5\n            opp_score_state (str | None):\n                Score state from opposing team's perspective, e.g., 2v4\n            opp_score_diff (int | None):\n                Score differential from opposing team's perspective, e.g., -2\n            opp_team_skaters (int | None):\n                Number of opposing team skaters on-ice (excl. goalies), e.g., 6\n            opp_team_on (list | str | None):\n                Name of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_team_on_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_team_on_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            opp_team_on_positions (list | str | None):\n                Positions of opposing team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            opp_goalie (list | str | None):\n                Name of the opposing team's goalie, e.g., None\n            opp_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the opposing team's goalie, e.g., None\n            opp_goalie_api_id (list | str | None):\n                NHL API ID of the opposing team's goalie, e.g., None\n            opp_forwards (list | str | None):\n                Name of opposing team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            opp_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            opp_forwards_api_id (list | str | None):\n                NHL API IDs of opposing team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            opp_defense (list | str | None):\n                Name of opposing team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_defense_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice, e.g., 8470281, 8476979\n            home_forwards (list | str | None):\n                Name of home team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            home_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            home_forwards_api_id (list | str | None = None):\n                NHL API IDs of home team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            home_defense (list | str | None):\n                Name of home team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            home_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_defense_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice, e.g., 8470281, 8476979\n            home_goalie (list | str | None):\n                Name of the home team's goalie, e.g., None\n            home_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the home team's goalie, e.g., None\n            home_goalie_api_id (list | str | None):\n                NHL API ID of the home team's goalie, e.g., None\n            away_forwards (list | str | None):\n                Name of away team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            away_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            away_forwards_api_id (list | str | None):\n                NHL API IDs of away team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            away_defense (list | str | None):\n                Name of away team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            away_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            away_defense_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice, e.g., 8475218, 8474600\n            away_goalie (list | str | None):\n                Name of the away team's goalie, e.g., PEKKA RINNE\n            away_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the away team's goalie, e.g., PEKKA.RINNE\n            away_goalie_api_id (list | str | None):\n                NHL API ID of the away team's goalie, e.g., 8471469\n            change_on_count (int | None):\n                Number of players on, e.g., None\n            change_off_count (int | None):\n                Number of players off, e.g., None\n            change_on (list | str | None):\n                Names of the players on, e.g., None\n            change_on_eh_id (list | str | None):\n                Evolving Hockey IDs of the players on, e.g., None\n            change_on_positions (list | str | None):\n                Postions of the players on, e.g., None\n            change_off (list | str | None):\n                Names of the players off, e.g., None\n            change_off_eh_id (list | str | None):\n                Evolving Hockey IDs of the players off, e.g., None\n            change_off_positions (list | str | None):\n                Positions of the players off, e.g., None\n            change_on_forwards_count (int | None):\n                Number of forwards changing on, e.g., None\n            change_off_forwards_count (int | None):\n                Number of forwards off, e.g., None\n            change_on_forwards (list | str | None):\n                Names of the forwards on, e.g., None\n            change_on_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards on, e.g., None\n            change_off_forwards (list | str | None):\n                Names of the forwards off, e.g., None\n            change_off_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards off, e.g., None\n            change_on_defense_count (int | None):\n                Number of defense on, e.g., None\n            change_off_defense_count (int | None):\n                Number of defense off, e.g., None\n            change_on_defense (list | str | None):\n                Names of the defense on, e.g., None\n            change_on_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense on, e.g., None\n            change_off_defense (list | str | None):\n                Names of the defense off, e.g., None\n            change_off_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense off, e.g., None\n            change_on_goalie_count (int | None):\n                Number of goalies on, e.g., None\n            change_off_goalie_count (int | None):\n                Number of goalies off, e.g., None\n            change_on_goalie (list | str | None):\n                Name of goalie on, e.g., None\n            change_on_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie on, e.g., None\n            change_off_goalie (list | str | None):\n                Name of the goalie off, e.g., None\n            change_off_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie off, e.g., None\n            goal (int):\n                Dummy indicator whether event is a goal, e.g., 1\n            shot (int):\n                Dummy indicator whether event is a shot, e.g., 1\n            miss (int):\n                Dummy indicator whether event is a miss, e.g., 0\n            fenwick (int):\n                Dummy indicator whether event is a fenwick event, e.g., 1\n            corsi (int):\n                Dummy indicator whether event is a corsi event, e.g., 1\n            block (int):\n                Dummy indicator whether event is a block, e.g., 0\n            hit (int):\n                Dummy indicator whether event is a hit, e.g., 0\n            give (int):\n                Dummy indicator whether event is a give, e.g., 0\n            take (int):\n                Dummy indicator whether event is a take, e.g., 0\n            fac (int):\n                Dummy indicator whether event is a faceoff, e.g., 0\n            penl (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            change (int):\n                Dummy indicator whether event is a change, e.g., 0\n            stop (int):\n                Dummy indicator whether event is a stop, e.g., 0\n            chl (int):\n                Dummy indicator whether event is a challenge, e.g., 0\n            ozf (int):\n                Dummy indicator whether event is a offensive zone faceoff, e.g., 0\n            nzf (int):\n                Dummy indicator whether event is a neutral zone faceoff, e.g., 0\n            dzf (int):\n                Dummy indicator whether event is a defensive zone faceoff, e.g., 0\n            ozc (int):\n                Dummy indicator whether event is a offensive zone change, e.g., 0\n            nzc (int):\n                Dummy indicator whether event is a neutral zone change, e.g., 0\n            dzc (int):\n                Dummy indicator whether event is a defensive zone change, e.g., 0\n            otf (int):\n                Dummy indicator whether event is an on-the-fly change, e.g., 0\n            pen0 (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            pen2 (int):\n                Dummy indicator whether event is a minor penalty, e.g., 0\n            pen4 (int):\n                Dummy indicator whether event is a double minor penalty, e.g., 0\n            pen5 (int):\n                Dummy indicator whether event is a major penalty, e.g., 0\n            pen10 (int):\n                Dummy indicator whether event is a game misconduct penalty, e.g., 0\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.play_by_play\n\n        \"\"\"\n        # TODO: Update documentation for extended version of play_by_play\n\n        if self.game_ids != self._scraped_play_by_play:\n            self._scrape(\"play_by_play\")\n\n        return pd.DataFrame(self._play_by_play_ext)\n\n    @property\n    def rosters(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of players scraped from API &amp; HTML endpoints.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            api_id (int | None):\n                Player's NHL API ID, e.g., 8476887\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            jersey (int):\n                Player's jersey number, e.g., 9\n            position (str):\n                Player's position, e.g., L\n            starter (int):\n                Whether the player started the game, e.g., 0\n            status (str):\n                Whether player is active or scratched, e.g., ACTIVE\n            headshot_url (str | None):\n                URL to get player's headshot, e.g., https://assets.nhle.com/mugs/nhl/20192020/NSH/8476887.png\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.rosters\n\n        \"\"\"\n        if not self._rosters:\n            self._scrape(\"rosters\")\n\n        return pd.DataFrame(self._rosters)\n\n    @property\n    def shifts(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of shifts scraped from HTML endpoint.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            position (str):\n                Player's position, e.g., L\n            jersey (int):\n                Player's jersey number, e.g., 9\n            shift_count (int):\n                Shift number for that player, e.g., 1\n            period (int):\n                Period number for the shift, e.g., 1\n            start_time (str):\n                Time shift started, e.g., 0:00\n            end_time (str):\n                Time shift ended, e.g., 0:18\n            duration (str):\n                Length of shift, e.g, 00:18\n            start_time_seconds (int):\n                Time shift started in seconds, e.g., 0\n            end_time_seconds (int):\n                Time shift ended in seconds, e.g., 18\n            duration_seconds (int):\n                Length of shift in seconds, e.g., 18\n            shift_start (str):\n                Time the shift started as the original string, e.g., 0:00 / 20:00\n            shift_end (str):\n                Time the shift ended as the original string, e.g., 0:18 / 19:42\n            goalie (int):\n                Whether player is a goalie, e.g., 0\n            is_home (int):\n                Whether player is home e.g., 0\n            is_away (int):\n                Whether player is away, e.g., 1\n            team_venue (str):\n                Whether player is home or away, e.g., AWAY\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.shifts\n\n        \"\"\"\n        if not self._shifts:\n            self._scrape(\"shifts\")\n\n        return pd.DataFrame(self._shifts)\n\n    def _prep_ind(\n        self,\n        level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n        score: bool = False,\n        teammates: bool = False,\n        opposition: bool = False,\n    ) -&gt; None:\n        \"\"\"Prepares DataFrame of individual stats from play-by-play data.\n\n        Nested within `prep_stats` method.\n\n        Parameters:\n            level (str):\n                Determines the level of aggregation. One of season, session, game, period\n            score (bool):\n                Determines if stats account for score state\n            teammates (bool):\n                Determines if stats account for teammates on ice\n            opposition (bool):\n                Determines if stats account for opponents on ice\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 2023 for 2023-24 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020001\n            game_date (int):\n                Date game was played, e.g., 2023-10-10\n            player (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            api_id (str):\n                NHL API ID for the player, e.g., 8476887\n            position (str):\n                Player's position, e.g., L\n            team (str):\n                Player's team, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., TBL\n            strength_state (str):\n                Strength state, e.g., 5v5\n            period (int):\n                Period, e.g., 3\n            score_state (str):\n                Score state, e.g., 2v1\n            forwards (str):\n                Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY\n            forwards_eh_id (str):\n                Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n            forwards_api_id (str):\n                Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158\n            defense (str):\n                Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER\n            defense_eh_id (str):\n                Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER\n            defense_api_id (str):\n                Defense teammates' NHL API IDs, e.g., 8474151, 8478851\n            own_goalie (str):\n                Own goalie, e.g., JUUSE SAROS\n            own_goalie_eh_id (str):\n                Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS\n            own_goalie_api_id (str):\n                Own goalie's NHL API ID, e.g., 8477424\n            opp_forwards (str):\n                Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS\n            opp_forwards_eh_id (str):\n                Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS\n            opp_forwards_api_id (str):\n                Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564\n            opp_defense (str):\n                Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN\n            opp_defense_eh_id (str):\n                Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN\n            opp_defense_api_id (str):\n                Opposing defense's NHL API IDs, e.g., 8480246, 8475167\n            opp_goalie (str):\n                Opposing goalie, e.g., JONAS JOHANSSON\n            opp_goalie_eh_id (str):\n                Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON\n            opp_goalie_api_id (str):\n                Opposing goalie's NHL API ID, e.g., 8477992\n            g (int):\n                Goals scored, e.g, 0\n            ihdg (int):\n                High-danger goals scored, e.g, 0\n            a1 (int):\n                Primary assists, e.g, 0\n            a2 (int):\n                Secondary assists, e.g, 0\n            ixg (float):\n                Individual xG for, e.g, 1.014336\n            isf (int):\n                Individual shots taken, e.g, 3\n            ihdsf (int):\n                High-danger shots taken, e.g, 3\n            imsf (int):\n                Individual missed shots, e.g, 0\n            ihdm (int):\n                High-danger missed shots, e.g, 0\n            iff (int):\n                Individual fenwick for, e.g., 3\n            ihdf (int):\n                High-danger fenwick for, e.g., 3\n            isb (int):\n                Shots taken that were blocked, e.g, 0\n            icf (int):\n                Individual corsi for, e.g., 3\n            ibs (int):\n                Individual shots blocked on defense, e.g, 0\n            igive (int):\n                Individual giveaways, e.g, 0\n            itake (int):\n                Individual takeaways, e.g, 0\n            ihf (int):\n                Individual hits for, e.g, 0\n            iht (int):\n                Individual hits taken, e.g, 0\n            ifow (int):\n                Individual faceoffs won, e.g, 0\n            ifol (int):\n                Individual faceoffs lost, e.g, 0\n            iozfw (int):\n                Individual faceoffs won in offensive zone, e.g, 0\n            iozfl (int):\n                Individual faceoffs lost in offensive zone, e.g, 0\n            inzfw (int):\n                Individual faceoffs won in neutral zone, e.g, 0\n            inzfl (int):\n                Individual faceoffs lost in neutral zone, e.g, 0\n            idzfw (int):\n                Individual faceoffs won in defensive zone, e.g, 0\n            idzfl (int):\n                Individual faceoffs lost in defensive zone, e.g, 0\n            a1_xg (float):\n                xG on primary assists, e.g, 0\n            a2_xg (float):\n                xG on secondary assists, e.g, 0\n            ipent0 (int):\n                Individual penalty shots against, e.g, 0\n            ipent2 (int):\n                Individual minor penalties taken, e.g, 0\n            ipent4 (int):\n                Individual double minor penalties taken, e.g, 0\n            ipent5 (int):\n                Individual major penalties taken, e.g, 0\n            ipent10 (int):\n                Individual game misconduct penalties taken, e.g, 0\n            ipend0 (int):\n                Individual penalty shots drawn, e.g, 0\n            ipend2 (int):\n                Individual minor penalties taken, e.g, 0\n            ipend4 (int):\n                Individual double minor penalties drawn, e.g, 0\n            ipend5 (int):\n                Individual major penalties drawn, e.g, 0\n            ipend10 (int):\n                Individual game misconduct penalties drawn, e.g, 0\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2023020001\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Aggregates individual stats to game level\n            &gt;&gt;&gt; scraper._prep_ind(level=\"game\")\n\n            Aggregates individual stats to season level\n            &gt;&gt;&gt; scraper._prep_ind(level=\"season\")\n\n            Aggregates individual stats to game level, accounting for teammates on-ice\n            &gt;&gt;&gt; scraper._prep_ind(level=\"game\", teammates=True)\n\n        \"\"\"\n        df = self.play_by_play.copy()\n\n        players = [\"player_1\", \"player_2\", \"player_3\"]\n\n        merge_list = [\"season\", \"session\", \"player\", \"eh_id\", \"api_id\", \"position\", \"team\", \"strength_state\"]\n\n        if level == \"session\" or level == \"season\":\n            merge_list = merge_list\n\n        if level == \"game\":\n            merge_list.extend([\"game_id\", \"game_date\", \"opp_team\"])\n\n        if level == \"period\":\n            merge_list.extend([\"game_id\", \"game_date\", \"opp_team\", \"period\"])\n\n        if score:\n            merge_list.append(\"score_state\")\n\n        if teammates:\n            merge_list.extend(\n                [\n                    \"forwards\",\n                    \"forwards_eh_id\",\n                    \"forwards_api_id\",\n                    \"defense\",\n                    \"defense_eh_id\",\n                    \"defense_api_id\",\n                    \"own_goalie\",\n                    \"own_goalie_eh_id\",\n                    \"own_goalie_api_id\",\n                ]\n            )\n\n        if opposition:\n            merge_list.extend(\n                [\n                    \"opp_forwards\",\n                    \"opp_forwards_eh_id\",\n                    \"opp_forwards_api_id\",\n                    \"opp_defense\",\n                    \"opp_defense_eh_id\",\n                    \"opp_defense_api_id\",\n                    \"opp_goalie\",\n                    \"opp_goalie_eh_id\",\n                    \"opp_goalie_api_id\",\n                ]\n            )\n\n            if \"opp_team\" not in merge_list:\n                merge_list.append(\"opp_team\")\n\n        ind_stats = pd.DataFrame(columns=merge_list)\n\n        for player in players:\n            player_eh_id = f\"{player}_eh_id\"\n            player_api_id = f\"{player}_api_id\"\n            position = f\"{player}_position\"\n\n            group_base = [\"season\", \"session\", \"event_team\", player, player_eh_id, player_api_id, position]\n\n            if level == \"session\" or level == \"season\":\n                group_base = group_base\n\n            if level == \"game\":\n                group_base.extend([\"game_id\", \"game_date\", \"opp_team\"])\n\n            if level == \"period\":\n                group_base.extend([\"game_id\", \"game_date\", \"opp_team\", \"period\"])\n\n            if opposition and \"opp_team\" not in group_base:\n                group_base.append(\"opp_team\")\n\n            mask = df[player] != \"BENCH\"\n\n            if player == \"player_1\":\n                group_list = group_base.copy()\n                group_list.append(\"strength_state\")\n\n                if teammates:\n                    group_list.extend(\n                        [\n                            \"forwards\",\n                            \"forwards_eh_id\",\n                            \"forwards_api_id\",\n                            \"defense\",\n                            \"defense_eh_id\",\n                            \"defense_api_id\",\n                            \"own_goalie\",\n                            \"own_goalie_eh_id\",\n                            \"own_goalie_api_id\",\n                        ]\n                    )\n\n                if score:\n                    group_list.append(\"score_state\")\n\n                if opposition:\n                    group_list.extend(\n                        [\n                            \"opp_forwards\",\n                            \"opp_forwards_eh_id\",\n                            \"opp_forwards_api_id\",\n                            \"opp_defense\",\n                            \"opp_defense_eh_id\",\n                            \"opp_defense_api_id\",\n                            \"opp_goalie\",\n                            \"opp_goalie_eh_id\",\n                            \"opp_goalie_api_id\",\n                        ]\n                    )\n\n                stats_list = [\n                    \"block\",\n                    \"block_adj\",\n                    \"fac\",\n                    \"give\",\n                    \"goal\",\n                    \"goal_adj\",\n                    \"hd_fenwick\",\n                    \"hd_goal\",\n                    \"hd_miss\",\n                    \"hd_shot\",\n                    \"hit\",\n                    \"miss\",\n                    \"miss_adj\",\n                    \"pen0\",\n                    \"pen2\",\n                    \"pen4\",\n                    \"pen5\",\n                    \"pen10\",\n                    \"shot\",\n                    \"shot_adj\",\n                    \"take\",\n                    # \"corsi\",\n                    \"fenwick\",\n                    \"fenwick_adj\",\n                    \"pred_goal\",\n                    \"pred_goal_adj\",\n                    \"ozf\",\n                    \"nzf\",\n                    \"dzf\",\n                ]\n\n                stats_dict = {x: \"sum\" for x in stats_list if x in df.columns}\n\n                new_cols = {\n                    \"block\": \"ibs\",\n                    \"block_adj\": \"ibs_adj\",\n                    \"fac\": \"ifow\",\n                    \"give\": \"igive\",\n                    \"goal\": \"g\",\n                    \"goal_adj\": \"g_adj\",\n                    \"hd_fenwick\": \"ihdf\",\n                    \"hd_goal\": \"ihdg\",\n                    \"hd_miss\": \"ihdm\",\n                    \"hd_shot\": \"ihdsf\",\n                    \"hit\": \"ihf\",\n                    \"miss\": \"imsf\",\n                    \"miss_adj\": \"imsf_adj\",\n                    \"pen0\": \"ipent0\",\n                    \"pen2\": \"ipent2\",\n                    \"pen4\": \"ipent4\",\n                    \"pen5\": \"ipent5\",\n                    \"pen10\": \"ipent10\",\n                    \"shot\": \"isf\",\n                    \"shot_adj\": \"isf_adj\",\n                    \"take\": \"itake\",\n                    \"fenwick\": \"iff\",\n                    \"fenwick_adj\": \"iff_adj\",\n                    \"pred_goal\": \"ixg\",\n                    \"pred_goal_adj\": \"ixg_adj\",\n                    \"ozf\": \"iozfw\",\n                    \"nzf\": \"inzfw\",\n                    \"dzf\": \"idzfw\",\n                    \"event_team\": \"team\",\n                    player: \"player\",\n                    player_eh_id: \"eh_id\",\n                    player_api_id: \"api_id\",\n                    position: \"position\",\n                }\n\n                mask = np.logical_and.reduce(\n                    [df[player] != \"BENCH\", ~df.description.astype(str).str.contains(\"BLOCKED BY TEAMMATE\", na=False)]\n                )\n\n                player_df = df[mask].copy().groupby(group_list, as_index=False).agg(stats_dict).rename(columns=new_cols)\n\n                # drop_list = [x for x in stats if x not in new_cols.keys() and x in player_df.columns]\n\n            if player == \"player_2\":\n                # Getting on-ice stats against for player 2\n\n                opp_group_list = group_base.copy()\n                opp_group_list.append(\"opp_strength_state\")\n\n                event_group_list = group_base.copy()\n                event_group_list.append(\"strength_state\")\n\n                if not opposition and level in [\"season\", \"session\"]:\n                    opp_group_list.remove(\"event_team\")\n                    opp_group_list.append(\"opp_team\")\n\n                if teammates:\n                    opp_group_list.extend(\n                        [\n                            \"opp_forwards\",\n                            \"opp_forwards_eh_id\",\n                            \"opp_forwards_api_id\",\n                            \"opp_defense\",\n                            \"opp_defense_eh_id\",\n                            \"opp_defense_api_id\",\n                            \"opp_goalie\",\n                            \"opp_goalie_eh_id\",\n                            \"opp_goalie_api_id\",\n                        ]\n                    )\n\n                    event_group_list.extend(\n                        [\n                            \"forwards\",\n                            \"forwards_eh_id\",\n                            \"forwards_api_id\",\n                            \"defense\",\n                            \"defense_eh_id\",\n                            \"defense_api_id\",\n                            \"own_goalie\",\n                            \"own_goalie_eh_id\",\n                            \"own_goalie_api_id\",\n                        ]\n                    )\n\n                if score:\n                    opp_group_list.append(\"opp_score_state\")\n                    event_group_list.append(\"score_state\")\n\n                if opposition:\n                    opp_group_list.extend(\n                        [\n                            \"forwards\",\n                            \"forwards_eh_id\",\n                            \"forwards_api_id\",\n                            \"defense\",\n                            \"defense_eh_id\",\n                            \"defense_api_id\",\n                            \"own_goalie\",\n                            \"own_goalie_eh_id\",\n                            \"own_goalie_api_id\",\n                        ]\n                    )\n\n                    event_group_list.extend(\n                        [\n                            \"opp_forwards\",\n                            \"opp_forwards_eh_id\",\n                            \"opp_forwards_api_id\",\n                            \"opp_defense\",\n                            \"opp_defense_eh_id\",\n                            \"opp_defense_api_id\",\n                            \"opp_goalie\",\n                            \"opp_goalie_eh_id\",\n                            \"opp_goalie_api_id\",\n                        ]\n                    )\n\n                stats_1 = [\n                    \"block\",\n                    \"block_adj\",\n                    \"fac\",\n                    \"hit\",\n                    \"pen0\",\n                    \"pen2\",\n                    \"pen4\",\n                    \"pen5\",\n                    \"pen10\",\n                    \"ozf\",\n                    \"nzf\",\n                    \"dzf\",\n                ]\n\n                stats_1 = {x: \"sum\" for x in stats_1 if x.lower() in df.columns}\n\n                new_cols_1 = {\n                    \"opp_goalie\": \"own_goalie\",\n                    \"opp_goalie_eh_id\": \"own_goalie_eh_id\",\n                    \"opp_goalie_api_id\": \"own_goalie_api_id\",\n                    \"own_goalie\": \"opp_goalie\",\n                    \"own_goalie_eh_id\": \"opp_goalie_eh_id\",\n                    \"own_goalie_api_id\": \"opp_goalie_api_id\",\n                    \"opp_team\": \"team\",\n                    \"event_team\": \"opp_team\",\n                    \"opp_score_state\": \"score_state\",\n                    \"opp_strength_state\": \"strength_state\",\n                    \"pen0\": \"ipend0\",\n                    \"pen2\": \"ipend2\",\n                    \"pen4\": \"ipend4\",\n                    \"pen5\": \"ipend5\",\n                    \"pen10\": \"ipend10\",\n                    player: \"player\",\n                    player_eh_id: \"eh_id\",\n                    player_api_id: \"api_id\",\n                    position: \"position\",\n                    \"fac\": \"ifol\",\n                    \"hit\": \"iht\",\n                    \"ozf\": \"iozfl\",\n                    \"nzf\": \"inzfl\",\n                    \"dzf\": \"idzfl\",\n                    \"block\": \"isb\",\n                    \"block_adj\": \"isb_adj\",\n                    \"opp_forwards\": \"forwards\",\n                    \"opp_forwards_eh_id\": \"forwards_eh_id\",\n                    \"opp_forwards_api_id\": \"forwards_api_id\",\n                    \"opp_defense\": \"defense\",\n                    \"opp_defense_eh_id\": \"defense_eh_id\",\n                    \"opp_defense_api_id\": \"defense_api_id\",\n                    \"forwards\": \"opp_forwards\",\n                    \"forwards_eh_id\": \"opp_forwards_eh_id\",\n                    \"forwards_api_id\": \"opp_forwards_api_id\",\n                    \"defense\": \"opp_defense\",\n                    \"defense_eh_id\": \"opp_defense_eh_id\",\n                    \"defense_api_id\": \"opp_defense_api_id\",\n                }\n\n                event_types = [\"BLOCK\", \"FAC\", \"HIT\", \"PENL\"]\n\n                mask_1 = np.logical_and.reduce(\n                    [\n                        df[player] != \"BENCH\",\n                        df.event.isin(event_types),\n                        ~df.description.astype(str).str.contains(\"BLOCKED BY TEAMMATE\", na=False),\n                    ]\n                )\n\n                opps = df[mask_1].copy().groupby(opp_group_list, as_index=False).agg(stats_1).rename(columns=new_cols_1)\n\n                # Getting primary assists and primary assists xG from player 2\n\n                stats_2 = [\"goal\", \"pred_goal\", \"teammate_block\", \"teammate_block_adj\"]\n\n                stats_2 = {x: \"sum\" for x in stats_2 if x in df.columns}\n\n                new_cols_2 = {\n                    \"event_team\": \"team\",\n                    player: \"player\",\n                    player_eh_id: \"eh_id\",\n                    player_api_id: \"api_id\",\n                    \"goal\": \"a1\",\n                    \"pred_goal\": \"a1_xg\",\n                    position: \"position\",\n                    \"teammate_block\": \"isb\",\n                    \"teammate_block_adj\": \"isb_adj\",\n                }\n\n                event_types = [\"BLOCK\", \"GOAL\"]\n\n                mask_2 = np.logical_and.reduce([df[player] != \"BENCH\", df.event.isin(event_types)])\n\n                own = (\n                    df[mask_2].copy().groupby(event_group_list, as_index=False).agg(stats_2).rename(columns=new_cols_2)\n                )\n\n                player_df = opps.merge(own, left_on=merge_list, right_on=merge_list, how=\"outer\").fillna(0)\n\n                player_df[\"isb\"] = player_df.isb_x + player_df.isb_y\n                player_df[\"isb_adj\"] = player_df.isb_adj_x + player_df.isb_adj_y\n\n            if player == \"player_3\":\n                group_list = group_base.copy()\n                group_list.append(\"strength_state\")\n\n                if teammates:\n                    group_list.extend(\n                        [\n                            \"forwards\",\n                            \"forwards_eh_id\",\n                            \"forwards_api_id\",\n                            \"defense\",\n                            \"defense_eh_id\",\n                            \"defense_api_id\",\n                            \"own_goalie\",\n                            \"own_goalie_eh_id\",\n                            \"own_goalie_api_id\",\n                        ]\n                    )\n\n                if score:\n                    group_list.append(\"score_state\")\n\n                if opposition:\n                    group_list.extend(\n                        [\n                            \"opp_forwards\",\n                            \"opp_forwards_eh_id\",\n                            \"opp_forwards_api_id\",\n                            \"opp_defense\",\n                            \"opp_defense_eh_id\",\n                            \"opp_defense_api_id\",\n                            \"opp_goalie\",\n                            \"opp_goalie_eh_id\",\n                            \"opp_goalie_api_id\",\n                        ]\n                    )\n\n                    if \"opp_team\" not in group_list:\n                        group_list.append(\"opp_team\")\n\n                stats_list = [\"goal\", \"pred_goal\"]\n\n                stats_dict = {x: \"sum\" for x in stats_list if x in df.columns}\n\n                player_df = df[mask].groupby(group_list, as_index=False).agg(stats_dict)\n\n                new_cols = {\n                    \"goal\": \"a2\",\n                    \"pred_goal\": \"a2_xg\",\n                    \"event_team\": \"team\",\n                    player: \"player\",\n                    player_eh_id: \"eh_id\",\n                    player_api_id: \"api_id\",\n                    position: \"position\",\n                }\n\n                player_df = player_df.rename(columns=new_cols)\n\n            ind_stats = ind_stats.merge(player_df, on=merge_list, how=\"outer\").infer_objects(copy=False).fillna(0)\n\n        # Fixing some stats\n\n        ind_stats[\"icf\"] = ind_stats.iff + ind_stats.isb\n        ind_stats[\"icf_adj\"] = ind_stats.iff_adj + ind_stats.isb_adj\n\n        ind_stats[\"gax\"] = ind_stats.g - ind_stats.ixg\n\n        columns = [x for x in list(IndStatSchema.dtypes.keys()) if x in ind_stats.columns]\n\n        ind_stats = ind_stats[columns]\n\n        stats = [\n            \"g\",\n            \"a1\",\n            \"a2\",\n            \"isf\",\n            \"iff\",\n            \"icf\",\n            \"ixg\",\n            \"gax\",\n            \"ihdg\",\n            \"ihdf\",\n            \"ihdsf\",\n            \"ihdm\",\n            \"imsf\",\n            \"isb\",\n            \"ibs\",\n            \"igive\",\n            \"itake\",\n            \"ihf\",\n            \"iht\",\n            \"ifow\",\n            \"ifol\",\n            \"iozfw\",\n            \"iozfl\",\n            \"inzfw\",\n            \"inzfl\",\n            \"idzfw\",\n            \"idzfl\",\n            \"a1_xg\",\n            \"a2_xg\",\n            \"ipent0\",\n            \"ipent2\",\n            \"ipent4\",\n            \"ipent5\",\n            \"ipent10\",\n            \"ipend0\",\n            \"ipend2\",\n            \"ipend4\",\n            \"ipend5\",\n            \"ipend10\",\n        ]\n\n        stats = [x for x in stats if x in ind_stats.columns]\n\n        ind_stats = ind_stats.loc[(ind_stats[stats] &gt; 0).any(axis=1)]\n\n        ind_stats = IndStatSchema.validate(ind_stats)\n\n        self._ind_stats = ind_stats\n\n    @property\n    def ind_stats(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of individual stats aggregated from play-by-play data.\n\n        Nested within `prep_stats` method.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 2023 for 2023-24 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020001\n            game_date (int):\n                Date game was played, e.g., 2023-10-10\n            player (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            api_id (str):\n                NHL API ID for the player, e.g., 8476887\n            position (str):\n                Player's position, e.g., L\n            team (str):\n                Player's team, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., TBL\n            strength_state (str):\n                Strength state, e.g., 5v5\n            period (int):\n                Period, e.g., 3\n            score_state (str):\n                Score state, e.g., 2v1\n            forwards (str):\n                Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY\n            forwards_eh_id (str):\n                Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n            forwards_api_id (str):\n                Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158\n            defense (str):\n                Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER\n            defense_eh_id (str):\n                Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER\n            defense_api_id (str):\n                Defense teammates' NHL API IDs, e.g., 8474151, 8478851\n            own_goalie (str):\n                Own goalie, e.g., JUUSE SAROS\n            own_goalie_eh_id (str):\n                Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS\n            own_goalie_api_id (str):\n                Own goalie's NHL API ID, e.g., 8477424\n            opp_forwards (str):\n                Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS\n            opp_forwards_eh_id (str):\n                Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS\n            opp_forwards_api_id (str):\n                Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564\n            opp_defense (str):\n                Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN\n            opp_defense_eh_id (str):\n                Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN\n            opp_defense_api_id (str):\n                Opposing defense's NHL API IDs, e.g., 8480246, 8475167\n            opp_goalie (str):\n                Opposing goalie, e.g., JONAS JOHANSSON\n            opp_goalie_eh_id (str):\n                Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON\n            opp_goalie_api_id (str):\n                Opposing goalie's NHL API ID, e.g., 8477992\n            g (int):\n                Goals scored, e.g, 0\n            ihdg (int):\n                High-danger goals scored, e.g, 0\n            a1 (int):\n                Primary assists, e.g, 0\n            a2 (int):\n                Secondary assists, e.g, 0\n            ixg (float):\n                Individual xG for, e.g, 1.014336\n            isf (int):\n                Individual shots taken, e.g, 3\n            ihdsf (int):\n                High-danger shots taken, e.g, 3\n            imsf (int):\n                Individual missed shots, e.g, 0\n            ihdm (int):\n                High-danger missed shots, e.g, 0\n            iff (int):\n                Individual fenwick for, e.g., 3\n            ihdf (int):\n                High-danger fenwick for, e.g., 3\n            isb (int):\n                Shots taken that were blocked, e.g, 0\n            icf (int):\n                Individual corsi for, e.g., 3\n            ibs (int):\n                Individual shots blocked on defense, e.g, 0\n            igive (int):\n                Individual giveaways, e.g, 0\n            itake (int):\n                Individual takeaways, e.g, 0\n            ihf (int):\n                Individual hits for, e.g, 0\n            iht (int):\n                Individual hits taken, e.g, 0\n            ifow (int):\n                Individual faceoffs won, e.g, 0\n            ifol (int):\n                Individual faceoffs lost, e.g, 0\n            iozfw (int):\n                Individual faceoffs won in offensive zone, e.g, 0\n            iozfl (int):\n                Individual faceoffs lost in offensive zone, e.g, 0\n            inzfw (int):\n                Individual faceoffs won in neutral zone, e.g, 0\n            inzfl (int):\n                Individual faceoffs lost in neutral zone, e.g, 0\n            idzfw (int):\n                Individual faceoffs won in defensive zone, e.g, 0\n            idzfl (int):\n                Individual faceoffs lost in defensive zone, e.g, 0\n            a1_xg (float):\n                xG on primary assists, e.g, 0\n            a2_xg (float):\n                xG on secondary assists, e.g, 0\n            ipent0 (int):\n                Individual penalty shots against, e.g, 0\n            ipent2 (int):\n                Individual minor penalties taken, e.g, 0\n            ipent4 (int):\n                Individual double minor penalties taken, e.g, 0\n            ipent5 (int):\n                Individual major penalties taken, e.g, 0\n            ipent10 (int):\n                Individual game misconduct penalties taken, e.g, 0\n            ipend0 (int):\n                Individual penalty shots drawn, e.g, 0\n            ipend2 (int):\n                Individual minor penalties taken, e.g, 0\n            ipend4 (int):\n                Individual double minor penalties drawn, e.g, 0\n            ipend5 (int):\n                Individual major penalties drawn, e.g, 0\n            ipend10 (int):\n                Individual game misconduct penalties drawn, e.g, 0\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2023020001\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.ind_stats\n\n        \"\"\"\n        if self._ind_stats.empty:\n            self._prep_ind()\n\n        return self._ind_stats\n\n    def _prep_oi(\n        self,\n        level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n        score: bool = False,\n        teammates: bool = False,\n        opposition: bool = False,\n    ) -&gt; None:\n        \"\"\"Prepares DataFrame of on-ice stats from play-by-play data.\n\n        Nested within `prep_stats` method.\n\n        Parameters:\n            level (str):\n                Determines the level of aggregation. One of season, session, game, period\n            score (bool):\n                Determines if stats account for score state\n            teammates (bool):\n                Determines if stats account for teammates on ice\n            opposition (bool):\n                Determines if stats account for opponents on ice\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 2023 for 2023-24 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020001\n            game_date (int):\n                Date game was played, e.g., 2023-10-10\n            player (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            api_id (str):\n                NHL API ID for the player, e.g., 8476887\n            position (str):\n                Player's position, e.g., L\n            team (str):\n                Player's team, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., TBL\n            strength_state (str):\n                Strength state, e.g., 5v5\n            period (int):\n                Period, e.g., 3\n            score_state (str):\n                Score state, e.g., 2v1\n            forwards (str):\n                Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY\n            forwards_eh_id (str):\n                Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n            forwards_api_id (str):\n                Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158\n            defense (str):\n                Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER\n            defense_eh_id (str):\n                Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER\n            defense_api_id (str):\n                Defense teammates' NHL API IDs, e.g., 8474151, 8478851\n            own_goalie (str):\n                Own goalie, e.g., JUUSE SAROS\n            own_goalie_eh_id (str):\n                Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS\n            own_goalie_api_id (str):\n                Own goalie's NHL API ID, e.g., 8477424\n            opp_forwards (str):\n                Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS\n            opp_forwards_eh_id (str):\n                Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS\n            opp_forwards_api_id (str):\n                Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564\n            opp_defense (str):\n                Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN\n            opp_defense_eh_id (str):\n                Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN\n            opp_defense_api_id (str):\n                Opposing defense's NHL API IDs, e.g., 8480246, 8475167\n            opp_goalie (str):\n                Opposing goalie, e.g., JONAS JOHANSSON\n            opp_goalie_eh_id (str):\n                Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON\n            opp_goalie_api_id (str):\n                Opposing goalie's NHL API ID, e.g., 8477992\n            toi (float):\n                Time on-ice, in minutes, e.g, 0.483333\n            gf (int):\n                Goals for (on-ice), e.g, 0\n            hdgf (int):\n                High-danger goals for (on-ice), e.g, 0\n            ga (int):\n                Goals against (on-ice), e.g, 0\n            hdga (int):\n                High-danger goals against (on-ice), e.g, 0\n            xgf (float):\n                xG for (on-ice), e.g., 1.258332\n            xga (float):\n                xG against (on-ice), e.g, 0.000000\n            sf (int):\n                Shots for (on-ice), e.g, 4\n            sa (int):\n                Shots against (on-ice), e.g, 0\n            hdsf (int):\n                High-danger shots for (on-ice), e.g, 3\n            hdsa (int):\n                High-danger shots against (on-ice), e.g, 0\n            ff (int):\n                Fenwick for (on-ice), e.g, 4\n            fa (int):\n                Fenwick against (on-ice), e.g, 0\n            hdff (int):\n                High-danger fenwick for (on-ice), e.g, 3\n            hdfa (int):\n                High-danger fenwick against (on-ice), e.g, 0\n            cf (int):\n                Corsi for (on-ice), e.g, 4\n            ca (int):\n                Corsi against (on-ice), e.g, 0\n            bsf (int):\n                Shots taken that were blocked (on-ice), e.g, 0\n            bsa (int):\n                Shots blocked (on-ice), e.g, 0\n            msf (int):\n                Missed shots taken (on-ice), e.g, 0\n            msa (int):\n                Missed shots against (on-ice), e.g, 0\n            hdmsf (int):\n                High-danger missed shots taken (on-ice), e.g, 0\n            hdmsa (int):\n                High-danger missed shots against (on-ice), e.g, 0\n            teammate_block (int):\n                Shots blocked by teammates (on-ice), e.g, 0\n            hf (int):\n                Hits for (on-ice), e.g, 0\n            ht (int):\n                Hits taken (on-ice), e.g, 0\n            give (int):\n                Giveaways (on-ice), e.g, 0\n            take (int):\n                Takeaways (on-ice), e.g, 0\n            ozf (int):\n                Offensive zone faceoffs (on-ice), e.g, 0\n            nzf (int):\n                Neutral zone faceoffs (on-ice), e.g, 1\n            dzf (int):\n                Defensive zone faceoffs (on-ice), e.g, 0\n            fow (int):\n                Faceoffs won (on-ice), e.g, 1\n            fol (int):\n                Faceoffs lost (on-ice), e.g, 0\n            ozfw (int):\n                Offensive zone faceoffs won (on-ice), e.g, 0\n            ozfl (int):\n                Offensive zone faceoffs lost (on-ice), e.g, 0\n            nzfw (int):\n                Neutral zone faceoffs won (on-ice), e.g, 1\n            nzfl (int):\n                Neutral zone faceoffs lost (on-ice), e.g, 0\n            dzfw (int):\n                Defensive zone faceoffs won (on-ice), e.g, 0\n            dzfl (int):\n                Defensive zone faceoffs lost (on-ice), e.g, 0\n            pent0 (int):\n                Penalty shots allowed (on-ice), e.g, 0\n            pent2 (int):\n                Minor penalties taken (on-ice), e.g, 0\n            pent4 (int):\n                Double minor penalties taken (on-ice), e.g, 0\n            pent5 (int):\n                Major penalties taken (on-ice), e.g, 0\n            pent10 (int):\n                Game misconduct penalties taken (on-ice), e.g, 0\n            pend0 (int):\n                Penalty shots drawn (on-ice), e.g, 0\n            pend2 (int):\n                Minor penalties drawn (on-ice), e.g, 0\n            pend4 (int):\n                Double minor penalties drawn (on-ice), e.g, 0\n            pend5 (int):\n                Major penalties drawn (on-ice), e.g, 0\n            pend10 (int):\n                Game misconduct penalties drawn (on-ice), e.g, 0\n            ozs (int):\n                Offensive zone starts, e.g, 0\n            nzs (int):\n                Neutral zone starts, e.g, 0\n            dzs (int):\n                Defenzive zone starts, e.g, 0\n            otf (int):\n                On-the-fly starts, e.g, 0\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2023020001\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Prepares on-ice dataframe with default options\n            &gt;&gt;&gt; scraper._prep_oi()\n\n            On-ice statistics, aggregated to season level\n            &gt;&gt;&gt; scraper._prep_oi(level=\"season\")\n\n            On-ice statistics, aggregated to game level, accounting for teammates\n            &gt;&gt;&gt; scraper._prep_oi(level=\"game\", teammates=True)\n\n        \"\"\"\n        merge_cols = [\"id\", \"event_idx\"]\n\n        df = self.play_by_play.merge(self.play_by_play_ext, how=\"left\", on=merge_cols)\n\n        players = (\n            [f\"event_on_{x}\" for x in range(1, 8)]\n            + [f\"opp_on_{x}\" for x in range(1, 8)]\n            + [f\"change_on_{x}\" for x in range(1, 8)]\n        )\n\n        event_list = []\n        opp_list = []\n        zones_list = []\n\n        for player in players:\n            position = f\"{player}_pos\"\n            player_eh_id = f\"{player}_eh_id\"\n            player_api_id = f\"{player}_api_id\"\n\n            group_list = [\"season\", \"session\"]\n\n            if level == \"session\" or level == \"season\":\n                group_list = group_list\n\n            if level == \"game\":\n                group_list.extend([\"game_id\", \"game_date\", \"event_team\", \"opp_team\"])\n\n            if level == \"period\":\n                group_list.extend([\"game_id\", \"game_date\", \"event_team\", \"opp_team\", \"period\"])\n\n            # Accounting for desired player\n\n            if \"event_on\" in player or \"opp_on\" in player:\n                stats_list = [\n                    \"block\",\n                    \"block_adj\",\n                    \"teammate_block\",\n                    \"teammate_block_adj\",\n                    \"fac\",\n                    \"goal\",\n                    \"goal_adj\",\n                    \"hd_fenwick\",\n                    \"hd_goal\",\n                    \"hd_miss\",\n                    \"hd_shot\",\n                    \"hit\",\n                    \"miss\",\n                    \"miss_adj\",\n                    \"pen0\",\n                    \"pen2\",\n                    \"pen4\",\n                    \"pen5\",\n                    \"pen10\",\n                    \"shot\",\n                    \"shot_adj\",\n                    \"fenwick\",\n                    \"fenwick_adj\",\n                    \"pred_goal\",\n                    \"pred_goal_adj\",\n                    \"ozf\",\n                    \"nzf\",\n                    \"dzf\",\n                    \"event_length\",\n                ]\n\n            if \"change_on\" in player:\n                stats_list = [\"ozc\", \"nzc\", \"dzc\", \"otf\"]\n\n            stats_dict = {x: \"sum\" for x in stats_list if x in df.columns}\n\n            if \"event_on\" in player or \"change_on\" in player:\n                if level == \"session\" or level == \"season\":\n                    group_list.append(\"event_team\")\n\n                strength_group = [\"strength_state\"]\n\n                teammates_group = [\n                    \"forwards\",\n                    \"forwards_eh_id\",\n                    \"forwards_api_id\",\n                    \"defense\",\n                    \"defense_eh_id\",\n                    \"defense_api_id\",\n                    \"own_goalie\",\n                    \"own_goalie_eh_id\",\n                    \"own_goalie_api_id\",\n                ]\n\n                score_group = [\"score_state\"]\n\n                opposition_group = [\n                    \"opp_forwards\",\n                    \"opp_forwards_eh_id\",\n                    \"opp_forwards_api_id\",\n                    \"opp_defense\",\n                    \"opp_defense_eh_id\",\n                    \"opp_defense_api_id\",\n                    \"opp_goalie\",\n                    \"opp_goalie_eh_id\",\n                    \"opp_goalie_api_id\",\n                ]\n\n                if \"opp_team\" not in group_list:\n                    opposition_group.insert(0, \"opp_team\")\n\n                col_names = {\n                    \"event_team\": \"team\",\n                    player: \"player\",\n                    player_eh_id: \"eh_id\",\n                    player_api_id: \"api_id\",\n                    position: \"position\",\n                    \"goal\": \"gf\",\n                    \"goal_adj\": \"gf_adj\",\n                    \"hit\": \"hf\",\n                    \"miss\": \"msf\",\n                    \"miss_adj\": \"msf_adj\",\n                    \"block\": \"bsa\",\n                    \"block_adj\": \"bsa_adj\",\n                    \"teammate_block\": \"bsf\",\n                    \"teammate_block_adj\": \"bsf_adj\",\n                    \"pen0\": \"pent0\",\n                    \"pen2\": \"pent2\",\n                    \"pen4\": \"pent4\",\n                    \"pen5\": \"pent5\",\n                    \"pen10\": \"pent10\",\n                    \"fenwick\": \"ff\",\n                    \"fenwick_adj\": \"ff_adj\",\n                    \"pred_goal\": \"xgf\",\n                    \"pred_goal_adj\": \"xgf_adj\",\n                    \"fac\": \"fow\",\n                    \"ozf\": \"ozfw\",\n                    \"dzf\": \"dzfw\",\n                    \"nzf\": \"nzfw\",\n                    \"ozc\": \"ozs\",\n                    \"nzc\": \"nzs\",\n                    \"dzc\": \"dzs\",\n                    \"shot\": \"sf\",\n                    \"shot_adj\": \"sf_adj\",\n                    \"hd_goal\": \"hdgf\",\n                    \"hd_shot\": \"hdsf\",\n                    \"hd_fenwick\": \"hdff\",\n                    \"hd_miss\": \"hdmsf\",\n                }\n\n            if \"opp_on\" in player:\n                if level == \"session\" or level == \"season\":\n                    group_list.append(\"opp_team\")\n\n                strength_group = [\"opp_strength_state\"]\n\n                teammates_group = [\n                    \"opp_forwards\",\n                    \"opp_forwards_eh_id\",\n                    \"opp_forwards_api_id\",\n                    \"opp_defense\",\n                    \"opp_defense_eh_id\",\n                    \"opp_defense_api_id\",\n                    \"opp_goalie\",\n                    \"opp_goalie_eh_id\",\n                    \"opp_goalie_api_id\",\n                ]\n\n                score_group = [\"opp_score_state\"]\n\n                opposition_group = [\n                    \"forwards\",\n                    \"forwards_eh_id\",\n                    \"forwards_api_id\",\n                    \"defense\",\n                    \"defense_eh_id\",\n                    \"defense_api_id\",\n                    \"own_goalie\",\n                    \"own_goalie_eh_id\",\n                    \"own_goalie_api_id\",\n                ]\n\n                if \"event_team\" not in group_list:\n                    opposition_group.insert(0, \"event_team\")\n\n                col_names = {\n                    \"opp_team\": \"team\",\n                    \"event_team\": \"opp_team\",\n                    \"opp_goalie\": \"own_goalie\",\n                    \"own_goalie\": \"opp_goalie\",\n                    \"opp_score_state\": \"score_state\",\n                    \"opp_strength_state\": \"strength_state\",\n                    player: \"player\",\n                    player_eh_id: \"eh_id\",\n                    player_api_id: \"api_id\",\n                    position: \"position\",\n                    \"block\": \"bsf\",\n                    \"block_adj\": \"bsf_adj\",\n                    \"goal\": \"ga\",\n                    \"goal_adj\": \"ga_adj\",\n                    \"hit\": \"ht\",\n                    \"miss\": \"msa\",\n                    \"miss_adj\": \"msa_adj\",\n                    \"pen0\": \"pend0\",\n                    \"pen2\": \"pend2\",\n                    \"pen4\": \"pend4\",\n                    \"pen5\": \"pend5\",\n                    \"pen10\": \"pend10\",\n                    \"shot\": \"sa\",\n                    \"shot_adj\": \"sa_adj\",\n                    \"fenwick\": \"fa\",\n                    \"fenwick_adj\": \"fa_adj\",\n                    \"pred_goal\": \"xga\",\n                    \"pred_goal_adj\": \"xga_adj\",\n                    \"fac\": \"fol\",\n                    \"ozf\": \"dzfl\",\n                    \"dzf\": \"ozfl\",\n                    \"nzf\": \"nzfl\",\n                    \"hd_goal\": \"hdga\",\n                    \"hd_shot\": \"hdsa\",\n                    \"hd_fenwick\": \"hdfa\",\n                    \"hd_miss\": \"hdmsa\",\n                    \"forwards\": \"opp_forwards\",\n                    \"forwards_eh_id\": \"opp_forwards_eh_id\",\n                    \"forwards_api_id\": \"opp_forwards_api_id\",\n                    \"defense\": \"opp_defense\",\n                    \"defense_eh_id\": \"opp_defense_eh_id\",\n                    \"defense_api_id\": \"opp_defense_api_id\",\n                    \"own_goalie_eh_id\": \"opp_goalie_eh_id\",\n                    \"own_goalie_api_id\": \"opp_goalie_api_id\",\n                    \"opp_forwards\": \"forwards\",\n                    \"opp_forwards_eh_id\": \"forwards_eh_id\",\n                    \"opp_forwards_api_id\": \"forwards_api_id\",\n                    \"opp_defense\": \"defense\",\n                    \"opp_defense_eh_id\": \"defense_eh_id\",\n                    \"opp_defense_api_id\": \"defense_api_id\",\n                    \"opp_goalie_eh_id\": \"own_goalie_eh_id\",\n                    \"opp_goalie_api_id\": \"own_goalie_api_id\",\n                }\n\n            group_list = group_list + [player, player_eh_id, player_api_id, position] + strength_group\n\n            if teammates is True:\n                group_list = group_list + teammates_group\n\n            if score is True:\n                group_list = group_list + score_group\n\n            if opposition is True:\n                group_list = group_list + opposition_group\n\n            player_df = df.groupby(group_list, dropna=False, as_index=False).agg(stats_dict)\n\n            col_names = {key: value for key, value in col_names.items() if key in player_df.columns}\n\n            player_df = player_df.rename(columns=col_names)\n\n            if \"event_on\" in player:\n                event_list.append(player_df)\n\n            elif \"opp_on\" in player:\n                opp_list.append(player_df)\n\n            elif \"change_on\" in player:\n                zones_list.append(player_df)\n\n        # On-ice stats\n\n        merge_cols = [\n            \"season\",\n            \"session\",\n            \"game_id\",\n            \"game_date\",\n            \"team\",\n            \"opp_team\",\n            \"player\",\n            \"eh_id\",\n            \"api_id\",\n            \"position\",\n            \"period\",\n            \"strength_state\",\n            \"score_state\",\n            \"opp_goalie\",\n            \"opp_goalie_eh_id\",\n            \"opp_goalie_api_id\",\n            \"own_goalie\",\n            \"own_goalie_eh_id\",\n            \"own_goalie_api_id\",\n            \"forwards\",\n            \"forwards_eh_id\",\n            \"forwards_api_id\",\n            \"defense\",\n            \"defense_eh_id\",\n            \"defense_api_id\",\n            \"opp_forwards\",\n            \"opp_forwards_eh_id\",\n            \"opp_forwards_api_id\",\n            \"opp_defense\",\n            \"opp_defense_eh_id\",\n            \"opp_defense_api_id\",\n        ]\n\n        event_stats = pd.concat(event_list, ignore_index=True)\n\n        stats_dict = {x: \"sum\" for x in event_stats.columns if x not in merge_cols}\n\n        group_list = [x for x in merge_cols if x in event_stats.columns]\n\n        event_stats = event_stats.groupby(group_list, as_index=False).agg(stats_dict)\n\n        opp_stats = pd.concat(opp_list, ignore_index=True)\n\n        stats_dict = {x: \"sum\" for x in opp_stats.columns if x not in merge_cols}\n\n        group_list = [x for x in merge_cols if x in opp_stats.columns]\n\n        opp_stats = opp_stats.groupby(group_list, as_index=False).agg(stats_dict)\n\n        zones_stats = pd.concat(zones_list, ignore_index=True)\n\n        stats_dict = {x: \"sum\" for x in zones_stats.columns if x not in merge_cols}\n\n        group_list = [x for x in merge_cols if x in zones_stats.columns]\n\n        zones_stats = zones_stats.groupby(group_list, as_index=False).agg(stats_dict)\n\n        merge_cols = [\n            x for x in merge_cols if x in event_stats.columns and x in opp_stats.columns and x in zones_stats.columns\n        ]\n\n        oi_stats = event_stats.merge(opp_stats, on=merge_cols, how=\"outer\").fillna(0)\n\n        oi_stats = oi_stats.merge(zones_stats, on=merge_cols, how=\"outer\").fillna(0)\n\n        oi_stats[\"toi\"] = (oi_stats.event_length_x + oi_stats.event_length_y) / 60\n\n        oi_stats[\"bsf\"] = oi_stats.bsf_x + oi_stats.bsf_y\n        oi_stats[\"bsf_adj\"] = oi_stats.bsf_adj_x + oi_stats.bsf_adj_y\n\n        oi_stats[\"cf\"] = oi_stats.ff + oi_stats.bsf\n        oi_stats[\"cf_adj\"] = oi_stats.ff_adj + oi_stats.bsf_adj\n\n        oi_stats[\"ca\"] = oi_stats.fa + oi_stats.bsa + oi_stats.teammate_block\n        oi_stats[\"ca_adj\"] = oi_stats.fa_adj + oi_stats.bsa_adj + oi_stats.teammate_block_adj\n\n        fo_list = [\"ozf\", \"dzf\", \"nzf\"]\n\n        for fo in fo_list:\n            oi_stats[fo] = oi_stats[f\"{fo}w\"] + oi_stats[f\"{fo}l\"]\n\n        oi_stats[\"fac\"] = oi_stats.ozf + oi_stats.nzf + oi_stats.dzf\n\n        columns = [x for x in list(OIStatSchema.dtypes.keys()) if x in oi_stats.columns]\n\n        oi_stats = oi_stats[columns]\n\n        stats = [\n            \"toi\",\n            \"gf\",\n            \"gf_adj\",\n            \"hdgf\",\n            \"sf\",\n            \"sf_adj\",\n            \"hdsf\",\n            \"ff\",\n            \"ff_adj\",\n            \"hdff\",\n            \"cf\",\n            \"cf_adj\",\n            \"xgf\",\n            \"xgf_adj\",\n            \"bsf\",\n            \"msf\",\n            \"hdmsf\",\n            \"ga\",\n            \"ga_adj\",\n            \"hdga\",\n            \"sa\",\n            \"sa_adj\",\n            \"hdsa\",\n            \"fa\",\n            \"fa_adj\",\n            \"hdfa\",\n            \"ca\",\n            \"ca_adj\",\n            \"xga\",\n            \"xga_adj\",\n            \"bsa\",\n            \"msa\",\n            \"hdmsa\",\n            \"hf\",\n            \"ht\",\n            \"ozf\",\n            \"nzf\",\n            \"dzf\",\n            \"fow\",\n            \"fol\",\n            \"ozfw\",\n            \"ozfl\",\n            \"nzfw\",\n            \"nzfl\",\n            \"dzfw\",\n            \"dzfl\",\n            \"pent0\",\n            \"pent2\",\n            \"pent4\",\n            \"pent5\",\n            \"pent10\",\n            \"pend0\",\n            \"pend2\",\n            \"pend4\",\n            \"pend5\",\n            \"pend10\",\n        ]\n\n        stats = [x.lower() for x in stats if x.lower() in oi_stats.columns]\n\n        oi_stats = oi_stats.loc[(oi_stats[stats] != 0).any(axis=1)]\n\n        oi_stats = OIStatSchema.validate(oi_stats)\n\n        self._oi_stats = oi_stats\n\n    @property\n    def oi_stats(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of on-ice stats aggregated from play-by-play data.\n\n        Nested within `prep_stats` method.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 2023 for 2023-24 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020001\n            game_date (int):\n                Date game was played, e.g., 2023-10-10\n            player (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            api_id (str):\n                NHL API ID for the player, e.g., 8476887\n            position (str):\n                Player's position, e.g., L\n            team (str):\n                Player's team, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., TBL\n            strength_state (str):\n                Strength state, e.g., 5v5\n            period (int):\n                Period, e.g., 3\n            score_state (str):\n                Score state, e.g., 2v1\n            forwards (str):\n                Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY\n            forwards_eh_id (str):\n                Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n            forwards_api_id (str):\n                Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158\n            defense (str):\n                Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER\n            defense_eh_id (str):\n                Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER\n            defense_api_id (str):\n                Defense teammates' NHL API IDs, e.g., 8474151, 8478851\n            own_goalie (str):\n                Own goalie, e.g., JUUSE SAROS\n            own_goalie_eh_id (str):\n                Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS\n            own_goalie_api_id (str):\n                Own goalie's NHL API ID, e.g., 8477424\n            opp_forwards (str):\n                Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS\n            opp_forwards_eh_id (str):\n                Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS\n            opp_forwards_api_id (str):\n                Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564\n            opp_defense (str):\n                Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN\n            opp_defense_eh_id (str):\n                Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN\n            opp_defense_api_id (str):\n                Opposing defense's NHL API IDs, e.g., 8480246, 8475167\n            opp_goalie (str):\n                Opposing goalie, e.g., JONAS JOHANSSON\n            opp_goalie_eh_id (str):\n                Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON\n            opp_goalie_api_id (str):\n                Opposing goalie's NHL API ID, e.g., 8477992\n            toi (float):\n                Time on-ice, in minutes, e.g, 0.483333\n            gf (int):\n                Goals for (on-ice), e.g, 0\n            hdgf (int):\n                High-danger goals for (on-ice), e.g, 0\n            ga (int):\n                Goals against (on-ice), e.g, 0\n            hdga (int):\n                High-danger goals against (on-ice), e.g, 0\n            xgf (float):\n                xG for (on-ice), e.g., 1.258332\n            xga (float):\n                xG against (on-ice), e.g, 0.000000\n            sf (int):\n                Shots for (on-ice), e.g, 4\n            sa (int):\n                Shots against (on-ice), e.g, 0\n            hdsf (int):\n                High-danger shots for (on-ice), e.g, 3\n            hdsa (int):\n                High-danger shots against (on-ice), e.g, 0\n            ff (int):\n                Fenwick for (on-ice), e.g, 4\n            fa (int):\n                Fenwick against (on-ice), e.g, 0\n            hdff (int):\n                High-danger fenwick for (on-ice), e.g, 3\n            hdfa (int):\n                High-danger fenwick against (on-ice), e.g, 0\n            cf (int):\n                Corsi for (on-ice), e.g, 4\n            ca (int):\n                Corsi against (on-ice), e.g, 0\n            bsf (int):\n                Shots taken that were blocked (on-ice), e.g, 0\n            bsa (int):\n                Shots blocked (on-ice), e.g, 0\n            msf (int):\n                Missed shots taken (on-ice), e.g, 0\n            msa (int):\n                Missed shots against (on-ice), e.g, 0\n            hdmsf (int):\n                High-danger missed shots taken (on-ice), e.g, 0\n            hdmsa (int):\n                High-danger missed shots against (on-ice), e.g, 0\n            teammate_block (int):\n                Shots blocked by teammates (on-ice), e.g, 0\n            hf (int):\n                Hits for (on-ice), e.g, 0\n            ht (int):\n                Hits taken (on-ice), e.g, 0\n            give (int):\n                Giveaways (on-ice), e.g, 0\n            take (int):\n                Takeaways (on-ice), e.g, 0\n            ozf (int):\n                Offensive zone faceoffs (on-ice), e.g, 0\n            nzf (int):\n                Neutral zone faceoffs (on-ice), e.g, 1\n            dzf (int):\n                Defensive zone faceoffs (on-ice), e.g, 0\n            fow (int):\n                Faceoffs won (on-ice), e.g, 1\n            fol (int):\n                Faceoffs lost (on-ice), e.g, 0\n            ozfw (int):\n                Offensive zone faceoffs won (on-ice), e.g, 0\n            ozfl (int):\n                Offensive zone faceoffs lost (on-ice), e.g, 0\n            nzfw (int):\n                Neutral zone faceoffs won (on-ice), e.g, 1\n            nzfl (int):\n                Neutral zone faceoffs lost (on-ice), e.g, 0\n            dzfw (int):\n                Defensive zone faceoffs won (on-ice), e.g, 0\n            dzfl (int):\n                Defensive zone faceoffs lost (on-ice), e.g, 0\n            pent0 (int):\n                Penalty shots allowed (on-ice), e.g, 0\n            pent2 (int):\n                Minor penalties taken (on-ice), e.g, 0\n            pent4 (int):\n                Double minor penalties taken (on-ice), e.g, 0\n            pent5 (int):\n                Major penalties taken (on-ice), e.g, 0\n            pent10 (int):\n                Game misconduct penalties taken (on-ice), e.g, 0\n            pend0 (int):\n                Penalty shots drawn (on-ice), e.g, 0\n            pend2 (int):\n                Minor penalties drawn (on-ice), e.g, 0\n            pend4 (int):\n                Double minor penalties drawn (on-ice), e.g, 0\n            pend5 (int):\n                Major penalties drawn (on-ice), e.g, 0\n            pend10 (int):\n                Game misconduct penalties drawn (on-ice), e.g, 0\n            ozs (int):\n                Offensive zone starts, e.g, 0\n            nzs (int):\n                Neutral zone starts, e.g, 0\n            dzs (int):\n                Defenzive zone starts, e.g, 0\n            otf (int):\n                On-the-fly starts, e.g, 0\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2023020001\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; scraper.ind_stats\n\n        \"\"\"\n        if self._oi_stats.empty:\n            self._prep_oi()\n\n        return self._oi_stats\n\n    def _prep_stats(\n        self,\n        level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n        score: bool = False,\n        teammates: bool = False,\n        opposition: bool = False,\n    ) -&gt; None:\n        \"\"\"Prepares DataFrame of individual and on-ice stats from play-by-play data.\n\n        Nested within `prep_stats` method.\n\n        Parameters:\n            level (str):\n                Determines the level of aggregation. One of season, session, game, period\n            score (bool):\n                Determines if stats account for score state\n            teammates (bool):\n                Determines if stats account for teammates on ice\n            opposition (bool):\n                Determines if stats account for opponents on ice\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 2023 for 2023-24 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020001\n            game_date (int):\n                Date game was played, e.g., 2023-10-10\n            player (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            api_id (str):\n                NHL API ID for the player, e.g., 8476887\n            position (str):\n                Player's position, e.g., L\n            team (str):\n                Player's team, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., TBL\n            strength_state (str):\n                Strength state, e.g., 5v5\n            period (int):\n                Period, e.g., 3\n            score_state (str):\n                Score state, e.g., 2v1\n            forwards (str):\n                Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY\n            forwards_eh_id (str):\n                Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n            forwards_api_id (str):\n                Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158\n            defense (str):\n                Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER\n            defense_eh_id (str):\n                Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER\n            defense_api_id (str):\n                Defense teammates' NHL API IDs, e.g., 8474151, 8478851\n            own_goalie (str):\n                Own goalie, e.g., JUUSE SAROS\n            own_goalie_eh_id (str):\n                Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS\n            own_goalie_api_id (str):\n                Own goalie's NHL API ID, e.g., 8477424\n            opp_forwards (str):\n                Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS\n            opp_forwards_eh_id (str):\n                Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS\n            opp_forwards_api_id (str):\n                Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564\n            opp_defense (str):\n                Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN\n            opp_defense_eh_id (str):\n                Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN\n            opp_defense_api_id (str):\n                Opposing defense's NHL API IDs, e.g., 8480246, 8475167\n            opp_goalie (str):\n                Opposing goalie, e.g., JONAS JOHANSSON\n            opp_goalie_eh_id (str):\n                Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON\n            opp_goalie_api_id (str):\n                Opposing goalie's NHL API ID, e.g., 8477992\n            toi (float):\n                Time on-ice, in minutes, e.g, 0.483333\n            g (int):\n                Goals scored, e.g, 0\n            ihdg (int):\n                High-danger goals scored, e.g, 0\n            a1 (int):\n                Primary assists, e.g, 0\n            a2 (int):\n                Secondary assists, e.g, 0\n            ixg (float):\n                Individual xG for, e.g, 1.014336\n            isf (int):\n                Individual shots taken, e.g, 3\n            ihdsf (int):\n                High-danger shots taken, e.g, 3\n            imsf (int):\n                Individual missed shots, e.g, 0\n            ihdm (int):\n                High-danger missed shots, e.g, 0\n            iff (int):\n                Individual fenwick for, e.g., 3\n            ihdf (int):\n                High-danger fenwick for, e.g., 3\n            isb (int):\n                Shots taken that were blocked, e.g, 0\n            icf (int):\n                Individual corsi for, e.g., 3\n            ibs (int):\n                Individual shots blocked on defense, e.g, 0\n            igive (int):\n                Individual giveaways, e.g, 0\n            itake (int):\n                Individual takeaways, e.g, 0\n            ihf (int):\n                Individual hits for, e.g, 0\n            iht (int):\n                Individual hits taken, e.g, 0\n            ifow (int):\n                Individual faceoffs won, e.g, 0\n            ifol (int):\n                Individual faceoffs lost, e.g, 0\n            iozfw (int):\n                Individual faceoffs won in offensive zone, e.g, 0\n            iozfl (int):\n                Individual faceoffs lost in offensive zone, e.g, 0\n            inzfw (int):\n                Individual faceoffs won in neutral zone, e.g, 0\n            inzfl (int):\n                Individual faceoffs lost in neutral zone, e.g, 0\n            idzfw (int):\n                Individual faceoffs won in defensive zone, e.g, 0\n            idzfl (int):\n                Individual faceoffs lost in defensive zone, e.g, 0\n            a1_xg (float):\n                xG on primary assists, e.g, 0\n            a2_xg (float):\n                xG on secondary assists, e.g, 0\n            ipent0 (int):\n                Individual penalty shots against, e.g, 0\n            ipent2 (int):\n                Individual minor penalties taken, e.g, 0\n            ipent4 (int):\n                Individual double minor penalties taken, e.g, 0\n            ipent5 (int):\n                Individual major penalties taken, e.g, 0\n            ipent10 (int):\n                Individual game misconduct penalties taken, e.g, 0\n            ipend0 (int):\n                Individual penalty shots drawn, e.g, 0\n            ipend2 (int):\n                Individual minor penalties taken, e.g, 0\n            ipend4 (int):\n                Individual double minor penalties drawn, e.g, 0\n            ipend5 (int):\n                Individual major penalties drawn, e.g, 0\n            ipend10 (int):\n                Individual game misconduct penalties drawn, e.g, 0\n            gf (int):\n                Goals for (on-ice), e.g, 0\n            hdgf (int):\n                High-danger goals for (on-ice), e.g, 0\n            ga (int):\n                Goals against (on-ice), e.g, 0\n            hdga (int):\n                High-danger goals against (on-ice), e.g, 0\n            xgf (float):\n                xG for (on-ice), e.g., 1.258332\n            xga (float):\n                xG against (on-ice), e.g, 0.000000\n            sf (int):\n                Shots for (on-ice), e.g, 4\n            sa (int):\n                Shots against (on-ice), e.g, 0\n            hdsf (int):\n                High-danger shots for (on-ice), e.g, 3\n            hdsa (int):\n                High-danger shots against (on-ice), e.g, 0\n            ff (int):\n                Fenwick for (on-ice), e.g, 4\n            fa (int):\n                Fenwick against (on-ice), e.g, 0\n            hdff (int):\n                High-danger fenwick for (on-ice), e.g, 3\n            hdfa (int):\n                High-danger fenwick against (on-ice), e.g, 0\n            cf (int):\n                Corsi for (on-ice), e.g, 4\n            ca (int):\n                Corsi against (on-ice), e.g, 0\n            bsf (int):\n                Shots taken that were blocked (on-ice), e.g, 0\n            bsa (int):\n                Shots blocked (on-ice), e.g, 0\n            msf (int):\n                Missed shots taken (on-ice), e.g, 0\n            msa (int):\n                Missed shots against (on-ice), e.g, 0\n            hdmsf (int):\n                High-danger missed shots taken (on-ice), e.g, 0\n            hdmsa (int):\n                High-danger missed shots against (on-ice), e.g, 0\n            teammate_block (int):\n                Shots blocked by teammates (on-ice), e.g, 0\n            hf (int):\n                Hits for (on-ice), e.g, 0\n            ht (int):\n                Hits taken (on-ice), e.g, 0\n            give (int):\n                Giveaways (on-ice), e.g, 0\n            take (int):\n                Takeaways (on-ice), e.g, 0\n            ozf (int):\n                Offensive zone faceoffs (on-ice), e.g, 0\n            nzf (int):\n                Neutral zone faceoffs (on-ice), e.g, 1\n            dzf (int):\n                Defensive zone faceoffs (on-ice), e.g, 0\n            fow (int):\n                Faceoffs won (on-ice), e.g, 1\n            fol (int):\n                Faceoffs lost (on-ice), e.g, 0\n            ozfw (int):\n                Offensive zone faceoffs won (on-ice), e.g, 0\n            ozfl (int):\n                Offensive zone faceoffs lost (on-ice), e.g, 0\n            nzfw (int):\n                Neutral zone faceoffs won (on-ice), e.g, 1\n            nzfl (int):\n                Neutral zone faceoffs lost (on-ice), e.g, 0\n            dzfw (int):\n                Defensive zone faceoffs won (on-ice), e.g, 0\n            dzfl (int):\n                Defensive zone faceoffs lost (on-ice), e.g, 0\n            pent0 (int):\n                Penalty shots allowed (on-ice), e.g, 0\n            pent2 (int):\n                Minor penalties taken (on-ice), e.g, 0\n            pent4 (int):\n                Double minor penalties taken (on-ice), e.g, 0\n            pent5 (int):\n                Major penalties taken (on-ice), e.g, 0\n            pent10 (int):\n                Game misconduct penalties taken (on-ice), e.g, 0\n            pend0 (int):\n                Penalty shots drawn (on-ice), e.g, 0\n            pend2 (int):\n                Minor penalties drawn (on-ice), e.g, 0\n            pend4 (int):\n                Double minor penalties drawn (on-ice), e.g, 0\n            pend5 (int):\n                Major penalties drawn (on-ice), e.g, 0\n            pend10 (int):\n                Game misconduct penalties drawn (on-ice), e.g, 0\n            ozs (int):\n                Offensive zone starts, e.g, 0\n            nzs (int):\n                Neutral zone starts, e.g, 0\n            dzs (int):\n                Defenzive zone starts, e.g, 0\n            otf (int):\n                On-the-fly starts, e.g, 0\n            g_p60 (float):\n                Goals scored per 60 minutes\n            ihdg_p60 (float):\n                Individual high-danger goals scored per 60\n            a1_p60 (float):\n                Primary assists per 60 minutes\n            a2_p60 (float):\n                Secondary per 60 minutes\n            ixg_p60 (float):\n                Individual xG for per 60 minutes\n            isf_p60 (float):\n                Individual shots for per 60 minutes\n            ihdsf_p60 (float):\n                Individual high-danger shots for per 60 minutes\n            imsf_p60 (float):\n                Individual missed shorts for per 60 minutes\n            ihdm_p60 (float):\n                Individual high-danger missed shots for per 60 minutes\n            iff_p60 (float):\n                Individual fenwick for per 60 minutes\n            ihdff_p60 (float):\n                Individual high-danger fenwick for per 60 minutes\n            isb_p60 (float):\n                Individual shots blocked (for) per 60 minutes\n            icf_p60 (float):\n                Individual corsi for per 60 minutes\n            ibs_p60 (float):\n                Individual blocked shots (against) per 60 minutes\n            igive_p60 (float):\n                Individual giveaways per 60 minutes\n            itake_p60 (float):\n                Individual takeaways per 60 minutes\n            ihf_p60 (float):\n                Individual hits for per 60 minutes\n            iht_p60 (float):\n                Individual hits taken per 60 minutes\n            a1_xg_p60 (float):\n                Individual primary assists' xG per 60 minutes\n            a2_xg_p60 (float):\n                Individual secondary assists' xG per 60 minutes\n            ipent0_p60 (float):\n                Individual penalty shots taken per 60 minutes\n            ipent2_p60 (float):\n                Individual minor penalties taken per 60 minutes\n            ipent4_p60 (float):\n                Individual double minor penalties taken per 60 minutes\n            ipent5_p60 (float):\n                Individual major penalties taken per 60 minutes\n            ipent10_p60 (float):\n                Individual game misconduct pentalties taken per 60 minutes\n            ipend0_p60 (float):\n                Individual penalty shots drawn per 60 minutes\n            ipend2_p60 (float):\n                Individual minor penalties drawn per 60 minutes\n            ipend4_p60 (float):\n                Individual double minor penalties drawn per 60 minutes\n            ipend5_p60 (float):\n                Individual major penalties drawn per 60 minutes\n            ipend10_p60 (float):\n                Individual game misconduct penalties drawn per 60 minutes\n            gf_p60 (float):\n                Goals for (on-ice) per 60 minutes\n            ga_p60 (float):\n                Goals against (on-ice) per 60 minutes\n            hdgf_p60 (float):\n                High-danger goals for (on-ice) per 60 minutes\n            hdga_p60 (float):\n                High-danger goals against (on-ice) per 60 minutes\n            xgf_p60 (float):\n                xG for (on-ice) per 60 minutes\n            xga_p60 (float):\n                xG against (on-ice) per 60 minutes\n            sf_p60 (float):\n                Shots for (on-ice) per 60 minutes\n            sa_p60 (float):\n                Shots against (on-ice) per 60 minutes\n            hdsf_p60 (float):\n                High-danger shots for (on-ice) per 60 minutes\n            hdsa_p60 (float):\n                High danger shots against (on-ice) per 60 minutes\n            ff_p60 (float):\n                Fenwick for (on-ice) per 60 minutes\n            fa_p60 (float):\n                Fenwick against (on-ice) per 60 minutes\n            hdff_p60 (float):\n                High-danger fenwick for (on-ice) per 60 minutes\n            hdfa_p60 (float):\n                High-danger fenwick against (on-ice) per 60 minutes\n            cf_p60 (float):\n                Corsi for (on-ice) per 60 minutes\n            ca_p60 (float):\n                Corsi against (on-ice) per 60 minutes\n            bsf_p60 (float):\n                Blocked shots for (on-ice) per 60 minutes\n            bsa_p60 (float):\n                Blocked shots against (on-ice) per 60 minutes\n            msf_p60 (float):\n                Missed shots for (on-ice) per 60 minutes\n            msa_p60 (float):\n                Missed shots against (on-ice) per 60 minutes\n            hdmsf_p60 (float):\n                High-danger missed shots for (on-ice) per 60 minutes\n            hdmsa_p60 (float):\n                High-danger missed shots against (on-ice) per 60 minutes\n            teammate_block_p60 (float):\n                Shots blocked by teammates (on-ice) per 60 minutes\n            hf_p60 (float):\n                Hits  for (on-ice) per 60 minutes\n            ht_p60 (float):\n                Hits taken (on-ice) per 60 minutes\n            give_p60 (float):\n                Giveaways (on-ice) per 60 minutes\n            take_p60 (float):\n                Takeaways (on-ice) per 60 minutes\n            pent0_p60 (float):\n                Penalty shots taken (on-ice) per 60 minutes\n            pent2_p60 (float):\n                Minor penalties taken (on-ice) per 60 minutes\n            pent4_p60 (float):\n                Double minor penalties taken (on-ice) per 60 minutes\n            pent5_p60 (float):\n                Major penalties taken (on-ice) per 60 minutes\n            pent10_p60 (float):\n                Game misconduct pentalties taken (on-ice) per 60 minutes\n            pend0_p60 (float):\n                Penalty shots drawn (on-ice) per 60 minutes\n            pend2_p60 (float):\n                Minor penalties drawn (on-ice) per 60 minutes\n            pend4_p60 (float):\n                Double minor penalties drawn (on-ice) per 60 minutes\n            pend5_p60 (float):\n                Major penalties drawn (on-ice) per 60 minutes\n            pend10_p60 (float):\n                Game misconduct penalties drawn (on-ice) per 60 minutes\n            gf_percent (float):\n                On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)\n            hdgf_percent (float):\n                On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF /\n                (HDGF + HDGA)\n            xgf_percent (float):\n                On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)\n            sf_percent (float):\n                On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)\n            hdsf_percent (float):\n                On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF /\n                (HDSF + HDSA)\n            ff_percent (float):\n                On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)\n            hdff_percent (float):\n                On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF /\n                (HDFF + HDFA)\n            cf_percent (float):\n                On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)\n            bsf_percent (float):\n                On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)\n            msf_percent (float):\n                On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)\n            hdmsf_percent (float):\n                On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e.,\n                HDMSF / (HDMSF + HDMSA)\n            hf_percent (float):\n                On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)\n            take_percent (float):\n                On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2023020001\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Prepares individual and on-ice dataframe with default options\n            &gt;&gt;&gt; scraper._prep_stats()\n\n            Individual and on-ice statistics, aggregated to season level\n            &gt;&gt;&gt; scraper._prep_stats(level=\"season\")\n\n            Individual and on-ice statistics, aggregated to game level, accounting for teammates\n            &gt;&gt;&gt; scraper._prep_stats(level=\"game\", teammates=True)\n\n        \"\"\"\n        if self._ind_stats.empty:\n            self._prep_ind(level=level, score=score, teammates=teammates, opposition=opposition)\n\n        if self._oi_stats.empty:\n            self._prep_oi(level=level, score=score, teammates=teammates, opposition=opposition)\n\n        merge_cols = [\n            \"season\",\n            \"session\",\n            \"game_id\",\n            \"game_date\",\n            \"player\",\n            \"eh_id\",\n            \"api_id\",\n            \"position\",\n            \"team\",\n            \"opp_team\",\n            \"strength_state\",\n            \"score_state\",\n            \"period\",\n            \"forwards\",\n            \"forwards_eh_id\",\n            \"forwards_api_id\",\n            \"defense\",\n            \"defense_eh_id\",\n            \"defense_api_id\",\n            \"own_goalie\",\n            \"own_goalie_eh_id\",\n            \"own_goalie_api_id\",\n            \"opp_forwards\",\n            \"opp_forwards_eh_id\",\n            \"opp_forwards_api_id\",\n            \"opp_defense\",\n            \"opp_defense_eh_id\",\n            \"opp_defense_api_id\",\n            \"opp_goalie\",\n            \"opp_goalie_eh_id\",\n            \"opp_goalie_api_id\",\n        ]\n\n        merge_cols = [\n            x\n            for x in merge_cols\n            if x in self._ind_stats.columns and x in self._oi_stats.columns\n            # and x in self._zones.columns\n        ]\n\n        stats = self._oi_stats.merge(self._ind_stats, how=\"left\", left_on=merge_cols, right_on=merge_cols).fillna(0)\n\n        stats = stats.loc[stats.toi &gt; 0].reset_index(drop=True).copy()\n\n        columns = [x for x in list(StatSchema.dtypes.keys()) if x in stats.columns]\n\n        stats = stats[columns]\n\n        stats = prep_p60(stats)\n\n        stats = prep_oi_percent(stats)\n\n        stats = StatSchema.validate(stats)\n\n        self._stats = stats\n\n    def prep_stats(\n        self,\n        level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n        score: bool = False,\n        teammates: bool = False,\n        opposition: bool = False,\n        disable_progress_bar: bool | None = None,\n    ) -&gt; None:\n        \"\"\"Prepares DataFrame of individual and on-ice stats from play-by-play data.\n\n        Used to prepare, or reset prepared data for later analysis\n\n        Parameters:\n            level (str):\n                Determines the level of aggregation. One of season, session, game, period\n            score (bool):\n                Determines if stats account for score state\n            teammates (bool):\n                Determines if stats account for teammates on ice\n            opposition (bool):\n                Determines if stats account for opponents on ice\n            disable_progress_bar (bool):\n                Determines whether to display the progress bar\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 2023 for 2023-24 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020001\n            game_date (int):\n                Date game was played, e.g., 2023-10-10\n            player (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            api_id (str):\n                NHL API ID for the player, e.g., 8476887\n            position (str):\n                Player's position, e.g., L\n            team (str):\n                Player's team, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., TBL\n            strength_state (str):\n                Strength state, e.g., 5v5\n            period (int):\n                Period, e.g., 3\n            score_state (str):\n                Score state, e.g., 2v1\n            forwards (str):\n                Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY\n            forwards_eh_id (str):\n                Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n            forwards_api_id (str):\n                Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158\n            defense (str):\n                Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER\n            defense_eh_id (str):\n                Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER\n            defense_api_id (str):\n                Defense teammates' NHL API IDs, e.g., 8474151, 8478851\n            own_goalie (str):\n                Own goalie, e.g., JUUSE SAROS\n            own_goalie_eh_id (str):\n                Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS\n            own_goalie_api_id (str):\n                Own goalie's NHL API ID, e.g., 8477424\n            opp_forwards (str):\n                Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS\n            opp_forwards_eh_id (str):\n                Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS\n            opp_forwards_api_id (str):\n                Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564\n            opp_defense (str):\n                Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN\n            opp_defense_eh_id (str):\n                Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN\n            opp_defense_api_id (str):\n                Opposing defense's NHL API IDs, e.g., 8480246, 8475167\n            opp_goalie (str):\n                Opposing goalie, e.g., JONAS JOHANSSON\n            opp_goalie_eh_id (str):\n                Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON\n            opp_goalie_api_id (str):\n                Opposing goalie's NHL API ID, e.g., 8477992\n            toi (float):\n                Time on-ice, in minutes, e.g, 0.483333\n            g (int):\n                Goals scored, e.g, 0\n            ihdg (int):\n                High-danger goals scored, e.g, 0\n            a1 (int):\n                Primary assists, e.g, 0\n            a2 (int):\n                Secondary assists, e.g, 0\n            ixg (float):\n                Individual xG for, e.g, 1.014336\n            isf (int):\n                Individual shots taken, e.g, 3\n            ihdsf (int):\n                High-danger shots taken, e.g, 3\n            imsf (int):\n                Individual missed shots, e.g, 0\n            ihdm (int):\n                High-danger missed shots, e.g, 0\n            iff (int):\n                Individual fenwick for, e.g., 3\n            ihdf (int):\n                High-danger fenwick for, e.g., 3\n            isb (int):\n                Shots taken that were blocked, e.g, 0\n            icf (int):\n                Individual corsi for, e.g., 3\n            ibs (int):\n                Individual shots blocked on defense, e.g, 0\n            igive (int):\n                Individual giveaways, e.g, 0\n            itake (int):\n                Individual takeaways, e.g, 0\n            ihf (int):\n                Individual hits for, e.g, 0\n            iht (int):\n                Individual hits taken, e.g, 0\n            ifow (int):\n                Individual faceoffs won, e.g, 0\n            ifol (int):\n                Individual faceoffs lost, e.g, 0\n            iozfw (int):\n                Individual faceoffs won in offensive zone, e.g, 0\n            iozfl (int):\n                Individual faceoffs lost in offensive zone, e.g, 0\n            inzfw (int):\n                Individual faceoffs won in neutral zone, e.g, 0\n            inzfl (int):\n                Individual faceoffs lost in neutral zone, e.g, 0\n            idzfw (int):\n                Individual faceoffs won in defensive zone, e.g, 0\n            idzfl (int):\n                Individual faceoffs lost in defensive zone, e.g, 0\n            a1_xg (float):\n                xG on primary assists, e.g, 0\n            a2_xg (float):\n                xG on secondary assists, e.g, 0\n            ipent0 (int):\n                Individual penalty shots against, e.g, 0\n            ipent2 (int):\n                Individual minor penalties taken, e.g, 0\n            ipent4 (int):\n                Individual double minor penalties taken, e.g, 0\n            ipent5 (int):\n                Individual major penalties taken, e.g, 0\n            ipent10 (int):\n                Individual game misconduct penalties taken, e.g, 0\n            ipend0 (int):\n                Individual penalty shots drawn, e.g, 0\n            ipend2 (int):\n                Individual minor penalties taken, e.g, 0\n            ipend4 (int):\n                Individual double minor penalties drawn, e.g, 0\n            ipend5 (int):\n                Individual major penalties drawn, e.g, 0\n            ipend10 (int):\n                Individual game misconduct penalties drawn, e.g, 0\n            gf (int):\n                Goals for (on-ice), e.g, 0\n            hdgf (int):\n                High-danger goals for (on-ice), e.g, 0\n            ga (int):\n                Goals against (on-ice), e.g, 0\n            hdga (int):\n                High-danger goals against (on-ice), e.g, 0\n            xgf (float):\n                xG for (on-ice), e.g., 1.258332\n            xga (float):\n                xG against (on-ice), e.g, 0.000000\n            sf (int):\n                Shots for (on-ice), e.g, 4\n            sa (int):\n                Shots against (on-ice), e.g, 0\n            hdsf (int):\n                High-danger shots for (on-ice), e.g, 3\n            hdsa (int):\n                High-danger shots against (on-ice), e.g, 0\n            ff (int):\n                Fenwick for (on-ice), e.g, 4\n            fa (int):\n                Fenwick against (on-ice), e.g, 0\n            hdff (int):\n                High-danger fenwick for (on-ice), e.g, 3\n            hdfa (int):\n                High-danger fenwick against (on-ice), e.g, 0\n            cf (int):\n                Corsi for (on-ice), e.g, 4\n            ca (int):\n                Corsi against (on-ice), e.g, 0\n            bsf (int):\n                Shots taken that were blocked (on-ice), e.g, 0\n            bsa (int):\n                Shots blocked (on-ice), e.g, 0\n            msf (int):\n                Missed shots taken (on-ice), e.g, 0\n            msa (int):\n                Missed shots against (on-ice), e.g, 0\n            hdmsf (int):\n                High-danger missed shots taken (on-ice), e.g, 0\n            hdmsa (int):\n                High-danger missed shots against (on-ice), e.g, 0\n            teammate_block (int):\n                Shots blocked by teammates (on-ice), e.g, 0\n            hf (int):\n                Hits for (on-ice), e.g, 0\n            ht (int):\n                Hits taken (on-ice), e.g, 0\n            give (int):\n                Giveaways (on-ice), e.g, 0\n            take (int):\n                Takeaways (on-ice), e.g, 0\n            ozf (int):\n                Offensive zone faceoffs (on-ice), e.g, 0\n            nzf (int):\n                Neutral zone faceoffs (on-ice), e.g, 1\n            dzf (int):\n                Defensive zone faceoffs (on-ice), e.g, 0\n            fow (int):\n                Faceoffs won (on-ice), e.g, 1\n            fol (int):\n                Faceoffs lost (on-ice), e.g, 0\n            ozfw (int):\n                Offensive zone faceoffs won (on-ice), e.g, 0\n            ozfl (int):\n                Offensive zone faceoffs lost (on-ice), e.g, 0\n            nzfw (int):\n                Neutral zone faceoffs won (on-ice), e.g, 1\n            nzfl (int):\n                Neutral zone faceoffs lost (on-ice), e.g, 0\n            dzfw (int):\n                Defensive zone faceoffs won (on-ice), e.g, 0\n            dzfl (int):\n                Defensive zone faceoffs lost (on-ice), e.g, 0\n            pent0 (int):\n                Penalty shots allowed (on-ice), e.g, 0\n            pent2 (int):\n                Minor penalties taken (on-ice), e.g, 0\n            pent4 (int):\n                Double minor penalties taken (on-ice), e.g, 0\n            pent5 (int):\n                Major penalties taken (on-ice), e.g, 0\n            pent10 (int):\n                Game misconduct penalties taken (on-ice), e.g, 0\n            pend0 (int):\n                Penalty shots drawn (on-ice), e.g, 0\n            pend2 (int):\n                Minor penalties drawn (on-ice), e.g, 0\n            pend4 (int):\n                Double minor penalties drawn (on-ice), e.g, 0\n            pend5 (int):\n                Major penalties drawn (on-ice), e.g, 0\n            pend10 (int):\n                Game misconduct penalties drawn (on-ice), e.g, 0\n            ozs (int):\n                Offensive zone starts, e.g, 0\n            nzs (int):\n                Neutral zone starts, e.g, 0\n            dzs (int):\n                Defenzive zone starts, e.g, 0\n            otf (int):\n                On-the-fly starts, e.g, 0\n            g_p60 (float):\n                Goals scored per 60 minutes\n            ihdg_p60 (float):\n                Individual high-danger goals scored per 60\n            a1_p60 (float):\n                Primary assists per 60 minutes\n            a2_p60 (float):\n                Secondary per 60 minutes\n            ixg_p60 (float):\n                Individual xG for per 60 minutes\n            isf_p60 (float):\n                Individual shots for per 60 minutes\n            ihdsf_p60 (float):\n                Individual high-danger shots for per 60 minutes\n            imsf_p60 (float):\n                Individual missed shorts for per 60 minutes\n            ihdm_p60 (float):\n                Individual high-danger missed shots for per 60 minutes\n            iff_p60 (float):\n                Individual fenwick for per 60 minutes\n            ihdff_p60 (float):\n                Individual high-danger fenwick for per 60 minutes\n            isb_p60 (float):\n                Individual shots blocked (for) per 60 minutes\n            icf_p60 (float):\n                Individual corsi for per 60 minutes\n            ibs_p60 (float):\n                Individual blocked shots (against) per 60 minutes\n            igive_p60 (float):\n                Individual giveaways per 60 minutes\n            itake_p60 (float):\n                Individual takeaways per 60 minutes\n            ihf_p60 (float):\n                Individual hits for per 60 minutes\n            iht_p60 (float):\n                Individual hits taken per 60 minutes\n            a1_xg_p60 (float):\n                Individual primary assists' xG per 60 minutes\n            a2_xg_p60 (float):\n                Individual secondary assists' xG per 60 minutes\n            ipent0_p60 (float):\n                Individual penalty shots taken per 60 minutes\n            ipent2_p60 (float):\n                Individual minor penalties taken per 60 minutes\n            ipent4_p60 (float):\n                Individual double minor penalties taken per 60 minutes\n            ipent5_p60 (float):\n                Individual major penalties taken per 60 minutes\n            ipent10_p60 (float):\n                Individual game misconduct pentalties taken per 60 minutes\n            ipend0_p60 (float):\n                Individual penalty shots drawn per 60 minutes\n            ipend2_p60 (float):\n                Individual minor penalties drawn per 60 minutes\n            ipend4_p60 (float):\n                Individual double minor penalties drawn per 60 minutes\n            ipend5_p60 (float):\n                Individual major penalties drawn per 60 minutes\n            ipend10_p60 (float):\n                Individual game misconduct penalties drawn per 60 minutes\n            gf_p60 (float):\n                Goals for (on-ice) per 60 minutes\n            ga_p60 (float):\n                Goals against (on-ice) per 60 minutes\n            hdgf_p60 (float):\n                High-danger goals for (on-ice) per 60 minutes\n            hdga_p60 (float):\n                High-danger goals against (on-ice) per 60 minutes\n            xgf_p60 (float):\n                xG for (on-ice) per 60 minutes\n            xga_p60 (float):\n                xG against (on-ice) per 60 minutes\n            sf_p60 (float):\n                Shots for (on-ice) per 60 minutes\n            sa_p60 (float):\n                Shots against (on-ice) per 60 minutes\n            hdsf_p60 (float):\n                High-danger shots for (on-ice) per 60 minutes\n            hdsa_p60 (float):\n                High danger shots against (on-ice) per 60 minutes\n            ff_p60 (float):\n                Fenwick for (on-ice) per 60 minutes\n            fa_p60 (float):\n                Fenwick against (on-ice) per 60 minutes\n            hdff_p60 (float):\n                High-danger fenwick for (on-ice) per 60 minutes\n            hdfa_p60 (float):\n                High-danger fenwick against (on-ice) per 60 minutes\n            cf_p60 (float):\n                Corsi for (on-ice) per 60 minutes\n            ca_p60 (float):\n                Corsi against (on-ice) per 60 minutes\n            bsf_p60 (float):\n                Blocked shots for (on-ice) per 60 minutes\n            bsa_p60 (float):\n                Blocked shots against (on-ice) per 60 minutes\n            msf_p60 (float):\n                Missed shots for (on-ice) per 60 minutes\n            msa_p60 (float):\n                Missed shots against (on-ice) per 60 minutes\n            hdmsf_p60 (float):\n                High-danger missed shots for (on-ice) per 60 minutes\n            hdmsa_p60 (float):\n                High-danger missed shots against (on-ice) per 60 minutes\n            teammate_block_p60 (float):\n                Shots blocked by teammates (on-ice) per 60 minutes\n            hf_p60 (float):\n                Hits  for (on-ice) per 60 minutes\n            ht_p60 (float):\n                Hits taken (on-ice) per 60 minutes\n            give_p60 (float):\n                Giveaways (on-ice) per 60 minutes\n            take_p60 (float):\n                Takeaways (on-ice) per 60 minutes\n            pent0_p60 (float):\n                Penalty shots taken (on-ice) per 60 minutes\n            pent2_p60 (float):\n                Minor penalties taken (on-ice) per 60 minutes\n            pent4_p60 (float):\n                Double minor penalties taken (on-ice) per 60 minutes\n            pent5_p60 (float):\n                Major penalties taken (on-ice) per 60 minutes\n            pent10_p60 (float):\n                Game misconduct pentalties taken (on-ice) per 60 minutes\n            pend0_p60 (float):\n                Penalty shots drawn (on-ice) per 60 minutes\n            pend2_p60 (float):\n                Minor penalties drawn (on-ice) per 60 minutes\n            pend4_p60 (float):\n                Double minor penalties drawn (on-ice) per 60 minutes\n            pend5_p60 (float):\n                Major penalties drawn (on-ice) per 60 minutes\n            pend10_p60 (float):\n                Game misconduct penalties drawn (on-ice) per 60 minutes\n            gf_percent (float):\n                On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)\n            hdgf_percent (float):\n                On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF /\n                (HDGF + HDGA)\n            xgf_percent (float):\n                On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)\n            sf_percent (float):\n                On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)\n            hdsf_percent (float):\n                On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF /\n                (HDSF + HDSA)\n            ff_percent (float):\n                On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)\n            hdff_percent (float):\n                On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF /\n                (HDFF + HDFA)\n            cf_percent (float):\n                On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)\n            bsf_percent (float):\n                On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)\n            msf_percent (float):\n                On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)\n            hdmsf_percent (float):\n                On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e.,\n                HDMSF / (HDMSF + HDMSA)\n            hf_percent (float):\n                On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)\n            take_percent (float):\n                On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2023020001\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Prepares individual and on-ice dataframe with default options\n            &gt;&gt;&gt; scraper.prep_stats()\n\n            Individual and on-ice statistics, aggregated to season level\n            &gt;&gt;&gt; scraper.prep_stats(level=\"season\")\n\n            Individual and on-ice statistics, aggregated to game level, accounting for teammates\n            &gt;&gt;&gt; scraper.prep_stats(level=\"game\", teammates=True)\n\n        \"\"\"\n        levels = self._stats_levels\n\n        if (\n            levels[\"level\"] != level\n            or levels[\"score\"] != score\n            or levels[\"teammates\"] != teammates\n            or levels[\"opposition\"] != opposition\n        ):\n            self._clear_stats()\n\n            new_values = {\"level\": level, \"score\": score, \"teammates\": teammates, \"opposition\": opposition}\n\n            self._stats_levels.update(new_values)\n\n        if self._stats.empty:\n            if not disable_progress_bar:\n                disable_progress_bar = self.disable_progress_bar\n\n            with ChickenProgressIndeterminate(disable=disable_progress_bar) as progress:\n                pbar_message = \"Prepping stats data...\"\n                progress_task = progress.add_task(pbar_message, total=None, refresh=True)\n\n                progress.start_task(progress_task)\n                progress.update(progress_task, total=1, description=pbar_message, refresh=True)\n\n                self._prep_stats(level=level, score=score, teammates=teammates, opposition=opposition)\n\n                progress.update(\n                    progress_task,\n                    description=\"Finished prepping stats data\",\n                    completed=True,\n                    advance=True,\n                    refresh=True,\n                )\n\n    @property\n    def stats(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of individual &amp; on-ice stats aggregated from play-by-play data.\n\n        Determine level of aggregation using prep_stats method.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 2023 for 2023-24 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020001\n            game_date (int):\n                Date game was played, e.g., 2023-10-10\n            player (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            api_id (str):\n                NHL API ID for the player, e.g., 8476887\n            position (str):\n                Player's position, e.g., L\n            team (str):\n                Player's team, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., TBL\n            strength_state (str):\n                Strength state, e.g., 5v5\n            period (int):\n                Period, e.g., 3\n            score_state (str):\n                Score state, e.g., 2v1\n            forwards (str):\n                Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY\n            forwards_eh_id (str):\n                Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n            forwards_api_id (str):\n                Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158\n            defense (str):\n                Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER\n            defense_eh_id (str):\n                Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER\n            defense_api_id (str):\n                Defense teammates' NHL API IDs, e.g., 8474151, 8478851\n            own_goalie (str):\n                Own goalie, e.g., JUUSE SAROS\n            own_goalie_eh_id (str):\n                Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS\n            own_goalie_api_id (str):\n                Own goalie's NHL API ID, e.g., 8477424\n            opp_forwards (str):\n                Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS\n            opp_forwards_eh_id (str):\n                Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS\n            opp_forwards_api_id (str):\n                Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564\n            opp_defense (str):\n                Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN\n            opp_defense_eh_id (str):\n                Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN\n            opp_defense_api_id (str):\n                Opposing defense's NHL API IDs, e.g., 8480246, 8475167\n            opp_goalie (str):\n                Opposing goalie, e.g., JONAS JOHANSSON\n            opp_goalie_eh_id (str):\n                Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON\n            opp_goalie_api_id (str):\n                Opposing goalie's NHL API ID, e.g., 8477992\n            toi (float):\n                Time on-ice, in minutes, e.g, 0.483333\n            g (int):\n                Goals scored, e.g, 0\n            ihdg (int):\n                High-danger goals scored, e.g, 0\n            a1 (int):\n                Primary assists, e.g, 0\n            a2 (int):\n                Secondary assists, e.g, 0\n            ixg (float):\n                Individual xG for, e.g, 1.014336\n            isf (int):\n                Individual shots taken, e.g, 3\n            ihdsf (int):\n                High-danger shots taken, e.g, 3\n            imsf (int):\n                Individual missed shots, e.g, 0\n            ihdm (int):\n                High-danger missed shots, e.g, 0\n            iff (int):\n                Individual fenwick for, e.g., 3\n            ihdf (int):\n                High-danger fenwick for, e.g., 3\n            isb (int):\n                Shots taken that were blocked, e.g, 0\n            icf (int):\n                Individual corsi for, e.g., 3\n            ibs (int):\n                Individual shots blocked on defense, e.g, 0\n            igive (int):\n                Individual giveaways, e.g, 0\n            itake (int):\n                Individual takeaways, e.g, 0\n            ihf (int):\n                Individual hits for, e.g, 0\n            iht (int):\n                Individual hits taken, e.g, 0\n            ifow (int):\n                Individual faceoffs won, e.g, 0\n            ifol (int):\n                Individual faceoffs lost, e.g, 0\n            iozfw (int):\n                Individual faceoffs won in offensive zone, e.g, 0\n            iozfl (int):\n                Individual faceoffs lost in offensive zone, e.g, 0\n            inzfw (int):\n                Individual faceoffs won in neutral zone, e.g, 0\n            inzfl (int):\n                Individual faceoffs lost in neutral zone, e.g, 0\n            idzfw (int):\n                Individual faceoffs won in defensive zone, e.g, 0\n            idzfl (int):\n                Individual faceoffs lost in defensive zone, e.g, 0\n            a1_xg (float):\n                xG on primary assists, e.g, 0\n            a2_xg (float):\n                xG on secondary assists, e.g, 0\n            ipent0 (int):\n                Individual penalty shots against, e.g, 0\n            ipent2 (int):\n                Individual minor penalties taken, e.g, 0\n            ipent4 (int):\n                Individual double minor penalties taken, e.g, 0\n            ipent5 (int):\n                Individual major penalties taken, e.g, 0\n            ipent10 (int):\n                Individual game misconduct penalties taken, e.g, 0\n            ipend0 (int):\n                Individual penalty shots drawn, e.g, 0\n            ipend2 (int):\n                Individual minor penalties taken, e.g, 0\n            ipend4 (int):\n                Individual double minor penalties drawn, e.g, 0\n            ipend5 (int):\n                Individual major penalties drawn, e.g, 0\n            ipend10 (int):\n                Individual game misconduct penalties drawn, e.g, 0\n            gf (int):\n                Goals for (on-ice), e.g, 0\n            hdgf (int):\n                High-danger goals for (on-ice), e.g, 0\n            ga (int):\n                Goals against (on-ice), e.g, 0\n            hdga (int):\n                High-danger goals against (on-ice), e.g, 0\n            xgf (float):\n                xG for (on-ice), e.g., 1.258332\n            xga (float):\n                xG against (on-ice), e.g, 0.000000\n            sf (int):\n                Shots for (on-ice), e.g, 4\n            sa (int):\n                Shots against (on-ice), e.g, 0\n            hdsf (int):\n                High-danger shots for (on-ice), e.g, 3\n            hdsa (int):\n                High-danger shots against (on-ice), e.g, 0\n            ff (int):\n                Fenwick for (on-ice), e.g, 4\n            fa (int):\n                Fenwick against (on-ice), e.g, 0\n            hdff (int):\n                High-danger fenwick for (on-ice), e.g, 3\n            hdfa (int):\n                High-danger fenwick against (on-ice), e.g, 0\n            cf (int):\n                Corsi for (on-ice), e.g, 4\n            ca (int):\n                Corsi against (on-ice), e.g, 0\n            bsf (int):\n                Shots taken that were blocked (on-ice), e.g, 0\n            bsa (int):\n                Shots blocked (on-ice), e.g, 0\n            msf (int):\n                Missed shots taken (on-ice), e.g, 0\n            msa (int):\n                Missed shots against (on-ice), e.g, 0\n            hdmsf (int):\n                High-danger missed shots taken (on-ice), e.g, 0\n            hdmsa (int):\n                High-danger missed shots against (on-ice), e.g, 0\n            teammate_block (int):\n                Shots blocked by teammates (on-ice), e.g, 0\n            hf (int):\n                Hits for (on-ice), e.g, 0\n            ht (int):\n                Hits taken (on-ice), e.g, 0\n            give (int):\n                Giveaways (on-ice), e.g, 0\n            take (int):\n                Takeaways (on-ice), e.g, 0\n            ozf (int):\n                Offensive zone faceoffs (on-ice), e.g, 0\n            nzf (int):\n                Neutral zone faceoffs (on-ice), e.g, 1\n            dzf (int):\n                Defensive zone faceoffs (on-ice), e.g, 0\n            fow (int):\n                Faceoffs won (on-ice), e.g, 1\n            fol (int):\n                Faceoffs lost (on-ice), e.g, 0\n            ozfw (int):\n                Offensive zone faceoffs won (on-ice), e.g, 0\n            ozfl (int):\n                Offensive zone faceoffs lost (on-ice), e.g, 0\n            nzfw (int):\n                Neutral zone faceoffs won (on-ice), e.g, 1\n            nzfl (int):\n                Neutral zone faceoffs lost (on-ice), e.g, 0\n            dzfw (int):\n                Defensive zone faceoffs won (on-ice), e.g, 0\n            dzfl (int):\n                Defensive zone faceoffs lost (on-ice), e.g, 0\n            pent0 (int):\n                Penalty shots allowed (on-ice), e.g, 0\n            pent2 (int):\n                Minor penalties taken (on-ice), e.g, 0\n            pent4 (int):\n                Double minor penalties taken (on-ice), e.g, 0\n            pent5 (int):\n                Major penalties taken (on-ice), e.g, 0\n            pent10 (int):\n                Game misconduct penalties taken (on-ice), e.g, 0\n            pend0 (int):\n                Penalty shots drawn (on-ice), e.g, 0\n            pend2 (int):\n                Minor penalties drawn (on-ice), e.g, 0\n            pend4 (int):\n                Double minor penalties drawn (on-ice), e.g, 0\n            pend5 (int):\n                Major penalties drawn (on-ice), e.g, 0\n            pend10 (int):\n                Game misconduct penalties drawn (on-ice), e.g, 0\n            ozs (int):\n                Offensive zone starts, e.g, 0\n            nzs (int):\n                Neutral zone starts, e.g, 0\n            dzs (int):\n                Defenzive zone starts, e.g, 0\n            otf (int):\n                On-the-fly starts, e.g, 0\n            g_p60 (float):\n                Goals scored per 60 minutes\n            ihdg_p60 (float):\n                Individual high-danger goals scored per 60\n            a1_p60 (float):\n                Primary assists per 60 minutes\n            a2_p60 (float):\n                Secondary per 60 minutes\n            ixg_p60 (float):\n                Individual xG for per 60 minutes\n            isf_p60 (float):\n                Individual shots for per 60 minutes\n            ihdsf_p60 (float):\n                Individual high-danger shots for per 60 minutes\n            imsf_p60 (float):\n                Individual missed shorts for per 60 minutes\n            ihdm_p60 (float):\n                Individual high-danger missed shots for per 60 minutes\n            iff_p60 (float):\n                Individual fenwick for per 60 minutes\n            ihdff_p60 (float):\n                Individual high-danger fenwick for per 60 minutes\n            isb_p60 (float):\n                Individual shots blocked (for) per 60 minutes\n            icf_p60 (float):\n                Individual corsi for per 60 minutes\n            ibs_p60 (float):\n                Individual blocked shots (against) per 60 minutes\n            igive_p60 (float):\n                Individual giveaways per 60 minutes\n            itake_p60 (float):\n                Individual takeaways per 60 minutes\n            ihf_p60 (float):\n                Individual hits for per 60 minutes\n            iht_p60 (float):\n                Individual hits taken per 60 minutes\n            a1_xg_p60 (float):\n                Individual primary assists' xG per 60 minutes\n            a2_xg_p60 (float):\n                Individual secondary assists' xG per 60 minutes\n            ipent0_p60 (float):\n                Individual penalty shots taken per 60 minutes\n            ipent2_p60 (float):\n                Individual minor penalties taken per 60 minutes\n            ipent4_p60 (float):\n                Individual double minor penalties taken per 60 minutes\n            ipent5_p60 (float):\n                Individual major penalties taken per 60 minutes\n            ipent10_p60 (float):\n                Individual game misconduct pentalties taken per 60 minutes\n            ipend0_p60 (float):\n                Individual penalty shots drawn per 60 minutes\n            ipend2_p60 (float):\n                Individual minor penalties drawn per 60 minutes\n            ipend4_p60 (float):\n                Individual double minor penalties drawn per 60 minutes\n            ipend5_p60 (float):\n                Individual major penalties drawn per 60 minutes\n            ipend10_p60 (float):\n                Individual game misconduct penalties drawn per 60 minutes\n            gf_p60 (float):\n                Goals for (on-ice) per 60 minutes\n            ga_p60 (float):\n                Goals against (on-ice) per 60 minutes\n            hdgf_p60 (float):\n                High-danger goals for (on-ice) per 60 minutes\n            hdga_p60 (float):\n                High-danger goals against (on-ice) per 60 minutes\n            xgf_p60 (float):\n                xG for (on-ice) per 60 minutes\n            xga_p60 (float):\n                xG against (on-ice) per 60 minutes\n            sf_p60 (float):\n                Shots for (on-ice) per 60 minutes\n            sa_p60 (float):\n                Shots against (on-ice) per 60 minutes\n            hdsf_p60 (float):\n                High-danger shots for (on-ice) per 60 minutes\n            hdsa_p60 (float):\n                High danger shots against (on-ice) per 60 minutes\n            ff_p60 (float):\n                Fenwick for (on-ice) per 60 minutes\n            fa_p60 (float):\n                Fenwick against (on-ice) per 60 minutes\n            hdff_p60 (float):\n                High-danger fenwick for (on-ice) per 60 minutes\n            hdfa_p60 (float):\n                High-danger fenwick against (on-ice) per 60 minutes\n            cf_p60 (float):\n                Corsi for (on-ice) per 60 minutes\n            ca_p60 (float):\n                Corsi against (on-ice) per 60 minutes\n            bsf_p60 (float):\n                Blocked shots for (on-ice) per 60 minutes\n            bsa_p60 (float):\n                Blocked shots against (on-ice) per 60 minutes\n            msf_p60 (float):\n                Missed shots for (on-ice) per 60 minutes\n            msa_p60 (float):\n                Missed shots against (on-ice) per 60 minutes\n            hdmsf_p60 (float):\n                High-danger missed shots for (on-ice) per 60 minutes\n            hdmsa_p60 (float):\n                High-danger missed shots against (on-ice) per 60 minutes\n            teammate_block_p60 (float):\n                Shots blocked by teammates (on-ice) per 60 minutes\n            hf_p60 (float):\n                Hits  for (on-ice) per 60 minutes\n            ht_p60 (float):\n                Hits taken (on-ice) per 60 minutes\n            give_p60 (float):\n                Giveaways (on-ice) per 60 minutes\n            take_p60 (float):\n                Takeaways (on-ice) per 60 minutes\n            pent0_p60 (float):\n                Penalty shots taken (on-ice) per 60 minutes\n            pent2_p60 (float):\n                Minor penalties taken (on-ice) per 60 minutes\n            pent4_p60 (float):\n                Double minor penalties taken (on-ice) per 60 minutes\n            pent5_p60 (float):\n                Major penalties taken (on-ice) per 60 minutes\n            pent10_p60 (float):\n                Game misconduct pentalties taken (on-ice) per 60 minutes\n            pend0_p60 (float):\n                Penalty shots drawn (on-ice) per 60 minutes\n            pend2_p60 (float):\n                Minor penalties drawn (on-ice) per 60 minutes\n            pend4_p60 (float):\n                Double minor penalties drawn (on-ice) per 60 minutes\n            pend5_p60 (float):\n                Major penalties drawn (on-ice) per 60 minutes\n            pend10_p60 (float):\n                Game misconduct penalties drawn (on-ice) per 60 minutes\n            gf_percent (float):\n                On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)\n            hdgf_percent (float):\n                On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e.,\n                HDGF / (HDGF + HDGA)\n            xgf_percent (float):\n                On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)\n            sf_percent (float):\n                On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)\n            hdsf_percent (float):\n                On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e.,\n                HDSF / (HDSF + HDSA)\n            ff_percent (float):\n                On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)\n            hdff_percent (float):\n                On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e.,\n                HDFF / (HDFF + HDFA)\n            cf_percent (float):\n                On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)\n            bsf_percent (float):\n                On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)\n            msf_percent (float):\n                On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)\n            hdmsf_percent (float):\n                On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e.,\n                HDMSF / (HDMSF + HDMSA)\n            hf_percent (float):\n                On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)\n            take_percent (float):\n                On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2023020001\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Returns individual and on-ice stats with default options\n            &gt;&gt;&gt; scraper.stats\n\n            Resets individual and on-ice stats to period level, accounting for teammates on-ice\n            &gt;&gt;&gt; scraper.prep_stats(level=\"period\", teammates=True)\n            &gt;&gt;&gt; scraper.stats\n\n            Resets individual and on-ice stats to season level, accounting for teammates on-ice and score state\n            &gt;&gt;&gt; scraper.prep_stats(level=\"season\", teammates=True, score=True)\n            &gt;&gt;&gt; scraper.stats\n\n        \"\"\"\n        if self._stats.empty:\n            self.prep_stats()\n\n        return self._stats.copy()\n\n    def _clear_stats(self):\n        \"\"\"Method to clear stats dataframes. Nested within `prep_stats` method.\"\"\"\n        self._stats = pd.DataFrame()\n        self._oi_stats = pd.DataFrame()\n        self._ind_stats = pd.DataFrame()\n\n    def _prep_lines(\n        self,\n        position: Literal[\"f\", \"d\"] = \"f\",\n        level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n        score: bool = False,\n        teammates: bool = False,\n        opposition: bool = False,\n    ) -&gt; None:\n        \"\"\"Prepares DataFrame of line-level stats from play-by-play data.\n\n        Nested within `prep_lines` method.\n\n        Parameters:\n            position (str):\n                Determines what positions to aggregate. One of F or D\n            level (str):\n                Determines the level of aggregation. One of season, session, game, period\n            score (bool):\n                Determines if stats account for score state\n            teammates (bool):\n                Determines if stats account for teammates on ice\n            opposition (bool):\n                Determines if stats account for opponents on ice\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 2023 for 2023-24 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020001\n            game_date (int):\n                Date game was played, e.g., 2023-10-10\n            team (str):\n                Player's team, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., TBL\n            strength_state (str):\n                Strength state, e.g., 5v5\n            period (int):\n                Period, e.g., 3\n            score_state (str):\n                Score state, e.g., 2v1\n            forwards (str):\n                Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY\n            forwards_eh_id (str):\n                Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n            forwards_api_id (str):\n                Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158\n            defense (str):\n                Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER\n            defense_eh_id (str):\n                Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER\n            defense_api_id (str):\n                Defense teammates' NHL API IDs, e.g., 8474151, 8478851\n            own_goalie (str):\n                Own goalie, e.g., JUUSE SAROS\n            own_goalie_eh_id (str):\n                Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS\n            own_goalie_api_id (str):\n                Own goalie's NHL API ID, e.g., 8477424\n            opp_forwards (str):\n                Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS\n            opp_forwards_eh_id (str):\n                Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS\n            opp_forwards_api_id (str):\n                Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564\n            opp_defense (str):\n                Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN\n            opp_defense_eh_id (str):\n                Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN\n            opp_defense_api_id (str):\n                Opposing defense's NHL API IDs, e.g., 8480246, 8475167\n            opp_goalie (str):\n                Opposing goalie, e.g., JONAS JOHANSSON\n            opp_goalie_eh_id (str):\n                Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON\n            opp_goalie_api_id (str):\n                Opposing goalie's NHL API ID, e.g., 8477992\n            toi (float):\n                Time on-ice, in minutes, e.g, 0.483333\n            gf (int):\n                Goals for (on-ice), e.g, 0\n            ga (int):\n                Goals against (on-ice), e.g, 0\n            hdgf (int):\n                High-danger goals for (on-ice), e.g, 0\n            hdga (int):\n                High-danger goals against (on-ice), e.g, 0\n            xgf (float):\n                xG for (on-ice), e.g., 1.258332\n            xga (float):\n                xG against (on-ice), e.g, 0.000000\n            sf (int):\n                Shots for (on-ice), e.g, 4\n            sa (int):\n                Shots against (on-ice), e.g, 0\n            hdsf (int):\n                High-danger shots for (on-ice), e.g, 3\n            hdsa (int):\n                High-danger shots against (on-ice), e.g, 0\n            ff (int):\n                Fenwick for (on-ice), e.g, 4\n            fa (int):\n                Fenwick against (on-ice), e.g, 0\n            hdff (int):\n                High-danger fenwick for (on-ice), e.g, 3\n            hdfa (int):\n                High-danger fenwick against (on-ice), e.g, 0\n            cf (int):\n                Corsi for (on-ice), e.g, 4\n            ca (int):\n                Corsi against (on-ice), e.g, 0\n            bsf (int):\n                Shots taken that were blocked (on-ice), e.g, 0\n            bsa (int):\n                Shots blocked (on-ice), e.g, 0\n            msf (int):\n                Missed shots taken (on-ice), e.g, 0\n            msa (int):\n                Missed shots against (on-ice), e.g, 0\n            hdmsf (int):\n                High-danger missed shots taken (on-ice), e.g, 0\n            hdmsa (int):\n                High-danger missed shots against (on-ice), e.g, 0\n            teammate_block (int):\n                Shots blocked by teammates (on-ice), e.g, 0\n            hf (int):\n                Hits for (on-ice), e.g, 0\n            ht (int):\n                Hits taken (on-ice), e.g, 0\n            give (int):\n                Giveaways (on-ice), e.g, 0\n            take (int):\n                Takeaways (on-ice), e.g, 0\n            ozf (int):\n                Offensive zone faceoffs (on-ice), e.g, 0\n            nzf (int):\n                Neutral zone faceoffs (on-ice), e.g, 1\n            dzf (int):\n                Defensive zone faceoffs (on-ice), e.g, 0\n            fow (int):\n                Faceoffs won (on-ice), e.g, 1\n            fol (int):\n                Faceoffs lost (on-ice), e.g, 0\n            ozfw (int):\n                Offensive zone faceoffs won (on-ice), e.g, 0\n            ozfl (int):\n                Offensive zone faceoffs lost (on-ice), e.g, 0\n            nzfw (int):\n                Neutral zone faceoffs won (on-ice), e.g, 1\n            nzfl (int):\n                Neutral zone faceoffs lost (on-ice), e.g, 0\n            dzfw (int):\n                Defensive zone faceoffs won (on-ice), e.g, 0\n            dzfl (int):\n                Defensive zone faceoffs lost (on-ice), e.g, 0\n            pent0 (int):\n                Penalty shots allowed (on-ice), e.g, 0\n            pent2 (int):\n                Minor penalties taken (on-ice), e.g, 0\n            pent4 (int):\n                Double minor penalties taken (on-ice), e.g, 0\n            pent5 (int):\n                Major penalties taken (on-ice), e.g, 0\n            pent10 (int):\n                Game misconduct penalties taken (on-ice), e.g, 0\n            pend0 (int):\n                Penalty shots drawn (on-ice), e.g, 0\n            pend2 (int):\n                Minor penalties drawn (on-ice), e.g, 0\n            pend4 (int):\n                Double minor penalties drawn (on-ice), e.g, 0\n            pend5 (int):\n                Major penalties drawn (on-ice), e.g, 0\n            pend10 (int):\n                Game misconduct penalties drawn (on-ice), e.g, 0\n            gf_p60 (float):\n                Goals for (on-ice) per 60 minutes\n            ga_p60 (float):\n                Goals against (on-ice) per 60 minutes\n            hdgf_p60 (float):\n                High-danger goals for (on-ice) per 60 minutes\n            hdga_p60 (float):\n                High-danger goals against (on-ice) per 60 minutes\n            xgf_p60 (float):\n                xG for (on-ice) per 60 minutes\n            xga_p60 (float):\n                xG against (on-ice) per 60 minutes\n            sf_p60 (float):\n                Shots for (on-ice) per 60 minutes\n            sa_p60 (float):\n                Shots against (on-ice) per 60 minutes\n            hdsf_p60 (float):\n                High-danger shots for (on-ice) per 60 minutes\n            hdsa_p60 (float):\n                High danger shots against (on-ice) per 60 minutes\n            ff_p60 (float):\n                Fenwick for (on-ice) per 60 minutes\n            fa_p60 (float):\n                Fenwick against (on-ice) per 60 minutes\n            hdff_p60 (float):\n                High-danger fenwick for (on-ice) per 60 minutes\n            hdfa_p60 (float):\n                High-danger fenwick against (on-ice) per 60 minutes\n            cf_p60 (float):\n                Corsi for (on-ice) per 60 minutes\n            ca_p60 (float):\n                Corsi against (on-ice) per 60 minutes\n            bsf_p60 (float):\n                Blocked shots for (on-ice) per 60 minutes\n            bsa_p60 (float):\n                Blocked shots against (on-ice) per 60 minutes\n            msf_p60 (float):\n                Missed shots for (on-ice) per 60 minutes\n            msa_p60 (float):\n                Missed shots against (on-ice) per 60 minutes\n            hdmsf_p60 (float):\n                High-danger missed shots for (on-ice) per 60 minutes\n            hdmsa_p60 (float):\n                High-danger missed shots against (on-ice) per 60 minutes\n            teammate_block_p60 (float):\n                Shots blocked by teammates (on-ice) per 60 minutes\n            hf_p60 (float):\n                Hits  for (on-ice) per 60 minutes\n            ht_p60 (float):\n                Hits taken (on-ice) per 60 minutes\n            give_p60 (float):\n                Giveaways (on-ice) per 60 minutes\n            take_p60 (float):\n                Takeaways (on-ice) per 60 minutes\n            pent0_p60 (float):\n                Penalty shots taken (on-ice) per 60 minutes\n            pent2_p60 (float):\n                Minor penalties taken (on-ice) per 60 minutes\n            pent4_p60 (float):\n                Double minor penalties taken (on-ice) per 60 minutes\n            pent5_p60 (float):\n                Major penalties taken (on-ice) per 60 minutes\n            pent10_p60 (float):\n                Game misconduct pentalties taken (on-ice) per 60 minutes\n            pend0_p60 (float):\n                Penalty shots drawn (on-ice) per 60 minutes\n            pend2_p60 (float):\n                Minor penalties drawn (on-ice) per 60 minutes\n            pend4_p60 (float):\n                Double minor penalties drawn (on-ice) per 60 minutes\n            pend5_p60 (float):\n                Major penalties drawn (on-ice) per 60 minutes\n            pend10_p60 (float):\n                Game misconduct penalties drawn (on-ice) per 60 minutes\n            gf_percent (float):\n                On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)\n            hdgf_percent (float):\n                On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF /\n                (HDGF + HDGA)\n            xgf_percent (float):\n                On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)\n            sf_percent (float):\n                On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)\n            hdsf_percent (float):\n                On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF /\n                (HDSF + HDSA)\n            ff_percent (float):\n                On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)\n            hdff_percent (float):\n                On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF /\n                (HDFF + HDFA)\n            cf_percent (float):\n                On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)\n            bsf_percent (float):\n                On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)\n            msf_percent (float):\n                On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)\n            hdmsf_percent (float):\n                On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e.,\n                HDMSF / (HDMSF + HDMSA)\n            hf_percent (float):\n                On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)\n            take_percent (float):\n                On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2023020001\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Prepares on-ice, line-level dataframe with default options\n            &gt;&gt;&gt; scraper._prep_lines()\n\n            Line-level statistics, aggregated to season level\n            &gt;&gt;&gt; scraper._prep_lines(level=\"season\")\n\n            Line-level statistics, aggregated to game level, accounting for teammates\n            &gt;&gt;&gt; scraper._prep_lines(level=\"game\", teammates=True)\n\n        \"\"\"\n        merge_cols = [\"id\", \"event_idx\"]\n\n        data = self.play_by_play.merge(self.play_by_play_ext, how=\"left\", on=merge_cols)\n\n        # Creating the \"for\" dataframe\n\n        # Accounting for desired level of aggregation\n\n        group_list = [\"season\", \"session\", \"event_team\", \"strength_state\"]\n\n        if level == \"session\" or level == \"season\":\n            group_list = group_list\n\n        elif level == \"game\":\n            group_list.extend([\"game_id\", \"game_date\", \"opp_team\"])\n\n        elif level == \"period\":\n            group_list.extend([\"game_id\", \"game_date\", \"opp_team\", \"period\"])\n\n        # Accounting for score state\n\n        if score:\n            group_list.append(\"score_state\")\n\n        # Accounting for desired position\n\n        if position == \"f\":\n            group_list.extend([\"forwards\", \"forwards_eh_id\", \"forwards_api_id\"])\n\n        if position == \"d\":\n            group_list.extend([\"defense\", \"defense_eh_id\", \"defense_api_id\"])\n\n        # Accounting for teammates\n\n        if teammates is True:\n            if position == \"f\":\n                group_list.extend(\n                    [\n                        \"defense\",\n                        \"defense_eh_id\",\n                        \"defense_api_id\",\n                        \"own_goalie\",\n                        \"own_goalie_eh_id\",\n                        \"own_goalie_api_id\",\n                    ]\n                )\n\n            if position == \"d\":\n                group_list.extend(\n                    [\n                        \"forwards\",\n                        \"forwards_eh_id\",\n                        \"forwards_api_id\",\n                        \"own_goalie\",\n                        \"own_goalie_eh_id\",\n                        \"own_goalie_api_id\",\n                    ]\n                )\n\n        # Accounting for opposition\n\n        if opposition is True:\n            group_list.extend(\n                [\n                    \"opp_forwards\",\n                    \"opp_forwards_eh_id\",\n                    \"opp_forwards_api_id\",\n                    \"opp_defense\",\n                    \"opp_defense_eh_id\",\n                    \"opp_defense_api_id\",\n                    \"opp_goalie\",\n                    \"opp_goalie_eh_id\",\n                    \"opp_goalie_api_id\",\n                ]\n            )\n\n            if \"opp_team\" not in group_list:\n                group_list.append(\"opp_team\")\n\n        group_list_order = [\n            \"season\",\n            \"session\",\n            \"game_id\",\n            \"game_date\",\n            \"event_team\",\n            \"opp_team\",\n            \"period\",\n            \"strength_state\",\n            \"score_state\",\n            \"forwards\",\n            \"forwards_eh_id\",\n            \"forwards_api_id\",\n            \"defense\",\n            \"defense_eh_id\",\n            \"defense_api_id\",\n            \"own_goalie\",\n            \"own_goalie_eh_id\",\n            \"own_goalie_api_id\",\n            \"opp_forwards\",\n            \"opp_forwards_eh_id\",\n            \"opp_forwards_api_id\",\n            \"opp_defense\",\n            \"opp_defense_eh_id\",\n            \"opp_defense_api_id\",\n            \"opp_goalie\",\n            \"opp_goalie_eh_id\",\n            \"opp_goalie_api_id\",\n        ]\n\n        group_list = [x for x in group_list_order if x in group_list]\n\n        # Creating dictionary of statistics for the groupby function\n\n        stats = [\n            \"pred_goal\",\n            \"pred_goal_adj\",\n            \"fenwick\",\n            \"fenwick_adj\",\n            \"goal\",\n            \"goal_adj\",\n            \"miss\",\n            \"miss_adj\",\n            \"block\",\n            \"block_adj\",\n            \"teammate_block\",\n            \"teammate_block_adj\",\n            \"shot\",\n            \"shot_adj\",\n            \"hd_goal\",\n            \"hd_shot\",\n            \"hd_fenwick\",\n            \"hd_miss\",\n            \"event_length\",\n            \"fac\",\n            \"ozf\",\n            \"nzf\",\n            \"dzf\",\n            \"hit\",\n            \"give\",\n            \"take\",\n            \"pen0\",\n            \"pen2\",\n            \"pen4\",\n            \"pen5\",\n            \"pen10\",\n        ]\n\n        agg_stats = {x: \"sum\" for x in stats if x in data.columns}\n\n        # Aggregating the \"for\" dataframe\n\n        lines_f = data.groupby(group_list, as_index=False, dropna=False).agg(agg_stats)\n\n        # Creating the dictionary to change column names\n\n        columns = [\n            \"xgf\",\n            \"xgf_adj\",\n            \"ff\",\n            \"ff_adj\",\n            \"gf\",\n            \"gf_adj\",\n            \"msf\",\n            \"msf_adj\",\n            \"bsf\",\n            \"bsf_adj\",\n            \"teammate_block\",\n            \"teammate_block_adj\",\n            \"sf\",\n            \"sf_adj\",\n            \"hdgf\",\n            \"hdsf\",\n            \"hdff\",\n            \"hdmsf\",\n            \"toi\",\n            \"fow\",\n            \"ozfw\",\n            \"nzfw\",\n            \"dzfw\",\n            \"hf\",\n            \"give\",\n            \"take\",\n            \"pent0\",\n            \"pent2\",\n            \"pent4\",\n            \"pent5\",\n            \"pent10\",\n        ]\n\n        columns = dict(zip(stats, columns, strict=False))\n\n        # Accounting for positions\n\n        columns.update({\"event_team\": \"team\"})\n\n        # columns = {k: v for k, v in columns.items() if k in lines_f.columns}\n\n        lines_f = lines_f.rename(columns=columns)\n\n        cols = [\n            \"forwards\",\n            \"forwards_eh_id\",\n            \"forwards_api_id\",\n            \"defense\",\n            \"defense_eh_id\",\n            \"defense_api_id\",\n            \"own_goalie\",\n            \"own_goalie_eh_id\",\n            \"own_goalie_api_id\",\n            \"opp_forwards\",\n            \"opp_forwards_eh_id\",\n            \"opp_forwards_api_id\",\n            \"opp_defense\",\n            \"opp_defense_eh_id\",\n            \"opp_defense_api_id\",\n            \"opp_goalie\",\n            \"opp_goalie_eh_id\",\n            \"opp_goalie_api_id\",\n        ]\n\n        cols = [x for x in cols if x in lines_f]\n\n        for col in cols:\n            lines_f[col] = lines_f[col].fillna(\"EMPTY\")\n\n        # Creating the against dataframe\n\n        # Accounting for desired level of aggregation\n\n        group_list = [\"season\", \"session\", \"opp_team\", \"opp_strength_state\"]\n\n        if level == \"session\" or level == \"season\":\n            group_list = group_list\n\n        elif level == \"game\":\n            group_list.extend([\"game_id\", \"game_date\", \"event_team\"])\n\n        elif level == \"period\":\n            group_list.extend([\"game_id\", \"game_date\", \"event_team\", \"period\"])\n\n        # Accounting for score state\n\n        if score:\n            group_list.append(\"opp_score_state\")\n\n        # Accounting for desired position\n\n        if position == \"f\":\n            group_list.extend([\"opp_forwards\", \"opp_forwards_eh_id\", \"opp_forwards_api_id\"])\n\n        if position == \"d\":\n            group_list.extend([\"opp_defense\", \"opp_defense_eh_id\", \"opp_defense_api_id\"])\n\n        # Accounting for teammates\n\n        if teammates is True:\n            if position == \"f\":\n                group_list.extend(\n                    [\n                        \"opp_defense\",\n                        \"opp_defense_eh_id\",\n                        \"opp_defense_api_id\",\n                        \"opp_goalie\",\n                        \"opp_goalie_eh_id\",\n                        \"opp_goalie_api_id\",\n                    ]\n                )\n\n            if position == \"d\":\n                group_list.extend(\n                    [\n                        \"opp_forwards\",\n                        \"opp_forwards_eh_id\",\n                        \"opp_forwards_api_id\",\n                        \"opp_goalie\",\n                        \"opp_goalie_eh_id\",\n                        \"opp_goalie_api_id\",\n                    ]\n                )\n\n        # Accounting for opposition\n\n        if opposition is True:\n            group_list.extend(\n                [\n                    \"forwards\",\n                    \"forwards_eh_id\",\n                    \"forwards_api_id\",\n                    \"defense\",\n                    \"defense_eh_id\",\n                    \"defense_api_id\",\n                    \"own_goalie\",\n                    \"own_goalie_eh_id\",\n                    \"own_goalie_api_id\",\n                ]\n            )\n\n            if \"event_team\" not in group_list:\n                group_list.append(\"event_team\")\n\n        group_list_order = [\n            \"season\",\n            \"session\",\n            \"game_id\",\n            \"game_date\",\n            \"event_team\",\n            \"opp_team\",\n            \"period\",\n            \"opp_strength_state\",\n            \"opp_score_state\",\n            \"opp_forwards\",\n            \"opp_forwards_eh_id\",\n            \"opp_forwards_api_id\",\n            \"opp_defense\",\n            \"opp_defense_eh_id\",\n            \"opp_defense_api_id\",\n            \"opp_goalie\",\n            \"opp_goalie_eh_id\",\n            \"opp_goalie_api_id\",\n            \"forwards\",\n            \"forwards_eh_id\",\n            \"forwards_api_id\",\n            \"defense\",\n            \"defense_eh_id\",\n            \"defense_api_id\",\n            \"own_goalie\",\n            \"own_goalie_eh_id\",\n            \"own_goalie_api_id\",\n        ]\n\n        group_list = [x for x in group_list_order if x in group_list]\n\n        # Creating dictionary of statistics for the groupby function\n\n        stats = [\n            \"pred_goal\",\n            \"pred_goal_adj\",\n            \"fenwick\",\n            \"fenwick_adj\",\n            \"goal\",\n            \"goal_adj\",\n            \"miss\",\n            \"miss_adj\",\n            \"block\",\n            \"block_adj\",\n            \"shot\",\n            \"shot_adj\",\n            \"hd_goal\",\n            \"hd_shot\",\n            \"hd_fenwick\",\n            \"hd_miss\",\n            \"event_length\",\n            \"fac\",\n            \"ozf\",\n            \"nzf\",\n            \"dzf\",\n            \"hit\",\n            \"pen0\",\n            \"pen2\",\n            \"pen4\",\n            \"pen5\",\n            \"pen10\",\n        ]\n\n        agg_stats = {x: \"sum\" for x in stats if x in data.columns}\n\n        # Aggregating \"against\" dataframe\n\n        lines_a = data.groupby(group_list, as_index=False, dropna=False).agg(agg_stats)\n\n        # Creating the dictionary to change column names\n\n        columns = [\n            \"xga\",\n            \"xga_adj\",\n            \"fa\",\n            \"fa_adj\",\n            \"ga\",\n            \"ga_adj\",\n            \"msa\",\n            \"msa_adj\",\n            \"bsa\",\n            \"bsa_adj\",\n            \"sa\",\n            \"sa_adj\",\n            \"hdga\",\n            \"hdsa\",\n            \"hdfa\",\n            \"hdmsa\",\n            \"toi\",\n            \"fol\",\n            \"ozfl\",\n            \"nzfl\",\n            \"dzfl\",\n            \"ht\",\n            \"pend0\",\n            \"pend2\",\n            \"pend4\",\n            \"pend5\",\n            \"pend10\",\n        ]\n\n        columns = dict(zip(stats, columns, strict=False))\n\n        # Accounting for positions\n\n        columns.update(\n            {\n                \"opp_team\": \"team\",\n                \"event_team\": \"opp_team\",\n                \"opp_forwards\": \"forwards\",\n                \"opp_forwards_eh_id\": \"forwards_eh_id\",\n                \"opp_forwards_api_id\": \"forwards_api_id\",\n                \"opp_strength_state\": \"strength_state\",\n                \"opp_defense\": \"defense\",\n                \"opp_defense_eh_id\": \"defense_eh_id\",\n                \"opp_defense_api_id\": \"defense_api_id\",\n                \"forwards\": \"opp_forwards\",\n                \"forwards_eh_id\": \"opp_forwards_eh_id\",\n                \"forwards_api_id\": \"opp_forwards_api_id\",\n                \"defense\": \"opp_defense\",\n                \"defense_eh_id\": \"opp_defense_eh_id\",\n                \"defense_api_id\": \"opp_defense_api_id\",\n                \"opp_score_state\": \"score_state\",\n                \"own_goalie\": \"opp_goalie\",\n                \"own_goalie_eh_id\": \"opp_goalie_eh_id\",\n                \"own_goalie_api_id\": \"opp_goalie_api_id\",\n                \"opp_goalie\": \"own_goalie\",\n                \"opp_goalie_eh_id\": \"own_goalie_eh_id\",\n                \"opp_goalie_api_id\": \"own_goalie_api_id\",\n            }\n        )\n\n        # columns = {k: v for k, v in columns.items() if k in lines_a.columns}\n\n        lines_a = lines_a.rename(columns=columns)\n\n        cols = [\n            \"forwards\",\n            \"forwards_eh_id\",\n            \"forwards_api_id\",\n            \"defense\",\n            \"defense_eh_id\",\n            \"defense_api_id\",\n            \"own_goalie\",\n            \"own_goalie_eh_id\",\n            \"own_goalie_api_id\",\n            \"opp_forwards\",\n            \"opp_forwards_eh_id\",\n            \"opp_forwards_api_id\",\n            \"opp_defense\",\n            \"opp_defense_eh_id\",\n            \"opp_defense_api_id\",\n            \"opp_goalie\",\n            \"opp_goalie_eh_id\",\n            \"opp_goalie_api_id\",\n        ]\n\n        cols = [x for x in cols if x in lines_a]\n\n        for col in cols:\n            lines_a[col] = lines_a[col].fillna(\"EMPTY\")\n\n        # Merging the \"for\" and \"against\" dataframes\n\n        if level == \"session\" or level == \"season\":\n            if position == \"f\":\n                merge_list = [\n                    \"season\",\n                    \"session\",\n                    \"team\",\n                    \"strength_state\",\n                    \"forwards\",\n                    \"forwards_eh_id\",\n                    \"forwards_api_id\",\n                ]\n\n            if position == \"d\":\n                merge_list = [\n                    \"season\",\n                    \"session\",\n                    \"team\",\n                    \"strength_state\",\n                    \"defense\",\n                    \"defense_eh_id\",\n                    \"defense_api_id\",\n                ]\n\n        if level == \"game\":\n            if position == \"f\":\n                merge_list = [\n                    \"season\",\n                    \"game_id\",\n                    \"game_date\",\n                    \"session\",\n                    \"team\",\n                    \"opp_team\",\n                    \"strength_state\",\n                    \"forwards\",\n                    \"forwards_eh_id\",\n                    \"forwards_api_id\",\n                ]\n\n            if position == \"d\":\n                merge_list = [\n                    \"season\",\n                    \"game_id\",\n                    \"game_date\",\n                    \"session\",\n                    \"team\",\n                    \"opp_team\",\n                    \"strength_state\",\n                    \"defense\",\n                    \"defense_eh_id\",\n                    \"defense_api_id\",\n                ]\n\n        if level == \"period\":\n            if position == \"f\":\n                merge_list = [\n                    \"season\",\n                    \"game_id\",\n                    \"game_date\",\n                    \"session\",\n                    \"team\",\n                    \"opp_team\",\n                    \"strength_state\",\n                    \"forwards\",\n                    \"forwards_eh_id\",\n                    \"forwards_api_id\",\n                    \"period\",\n                ]\n\n            if position == \"d\":\n                merge_list = [\n                    \"season\",\n                    \"game_id\",\n                    \"game_date\",\n                    \"session\",\n                    \"team\",\n                    \"opp_team\",\n                    \"strength_state\",\n                    \"defense\",\n                    \"defense_eh_id\",\n                    \"defense_api_id\",\n                    \"period\",\n                ]\n\n        if score is True:\n            merge_list.append(\"score_state\")\n\n        if teammates is True:\n            if position == \"f\":\n                merge_list = merge_list + [\n                    \"defense\",\n                    \"defense_eh_id\",\n                    \"defense_api_id\",\n                    \"own_goalie\",\n                    \"own_goalie_eh_id\",\n                    \"own_goalie_api_id\",\n                ]\n\n            if position == \"d\":\n                merge_list = merge_list + [\n                    \"forwards\",\n                    \"forwards_eh_id\",\n                    \"forwards_api_id\",\n                    \"own_goalie\",\n                    \"own_goalie_eh_id\",\n                    \"own_goalie_api_id\",\n                ]\n\n        if opposition is True:\n            merge_list = merge_list + [\n                \"opp_forwards\",\n                \"opp_forwards_eh_id\",\n                \"opp_forwards_api_id\",\n                \"opp_defense\",\n                \"opp_defense_eh_id\",\n                \"opp_defense_api_id\",\n                \"opp_goalie\",\n                \"opp_goalie_eh_id\",\n                \"opp_goalie_api_id\",\n            ]\n\n            if \"opp_team\" not in merge_list:\n                merge_list.insert(3, \"opp_team\")\n\n        lines = lines_f.merge(lines_a, how=\"outer\", on=merge_list, suffixes=(\"_x\", \"_y\")).fillna(0)\n\n        lines[\"toi\"] = (lines.toi_x + lines.toi_y) / 60\n\n        lines[\"cf\"] = lines.bsf + lines.teammate_block + lines.ff\n        lines[\"cf_adj\"] = lines.bsf_adj + lines.teammate_block_adj + lines.ff_adj\n\n        lines[\"ca\"] = lines.bsa + lines.fa\n        lines[\"ca_adj\"] = lines.bsa_adj + lines.fa_adj\n\n        lines[\"ozf\"] = lines.ozfw + lines.ozfl\n\n        lines[\"nzf\"] = lines.nzfw + lines.nzfl\n\n        lines[\"dzf\"] = lines.dzfw + lines.dzfl\n\n        cols = [x for x in list(LineSchema.dtypes.keys()) if x in lines.columns]\n\n        lines = lines[cols].loc[lines.toi &gt; 0].reset_index(drop=True)\n\n        lines = prep_p60(lines)\n\n        lines = prep_oi_percent(lines)\n\n        lines = LineSchema.validate(lines)\n\n        self._lines = lines\n\n    def prep_lines(\n        self,\n        position: Literal[\"f\", \"d\"] = \"f\",\n        level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n        score: bool = False,\n        teammates: bool = False,\n        opposition: bool = False,\n        disable_progress_bar: bool | None = None,\n    ) -&gt; None:\n        \"\"\"Prepares DataFrame of line-level stats from play-by-play data.\n\n        Used to prepare, or reset prepared data for later analysis\n\n        Parameters:\n            position (str):\n                Determines what positions to aggregate. One of F or D\n            level (str):\n                Determines the level of aggregation. One of season, session, game, period\n            score (bool):\n                Determines if stats account for score state\n            teammates (bool):\n                Determines if stats account for teammates on ice\n            opposition (bool):\n                Determines if stats account for opponents on ice\n            disable_progress_bar (bool):\n                Determines whether to display the progress bar\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 2023 for 2023-24 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020001\n            game_date (int):\n                Date game was played, e.g., 2023-10-10\n            team (str):\n                Player's team, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., TBL\n            strength_state (str):\n                Strength state, e.g., 5v5\n            period (int):\n                Period, e.g., 3\n            score_state (str):\n                Score state, e.g., 2v1\n            forwards (str):\n                Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY\n            forwards_eh_id (str):\n                Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n            forwards_api_id (str):\n                Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158\n            defense (str):\n                Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER\n            defense_eh_id (str):\n                Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER\n            defense_api_id (str):\n                Defense teammates' NHL API IDs, e.g., 8474151, 8478851\n            own_goalie (str):\n                Own goalie, e.g., JUUSE SAROS\n            own_goalie_eh_id (str):\n                Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS\n            own_goalie_api_id (str):\n                Own goalie's NHL API ID, e.g., 8477424\n            opp_forwards (str):\n                Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS\n            opp_forwards_eh_id (str):\n                Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS\n            opp_forwards_api_id (str):\n                Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564\n            opp_defense (str):\n                Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN\n            opp_defense_eh_id (str):\n                Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN\n            opp_defense_api_id (str):\n                Opposing defense's NHL API IDs, e.g., 8480246, 8475167\n            opp_goalie (str):\n                Opposing goalie, e.g., JONAS JOHANSSON\n            opp_goalie_eh_id (str):\n                Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON\n            opp_goalie_api_id (str):\n                Opposing goalie's NHL API ID, e.g., 8477992\n            toi (float):\n                Time on-ice, in minutes, e.g, 0.483333\n            gf (int):\n                Goals for (on-ice), e.g, 0\n            ga (int):\n                Goals against (on-ice), e.g, 0\n            hdgf (int):\n                High-danger goals for (on-ice), e.g, 0\n            hdga (int):\n                High-danger goals against (on-ice), e.g, 0\n            xgf (float):\n                xG for (on-ice), e.g., 1.258332\n            xga (float):\n                xG against (on-ice), e.g, 0.000000\n            sf (int):\n                Shots for (on-ice), e.g, 4\n            sa (int):\n                Shots against (on-ice), e.g, 0\n            hdsf (int):\n                High-danger shots for (on-ice), e.g, 3\n            hdsa (int):\n                High-danger shots against (on-ice), e.g, 0\n            ff (int):\n                Fenwick for (on-ice), e.g, 4\n            fa (int):\n                Fenwick against (on-ice), e.g, 0\n            hdff (int):\n                High-danger fenwick for (on-ice), e.g, 3\n            hdfa (int):\n                High-danger fenwick against (on-ice), e.g, 0\n            cf (int):\n                Corsi for (on-ice), e.g, 4\n            ca (int):\n                Corsi against (on-ice), e.g, 0\n            bsf (int):\n                Shots taken that were blocked (on-ice), e.g, 0\n            bsa (int):\n                Shots blocked (on-ice), e.g, 0\n            msf (int):\n                Missed shots taken (on-ice), e.g, 0\n            msa (int):\n                Missed shots against (on-ice), e.g, 0\n            hdmsf (int):\n                High-danger missed shots taken (on-ice), e.g, 0\n            hdmsa (int):\n                High-danger missed shots against (on-ice), e.g, 0\n            teammate_block (int):\n                Shots blocked by teammates (on-ice), e.g, 0\n            hf (int):\n                Hits for (on-ice), e.g, 0\n            ht (int):\n                Hits taken (on-ice), e.g, 0\n            give (int):\n                Giveaways (on-ice), e.g, 0\n            take (int):\n                Takeaways (on-ice), e.g, 0\n            ozf (int):\n                Offensive zone faceoffs (on-ice), e.g, 0\n            nzf (int):\n                Neutral zone faceoffs (on-ice), e.g, 1\n            dzf (int):\n                Defensive zone faceoffs (on-ice), e.g, 0\n            fow (int):\n                Faceoffs won (on-ice), e.g, 1\n            fol (int):\n                Faceoffs lost (on-ice), e.g, 0\n            ozfw (int):\n                Offensive zone faceoffs won (on-ice), e.g, 0\n            ozfl (int):\n                Offensive zone faceoffs lost (on-ice), e.g, 0\n            nzfw (int):\n                Neutral zone faceoffs won (on-ice), e.g, 1\n            nzfl (int):\n                Neutral zone faceoffs lost (on-ice), e.g, 0\n            dzfw (int):\n                Defensive zone faceoffs won (on-ice), e.g, 0\n            dzfl (int):\n                Defensive zone faceoffs lost (on-ice), e.g, 0\n            pent0 (int):\n                Penalty shots allowed (on-ice), e.g, 0\n            pent2 (int):\n                Minor penalties taken (on-ice), e.g, 0\n            pent4 (int):\n                Double minor penalties taken (on-ice), e.g, 0\n            pent5 (int):\n                Major penalties taken (on-ice), e.g, 0\n            pent10 (int):\n                Game misconduct penalties taken (on-ice), e.g, 0\n            pend0 (int):\n                Penalty shots drawn (on-ice), e.g, 0\n            pend2 (int):\n                Minor penalties drawn (on-ice), e.g, 0\n            pend4 (int):\n                Double minor penalties drawn (on-ice), e.g, 0\n            pend5 (int):\n                Major penalties drawn (on-ice), e.g, 0\n            pend10 (int):\n                Game misconduct penalties drawn (on-ice), e.g, 0\n            gf_p60 (float):\n                Goals for (on-ice) per 60 minutes\n            ga_p60 (float):\n                Goals against (on-ice) per 60 minutes\n            hdgf_p60 (float):\n                High-danger goals for (on-ice) per 60 minutes\n            hdga_p60 (float):\n                High-danger goals against (on-ice) per 60 minutes\n            xgf_p60 (float):\n                xG for (on-ice) per 60 minutes\n            xga_p60 (float):\n                xG against (on-ice) per 60 minutes\n            sf_p60 (float):\n                Shots for (on-ice) per 60 minutes\n            sa_p60 (float):\n                Shots against (on-ice) per 60 minutes\n            hdsf_p60 (float):\n                High-danger shots for (on-ice) per 60 minutes\n            hdsa_p60 (float):\n                High danger shots against (on-ice) per 60 minutes\n            ff_p60 (float):\n                Fenwick for (on-ice) per 60 minutes\n            fa_p60 (float):\n                Fenwick against (on-ice) per 60 minutes\n            hdff_p60 (float):\n                High-danger fenwick for (on-ice) per 60 minutes\n            hdfa_p60 (float):\n                High-danger fenwick against (on-ice) per 60 minutes\n            cf_p60 (float):\n                Corsi for (on-ice) per 60 minutes\n            ca_p60 (float):\n                Corsi against (on-ice) per 60 minutes\n            bsf_p60 (float):\n                Blocked shots for (on-ice) per 60 minutes\n            bsa_p60 (float):\n                Blocked shots against (on-ice) per 60 minutes\n            msf_p60 (float):\n                Missed shots for (on-ice) per 60 minutes\n            msa_p60 (float):\n                Missed shots against (on-ice) per 60 minutes\n            hdmsf_p60 (float):\n                High-danger missed shots for (on-ice) per 60 minutes\n            hdmsa_p60 (float):\n                High-danger missed shots against (on-ice) per 60 minutes\n            teammate_block_p60 (float):\n                Shots blocked by teammates (on-ice) per 60 minutes\n            hf_p60 (float):\n                Hits  for (on-ice) per 60 minutes\n            ht_p60 (float):\n                Hits taken (on-ice) per 60 minutes\n            give_p60 (float):\n                Giveaways (on-ice) per 60 minutes\n            take_p60 (float):\n                Takeaways (on-ice) per 60 minutes\n            pent0_p60 (float):\n                Penalty shots taken (on-ice) per 60 minutes\n            pent2_p60 (float):\n                Minor penalties taken (on-ice) per 60 minutes\n            pent4_p60 (float):\n                Double minor penalties taken (on-ice) per 60 minutes\n            pent5_p60 (float):\n                Major penalties taken (on-ice) per 60 minutes\n            pent10_p60 (float):\n                Game misconduct pentalties taken (on-ice) per 60 minutes\n            pend0_p60 (float):\n                Penalty shots drawn (on-ice) per 60 minutes\n            pend2_p60 (float):\n                Minor penalties drawn (on-ice) per 60 minutes\n            pend4_p60 (float):\n                Double minor penalties drawn (on-ice) per 60 minutes\n            pend5_p60 (float):\n                Major penalties drawn (on-ice) per 60 minutes\n            pend10_p60 (float):\n                Game misconduct penalties drawn (on-ice) per 60 minutes\n            gf_percent (float):\n                On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)\n            hdgf_percent (float):\n                On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF /\n                (HDGF + HDGA)\n            xgf_percent (float):\n                On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)\n            sf_percent (float):\n                On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)\n            hdsf_percent (float):\n                On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF /\n                (HDSF + HDSA)\n            ff_percent (float):\n                On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)\n            hdff_percent (float):\n                On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF /\n                (HDFF + HDFA)\n            cf_percent (float):\n                On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)\n            bsf_percent (float):\n                On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)\n            msf_percent (float):\n                On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)\n            hdmsf_percent (float):\n                On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e.,\n                HDMSF / (HDMSF + HDMSA)\n            hf_percent (float):\n                On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)\n            take_percent (float):\n                On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2023020001\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Prepares on-ice, line-level dataframe with default options\n            &gt;&gt;&gt; scraper.prep_lines()\n\n            Line-level statistics, aggregated to season level\n            &gt;&gt;&gt; scraper.prep_lines(level=\"season\")\n\n            Line-level statistics, aggregated to game level, accounting for teammates\n            &gt;&gt;&gt; scraper.prep_lines(level=\"game\", teammates=True)\n\n        \"\"\"\n        levels = self._lines_levels\n\n        if (\n            levels[\"position\"] != position\n            or levels[\"level\"] != level\n            or levels[\"score\"] != score\n            or levels[\"teammates\"] != teammates\n            or levels[\"opposition\"] != opposition\n        ):\n            self._lines = pd.DataFrame()\n\n            new_values = {\n                \"position\": position,\n                \"level\": level,\n                \"score\": score,\n                \"teammates\": teammates,\n                \"opposition\": opposition,\n            }\n\n            self._lines_levels.update(new_values)\n\n        if self._lines.empty:\n            if not disable_progress_bar:\n                disable_progress_bar = self.disable_progress_bar\n\n            with ChickenProgressIndeterminate(disable=disable_progress_bar) as progress:\n                pbar_message = \"Prepping lines data...\"\n                progress_task = progress.add_task(pbar_message, total=None, refresh=True)\n\n                progress.start_task(progress_task)\n                progress.update(progress_task, total=1, description=pbar_message, refresh=True)\n\n                self._prep_lines(\n                    level=level, position=position, score=score, teammates=teammates, opposition=opposition\n                )\n\n                progress.update(\n                    progress_task,\n                    description=\"Finished prepping lines data\",\n                    completed=True,\n                    advance=True,\n                    refresh=True,\n                )\n\n    @property\n    def lines(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of line-level stats aggregated from play-by-play data.\n\n        Determine level of aggregation using `prep_lines` method.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 2023 for 2023-24 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020001\n            game_date (int):\n                Date game was played, e.g., 2023-10-10\n            team (str):\n                Player's team, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., TBL\n            strength_state (str):\n                Strength state, e.g., 5v5\n            period (int):\n                Period, e.g., 3\n            score_state (str):\n                Score state, e.g., 2v1\n            forwards (str):\n                Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY\n            forwards_eh_id (str):\n                Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n            forwards_api_id (str):\n                Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158\n            defense (str):\n                Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER\n            defense_eh_id (str):\n                Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER\n            defense_api_id (str):\n                Defense teammates' NHL API IDs, e.g., 8474151, 8478851\n            own_goalie (str):\n                Own goalie, e.g., JUUSE SAROS\n            own_goalie_eh_id (str):\n                Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS\n            own_goalie_api_id (str):\n                Own goalie's NHL API ID, e.g., 8477424\n            opp_forwards (str):\n                Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS\n            opp_forwards_eh_id (str):\n                Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS\n            opp_forwards_api_id (str):\n                Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564\n            opp_defense (str):\n                Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN\n            opp_defense_eh_id (str):\n                Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN\n            opp_defense_api_id (str):\n                Opposing defense's NHL API IDs, e.g., 8480246, 8475167\n            opp_goalie (str):\n                Opposing goalie, e.g., JONAS JOHANSSON\n            opp_goalie_eh_id (str):\n                Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON\n            opp_goalie_api_id (str):\n                Opposing goalie's NHL API ID, e.g., 8477992\n            toi (float):\n                Time on-ice, in minutes, e.g, 0.483333\n            gf (int):\n                Goals for (on-ice), e.g, 0\n            ga (int):\n                Goals against (on-ice), e.g, 0\n            hdgf (int):\n                High-danger goals for (on-ice), e.g, 0\n            hdga (int):\n                High-danger goals against (on-ice), e.g, 0\n            xgf (float):\n                xG for (on-ice), e.g., 1.258332\n            xga (float):\n                xG against (on-ice), e.g, 0.000000\n            sf (int):\n                Shots for (on-ice), e.g, 4\n            sa (int):\n                Shots against (on-ice), e.g, 0\n            hdsf (int):\n                High-danger shots for (on-ice), e.g, 3\n            hdsa (int):\n                High-danger shots against (on-ice), e.g, 0\n            ff (int):\n                Fenwick for (on-ice), e.g, 4\n            fa (int):\n                Fenwick against (on-ice), e.g, 0\n            hdff (int):\n                High-danger fenwick for (on-ice), e.g, 3\n            hdfa (int):\n                High-danger fenwick against (on-ice), e.g, 0\n            cf (int):\n                Corsi for (on-ice), e.g, 4\n            ca (int):\n                Corsi against (on-ice), e.g, 0\n            bsf (int):\n                Shots taken that were blocked (on-ice), e.g, 0\n            bsa (int):\n                Shots blocked (on-ice), e.g, 0\n            msf (int):\n                Missed shots taken (on-ice), e.g, 0\n            msa (int):\n                Missed shots against (on-ice), e.g, 0\n            hdmsf (int):\n                High-danger missed shots taken (on-ice), e.g, 0\n            hdmsa (int):\n                High-danger missed shots against (on-ice), e.g, 0\n            teammate_block (int):\n                Shots blocked by teammates (on-ice), e.g, 0\n            hf (int):\n                Hits for (on-ice), e.g, 0\n            ht (int):\n                Hits taken (on-ice), e.g, 0\n            give (int):\n                Giveaways (on-ice), e.g, 0\n            take (int):\n                Takeaways (on-ice), e.g, 0\n            ozf (int):\n                Offensive zone faceoffs (on-ice), e.g, 0\n            nzf (int):\n                Neutral zone faceoffs (on-ice), e.g, 1\n            dzf (int):\n                Defensive zone faceoffs (on-ice), e.g, 0\n            fow (int):\n                Faceoffs won (on-ice), e.g, 1\n            fol (int):\n                Faceoffs lost (on-ice), e.g, 0\n            ozfw (int):\n                Offensive zone faceoffs won (on-ice), e.g, 0\n            ozfl (int):\n                Offensive zone faceoffs lost (on-ice), e.g, 0\n            nzfw (int):\n                Neutral zone faceoffs won (on-ice), e.g, 1\n            nzfl (int):\n                Neutral zone faceoffs lost (on-ice), e.g, 0\n            dzfw (int):\n                Defensive zone faceoffs won (on-ice), e.g, 0\n            dzfl (int):\n                Defensive zone faceoffs lost (on-ice), e.g, 0\n            pent0 (int):\n                Penalty shots allowed (on-ice), e.g, 0\n            pent2 (int):\n                Minor penalties taken (on-ice), e.g, 0\n            pent4 (int):\n                Double minor penalties taken (on-ice), e.g, 0\n            pent5 (int):\n                Major penalties taken (on-ice), e.g, 0\n            pent10 (int):\n                Game misconduct penalties taken (on-ice), e.g, 0\n            pend0 (int):\n                Penalty shots drawn (on-ice), e.g, 0\n            pend2 (int):\n                Minor penalties drawn (on-ice), e.g, 0\n            pend4 (int):\n                Double minor penalties drawn (on-ice), e.g, 0\n            pend5 (int):\n                Major penalties drawn (on-ice), e.g, 0\n            pend10 (int):\n                Game misconduct penalties drawn (on-ice), e.g, 0\n            gf_p60 (float):\n                Goals for (on-ice) per 60 minutes\n            ga_p60 (float):\n                Goals against (on-ice) per 60 minutes\n            hdgf_p60 (float):\n                High-danger goals for (on-ice) per 60 minutes\n            hdga_p60 (float):\n                High-danger goals against (on-ice) per 60 minutes\n            xgf_p60 (float):\n                xG for (on-ice) per 60 minutes\n            xga_p60 (float):\n                xG against (on-ice) per 60 minutes\n            sf_p60 (float):\n                Shots for (on-ice) per 60 minutes\n            sa_p60 (float):\n                Shots against (on-ice) per 60 minutes\n            hdsf_p60 (float):\n                High-danger shots for (on-ice) per 60 minutes\n            hdsa_p60 (float):\n                High danger shots against (on-ice) per 60 minutes\n            ff_p60 (float):\n                Fenwick for (on-ice) per 60 minutes\n            fa_p60 (float):\n                Fenwick against (on-ice) per 60 minutes\n            hdff_p60 (float):\n                High-danger fenwick for (on-ice) per 60 minutes\n            hdfa_p60 (float):\n                High-danger fenwick against (on-ice) per 60 minutes\n            cf_p60 (float):\n                Corsi for (on-ice) per 60 minutes\n            ca_p60 (float):\n                Corsi against (on-ice) per 60 minutes\n            bsf_p60 (float):\n                Blocked shots for (on-ice) per 60 minutes\n            bsa_p60 (float):\n                Blocked shots against (on-ice) per 60 minutes\n            msf_p60 (float):\n                Missed shots for (on-ice) per 60 minutes\n            msa_p60 (float):\n                Missed shots against (on-ice) per 60 minutes\n            hdmsf_p60 (float):\n                High-danger missed shots for (on-ice) per 60 minutes\n            hdmsa_p60 (float):\n                High-danger missed shots against (on-ice) per 60 minutes\n            teammate_block_p60 (float):\n                Shots blocked by teammates (on-ice) per 60 minutes\n            hf_p60 (float):\n                Hits  for (on-ice) per 60 minutes\n            ht_p60 (float):\n                Hits taken (on-ice) per 60 minutes\n            give_p60 (float):\n                Giveaways (on-ice) per 60 minutes\n            take_p60 (float):\n                Takeaways (on-ice) per 60 minutes\n            pent0_p60 (float):\n                Penalty shots taken (on-ice) per 60 minutes\n            pent2_p60 (float):\n                Minor penalties taken (on-ice) per 60 minutes\n            pent4_p60 (float):\n                Double minor penalties taken (on-ice) per 60 minutes\n            pent5_p60 (float):\n                Major penalties taken (on-ice) per 60 minutes\n            pent10_p60 (float):\n                Game misconduct pentalties taken (on-ice) per 60 minutes\n            pend0_p60 (float):\n                Penalty shots drawn (on-ice) per 60 minutes\n            pend2_p60 (float):\n                Minor penalties drawn (on-ice) per 60 minutes\n            pend4_p60 (float):\n                Double minor penalties drawn (on-ice) per 60 minutes\n            pend5_p60 (float):\n                Major penalties drawn (on-ice) per 60 minutes\n            pend10_p60 (float):\n                Game misconduct penalties drawn (on-ice) per 60 minutes\n            gf_percent (float):\n                On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)\n            hdgf_percent (float):\n                On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF /\n                (HDGF + HDGA)\n            xgf_percent (float):\n                On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)\n            sf_percent (float):\n                On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)\n            hdsf_percent (float):\n                On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF /\n                (HDSF + HDSA)\n            ff_percent (float):\n                On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)\n            hdff_percent (float):\n                On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF /\n                (HDFF + HDFA)\n            cf_percent (float):\n                On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)\n            bsf_percent (float):\n                On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)\n            msf_percent (float):\n                On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)\n            hdmsf_percent (float):\n                On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e.,\n                HDMSF / (HDMSF + HDMSA)\n            hf_percent (float):\n                On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)\n            take_percent (float):\n                On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2023020001\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Returns line stats with default options\n            &gt;&gt;&gt; scraper.lines\n\n            Resets line stats to period level, accounting for teammates on-ice\n            &gt;&gt;&gt; scraper.prep_lines(level=\"period\", teammates=True)\n            &gt;&gt;&gt; scraper.lines\n\n            Resets line stats to season level, accounting for teammates on-ice and score state\n            &gt;&gt;&gt; scraper.prep_lines(level=\"season\", teammates=True, score=True)\n            &gt;&gt;&gt; scraper.lines\n\n        \"\"\"\n        if self._lines.empty:\n            self.prep_lines()\n\n        return self._lines.copy()\n\n    def _prep_team_stats(\n        self,\n        level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n        strengths: bool = True,\n        opposition: bool = False,\n        score: bool = False,\n    ) -&gt; None:\n        \"\"\"Prepares DataFrame of team stats from play-by-play data.\n\n        Nested within `prep_team_stats` method.\n\n        Parameters:\n            level (str):\n                Determines the level of aggregation. One of season, session, game, period\n            score (bool):\n                Determines if stats account  for score state\n            strengths (bool):\n                Determines if stats account  for strength state\n            opposition (bool):\n                Determines if stats account  for opponents on ice\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 2023 for 2023-24 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020001\n            team (str):\n                Player's team, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., TBL\n            strength_state (str):\n                Strength state, e.g., 5v5\n            period (int):\n                Period, e.g., 3\n            score_state (str):\n                Score state, e.g., 2v1\n            toi (float):\n                Time on-ice, in minutes, e.g, 1.100000\n            gf (int):\n                Goals for (on-ice), e.g, 0\n            hdgf (int):\n                High-danger goals for (on-ice), e.g, 0\n            ga (int):\n                Goals against (on-ice), e.g, 0\n            hdga (int):\n                High-danger goals against (on-ice), e.g, 0\n            xgf (float):\n                xG for (on-ice), e.g., 1.271583\n            xga (float):\n                xG against (on-ice), e.g, 0.000000\n            sf (int):\n                Shots for (on-ice), e.g, 5\n            sa (int):\n                Shots against (on-ice), e.g, 0\n            hdsf (int):\n                High-danger shots for (on-ice), e.g, 3\n            hdsa (int):\n                High-danger shots against (on-ice), e.g, 0\n            ff (int):\n                Fenwick for (on-ice), e.g, 5\n            fa (int):\n                Fenwick against (on-ice), e.g, 0\n            hdff (int):\n                High-danger fenwick for (on-ice), e.g, 3\n            hdfa (int):\n                High-danger fenwick against (on-ice), e.g, 0\n            cf (int):\n                Corsi for (on-ice), e.g, 5\n            ca (int):\n                Corsi against (on-ice), e.g, 0\n            bsf (int):\n                Shots taken that were blocked (on-ice), e.g, 0\n            bsa (int):\n                Shots blocked (on-ice), e.g, 0\n            msf (int):\n                Missed shots taken (on-ice), e.g, 0\n            msa (int):\n                Missed shots against (on-ice), e.g, 0\n            hdmsf (int):\n                High-danger missed shots taken (on-ice), e.g, 0\n            hdmsa (int):\n                High-danger missed shots against (on-ice), e.g, 0\n            teammate_block (int):\n                Shots blocked by teammates (on-ice), e.g, 0\n            hf (int):\n                Hits for (on-ice), e.g, 0\n            ht (int):\n                Hits taken (on-ice), e.g, 0\n            give (int):\n                Giveaways (on-ice), e.g, 0\n            take (int):\n                Takeaways (on-ice), e.g, 0\n            ozf (int):\n                Offensive zone faceoffs (on-ice), e.g, 0\n            nzf (int):\n                Neutral zone faceoffs (on-ice), e.g, 4\n            dzf (int):\n                Defensive zone faceoffs (on-ice), e.g, 0\n            fow (int):\n                Faceoffs won (on-ice), e.g, 2\n            fol (int):\n                Faceoffs lost (on-ice), e.g, 0\n            ozfw (int):\n                Offensive zone faceoffs won (on-ice), e.g, 0\n            ozfl (int):\n                Offensive zone faceoffs lost (on-ice), e.g, 0\n            nzfw (int):\n                Neutral zone faceoffs won (on-ice), e.g, 2\n            nzfl (int):\n                Neutral zone faceoffs lost (on-ice), e.g, 1\n            dzfw (int):\n                Defensive zone faceoffs won (on-ice), e.g, 0\n            dzfl (int):\n                Defensive zone faceoffs lost (on-ice), e.g, 1\n            pent0 (int):\n                Penalty shots allowed (on-ice), e.g, 0\n            pent2 (int):\n                Minor penalties taken (on-ice), e.g, 1\n            pent4 (int):\n                Double minor penalties taken (on-ice), e.g, 0\n            pent5 (int):\n                Major penalties taken (on-ice), e.g, 0\n            pent10 (int):\n                Game misconduct penalties taken (on-ice), e.g, 0\n            pend0 (int):\n                Penalty shots drawn (on-ice), e.g, 0\n            pend2 (int):\n                Minor penalties drawn (on-ice), e.g, 0\n            pend4 (int):\n                Double minor penalties drawn (on-ice), e.g, 0\n            pend5 (int):\n                Major penalties drawn (on-ice), e.g, 0\n            pend10 (int):\n                Game misconduct penalties drawn (on-ice), e.g, 0\n            gf_p60 (float):\n                Goals for (on-ice) per 60 minutes\n            ga_p60 (float):\n                Goals against (on-ice) per 60 minutes\n            hdgf_p60 (float):\n                High-danger goals for (on-ice) per 60 minutes\n            hdga_p60 (float):\n                High-danger goals against (on-ice) per 60 minutes\n            xgf_p60 (float):\n                xG for (on-ice) per 60 minutes\n            xga_p60 (float):\n                xG against (on-ice) per 60 minutes\n            sf_p60 (float):\n                Shots for (on-ice) per 60 minutes\n            sa_p60 (float):\n                Shots against (on-ice) per 60 minutes\n            hdsf_p60 (float):\n                High-danger shots for (on-ice) per 60 minutes\n            hdsa_p60 (float):\n                High danger shots against (on-ice) per 60 minutes\n            ff_p60 (float):\n                Fenwick for (on-ice) per 60 minutes\n            fa_p60 (float):\n                Fenwick against (on-ice) per 60 minutes\n            hdff_p60 (float):\n                High-danger fenwick for (on-ice) per 60 minutes\n            hdfa_p60 (float):\n                High-danger fenwick against (on-ice) per 60 minutes\n            cf_p60 (float):\n                Corsi for (on-ice) per 60 minutes\n            ca_p60 (float):\n                Corsi against (on-ice) per 60 minutes\n            bsf_p60 (float):\n                Blocked shots for (on-ice) per 60 minutes\n            bsa_p60 (float):\n                Blocked shots against (on-ice) per 60 minutes\n            msf_p60 (float):\n                Missed shots for (on-ice) per 60 minutes\n            msa_p60 (float):\n                Missed shots against (on-ice) per 60 minutes\n            hdmsf_p60 (float):\n                High-danger missed shots for (on-ice) per 60 minutes\n            hdmsa_p60 (float):\n                High-danger missed shots against (on-ice) per 60 minutes\n            teammate_block_p60 (float):\n                Shots blocked by teammates (on-ice) per 60 minutes\n            hf_p60 (float):\n                Hits  for (on-ice) per 60 minutes\n            ht_p60 (float):\n                Hits taken (on-ice) per 60 minutes\n            give_p60 (float):\n                Giveaways (on-ice) per 60 minutes\n            take_p60 (float):\n                Takeaways (on-ice) per 60 minutes\n            pent0_p60 (float):\n                Penalty shots taken (on-ice) per 60 minutes\n            pent2_p60 (float):\n                Minor penalties taken (on-ice) per 60 minutes\n            pent4_p60 (float):\n                Double minor penalties taken (on-ice) per 60 minutes\n            pent5_p60 (float):\n                Major penalties taken (on-ice) per 60 minutes\n            pent10_p60 (float):\n                Game misconduct pentalties taken (on-ice) per 60 minutes\n            pend0_p60 (float):\n                Penalty shots drawn (on-ice) per 60 minutes\n            pend2_p60 (float):\n                Minor penalties drawn (on-ice) per 60 minutes\n            pend4_p60 (float):\n                Double minor penalties drawn (on-ice) per 60 minutes\n            pend5_p60 (float):\n                Major penalties drawn (on-ice) per 60 minutes\n            pend10_p60 (float):\n                Game misconduct penalties drawn (on-ice) per 60 minutes\n            gf_percent (float):\n                On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)\n            hdgf_percent (float):\n                On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF /\n                (HDGF + HDGA)\n            xgf_percent (float):\n                On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)\n            sf_percent (float):\n                On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)\n            hdsf_percent (float):\n                On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF /\n                (HDSF + HDSA)\n            ff_percent (float):\n                On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)\n            hdff_percent (float):\n                On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF /\n                (HDFF + HDFA)\n            cf_percent (float):\n                On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)\n            bsf_percent (float):\n                On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)\n            msf_percent (float):\n                On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)\n            hdmsf_percent (float):\n                On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e.,\n                HDMSF / (HDMSF + HDMSA)\n            hf_percent (float):\n                On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)\n            take_percent (float):\n                On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2023020001\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Team dataframe with default options\n            &gt;&gt;&gt; scraper._prep_team_stats()\n\n            Team statistics, aggregated to season level\n            &gt;&gt;&gt; scraper._prep_team_stats(level=\"season\")\n\n            Team statistics, aggregated to game level, accounting for teammates\n            &gt;&gt;&gt; scraper._prep_team_stats(level=\"game\", teammates=True)\n\n        \"\"\"\n        merge_cols = [\"id\", \"event_idx\"]\n\n        data = self.play_by_play.merge(self.play_by_play_ext, how=\"left\", on=merge_cols)\n\n        # Getting the \"for\" stats\n\n        group_list = [\"season\", \"session\", \"event_team\"]\n\n        if strengths is True:\n            group_list.append(\"strength_state\")\n\n        if level == \"game\" or level == \"period\" or opposition:\n            group_list.insert(3, \"opp_team\")\n\n            group_list[2:2] = [\"game_id\", \"game_date\"]\n\n        if level == \"period\":\n            group_list.append(\"period\")\n\n        if score is True:\n            group_list.append(\"score_state\")\n\n        agg_stats = [\n            \"pred_goal\",\n            \"pred_goal_adj\",\n            \"shot\",\n            \"shot_adj\",\n            \"miss\",\n            \"miss_adj\",\n            \"block\",\n            \"block_adj\",\n            \"teammate_block\",\n            \"teammate_block_adj\",\n            \"fenwick\",\n            \"fenwick_adj\",\n            \"goal\",\n            \"goal_adj\",\n            \"give\",\n            \"take\",\n            \"hd_goal\",\n            \"hd_shot\",\n            \"hd_fenwick\",\n            \"hd_miss\",\n            \"hit\",\n            \"pen0\",\n            \"pen2\",\n            \"pen4\",\n            \"pen5\",\n            \"pen10\",\n            \"fac\",\n            \"ozf\",\n            \"nzf\",\n            \"dzf\",\n            \"event_length\",\n        ]\n\n        agg_dict = {x: \"sum\" for x in agg_stats if x in data.columns}\n\n        new_cols = [\n            \"xgf\",\n            \"xgf_adj\",\n            \"sf\",\n            \"sf_adj\",\n            \"msf\",\n            \"msf_adj\",\n            \"bsa\",\n            \"bsa_adj\",\n            \"teammate_block\",\n            \"teammate_block_adj\",\n            \"ff\",\n            \"ff_adj\",\n            \"gf\",\n            \"gf_adj\",\n            \"give\",\n            \"take\",\n            \"hdgf\",\n            \"hdsf\",\n            \"hdff\",\n            \"hdmsf\",\n            \"hf\",\n            \"pent0\",\n            \"pent2\",\n            \"pent4\",\n            \"pent5\",\n            \"pent10\",\n            \"fow\",\n            \"ozfw\",\n            \"nzfw\",\n            \"dzfw\",\n            \"toi\",\n        ]\n\n        new_cols = dict(zip(agg_stats, new_cols, strict=False))\n\n        new_cols.update({\"event_team\": \"team\"})\n\n        stats_for = data.groupby(group_list, as_index=False).agg(agg_dict).rename(columns=new_cols)\n\n        # Getting the \"against\" stats\n\n        group_list = [\"season\", \"session\", \"opp_team\"]\n\n        if strengths is True:\n            group_list.append(\"opp_strength_state\")\n\n        if level == \"game\" or level == \"period\":\n            group_list.insert(3, \"event_team\")\n\n            group_list[2:2] = [\"game_id\", \"game_date\"]\n\n        if level == \"period\":\n            group_list.append(\"period\")\n\n        if score is True:\n            group_list.append(\"opp_score_state\")\n\n        agg_stats = [\n            \"pred_goal\",\n            \"pred_goal_adj\",\n            \"shot\",\n            \"shot_adj\",\n            \"miss\",\n            \"miss_adj\",\n            \"block\",\n            \"block_adj\",\n            \"fenwick\",\n            \"fenwick_adj\",\n            \"goal\",\n            \"goal_adj\",\n            \"hd_goal\",\n            \"hd_shot\",\n            \"hd_fenwick\",\n            \"hd_miss\",\n            \"hit\",\n            \"pen0\",\n            \"pen2\",\n            \"pen4\",\n            \"pen5\",\n            \"pen10\",\n            \"fac\",\n            \"ozf\",\n            \"nzf\",\n            \"dzf\",\n            \"event_length\",\n        ]\n\n        agg_dict = {x: \"sum\" for x in agg_stats if x in data.columns}\n\n        new_cols = [\n            \"xga\",\n            \"xga_adj\",\n            \"sa\",\n            \"sa_adj\",\n            \"msa\",\n            \"msa_adj\",\n            \"bsf\",\n            \"bsf_adj\",\n            \"fa\",\n            \"fa_adj\",\n            \"ga\",\n            \"ga_adj\",\n            \"hdga\",\n            \"hdsa\",\n            \"hdfa\",\n            \"hdmsa\",\n            \"ht\",\n            \"pend0\",\n            \"pend2\",\n            \"pend4\",\n            \"pend5\",\n            \"pend10\",\n            \"fol\",\n            \"ozfl\",\n            \"nzfl\",\n            \"dzfl\",\n            \"toi\",\n        ]\n\n        new_cols = dict(zip(agg_stats, new_cols, strict=False))\n\n        new_cols.update(\n            {\n                \"opp_team\": \"team\",\n                \"opp_score_state\": \"score_state\",\n                \"opp_strength_state\": \"strength_state\",\n                \"event_team\": \"opp_team\",\n            }\n        )\n\n        stats_against = data.groupby(group_list, as_index=False).agg(agg_dict).rename(columns=new_cols)\n\n        merge_list = [\n            \"season\",\n            \"session\",\n            \"game_id\",\n            \"game_date\",\n            \"team\",\n            \"opp_team\",\n            \"strength_state\",\n            \"score_state\",\n            \"period\",\n        ]\n\n        merge_list = [x for x in merge_list if x in stats_for.columns and x in stats_against.columns]\n\n        team_stats = stats_for.merge(stats_against, on=merge_list, how=\"outer\")\n\n        team_stats[\"toi\"] = (team_stats.toi_x + team_stats.toi_y) / 60\n\n        fos = [\"ozf\", \"nzf\", \"dzf\"]\n\n        for fo in fos:\n            team_stats[fo] = team_stats[f\"{fo}w\"] + team_stats[f\"{fo}w\"]\n\n        team_stats = team_stats.dropna(subset=\"toi\").reset_index(drop=True)\n\n        cols = [x for x in list(TeamStatSchema.dtypes.keys()) if x in team_stats]\n\n        team_stats = team_stats[cols]\n\n        team_stats = prep_p60(team_stats)\n\n        team_stats = prep_oi_percent(team_stats)\n\n        team_stats = TeamStatSchema.validate(team_stats)\n\n        self._team_stats = team_stats\n\n    def prep_team_stats(\n        self,\n        level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n        strengths: bool = True,\n        opposition: bool = False,\n        score: bool = False,\n        disable_progress_bar: bool | None = None,\n    ) -&gt; None:\n        \"\"\"Prepares DataFrame of team stats from play-by-play data.\n\n        Used to prepare, or reset prepared data for later analysis\n\n        Parameters:\n            level (str):\n                Determines the level of aggregation. One of season, session, game, period\n            score (bool):\n                Determines if stats account  for score state\n            strengths (bool):\n                Determines if stats account  for strength state\n            opposition (bool):\n                Determines if stats account  for opponents on ice\n            disable_progress_bar (bool):\n                Determines whether to display the progress bar\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 2023 for 2023-24 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020001\n            team (str):\n                Player's team, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., TBL\n            strength_state (str):\n                Strength state, e.g., 5v5\n            period (int):\n                Period, e.g., 3\n            score_state (str):\n                Score state, e.g., 2v1\n            toi (float):\n                Time on-ice, in minutes, e.g, 1.100000\n            gf (int):\n                Goals for (on-ice), e.g, 0\n            hdgf (int):\n                High-danger goals for (on-ice), e.g, 0\n            ga (int):\n                Goals against (on-ice), e.g, 0\n            hdga (int):\n                High-danger goals against (on-ice), e.g, 0\n            xgf (float):\n                xG for (on-ice), e.g., 1.271583\n            xga (float):\n                xG against (on-ice), e.g, 0.000000\n            sf (int):\n                Shots for (on-ice), e.g, 5\n            sa (int):\n                Shots against (on-ice), e.g, 0\n            hdsf (int):\n                High-danger shots for (on-ice), e.g, 3\n            hdsa (int):\n                High-danger shots against (on-ice), e.g, 0\n            ff (int):\n                Fenwick for (on-ice), e.g, 5\n            fa (int):\n                Fenwick against (on-ice), e.g, 0\n            hdff (int):\n                High-danger fenwick for (on-ice), e.g, 3\n            hdfa (int):\n                High-danger fenwick against (on-ice), e.g, 0\n            cf (int):\n                Corsi for (on-ice), e.g, 5\n            ca (int):\n                Corsi against (on-ice), e.g, 0\n            bsf (int):\n                Shots taken that were blocked (on-ice), e.g, 0\n            bsa (int):\n                Shots blocked (on-ice), e.g, 0\n            msf (int):\n                Missed shots taken (on-ice), e.g, 0\n            msa (int):\n                Missed shots against (on-ice), e.g, 0\n            hdmsf (int):\n                High-danger missed shots taken (on-ice), e.g, 0\n            hdmsa (int):\n                High-danger missed shots against (on-ice), e.g, 0\n            teammate_block (int):\n                Shots blocked by teammates (on-ice), e.g, 0\n            hf (int):\n                Hits for (on-ice), e.g, 0\n            ht (int):\n                Hits taken (on-ice), e.g, 0\n            give (int):\n                Giveaways (on-ice), e.g, 0\n            take (int):\n                Takeaways (on-ice), e.g, 0\n            ozf (int):\n                Offensive zone faceoffs (on-ice), e.g, 0\n            nzf (int):\n                Neutral zone faceoffs (on-ice), e.g, 4\n            dzf (int):\n                Defensive zone faceoffs (on-ice), e.g, 0\n            fow (int):\n                Faceoffs won (on-ice), e.g, 2\n            fol (int):\n                Faceoffs lost (on-ice), e.g, 0\n            ozfw (int):\n                Offensive zone faceoffs won (on-ice), e.g, 0\n            ozfl (int):\n                Offensive zone faceoffs lost (on-ice), e.g, 0\n            nzfw (int):\n                Neutral zone faceoffs won (on-ice), e.g, 2\n            nzfl (int):\n                Neutral zone faceoffs lost (on-ice), e.g, 1\n            dzfw (int):\n                Defensive zone faceoffs won (on-ice), e.g, 0\n            dzfl (int):\n                Defensive zone faceoffs lost (on-ice), e.g, 1\n            pent0 (int):\n                Penalty shots allowed (on-ice), e.g, 0\n            pent2 (int):\n                Minor penalties taken (on-ice), e.g, 1\n            pent4 (int):\n                Double minor penalties taken (on-ice), e.g, 0\n            pent5 (int):\n                Major penalties taken (on-ice), e.g, 0\n            pent10 (int):\n                Game misconduct penalties taken (on-ice), e.g, 0\n            pend0 (int):\n                Penalty shots drawn (on-ice), e.g, 0\n            pend2 (int):\n                Minor penalties drawn (on-ice), e.g, 0\n            pend4 (int):\n                Double minor penalties drawn (on-ice), e.g, 0\n            pend5 (int):\n                Major penalties drawn (on-ice), e.g, 0\n            pend10 (int):\n                Game misconduct penalties drawn (on-ice), e.g, 0\n            gf_p60 (float):\n                Goals for (on-ice) per 60 minutes\n            ga_p60 (float):\n                Goals against (on-ice) per 60 minutes\n            hdgf_p60 (float):\n                High-danger goals for (on-ice) per 60 minutes\n            hdga_p60 (float):\n                High-danger goals against (on-ice) per 60 minutes\n            xgf_p60 (float):\n                xG for (on-ice) per 60 minutes\n            xga_p60 (float):\n                xG against (on-ice) per 60 minutes\n            sf_p60 (float):\n                Shots for (on-ice) per 60 minutes\n            sa_p60 (float):\n                Shots against (on-ice) per 60 minutes\n            hdsf_p60 (float):\n                High-danger shots for (on-ice) per 60 minutes\n            hdsa_p60 (float):\n                High danger shots against (on-ice) per 60 minutes\n            ff_p60 (float):\n                Fenwick for (on-ice) per 60 minutes\n            fa_p60 (float):\n                Fenwick against (on-ice) per 60 minutes\n            hdff_p60 (float):\n                High-danger fenwick for (on-ice) per 60 minutes\n            hdfa_p60 (float):\n                High-danger fenwick against (on-ice) per 60 minutes\n            cf_p60 (float):\n                Corsi for (on-ice) per 60 minutes\n            ca_p60 (float):\n                Corsi against (on-ice) per 60 minutes\n            bsf_p60 (float):\n                Blocked shots for (on-ice) per 60 minutes\n            bsa_p60 (float):\n                Blocked shots against (on-ice) per 60 minutes\n            msf_p60 (float):\n                Missed shots for (on-ice) per 60 minutes\n            msa_p60 (float):\n                Missed shots against (on-ice) per 60 minutes\n            hdmsf_p60 (float):\n                High-danger missed shots for (on-ice) per 60 minutes\n            hdmsa_p60 (float):\n                High-danger missed shots against (on-ice) per 60 minutes\n            teammate_block_p60 (float):\n                Shots blocked by teammates (on-ice) per 60 minutes\n            hf_p60 (float):\n                Hits  for (on-ice) per 60 minutes\n            ht_p60 (float):\n                Hits taken (on-ice) per 60 minutes\n            give_p60 (float):\n                Giveaways (on-ice) per 60 minutes\n            take_p60 (float):\n                Takeaways (on-ice) per 60 minutes\n            pent0_p60 (float):\n                Penalty shots taken (on-ice) per 60 minutes\n            pent2_p60 (float):\n                Minor penalties taken (on-ice) per 60 minutes\n            pent4_p60 (float):\n                Double minor penalties taken (on-ice) per 60 minutes\n            pent5_p60 (float):\n                Major penalties taken (on-ice) per 60 minutes\n            pent10_p60 (float):\n                Game misconduct pentalties taken (on-ice) per 60 minutes\n            pend0_p60 (float):\n                Penalty shots drawn (on-ice) per 60 minutes\n            pend2_p60 (float):\n                Minor penalties drawn (on-ice) per 60 minutes\n            pend4_p60 (float):\n                Double minor penalties drawn (on-ice) per 60 minutes\n            pend5_p60 (float):\n                Major penalties drawn (on-ice) per 60 minutes\n            pend10_p60 (float):\n                Game misconduct penalties drawn (on-ice) per 60 minutes\n            gf_percent (float):\n                On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)\n            hdgf_percent (float):\n                On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF /\n                (HDGF + HDGA)\n            xgf_percent (float):\n                On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)\n            sf_percent (float):\n                On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)\n            hdsf_percent (float):\n                On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF /\n                (HDSF + HDSA)\n            ff_percent (float):\n                On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)\n            hdff_percent (float):\n                On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF /\n                (HDFF + HDFA)\n            cf_percent (float):\n                On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)\n            bsf_percent (float):\n                On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)\n            msf_percent (float):\n                On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)\n            hdmsf_percent (float):\n                On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e.,\n                HDMSF / (HDMSF + HDMSA)\n            hf_percent (float):\n                On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)\n            take_percent (float):\n                On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2023020001\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Team dataframe with default options\n            &gt;&gt;&gt; scraper.prep_team_stats()\n\n            Team statistics, aggregated to season level\n            &gt;&gt;&gt; scraper.prep_team_stats(level=\"season\")\n\n            Team statistics, aggregated to game level, accounting for teammates\n            &gt;&gt;&gt; scraper.prep_team_stats(level=\"game\", teammates=True)\n\n        \"\"\"\n        levels = self._team_stats_levels\n\n        if (\n            levels[\"level\"] != level\n            or levels[\"score\"] != score\n            or levels[\"strengths\"] != strengths\n            or levels[\"opposition\"] != opposition\n        ):\n            self._team_stats = pd.DataFrame()\n\n            new_values = {\"level\": level, \"score\": score, \"strengths\": strengths, \"opposition\": opposition}\n\n            self._team_stats_levels.update(new_values)\n\n        if self._team_stats.empty:\n            if not disable_progress_bar:\n                disable_progress_bar = self.disable_progress_bar\n\n            with ChickenProgressIndeterminate(disable=disable_progress_bar) as progress:\n                pbar_message = \"Prepping team stats data...\"\n                progress_task = progress.add_task(pbar_message, total=None, refresh=True)\n\n                progress.start_task(progress_task)\n                progress.update(progress_task, total=1, description=pbar_message, refresh=True)\n\n                self._prep_team_stats(level=level, score=score, strengths=strengths, opposition=opposition)\n\n                progress.update(\n                    progress_task,\n                    description=\"Finished prepping team stats data\",\n                    completed=True,\n                    advance=True,\n                    refresh=True,\n                )\n\n    @property\n    def team_stats(self):\n        \"\"\"Pandas Dataframe of teams stats aggregated from play-by-play data.\n\n        Determine level of aggregation using `prep_team_stats` method.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 2023 for 2023-24 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020001\n            team (str):\n                Player's team, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., TBL\n            strength_state (str):\n                Strength state, e.g., 5v5\n            period (int):\n                Period, e.g., 3\n            score_state (str):\n                Score state, e.g., 2v1\n            toi (float):\n                Time on-ice, in minutes, e.g, 1.100000\n            gf (int):\n                Goals for (on-ice), e.g, 0\n            hdgf (int):\n                High-danger goals for (on-ice), e.g, 0\n            ga (int):\n                Goals against (on-ice), e.g, 0\n            hdga (int):\n                High-danger goals against (on-ice), e.g, 0\n            xgf (float):\n                xG for (on-ice), e.g., 1.271583\n            xga (float):\n                xG against (on-ice), e.g, 0.000000\n            sf (int):\n                Shots for (on-ice), e.g, 5\n            sa (int):\n                Shots against (on-ice), e.g, 0\n            hdsf (int):\n                High-danger shots for (on-ice), e.g, 3\n            hdsa (int):\n                High-danger shots against (on-ice), e.g, 0\n            ff (int):\n                Fenwick for (on-ice), e.g, 5\n            fa (int):\n                Fenwick against (on-ice), e.g, 0\n            hdff (int):\n                High-danger fenwick for (on-ice), e.g, 3\n            hdfa (int):\n                High-danger fenwick against (on-ice), e.g, 0\n            cf (int):\n                Corsi for (on-ice), e.g, 5\n            ca (int):\n                Corsi against (on-ice), e.g, 0\n            bsf (int):\n                Shots taken that were blocked (on-ice), e.g, 0\n            bsa (int):\n                Shots blocked (on-ice), e.g, 0\n            msf (int):\n                Missed shots taken (on-ice), e.g, 0\n            msa (int):\n                Missed shots against (on-ice), e.g, 0\n            hdmsf (int):\n                High-danger missed shots taken (on-ice), e.g, 0\n            hdmsa (int):\n                High-danger missed shots against (on-ice), e.g, 0\n            teammate_block (int):\n                Shots blocked by teammates (on-ice), e.g, 0\n            hf (int):\n                Hits for (on-ice), e.g, 0\n            ht (int):\n                Hits taken (on-ice), e.g, 0\n            give (int):\n                Giveaways (on-ice), e.g, 0\n            take (int):\n                Takeaways (on-ice), e.g, 0\n            ozf (int):\n                Offensive zone faceoffs (on-ice), e.g, 0\n            nzf (int):\n                Neutral zone faceoffs (on-ice), e.g, 4\n            dzf (int):\n                Defensive zone faceoffs (on-ice), e.g, 0\n            fow (int):\n                Faceoffs won (on-ice), e.g, 2\n            fol (int):\n                Faceoffs lost (on-ice), e.g, 0\n            ozfw (int):\n                Offensive zone faceoffs won (on-ice), e.g, 0\n            ozfl (int):\n                Offensive zone faceoffs lost (on-ice), e.g, 0\n            nzfw (int):\n                Neutral zone faceoffs won (on-ice), e.g, 2\n            nzfl (int):\n                Neutral zone faceoffs lost (on-ice), e.g, 1\n            dzfw (int):\n                Defensive zone faceoffs won (on-ice), e.g, 0\n            dzfl (int):\n                Defensive zone faceoffs lost (on-ice), e.g, 1\n            pent0 (int):\n                Penalty shots allowed (on-ice), e.g, 0\n            pent2 (int):\n                Minor penalties taken (on-ice), e.g, 1\n            pent4 (int):\n                Double minor penalties taken (on-ice), e.g, 0\n            pent5 (int):\n                Major penalties taken (on-ice), e.g, 0\n            pent10 (int):\n                Game misconduct penalties taken (on-ice), e.g, 0\n            pend0 (int):\n                Penalty shots drawn (on-ice), e.g, 0\n            pend2 (int):\n                Minor penalties drawn (on-ice), e.g, 0\n            pend4 (int):\n                Double minor penalties drawn (on-ice), e.g, 0\n            pend5 (int):\n                Major penalties drawn (on-ice), e.g, 0\n            pend10 (int):\n                Game misconduct penalties drawn (on-ice), e.g, 0\n            gf_p60 (float):\n                Goals for (on-ice) per 60 minutes\n            ga_p60 (float):\n                Goals against (on-ice) per 60 minutes\n            hdgf_p60 (float):\n                High-danger goals for (on-ice) per 60 minutes\n            hdga_p60 (float):\n                High-danger goals against (on-ice) per 60 minutes\n            xgf_p60 (float):\n                xG for (on-ice) per 60 minutes\n            xga_p60 (float):\n                xG against (on-ice) per 60 minutes\n            sf_p60 (float):\n                Shots for (on-ice) per 60 minutes\n            sa_p60 (float):\n                Shots against (on-ice) per 60 minutes\n            hdsf_p60 (float):\n                High-danger shots for (on-ice) per 60 minutes\n            hdsa_p60 (float):\n                High danger shots against (on-ice) per 60 minutes\n            ff_p60 (float):\n                Fenwick for (on-ice) per 60 minutes\n            fa_p60 (float):\n                Fenwick against (on-ice) per 60 minutes\n            hdff_p60 (float):\n                High-danger fenwick for (on-ice) per 60 minutes\n            hdfa_p60 (float):\n                High-danger fenwick against (on-ice) per 60 minutes\n            cf_p60 (float):\n                Corsi for (on-ice) per 60 minutes\n            ca_p60 (float):\n                Corsi against (on-ice) per 60 minutes\n            bsf_p60 (float):\n                Blocked shots for (on-ice) per 60 minutes\n            bsa_p60 (float):\n                Blocked shots against (on-ice) per 60 minutes\n            msf_p60 (float):\n                Missed shots for (on-ice) per 60 minutes\n            msa_p60 (float):\n                Missed shots against (on-ice) per 60 minutes\n            hdmsf_p60 (float):\n                High-danger missed shots for (on-ice) per 60 minutes\n            hdmsa_p60 (float):\n                High-danger missed shots against (on-ice) per 60 minutes\n            teammate_block_p60 (float):\n                Shots blocked by teammates (on-ice) per 60 minutes\n            hf_p60 (float):\n                Hits  for (on-ice) per 60 minutes\n            ht_p60 (float):\n                Hits taken (on-ice) per 60 minutes\n            give_p60 (float):\n                Giveaways (on-ice) per 60 minutes\n            take_p60 (float):\n                Takeaways (on-ice) per 60 minutes\n            pent0_p60 (float):\n                Penalty shots taken (on-ice) per 60 minutes\n            pent2_p60 (float):\n                Minor penalties taken (on-ice) per 60 minutes\n            pent4_p60 (float):\n                Double minor penalties taken (on-ice) per 60 minutes\n            pent5_p60 (float):\n                Major penalties taken (on-ice) per 60 minutes\n            pent10_p60 (float):\n                Game misconduct pentalties taken (on-ice) per 60 minutes\n            pend0_p60 (float):\n                Penalty shots drawn (on-ice) per 60 minutes\n            pend2_p60 (float):\n                Minor penalties drawn (on-ice) per 60 minutes\n            pend4_p60 (float):\n                Double minor penalties drawn (on-ice) per 60 minutes\n            pend5_p60 (float):\n                Major penalties drawn (on-ice) per 60 minutes\n            pend10_p60 (float):\n                Game misconduct penalties drawn (on-ice) per 60 minutes\n            gf_percent (float):\n                On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)\n            hdgf_percent (float):\n                On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF /\n                (HDGF + HDGA)\n            xgf_percent (float):\n                On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)\n            sf_percent (float):\n                On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)\n            hdsf_percent (float):\n                On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF /\n                (HDSF + HDSA)\n            ff_percent (float):\n                On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)\n            hdff_percent (float):\n                On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF /\n                (HDFF + HDFA)\n            cf_percent (float):\n                On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)\n            bsf_percent (float):\n                On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)\n            msf_percent (float):\n                On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)\n            hdmsf_percent (float):\n                On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e.,\n                HDMSF / (HDMSF + HDMSA)\n            hf_percent (float):\n                On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)\n            take_percent (float):\n                On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2023020001\n            &gt;&gt;&gt; scraper = Scraper(game_id)\n\n            Returns team stats with default options\n            &gt;&gt;&gt; scraper.team_stats\n\n            Resets team stats to season level, accounting for opposing team\n            &gt;&gt;&gt; scraper.prep_team_stats(level=\"season\", opposition=True)\n            &gt;&gt;&gt; scraper.team_stats\n\n            Resets team stats to season level, accounting for opposing team and score state\n            &gt;&gt;&gt; scraper.prep_team_stats(level=\"season\", opposition=True, score=True)\n            &gt;&gt;&gt; scraper.team_stats\n\n        \"\"\"\n        if self._team_stats.empty:\n            self.prep_team_stats()\n\n        return self._team_stats.copy()\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper.play_by_play","title":"play_by_play  <code>property</code>","text":"<pre><code>play_by_play\n</code></pre> <p>Pandas Dataframe of play-by-play data.</p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>game_date</code> <code>str</code> <p>Date game was played, e.g., 2020-01-09</p> <code>event_idx</code> <code>int</code> <p>Index ID for event, e.g., 667</p> <code>period</code> <code>int</code> <p>Period number of the event, e.g., 3</p> <code>period_seconds</code> <code>int</code> <p>Time elapsed in the period, in seconds, e.g., 1178</p> <code>game_seconds</code> <code>int</code> <p>Time elapsed in the game, in seconds, e.g., 3578</p> <code>strength_state</code> <code>str</code> <p>Strength state, e.g., 5vE</p> <code>event_team</code> <code>str</code> <p>Team that performed the action for the event, e.g., NSH</p> <code>opp_team</code> <code>str</code> <p>Opposing team, e.g., CHI</p> <code>event</code> <code>str</code> <p>Type of event that occurred, e.g., GOAL</p> <code>description</code> <code>str | None</code> <p>Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.</p> <code>zone</code> <code>str</code> <p>Zone where the event occurred, relative to the event team, e.g., DEF</p> <code>coords_x</code> <code>int</code> <p>x-coordinates where the event occurred, e.g, -96</p> <code>coords_y</code> <code>int</code> <p>y-coordinates where the event occurred, e.g., 11</p> <code>danger</code> <code>int</code> <p>Whether shot event occurred from danger area, e.g., 0</p> <code>high_danger</code> <code>int</code> <p>Whether shot event occurred from high-danger area, e.g., 0</p> <code>player_1</code> <code>str</code> <p>Player that performed the action, e.g., PEKKA RINNE</p> <code>player_1_eh_id</code> <code>str</code> <p>Evolving Hockey ID for player_1, e.g., PEKKA.RINNE</p> <code>player_1_eh_id_api</code> <code>str</code> <p>Evolving Hockey ID for player_1 from the api_events (for debugging), e.g., PEKKA.RINNE</p> <code>player_1_api_id</code> <code>int</code> <p>NHL API ID for player_1, e.g., 8471469</p> <code>player_1_position</code> <code>str</code> <p>Position player_1 plays, e.g., G</p> <code>player_1_type</code> <code>str</code> <p>Type of player, e.g., GOAL SCORER</p> <code>player_2</code> <code>str | None</code> <p>Player that performed the action, e.g., None</p> <code>player_2_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for player_2, e.g., None</p> <code>player_2_eh_id_api</code> <code>str | None</code> <p>Evolving Hockey ID for player_2 from the api_events (for debugging), e.g., None</p> <code>player_2_api_id</code> <code>int | None</code> <p>NHL API ID for player_2, e.g., None</p> <code>player_2_position</code> <code>str | None</code> <p>Position player_2 plays, e.g., None</p> <code>player_2_type</code> <code>str | None</code> <p>Type of player, e.g., None</p> <code>player_3</code> <code>str | None</code> <p>Player that performed the action, e.g., None</p> <code>player_3_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for player_3, e.g., None</p> <code>player_3_eh_id_api</code> <code>str | None</code> <p>Evolving Hockey ID for player_3 from the api_events (for debugging), e.g., None</p> <code>player_3_api_id</code> <code>int | None</code> <p>NHL API ID for player_3, e.g., None</p> <code>player_3_position</code> <code>str | None</code> <p>Position player_3 plays, e.g., None</p> <code>player_3_type</code> <code>str | None</code> <p>Type of player, e.g., None</p> <code>score_state</code> <code>str</code> <p>Score of the game from event team's perspective, e.g., 4v2</p> <code>score_diff</code> <code>int</code> <p>Score differential from event team's perspective, e.g., 2</p> <code>shot_type</code> <code>str | None</code> <p>Type of shot taken, if event is a shot, e.g., WRIST</p> <code>event_length</code> <code>int</code> <p>Time elapsed since previous event, e.g., 5</p> <code>event_distance</code> <code>float | None</code> <p>Calculated distance of event from goal, e.g, 185.32673849177834</p> <code>pbp_distance</code> <code>int</code> <p>Distance of event from goal from description, e.g., 185</p> <code>event_angle</code> <code>float | None</code> <p>Angle of event towards goal, e.g., 57.52880770915151</p> <code>penalty</code> <code>str | None</code> <p>Name of penalty, e.g., None</p> <code>penalty_length</code> <code>int | None</code> <p>Duration of penalty, e.g., None</p> <code>home_score</code> <code>int</code> <p>Home team's score, e.g., 2</p> <code>home_score_diff</code> <code>int</code> <p>Home team's score differential, e.g., -2</p> <code>away_score</code> <code>int</code> <p>Away team's score, e.g., 4</p> <code>away_score_diff</code> <code>int</code> <p>Away team's score differential, e.g., 2</p> <code>is_home</code> <code>int</code> <p>Whether event team is home, e.g., 0</p> <code>is_away</code> <code>int</code> <p>Whether event is away, e.g., 1</p> <code>home_team</code> <code>str</code> <p>Home team, e.g., CHI</p> <code>away_team</code> <code>str</code> <p>Away team, e.g., NSH</p> <code>home_skaters</code> <code>int</code> <p>Number of home team skaters on-ice (excl. goalies), e.g., 6</p> <code>away_skaters</code> <code>int</code> <p>Number of away team skaters on-ice (excl. goalies), e.g., 5</p> <code>home_on</code> <code>list | str | None</code> <p>Name of home team's skaters on-ice (excl. goalies), e.g., ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON</p> <code>home_on_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of home team's skaters on-ice (excl. goalies), e.g., ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2</p> <code>home_on_api_id</code> <code>list | str | None</code> <p>NHL API IDs of home team's skaters on-ice (excl. goalies), e.g., 8479337, 8473604, 8481523, 8474141, 8470281, 8476979</p> <code>home_on_positions</code> <code>list | str | None</code> <p>Positions of home team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D</p> <code>away_on</code> <code>list | str | None</code> <p>Name of away team's skaters on-ice (excl. goalies), e.g., NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI</p> <code>away_on_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of away team's skaters on-ice (excl. goalies), e.g., NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI</p> <code>away_on_api_id</code> <code>list | str | None</code> <p>NHL API IDs of away team's skaters on-ice (excl. goalies), e.g., 8474009, 8475714, 8475798, 8475218, 8474600</p> <code>away_on_positions</code> <code>list | str | None</code> <p>Positions of away team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D</p> <code>event_team_skaters</code> <code>int | None</code> <p>Number of event team skaters on-ice (excl. goalies), e.g., 5</p> <code>teammates</code> <code>list | str | None</code> <p>Name of event team's skaters on-ice (excl. goalies), e.g., NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI</p> <code>teammates_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of event team's skaters on-ice (excl. goalies), e.g., NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI</p> <code>teammates_api_id</code> <code>list | str | None = None</code> <p>NHL API IDs of event team's skaters on-ice (excl. goalies), e.g., 8474009, 8475714, 8475798, 8475218, 8474600</p> <code>teammates_positions</code> <code>list | str | None</code> <p>Positions of event team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D</p> <code>own_goalie</code> <code>list | str | None</code> <p>Name of the event team's goalie, e.g., PEKKA RINNE</p> <code>own_goalie_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey ID of the event team's goalie, e.g., PEKKA.RINNE</p> <code>own_goalie_api_id</code> <code>list | str | None</code> <p>NHL API ID of the event team's goalie, e.g., 8471469</p> <code>forwards</code> <code>list | str | None</code> <p>Name of event team's forwards on-ice, e.g., NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND</p> <code>forwards_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of event team's forwards on-ice, e.g., NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND</p> <code>forwards_api_id</code> <code>list | str | None</code> <p>NHL API IDs of event team's forwards on-ice, e.g., 8474009, 8475714, 8475798</p> <code>defense</code> <code>list | str | None</code> <p>Name of event team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI</p> <code>defense_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of event team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI</p> <code>defense_api_id</code> <code>list | str | None</code> <p>NHL API IDs of event team's skaters on-ice, e.g., 8475218, 8474600</p> <code>opp_strength_state</code> <code>str | None</code> <p>Strength state from opposing team's perspective, e.g., Ev5</p> <code>opp_score_state</code> <code>str | None</code> <p>Score state from opposing team's perspective, e.g., 2v4</p> <code>opp_score_diff</code> <code>int | None</code> <p>Score differential from opposing team's perspective, e.g., -2</p> <code>opp_team_skaters</code> <code>int | None</code> <p>Number of opposing team skaters on-ice (excl. goalies), e.g., 6</p> <code>opp_team_on</code> <code>list | str | None</code> <p>Name of opposing team's skaters on-ice (excl. goalies), e.g., ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON</p> <code>opp_team_on_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of opposing team's skaters on-ice (excl. goalies), e.g., ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2</p> <code>opp_team_on_api_id</code> <code>list | str | None</code> <p>NHL API IDs of opposing team's skaters on-ice (excl. goalies), e.g., 8479337, 8473604, 8481523, 8474141, 8470281, 8476979</p> <code>opp_team_on_positions</code> <code>list | str | None</code> <p>Positions of opposing team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D</p> <code>opp_goalie</code> <code>list | str | None</code> <p>Name of the opposing team's goalie, e.g., None</p> <code>opp_goalie_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey ID of the opposing team's goalie, e.g., None</p> <code>opp_goalie_api_id</code> <code>list | str | None</code> <p>NHL API ID of the opposing team's goalie, e.g., None</p> <code>opp_forwards</code> <code>list | str | None</code> <p>Name of opposing team's forwards on-ice, e.g., ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE</p> <code>opp_forwards_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of opposing team's forwards on-ice, e.g., ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE</p> <code>opp_forwards_api_id</code> <code>list | str | None</code> <p>NHL API IDs of opposing team's forwards on-ice, e.g., 8479337, 8473604, 8481523, 8474141</p> <code>opp_defense</code> <code>list | str | None</code> <p>Name of opposing team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON</p> <code>opp_defense_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of opposing team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2</p> <code>opp_defense_api_id</code> <code>list | str | None</code> <p>NHL API IDs of opposing team's skaters on-ice, e.g., 8470281, 8476979</p> <code>home_forwards</code> <code>list | str | None</code> <p>Name of home team's forwards on-ice, e.g., ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE</p> <code>home_forwards_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of home team's forwards on-ice, e.g., ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE</p> <code>home_forwards_api_id</code> <code>list | str | None = None</code> <p>NHL API IDs of home team's forwards on-ice, e.g., 8479337, 8473604, 8481523, 8474141</p> <code>home_defense</code> <code>list | str | None</code> <p>Name of home team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON</p> <code>home_defense_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of home team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2</p> <code>home_defense_api_id</code> <code>list | str | None</code> <p>NHL API IDs of home team's skaters on-ice, e.g., 8470281, 8476979</p> <code>home_goalie</code> <code>list | str | None</code> <p>Name of the home team's goalie, e.g., None</p> <code>home_goalie_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey ID of the home team's goalie, e.g., None</p> <code>home_goalie_api_id</code> <code>list | str | None</code> <p>NHL API ID of the home team's goalie, e.g., None</p> <code>away_forwards</code> <code>list | str | None</code> <p>Name of away team's forwards on-ice, e.g., NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND</p> <code>away_forwards_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of away team's forwards on-ice, e.g., NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND</p> <code>away_forwards_api_id</code> <code>list | str | None</code> <p>NHL API IDs of away team's forwards on-ice, e.g., 8474009, 8475714, 8475798</p> <code>away_defense</code> <code>list | str | None</code> <p>Name of away team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI</p> <code>away_defense_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of away team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI</p> <code>away_defense_api_id</code> <code>list | str | None</code> <p>NHL API IDs of away team's skaters on-ice, e.g., 8475218, 8474600</p> <code>away_goalie</code> <code>list | str | None</code> <p>Name of the away team's goalie, e.g., PEKKA RINNE</p> <code>away_goalie_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey ID of the away team's goalie, e.g., PEKKA.RINNE</p> <code>away_goalie_api_id</code> <code>list | str | None</code> <p>NHL API ID of the away team's goalie, e.g., 8471469</p> <code>change_on_count</code> <code>int | None</code> <p>Number of players on, e.g., None</p> <code>change_off_count</code> <code>int | None</code> <p>Number of players off, e.g., None</p> <code>change_on</code> <code>list | str | None</code> <p>Names of the players on, e.g., None</p> <code>change_on_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of the players on, e.g., None</p> <code>change_on_positions</code> <code>list | str | None</code> <p>Postions of the players on, e.g., None</p> <code>change_off</code> <code>list | str | None</code> <p>Names of the players off, e.g., None</p> <code>change_off_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of the players off, e.g., None</p> <code>change_off_positions</code> <code>list | str | None</code> <p>Positions of the players off, e.g., None</p> <code>change_on_forwards_count</code> <code>int | None</code> <p>Number of forwards changing on, e.g., None</p> <code>change_off_forwards_count</code> <code>int | None</code> <p>Number of forwards off, e.g., None</p> <code>change_on_forwards</code> <code>list | str | None</code> <p>Names of the forwards on, e.g., None</p> <code>change_on_forwards_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of the forwards on, e.g., None</p> <code>change_off_forwards</code> <code>list | str | None</code> <p>Names of the forwards off, e.g., None</p> <code>change_off_forwards_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of the forwards off, e.g., None</p> <code>change_on_defense_count</code> <code>int | None</code> <p>Number of defense on, e.g., None</p> <code>change_off_defense_count</code> <code>int | None</code> <p>Number of defense off, e.g., None</p> <code>change_on_defense</code> <code>list | str | None</code> <p>Names of the defense on, e.g., None</p> <code>change_on_defense_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of the defense on, e.g., None</p> <code>change_off_defense</code> <code>list | str | None</code> <p>Names of the defense off, e.g., None</p> <code>change_off_defense_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of the defense off, e.g., None</p> <code>change_on_goalie_count</code> <code>int | None</code> <p>Number of goalies on, e.g., None</p> <code>change_off_goalie_count</code> <code>int | None</code> <p>Number of goalies off, e.g., None</p> <code>change_on_goalie</code> <code>list | str | None</code> <p>Name of goalie on, e.g., None</p> <code>change_on_goalie_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey ID of the goalie on, e.g., None</p> <code>change_off_goalie</code> <code>list | str | None</code> <p>Name of the goalie off, e.g., None</p> <code>change_off_goalie_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey ID of the goalie off, e.g., None</p> <code>goal</code> <code>int</code> <p>Dummy indicator whether event is a goal, e.g., 1</p> <code>shot</code> <code>int</code> <p>Dummy indicator whether event is a shot, e.g., 1</p> <code>miss</code> <code>int</code> <p>Dummy indicator whether event is a miss, e.g., 0</p> <code>fenwick</code> <code>int</code> <p>Dummy indicator whether event is a fenwick event, e.g., 1</p> <code>corsi</code> <code>int</code> <p>Dummy indicator whether event is a corsi event, e.g., 1</p> <code>block</code> <code>int</code> <p>Dummy indicator whether event is a block, e.g., 0</p> <code>hit</code> <code>int</code> <p>Dummy indicator whether event is a hit, e.g., 0</p> <code>give</code> <code>int</code> <p>Dummy indicator whether event is a give, e.g., 0</p> <code>take</code> <code>int</code> <p>Dummy indicator whether event is a take, e.g., 0</p> <code>fac</code> <code>int</code> <p>Dummy indicator whether event is a faceoff, e.g., 0</p> <code>penl</code> <code>int</code> <p>Dummy indicator whether event is a penalty, e.g., 0</p> <code>change</code> <code>int</code> <p>Dummy indicator whether event is a change, e.g., 0</p> <code>stop</code> <code>int</code> <p>Dummy indicator whether event is a stop, e.g., 0</p> <code>chl</code> <code>int</code> <p>Dummy indicator whether event is a challenge, e.g., 0</p> <code>ozf</code> <code>int</code> <p>Dummy indicator whether event is a offensive zone faceoff, e.g., 0</p> <code>nzf</code> <code>int</code> <p>Dummy indicator whether event is a neutral zone faceoff, e.g., 0</p> <code>dzf</code> <code>int</code> <p>Dummy indicator whether event is a defensive zone faceoff, e.g., 0</p> <code>ozc</code> <code>int</code> <p>Dummy indicator whether event is a offensive zone change, e.g., 0</p> <code>nzc</code> <code>int</code> <p>Dummy indicator whether event is a neutral zone change, e.g., 0</p> <code>dzc</code> <code>int</code> <p>Dummy indicator whether event is a defensive zone change, e.g., 0</p> <code>otf</code> <code>int</code> <p>Dummy indicator whether event is an on-the-fly change, e.g., 0</p> <code>pen0</code> <code>int</code> <p>Dummy indicator whether event is a penalty, e.g., 0</p> <code>pen2</code> <code>int</code> <p>Dummy indicator whether event is a minor penalty, e.g., 0</p> <code>pen4</code> <code>int</code> <p>Dummy indicator whether event is a double minor penalty, e.g., 0</p> <code>pen5</code> <code>int</code> <p>Dummy indicator whether event is a major penalty, e.g., 0</p> <code>pen10</code> <code>int</code> <p>Dummy indicator whether event is a game misconduct penalty, e.g., 0</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Then you can access the property as a Pandas DataFrame</p> <pre><code>&gt;&gt;&gt; scraper.play_by_play\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper.stats","title":"stats  <code>property</code>","text":"<pre><code>stats\n</code></pre> <p>Pandas Dataframe of individual &amp; on-ice stats aggregated from play-by-play data.</p> <p>Determine level of aggregation using prep_stats method.</p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 2023 for 2023-24 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2023020001</p> <code>game_date</code> <code>int</code> <p>Date game was played, e.g., 2023-10-10</p> <code>player</code> <code>str</code> <p>Player's name, e.g., FILIP FORSBERG</p> <code>eh_id</code> <code>str</code> <p>Evolving Hockey ID for the player, e.g., FILIP.FORSBERG</p> <code>api_id</code> <code>str</code> <p>NHL API ID for the player, e.g., 8476887</p> <code>position</code> <code>str</code> <p>Player's position, e.g., L</p> <code>team</code> <code>str</code> <p>Player's team, e.g., NSH</p> <code>opp_team</code> <code>str</code> <p>Opposing team, e.g., TBL</p> <code>strength_state</code> <code>str</code> <p>Strength state, e.g., 5v5</p> <code>period</code> <code>int</code> <p>Period, e.g., 3</p> <code>score_state</code> <code>str</code> <p>Score state, e.g., 2v1</p> <code>forwards</code> <code>str</code> <p>Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY</p> <code>forwards_eh_id</code> <code>str</code> <p>Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY</p> <code>forwards_api_id</code> <code>str</code> <p>Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158</p> <code>defense</code> <code>str</code> <p>Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER</p> <code>defense_eh_id</code> <code>str</code> <p>Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER</p> <code>defense_api_id</code> <code>str</code> <p>Defense teammates' NHL API IDs, e.g., 8474151, 8478851</p> <code>own_goalie</code> <code>str</code> <p>Own goalie, e.g., JUUSE SAROS</p> <code>own_goalie_eh_id</code> <code>str</code> <p>Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS</p> <code>own_goalie_api_id</code> <code>str</code> <p>Own goalie's NHL API ID, e.g., 8477424</p> <code>opp_forwards</code> <code>str</code> <p>Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS</p> <code>opp_forwards_eh_id</code> <code>str</code> <p>Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS</p> <code>opp_forwards_api_id</code> <code>str</code> <p>Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564</p> <code>opp_defense</code> <code>str</code> <p>Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN</p> <code>opp_defense_eh_id</code> <code>str</code> <p>Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN</p> <code>opp_defense_api_id</code> <code>str</code> <p>Opposing defense's NHL API IDs, e.g., 8480246, 8475167</p> <code>opp_goalie</code> <code>str</code> <p>Opposing goalie, e.g., JONAS JOHANSSON</p> <code>opp_goalie_eh_id</code> <code>str</code> <p>Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON</p> <code>opp_goalie_api_id</code> <code>str</code> <p>Opposing goalie's NHL API ID, e.g., 8477992</p> <code>toi</code> <code>float</code> <p>Time on-ice, in minutes, e.g, 0.483333</p> <code>g</code> <code>int</code> <p>Goals scored, e.g, 0</p> <code>ihdg</code> <code>int</code> <p>High-danger goals scored, e.g, 0</p> <code>a1</code> <code>int</code> <p>Primary assists, e.g, 0</p> <code>a2</code> <code>int</code> <p>Secondary assists, e.g, 0</p> <code>ixg</code> <code>float</code> <p>Individual xG for, e.g, 1.014336</p> <code>isf</code> <code>int</code> <p>Individual shots taken, e.g, 3</p> <code>ihdsf</code> <code>int</code> <p>High-danger shots taken, e.g, 3</p> <code>imsf</code> <code>int</code> <p>Individual missed shots, e.g, 0</p> <code>ihdm</code> <code>int</code> <p>High-danger missed shots, e.g, 0</p> <code>iff</code> <code>int</code> <p>Individual fenwick for, e.g., 3</p> <code>ihdf</code> <code>int</code> <p>High-danger fenwick for, e.g., 3</p> <code>isb</code> <code>int</code> <p>Shots taken that were blocked, e.g, 0</p> <code>icf</code> <code>int</code> <p>Individual corsi for, e.g., 3</p> <code>ibs</code> <code>int</code> <p>Individual shots blocked on defense, e.g, 0</p> <code>igive</code> <code>int</code> <p>Individual giveaways, e.g, 0</p> <code>itake</code> <code>int</code> <p>Individual takeaways, e.g, 0</p> <code>ihf</code> <code>int</code> <p>Individual hits for, e.g, 0</p> <code>iht</code> <code>int</code> <p>Individual hits taken, e.g, 0</p> <code>ifow</code> <code>int</code> <p>Individual faceoffs won, e.g, 0</p> <code>ifol</code> <code>int</code> <p>Individual faceoffs lost, e.g, 0</p> <code>iozfw</code> <code>int</code> <p>Individual faceoffs won in offensive zone, e.g, 0</p> <code>iozfl</code> <code>int</code> <p>Individual faceoffs lost in offensive zone, e.g, 0</p> <code>inzfw</code> <code>int</code> <p>Individual faceoffs won in neutral zone, e.g, 0</p> <code>inzfl</code> <code>int</code> <p>Individual faceoffs lost in neutral zone, e.g, 0</p> <code>idzfw</code> <code>int</code> <p>Individual faceoffs won in defensive zone, e.g, 0</p> <code>idzfl</code> <code>int</code> <p>Individual faceoffs lost in defensive zone, e.g, 0</p> <code>a1_xg</code> <code>float</code> <p>xG on primary assists, e.g, 0</p> <code>a2_xg</code> <code>float</code> <p>xG on secondary assists, e.g, 0</p> <code>ipent0</code> <code>int</code> <p>Individual penalty shots against, e.g, 0</p> <code>ipent2</code> <code>int</code> <p>Individual minor penalties taken, e.g, 0</p> <code>ipent4</code> <code>int</code> <p>Individual double minor penalties taken, e.g, 0</p> <code>ipent5</code> <code>int</code> <p>Individual major penalties taken, e.g, 0</p> <code>ipent10</code> <code>int</code> <p>Individual game misconduct penalties taken, e.g, 0</p> <code>ipend0</code> <code>int</code> <p>Individual penalty shots drawn, e.g, 0</p> <code>ipend2</code> <code>int</code> <p>Individual minor penalties taken, e.g, 0</p> <code>ipend4</code> <code>int</code> <p>Individual double minor penalties drawn, e.g, 0</p> <code>ipend5</code> <code>int</code> <p>Individual major penalties drawn, e.g, 0</p> <code>ipend10</code> <code>int</code> <p>Individual game misconduct penalties drawn, e.g, 0</p> <code>gf</code> <code>int</code> <p>Goals for (on-ice), e.g, 0</p> <code>hdgf</code> <code>int</code> <p>High-danger goals for (on-ice), e.g, 0</p> <code>ga</code> <code>int</code> <p>Goals against (on-ice), e.g, 0</p> <code>hdga</code> <code>int</code> <p>High-danger goals against (on-ice), e.g, 0</p> <code>xgf</code> <code>float</code> <p>xG for (on-ice), e.g., 1.258332</p> <code>xga</code> <code>float</code> <p>xG against (on-ice), e.g, 0.000000</p> <code>sf</code> <code>int</code> <p>Shots for (on-ice), e.g, 4</p> <code>sa</code> <code>int</code> <p>Shots against (on-ice), e.g, 0</p> <code>hdsf</code> <code>int</code> <p>High-danger shots for (on-ice), e.g, 3</p> <code>hdsa</code> <code>int</code> <p>High-danger shots against (on-ice), e.g, 0</p> <code>ff</code> <code>int</code> <p>Fenwick for (on-ice), e.g, 4</p> <code>fa</code> <code>int</code> <p>Fenwick against (on-ice), e.g, 0</p> <code>hdff</code> <code>int</code> <p>High-danger fenwick for (on-ice), e.g, 3</p> <code>hdfa</code> <code>int</code> <p>High-danger fenwick against (on-ice), e.g, 0</p> <code>cf</code> <code>int</code> <p>Corsi for (on-ice), e.g, 4</p> <code>ca</code> <code>int</code> <p>Corsi against (on-ice), e.g, 0</p> <code>bsf</code> <code>int</code> <p>Shots taken that were blocked (on-ice), e.g, 0</p> <code>bsa</code> <code>int</code> <p>Shots blocked (on-ice), e.g, 0</p> <code>msf</code> <code>int</code> <p>Missed shots taken (on-ice), e.g, 0</p> <code>msa</code> <code>int</code> <p>Missed shots against (on-ice), e.g, 0</p> <code>hdmsf</code> <code>int</code> <p>High-danger missed shots taken (on-ice), e.g, 0</p> <code>hdmsa</code> <code>int</code> <p>High-danger missed shots against (on-ice), e.g, 0</p> <code>teammate_block</code> <code>int</code> <p>Shots blocked by teammates (on-ice), e.g, 0</p> <code>hf</code> <code>int</code> <p>Hits for (on-ice), e.g, 0</p> <code>ht</code> <code>int</code> <p>Hits taken (on-ice), e.g, 0</p> <code>give</code> <code>int</code> <p>Giveaways (on-ice), e.g, 0</p> <code>take</code> <code>int</code> <p>Takeaways (on-ice), e.g, 0</p> <code>ozf</code> <code>int</code> <p>Offensive zone faceoffs (on-ice), e.g, 0</p> <code>nzf</code> <code>int</code> <p>Neutral zone faceoffs (on-ice), e.g, 1</p> <code>dzf</code> <code>int</code> <p>Defensive zone faceoffs (on-ice), e.g, 0</p> <code>fow</code> <code>int</code> <p>Faceoffs won (on-ice), e.g, 1</p> <code>fol</code> <code>int</code> <p>Faceoffs lost (on-ice), e.g, 0</p> <code>ozfw</code> <code>int</code> <p>Offensive zone faceoffs won (on-ice), e.g, 0</p> <code>ozfl</code> <code>int</code> <p>Offensive zone faceoffs lost (on-ice), e.g, 0</p> <code>nzfw</code> <code>int</code> <p>Neutral zone faceoffs won (on-ice), e.g, 1</p> <code>nzfl</code> <code>int</code> <p>Neutral zone faceoffs lost (on-ice), e.g, 0</p> <code>dzfw</code> <code>int</code> <p>Defensive zone faceoffs won (on-ice), e.g, 0</p> <code>dzfl</code> <code>int</code> <p>Defensive zone faceoffs lost (on-ice), e.g, 0</p> <code>pent0</code> <code>int</code> <p>Penalty shots allowed (on-ice), e.g, 0</p> <code>pent2</code> <code>int</code> <p>Minor penalties taken (on-ice), e.g, 0</p> <code>pent4</code> <code>int</code> <p>Double minor penalties taken (on-ice), e.g, 0</p> <code>pent5</code> <code>int</code> <p>Major penalties taken (on-ice), e.g, 0</p> <code>pent10</code> <code>int</code> <p>Game misconduct penalties taken (on-ice), e.g, 0</p> <code>pend0</code> <code>int</code> <p>Penalty shots drawn (on-ice), e.g, 0</p> <code>pend2</code> <code>int</code> <p>Minor penalties drawn (on-ice), e.g, 0</p> <code>pend4</code> <code>int</code> <p>Double minor penalties drawn (on-ice), e.g, 0</p> <code>pend5</code> <code>int</code> <p>Major penalties drawn (on-ice), e.g, 0</p> <code>pend10</code> <code>int</code> <p>Game misconduct penalties drawn (on-ice), e.g, 0</p> <code>ozs</code> <code>int</code> <p>Offensive zone starts, e.g, 0</p> <code>nzs</code> <code>int</code> <p>Neutral zone starts, e.g, 0</p> <code>dzs</code> <code>int</code> <p>Defenzive zone starts, e.g, 0</p> <code>otf</code> <code>int</code> <p>On-the-fly starts, e.g, 0</p> <code>g_p60</code> <code>float</code> <p>Goals scored per 60 minutes</p> <code>ihdg_p60</code> <code>float</code> <p>Individual high-danger goals scored per 60</p> <code>a1_p60</code> <code>float</code> <p>Primary assists per 60 minutes</p> <code>a2_p60</code> <code>float</code> <p>Secondary per 60 minutes</p> <code>ixg_p60</code> <code>float</code> <p>Individual xG for per 60 minutes</p> <code>isf_p60</code> <code>float</code> <p>Individual shots for per 60 minutes</p> <code>ihdsf_p60</code> <code>float</code> <p>Individual high-danger shots for per 60 minutes</p> <code>imsf_p60</code> <code>float</code> <p>Individual missed shorts for per 60 minutes</p> <code>ihdm_p60</code> <code>float</code> <p>Individual high-danger missed shots for per 60 minutes</p> <code>iff_p60</code> <code>float</code> <p>Individual fenwick for per 60 minutes</p> <code>ihdff_p60</code> <code>float</code> <p>Individual high-danger fenwick for per 60 minutes</p> <code>isb_p60</code> <code>float</code> <p>Individual shots blocked (for) per 60 minutes</p> <code>icf_p60</code> <code>float</code> <p>Individual corsi for per 60 minutes</p> <code>ibs_p60</code> <code>float</code> <p>Individual blocked shots (against) per 60 minutes</p> <code>igive_p60</code> <code>float</code> <p>Individual giveaways per 60 minutes</p> <code>itake_p60</code> <code>float</code> <p>Individual takeaways per 60 minutes</p> <code>ihf_p60</code> <code>float</code> <p>Individual hits for per 60 minutes</p> <code>iht_p60</code> <code>float</code> <p>Individual hits taken per 60 minutes</p> <code>a1_xg_p60</code> <code>float</code> <p>Individual primary assists' xG per 60 minutes</p> <code>a2_xg_p60</code> <code>float</code> <p>Individual secondary assists' xG per 60 minutes</p> <code>ipent0_p60</code> <code>float</code> <p>Individual penalty shots taken per 60 minutes</p> <code>ipent2_p60</code> <code>float</code> <p>Individual minor penalties taken per 60 minutes</p> <code>ipent4_p60</code> <code>float</code> <p>Individual double minor penalties taken per 60 minutes</p> <code>ipent5_p60</code> <code>float</code> <p>Individual major penalties taken per 60 minutes</p> <code>ipent10_p60</code> <code>float</code> <p>Individual game misconduct pentalties taken per 60 minutes</p> <code>ipend0_p60</code> <code>float</code> <p>Individual penalty shots drawn per 60 minutes</p> <code>ipend2_p60</code> <code>float</code> <p>Individual minor penalties drawn per 60 minutes</p> <code>ipend4_p60</code> <code>float</code> <p>Individual double minor penalties drawn per 60 minutes</p> <code>ipend5_p60</code> <code>float</code> <p>Individual major penalties drawn per 60 minutes</p> <code>ipend10_p60</code> <code>float</code> <p>Individual game misconduct penalties drawn per 60 minutes</p> <code>gf_p60</code> <code>float</code> <p>Goals for (on-ice) per 60 minutes</p> <code>ga_p60</code> <code>float</code> <p>Goals against (on-ice) per 60 minutes</p> <code>hdgf_p60</code> <code>float</code> <p>High-danger goals for (on-ice) per 60 minutes</p> <code>hdga_p60</code> <code>float</code> <p>High-danger goals against (on-ice) per 60 minutes</p> <code>xgf_p60</code> <code>float</code> <p>xG for (on-ice) per 60 minutes</p> <code>xga_p60</code> <code>float</code> <p>xG against (on-ice) per 60 minutes</p> <code>sf_p60</code> <code>float</code> <p>Shots for (on-ice) per 60 minutes</p> <code>sa_p60</code> <code>float</code> <p>Shots against (on-ice) per 60 minutes</p> <code>hdsf_p60</code> <code>float</code> <p>High-danger shots for (on-ice) per 60 minutes</p> <code>hdsa_p60</code> <code>float</code> <p>High danger shots against (on-ice) per 60 minutes</p> <code>ff_p60</code> <code>float</code> <p>Fenwick for (on-ice) per 60 minutes</p> <code>fa_p60</code> <code>float</code> <p>Fenwick against (on-ice) per 60 minutes</p> <code>hdff_p60</code> <code>float</code> <p>High-danger fenwick for (on-ice) per 60 minutes</p> <code>hdfa_p60</code> <code>float</code> <p>High-danger fenwick against (on-ice) per 60 minutes</p> <code>cf_p60</code> <code>float</code> <p>Corsi for (on-ice) per 60 minutes</p> <code>ca_p60</code> <code>float</code> <p>Corsi against (on-ice) per 60 minutes</p> <code>bsf_p60</code> <code>float</code> <p>Blocked shots for (on-ice) per 60 minutes</p> <code>bsa_p60</code> <code>float</code> <p>Blocked shots against (on-ice) per 60 minutes</p> <code>msf_p60</code> <code>float</code> <p>Missed shots for (on-ice) per 60 minutes</p> <code>msa_p60</code> <code>float</code> <p>Missed shots against (on-ice) per 60 minutes</p> <code>hdmsf_p60</code> <code>float</code> <p>High-danger missed shots for (on-ice) per 60 minutes</p> <code>hdmsa_p60</code> <code>float</code> <p>High-danger missed shots against (on-ice) per 60 minutes</p> <code>teammate_block_p60</code> <code>float</code> <p>Shots blocked by teammates (on-ice) per 60 minutes</p> <code>hf_p60</code> <code>float</code> <p>Hits  for (on-ice) per 60 minutes</p> <code>ht_p60</code> <code>float</code> <p>Hits taken (on-ice) per 60 minutes</p> <code>give_p60</code> <code>float</code> <p>Giveaways (on-ice) per 60 minutes</p> <code>take_p60</code> <code>float</code> <p>Takeaways (on-ice) per 60 minutes</p> <code>pent0_p60</code> <code>float</code> <p>Penalty shots taken (on-ice) per 60 minutes</p> <code>pent2_p60</code> <code>float</code> <p>Minor penalties taken (on-ice) per 60 minutes</p> <code>pent4_p60</code> <code>float</code> <p>Double minor penalties taken (on-ice) per 60 minutes</p> <code>pent5_p60</code> <code>float</code> <p>Major penalties taken (on-ice) per 60 minutes</p> <code>pent10_p60</code> <code>float</code> <p>Game misconduct pentalties taken (on-ice) per 60 minutes</p> <code>pend0_p60</code> <code>float</code> <p>Penalty shots drawn (on-ice) per 60 minutes</p> <code>pend2_p60</code> <code>float</code> <p>Minor penalties drawn (on-ice) per 60 minutes</p> <code>pend4_p60</code> <code>float</code> <p>Double minor penalties drawn (on-ice) per 60 minutes</p> <code>pend5_p60</code> <code>float</code> <p>Major penalties drawn (on-ice) per 60 minutes</p> <code>pend10_p60</code> <code>float</code> <p>Game misconduct penalties drawn (on-ice) per 60 minutes</p> <code>gf_percent</code> <code>float</code> <p>On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)</p> <code>hdgf_percent</code> <code>float</code> <p>On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF / (HDGF + HDGA)</p> <code>xgf_percent</code> <code>float</code> <p>On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)</p> <code>sf_percent</code> <code>float</code> <p>On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)</p> <code>hdsf_percent</code> <code>float</code> <p>On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF / (HDSF + HDSA)</p> <code>ff_percent</code> <code>float</code> <p>On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)</p> <code>hdff_percent</code> <code>float</code> <p>On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF / (HDFF + HDFA)</p> <code>cf_percent</code> <code>float</code> <p>On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)</p> <code>bsf_percent</code> <code>float</code> <p>On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)</p> <code>msf_percent</code> <code>float</code> <p>On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)</p> <code>hdmsf_percent</code> <code>float</code> <p>On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e., HDMSF / (HDMSF + HDMSA)</p> <code>hf_percent</code> <code>float</code> <p>On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)</p> <code>take_percent</code> <code>float</code> <p>On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2023020001\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Returns individual and on-ice stats with default options</p> <pre><code>&gt;&gt;&gt; scraper.stats\n</code></pre> <p>Resets individual and on-ice stats to period level, accounting for teammates on-ice</p> <pre><code>&gt;&gt;&gt; scraper.prep_stats(level=\"period\", teammates=True)\n&gt;&gt;&gt; scraper.stats\n</code></pre> <p>Resets individual and on-ice stats to season level, accounting for teammates on-ice and score state</p> <pre><code>&gt;&gt;&gt; scraper.prep_stats(level=\"season\", teammates=True, score=True)\n&gt;&gt;&gt; scraper.stats\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper.prep_stats","title":"prep_stats","text":"<pre><code>prep_stats(\n    level=\"game\",\n    score=False,\n    teammates=False,\n    opposition=False,\n    disable_progress_bar=None,\n)\n</code></pre> <p>Prepares DataFrame of individual and on-ice stats from play-by-play data.</p> <p>Used to prepare, or reset prepared data for later analysis</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>str</code> <p>Determines the level of aggregation. One of season, session, game, period</p> <code>'game'</code> <code>score</code> <code>bool</code> <p>Determines if stats account for score state</p> <code>False</code> <code>teammates</code> <code>bool</code> <p>Determines if stats account for teammates on ice</p> <code>False</code> <code>opposition</code> <code>bool</code> <p>Determines if stats account for opponents on ice</p> <code>False</code> <code>disable_progress_bar</code> <code>bool</code> <p>Determines whether to display the progress bar</p> <code>None</code> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 2023 for 2023-24 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2023020001</p> <code>game_date</code> <code>int</code> <p>Date game was played, e.g., 2023-10-10</p> <code>player</code> <code>str</code> <p>Player's name, e.g., FILIP FORSBERG</p> <code>eh_id</code> <code>str</code> <p>Evolving Hockey ID for the player, e.g., FILIP.FORSBERG</p> <code>api_id</code> <code>str</code> <p>NHL API ID for the player, e.g., 8476887</p> <code>position</code> <code>str</code> <p>Player's position, e.g., L</p> <code>team</code> <code>str</code> <p>Player's team, e.g., NSH</p> <code>opp_team</code> <code>str</code> <p>Opposing team, e.g., TBL</p> <code>strength_state</code> <code>str</code> <p>Strength state, e.g., 5v5</p> <code>period</code> <code>int</code> <p>Period, e.g., 3</p> <code>score_state</code> <code>str</code> <p>Score state, e.g., 2v1</p> <code>forwards</code> <code>str</code> <p>Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY</p> <code>forwards_eh_id</code> <code>str</code> <p>Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY</p> <code>forwards_api_id</code> <code>str</code> <p>Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158</p> <code>defense</code> <code>str</code> <p>Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER</p> <code>defense_eh_id</code> <code>str</code> <p>Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER</p> <code>defense_api_id</code> <code>str</code> <p>Defense teammates' NHL API IDs, e.g., 8474151, 8478851</p> <code>own_goalie</code> <code>str</code> <p>Own goalie, e.g., JUUSE SAROS</p> <code>own_goalie_eh_id</code> <code>str</code> <p>Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS</p> <code>own_goalie_api_id</code> <code>str</code> <p>Own goalie's NHL API ID, e.g., 8477424</p> <code>opp_forwards</code> <code>str</code> <p>Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS</p> <code>opp_forwards_eh_id</code> <code>str</code> <p>Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS</p> <code>opp_forwards_api_id</code> <code>str</code> <p>Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564</p> <code>opp_defense</code> <code>str</code> <p>Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN</p> <code>opp_defense_eh_id</code> <code>str</code> <p>Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN</p> <code>opp_defense_api_id</code> <code>str</code> <p>Opposing defense's NHL API IDs, e.g., 8480246, 8475167</p> <code>opp_goalie</code> <code>str</code> <p>Opposing goalie, e.g., JONAS JOHANSSON</p> <code>opp_goalie_eh_id</code> <code>str</code> <p>Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON</p> <code>opp_goalie_api_id</code> <code>str</code> <p>Opposing goalie's NHL API ID, e.g., 8477992</p> <code>toi</code> <code>float</code> <p>Time on-ice, in minutes, e.g, 0.483333</p> <code>g</code> <code>int</code> <p>Goals scored, e.g, 0</p> <code>ihdg</code> <code>int</code> <p>High-danger goals scored, e.g, 0</p> <code>a1</code> <code>int</code> <p>Primary assists, e.g, 0</p> <code>a2</code> <code>int</code> <p>Secondary assists, e.g, 0</p> <code>ixg</code> <code>float</code> <p>Individual xG for, e.g, 1.014336</p> <code>isf</code> <code>int</code> <p>Individual shots taken, e.g, 3</p> <code>ihdsf</code> <code>int</code> <p>High-danger shots taken, e.g, 3</p> <code>imsf</code> <code>int</code> <p>Individual missed shots, e.g, 0</p> <code>ihdm</code> <code>int</code> <p>High-danger missed shots, e.g, 0</p> <code>iff</code> <code>int</code> <p>Individual fenwick for, e.g., 3</p> <code>ihdf</code> <code>int</code> <p>High-danger fenwick for, e.g., 3</p> <code>isb</code> <code>int</code> <p>Shots taken that were blocked, e.g, 0</p> <code>icf</code> <code>int</code> <p>Individual corsi for, e.g., 3</p> <code>ibs</code> <code>int</code> <p>Individual shots blocked on defense, e.g, 0</p> <code>igive</code> <code>int</code> <p>Individual giveaways, e.g, 0</p> <code>itake</code> <code>int</code> <p>Individual takeaways, e.g, 0</p> <code>ihf</code> <code>int</code> <p>Individual hits for, e.g, 0</p> <code>iht</code> <code>int</code> <p>Individual hits taken, e.g, 0</p> <code>ifow</code> <code>int</code> <p>Individual faceoffs won, e.g, 0</p> <code>ifol</code> <code>int</code> <p>Individual faceoffs lost, e.g, 0</p> <code>iozfw</code> <code>int</code> <p>Individual faceoffs won in offensive zone, e.g, 0</p> <code>iozfl</code> <code>int</code> <p>Individual faceoffs lost in offensive zone, e.g, 0</p> <code>inzfw</code> <code>int</code> <p>Individual faceoffs won in neutral zone, e.g, 0</p> <code>inzfl</code> <code>int</code> <p>Individual faceoffs lost in neutral zone, e.g, 0</p> <code>idzfw</code> <code>int</code> <p>Individual faceoffs won in defensive zone, e.g, 0</p> <code>idzfl</code> <code>int</code> <p>Individual faceoffs lost in defensive zone, e.g, 0</p> <code>a1_xg</code> <code>float</code> <p>xG on primary assists, e.g, 0</p> <code>a2_xg</code> <code>float</code> <p>xG on secondary assists, e.g, 0</p> <code>ipent0</code> <code>int</code> <p>Individual penalty shots against, e.g, 0</p> <code>ipent2</code> <code>int</code> <p>Individual minor penalties taken, e.g, 0</p> <code>ipent4</code> <code>int</code> <p>Individual double minor penalties taken, e.g, 0</p> <code>ipent5</code> <code>int</code> <p>Individual major penalties taken, e.g, 0</p> <code>ipent10</code> <code>int</code> <p>Individual game misconduct penalties taken, e.g, 0</p> <code>ipend0</code> <code>int</code> <p>Individual penalty shots drawn, e.g, 0</p> <code>ipend2</code> <code>int</code> <p>Individual minor penalties taken, e.g, 0</p> <code>ipend4</code> <code>int</code> <p>Individual double minor penalties drawn, e.g, 0</p> <code>ipend5</code> <code>int</code> <p>Individual major penalties drawn, e.g, 0</p> <code>ipend10</code> <code>int</code> <p>Individual game misconduct penalties drawn, e.g, 0</p> <code>gf</code> <code>int</code> <p>Goals for (on-ice), e.g, 0</p> <code>hdgf</code> <code>int</code> <p>High-danger goals for (on-ice), e.g, 0</p> <code>ga</code> <code>int</code> <p>Goals against (on-ice), e.g, 0</p> <code>hdga</code> <code>int</code> <p>High-danger goals against (on-ice), e.g, 0</p> <code>xgf</code> <code>float</code> <p>xG for (on-ice), e.g., 1.258332</p> <code>xga</code> <code>float</code> <p>xG against (on-ice), e.g, 0.000000</p> <code>sf</code> <code>int</code> <p>Shots for (on-ice), e.g, 4</p> <code>sa</code> <code>int</code> <p>Shots against (on-ice), e.g, 0</p> <code>hdsf</code> <code>int</code> <p>High-danger shots for (on-ice), e.g, 3</p> <code>hdsa</code> <code>int</code> <p>High-danger shots against (on-ice), e.g, 0</p> <code>ff</code> <code>int</code> <p>Fenwick for (on-ice), e.g, 4</p> <code>fa</code> <code>int</code> <p>Fenwick against (on-ice), e.g, 0</p> <code>hdff</code> <code>int</code> <p>High-danger fenwick for (on-ice), e.g, 3</p> <code>hdfa</code> <code>int</code> <p>High-danger fenwick against (on-ice), e.g, 0</p> <code>cf</code> <code>int</code> <p>Corsi for (on-ice), e.g, 4</p> <code>ca</code> <code>int</code> <p>Corsi against (on-ice), e.g, 0</p> <code>bsf</code> <code>int</code> <p>Shots taken that were blocked (on-ice), e.g, 0</p> <code>bsa</code> <code>int</code> <p>Shots blocked (on-ice), e.g, 0</p> <code>msf</code> <code>int</code> <p>Missed shots taken (on-ice), e.g, 0</p> <code>msa</code> <code>int</code> <p>Missed shots against (on-ice), e.g, 0</p> <code>hdmsf</code> <code>int</code> <p>High-danger missed shots taken (on-ice), e.g, 0</p> <code>hdmsa</code> <code>int</code> <p>High-danger missed shots against (on-ice), e.g, 0</p> <code>teammate_block</code> <code>int</code> <p>Shots blocked by teammates (on-ice), e.g, 0</p> <code>hf</code> <code>int</code> <p>Hits for (on-ice), e.g, 0</p> <code>ht</code> <code>int</code> <p>Hits taken (on-ice), e.g, 0</p> <code>give</code> <code>int</code> <p>Giveaways (on-ice), e.g, 0</p> <code>take</code> <code>int</code> <p>Takeaways (on-ice), e.g, 0</p> <code>ozf</code> <code>int</code> <p>Offensive zone faceoffs (on-ice), e.g, 0</p> <code>nzf</code> <code>int</code> <p>Neutral zone faceoffs (on-ice), e.g, 1</p> <code>dzf</code> <code>int</code> <p>Defensive zone faceoffs (on-ice), e.g, 0</p> <code>fow</code> <code>int</code> <p>Faceoffs won (on-ice), e.g, 1</p> <code>fol</code> <code>int</code> <p>Faceoffs lost (on-ice), e.g, 0</p> <code>ozfw</code> <code>int</code> <p>Offensive zone faceoffs won (on-ice), e.g, 0</p> <code>ozfl</code> <code>int</code> <p>Offensive zone faceoffs lost (on-ice), e.g, 0</p> <code>nzfw</code> <code>int</code> <p>Neutral zone faceoffs won (on-ice), e.g, 1</p> <code>nzfl</code> <code>int</code> <p>Neutral zone faceoffs lost (on-ice), e.g, 0</p> <code>dzfw</code> <code>int</code> <p>Defensive zone faceoffs won (on-ice), e.g, 0</p> <code>dzfl</code> <code>int</code> <p>Defensive zone faceoffs lost (on-ice), e.g, 0</p> <code>pent0</code> <code>int</code> <p>Penalty shots allowed (on-ice), e.g, 0</p> <code>pent2</code> <code>int</code> <p>Minor penalties taken (on-ice), e.g, 0</p> <code>pent4</code> <code>int</code> <p>Double minor penalties taken (on-ice), e.g, 0</p> <code>pent5</code> <code>int</code> <p>Major penalties taken (on-ice), e.g, 0</p> <code>pent10</code> <code>int</code> <p>Game misconduct penalties taken (on-ice), e.g, 0</p> <code>pend0</code> <code>int</code> <p>Penalty shots drawn (on-ice), e.g, 0</p> <code>pend2</code> <code>int</code> <p>Minor penalties drawn (on-ice), e.g, 0</p> <code>pend4</code> <code>int</code> <p>Double minor penalties drawn (on-ice), e.g, 0</p> <code>pend5</code> <code>int</code> <p>Major penalties drawn (on-ice), e.g, 0</p> <code>pend10</code> <code>int</code> <p>Game misconduct penalties drawn (on-ice), e.g, 0</p> <code>ozs</code> <code>int</code> <p>Offensive zone starts, e.g, 0</p> <code>nzs</code> <code>int</code> <p>Neutral zone starts, e.g, 0</p> <code>dzs</code> <code>int</code> <p>Defenzive zone starts, e.g, 0</p> <code>otf</code> <code>int</code> <p>On-the-fly starts, e.g, 0</p> <code>g_p60</code> <code>float</code> <p>Goals scored per 60 minutes</p> <code>ihdg_p60</code> <code>float</code> <p>Individual high-danger goals scored per 60</p> <code>a1_p60</code> <code>float</code> <p>Primary assists per 60 minutes</p> <code>a2_p60</code> <code>float</code> <p>Secondary per 60 minutes</p> <code>ixg_p60</code> <code>float</code> <p>Individual xG for per 60 minutes</p> <code>isf_p60</code> <code>float</code> <p>Individual shots for per 60 minutes</p> <code>ihdsf_p60</code> <code>float</code> <p>Individual high-danger shots for per 60 minutes</p> <code>imsf_p60</code> <code>float</code> <p>Individual missed shorts for per 60 minutes</p> <code>ihdm_p60</code> <code>float</code> <p>Individual high-danger missed shots for per 60 minutes</p> <code>iff_p60</code> <code>float</code> <p>Individual fenwick for per 60 minutes</p> <code>ihdff_p60</code> <code>float</code> <p>Individual high-danger fenwick for per 60 minutes</p> <code>isb_p60</code> <code>float</code> <p>Individual shots blocked (for) per 60 minutes</p> <code>icf_p60</code> <code>float</code> <p>Individual corsi for per 60 minutes</p> <code>ibs_p60</code> <code>float</code> <p>Individual blocked shots (against) per 60 minutes</p> <code>igive_p60</code> <code>float</code> <p>Individual giveaways per 60 minutes</p> <code>itake_p60</code> <code>float</code> <p>Individual takeaways per 60 minutes</p> <code>ihf_p60</code> <code>float</code> <p>Individual hits for per 60 minutes</p> <code>iht_p60</code> <code>float</code> <p>Individual hits taken per 60 minutes</p> <code>a1_xg_p60</code> <code>float</code> <p>Individual primary assists' xG per 60 minutes</p> <code>a2_xg_p60</code> <code>float</code> <p>Individual secondary assists' xG per 60 minutes</p> <code>ipent0_p60</code> <code>float</code> <p>Individual penalty shots taken per 60 minutes</p> <code>ipent2_p60</code> <code>float</code> <p>Individual minor penalties taken per 60 minutes</p> <code>ipent4_p60</code> <code>float</code> <p>Individual double minor penalties taken per 60 minutes</p> <code>ipent5_p60</code> <code>float</code> <p>Individual major penalties taken per 60 minutes</p> <code>ipent10_p60</code> <code>float</code> <p>Individual game misconduct pentalties taken per 60 minutes</p> <code>ipend0_p60</code> <code>float</code> <p>Individual penalty shots drawn per 60 minutes</p> <code>ipend2_p60</code> <code>float</code> <p>Individual minor penalties drawn per 60 minutes</p> <code>ipend4_p60</code> <code>float</code> <p>Individual double minor penalties drawn per 60 minutes</p> <code>ipend5_p60</code> <code>float</code> <p>Individual major penalties drawn per 60 minutes</p> <code>ipend10_p60</code> <code>float</code> <p>Individual game misconduct penalties drawn per 60 minutes</p> <code>gf_p60</code> <code>float</code> <p>Goals for (on-ice) per 60 minutes</p> <code>ga_p60</code> <code>float</code> <p>Goals against (on-ice) per 60 minutes</p> <code>hdgf_p60</code> <code>float</code> <p>High-danger goals for (on-ice) per 60 minutes</p> <code>hdga_p60</code> <code>float</code> <p>High-danger goals against (on-ice) per 60 minutes</p> <code>xgf_p60</code> <code>float</code> <p>xG for (on-ice) per 60 minutes</p> <code>xga_p60</code> <code>float</code> <p>xG against (on-ice) per 60 minutes</p> <code>sf_p60</code> <code>float</code> <p>Shots for (on-ice) per 60 minutes</p> <code>sa_p60</code> <code>float</code> <p>Shots against (on-ice) per 60 minutes</p> <code>hdsf_p60</code> <code>float</code> <p>High-danger shots for (on-ice) per 60 minutes</p> <code>hdsa_p60</code> <code>float</code> <p>High danger shots against (on-ice) per 60 minutes</p> <code>ff_p60</code> <code>float</code> <p>Fenwick for (on-ice) per 60 minutes</p> <code>fa_p60</code> <code>float</code> <p>Fenwick against (on-ice) per 60 minutes</p> <code>hdff_p60</code> <code>float</code> <p>High-danger fenwick for (on-ice) per 60 minutes</p> <code>hdfa_p60</code> <code>float</code> <p>High-danger fenwick against (on-ice) per 60 minutes</p> <code>cf_p60</code> <code>float</code> <p>Corsi for (on-ice) per 60 minutes</p> <code>ca_p60</code> <code>float</code> <p>Corsi against (on-ice) per 60 minutes</p> <code>bsf_p60</code> <code>float</code> <p>Blocked shots for (on-ice) per 60 minutes</p> <code>bsa_p60</code> <code>float</code> <p>Blocked shots against (on-ice) per 60 minutes</p> <code>msf_p60</code> <code>float</code> <p>Missed shots for (on-ice) per 60 minutes</p> <code>msa_p60</code> <code>float</code> <p>Missed shots against (on-ice) per 60 minutes</p> <code>hdmsf_p60</code> <code>float</code> <p>High-danger missed shots for (on-ice) per 60 minutes</p> <code>hdmsa_p60</code> <code>float</code> <p>High-danger missed shots against (on-ice) per 60 minutes</p> <code>teammate_block_p60</code> <code>float</code> <p>Shots blocked by teammates (on-ice) per 60 minutes</p> <code>hf_p60</code> <code>float</code> <p>Hits  for (on-ice) per 60 minutes</p> <code>ht_p60</code> <code>float</code> <p>Hits taken (on-ice) per 60 minutes</p> <code>give_p60</code> <code>float</code> <p>Giveaways (on-ice) per 60 minutes</p> <code>take_p60</code> <code>float</code> <p>Takeaways (on-ice) per 60 minutes</p> <code>pent0_p60</code> <code>float</code> <p>Penalty shots taken (on-ice) per 60 minutes</p> <code>pent2_p60</code> <code>float</code> <p>Minor penalties taken (on-ice) per 60 minutes</p> <code>pent4_p60</code> <code>float</code> <p>Double minor penalties taken (on-ice) per 60 minutes</p> <code>pent5_p60</code> <code>float</code> <p>Major penalties taken (on-ice) per 60 minutes</p> <code>pent10_p60</code> <code>float</code> <p>Game misconduct pentalties taken (on-ice) per 60 minutes</p> <code>pend0_p60</code> <code>float</code> <p>Penalty shots drawn (on-ice) per 60 minutes</p> <code>pend2_p60</code> <code>float</code> <p>Minor penalties drawn (on-ice) per 60 minutes</p> <code>pend4_p60</code> <code>float</code> <p>Double minor penalties drawn (on-ice) per 60 minutes</p> <code>pend5_p60</code> <code>float</code> <p>Major penalties drawn (on-ice) per 60 minutes</p> <code>pend10_p60</code> <code>float</code> <p>Game misconduct penalties drawn (on-ice) per 60 minutes</p> <code>gf_percent</code> <code>float</code> <p>On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)</p> <code>hdgf_percent</code> <code>float</code> <p>On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF / (HDGF + HDGA)</p> <code>xgf_percent</code> <code>float</code> <p>On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)</p> <code>sf_percent</code> <code>float</code> <p>On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)</p> <code>hdsf_percent</code> <code>float</code> <p>On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF / (HDSF + HDSA)</p> <code>ff_percent</code> <code>float</code> <p>On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)</p> <code>hdff_percent</code> <code>float</code> <p>On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF / (HDFF + HDFA)</p> <code>cf_percent</code> <code>float</code> <p>On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)</p> <code>bsf_percent</code> <code>float</code> <p>On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)</p> <code>msf_percent</code> <code>float</code> <p>On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)</p> <code>hdmsf_percent</code> <code>float</code> <p>On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e., HDMSF / (HDMSF + HDMSA)</p> <code>hf_percent</code> <code>float</code> <p>On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)</p> <code>take_percent</code> <code>float</code> <p>On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2023020001\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Prepares individual and on-ice dataframe with default options</p> <pre><code>&gt;&gt;&gt; scraper.prep_stats()\n</code></pre> <p>Individual and on-ice statistics, aggregated to season level</p> <pre><code>&gt;&gt;&gt; scraper.prep_stats(level=\"season\")\n</code></pre> <p>Individual and on-ice statistics, aggregated to game level, accounting for teammates</p> <pre><code>&gt;&gt;&gt; scraper.prep_stats(level=\"game\", teammates=True)\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def prep_stats(\n    self,\n    level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n    score: bool = False,\n    teammates: bool = False,\n    opposition: bool = False,\n    disable_progress_bar: bool | None = None,\n) -&gt; None:\n    \"\"\"Prepares DataFrame of individual and on-ice stats from play-by-play data.\n\n    Used to prepare, or reset prepared data for later analysis\n\n    Parameters:\n        level (str):\n            Determines the level of aggregation. One of season, session, game, period\n        score (bool):\n            Determines if stats account for score state\n        teammates (bool):\n            Determines if stats account for teammates on ice\n        opposition (bool):\n            Determines if stats account for opponents on ice\n        disable_progress_bar (bool):\n            Determines whether to display the progress bar\n\n    Returns:\n        season (int):\n            Season as 8-digit number, e.g., 2023 for 2023-24 season\n        session (str):\n            Whether game is regular season, playoffs, or pre-season, e.g., R\n        game_id (int):\n            Unique game ID assigned by the NHL, e.g., 2023020001\n        game_date (int):\n            Date game was played, e.g., 2023-10-10\n        player (str):\n            Player's name, e.g., FILIP FORSBERG\n        eh_id (str):\n            Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n        api_id (str):\n            NHL API ID for the player, e.g., 8476887\n        position (str):\n            Player's position, e.g., L\n        team (str):\n            Player's team, e.g., NSH\n        opp_team (str):\n            Opposing team, e.g., TBL\n        strength_state (str):\n            Strength state, e.g., 5v5\n        period (int):\n            Period, e.g., 3\n        score_state (str):\n            Score state, e.g., 2v1\n        forwards (str):\n            Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY\n        forwards_eh_id (str):\n            Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n        forwards_api_id (str):\n            Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158\n        defense (str):\n            Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER\n        defense_eh_id (str):\n            Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER\n        defense_api_id (str):\n            Defense teammates' NHL API IDs, e.g., 8474151, 8478851\n        own_goalie (str):\n            Own goalie, e.g., JUUSE SAROS\n        own_goalie_eh_id (str):\n            Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS\n        own_goalie_api_id (str):\n            Own goalie's NHL API ID, e.g., 8477424\n        opp_forwards (str):\n            Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS\n        opp_forwards_eh_id (str):\n            Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS\n        opp_forwards_api_id (str):\n            Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564\n        opp_defense (str):\n            Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN\n        opp_defense_eh_id (str):\n            Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN\n        opp_defense_api_id (str):\n            Opposing defense's NHL API IDs, e.g., 8480246, 8475167\n        opp_goalie (str):\n            Opposing goalie, e.g., JONAS JOHANSSON\n        opp_goalie_eh_id (str):\n            Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON\n        opp_goalie_api_id (str):\n            Opposing goalie's NHL API ID, e.g., 8477992\n        toi (float):\n            Time on-ice, in minutes, e.g, 0.483333\n        g (int):\n            Goals scored, e.g, 0\n        ihdg (int):\n            High-danger goals scored, e.g, 0\n        a1 (int):\n            Primary assists, e.g, 0\n        a2 (int):\n            Secondary assists, e.g, 0\n        ixg (float):\n            Individual xG for, e.g, 1.014336\n        isf (int):\n            Individual shots taken, e.g, 3\n        ihdsf (int):\n            High-danger shots taken, e.g, 3\n        imsf (int):\n            Individual missed shots, e.g, 0\n        ihdm (int):\n            High-danger missed shots, e.g, 0\n        iff (int):\n            Individual fenwick for, e.g., 3\n        ihdf (int):\n            High-danger fenwick for, e.g., 3\n        isb (int):\n            Shots taken that were blocked, e.g, 0\n        icf (int):\n            Individual corsi for, e.g., 3\n        ibs (int):\n            Individual shots blocked on defense, e.g, 0\n        igive (int):\n            Individual giveaways, e.g, 0\n        itake (int):\n            Individual takeaways, e.g, 0\n        ihf (int):\n            Individual hits for, e.g, 0\n        iht (int):\n            Individual hits taken, e.g, 0\n        ifow (int):\n            Individual faceoffs won, e.g, 0\n        ifol (int):\n            Individual faceoffs lost, e.g, 0\n        iozfw (int):\n            Individual faceoffs won in offensive zone, e.g, 0\n        iozfl (int):\n            Individual faceoffs lost in offensive zone, e.g, 0\n        inzfw (int):\n            Individual faceoffs won in neutral zone, e.g, 0\n        inzfl (int):\n            Individual faceoffs lost in neutral zone, e.g, 0\n        idzfw (int):\n            Individual faceoffs won in defensive zone, e.g, 0\n        idzfl (int):\n            Individual faceoffs lost in defensive zone, e.g, 0\n        a1_xg (float):\n            xG on primary assists, e.g, 0\n        a2_xg (float):\n            xG on secondary assists, e.g, 0\n        ipent0 (int):\n            Individual penalty shots against, e.g, 0\n        ipent2 (int):\n            Individual minor penalties taken, e.g, 0\n        ipent4 (int):\n            Individual double minor penalties taken, e.g, 0\n        ipent5 (int):\n            Individual major penalties taken, e.g, 0\n        ipent10 (int):\n            Individual game misconduct penalties taken, e.g, 0\n        ipend0 (int):\n            Individual penalty shots drawn, e.g, 0\n        ipend2 (int):\n            Individual minor penalties taken, e.g, 0\n        ipend4 (int):\n            Individual double minor penalties drawn, e.g, 0\n        ipend5 (int):\n            Individual major penalties drawn, e.g, 0\n        ipend10 (int):\n            Individual game misconduct penalties drawn, e.g, 0\n        gf (int):\n            Goals for (on-ice), e.g, 0\n        hdgf (int):\n            High-danger goals for (on-ice), e.g, 0\n        ga (int):\n            Goals against (on-ice), e.g, 0\n        hdga (int):\n            High-danger goals against (on-ice), e.g, 0\n        xgf (float):\n            xG for (on-ice), e.g., 1.258332\n        xga (float):\n            xG against (on-ice), e.g, 0.000000\n        sf (int):\n            Shots for (on-ice), e.g, 4\n        sa (int):\n            Shots against (on-ice), e.g, 0\n        hdsf (int):\n            High-danger shots for (on-ice), e.g, 3\n        hdsa (int):\n            High-danger shots against (on-ice), e.g, 0\n        ff (int):\n            Fenwick for (on-ice), e.g, 4\n        fa (int):\n            Fenwick against (on-ice), e.g, 0\n        hdff (int):\n            High-danger fenwick for (on-ice), e.g, 3\n        hdfa (int):\n            High-danger fenwick against (on-ice), e.g, 0\n        cf (int):\n            Corsi for (on-ice), e.g, 4\n        ca (int):\n            Corsi against (on-ice), e.g, 0\n        bsf (int):\n            Shots taken that were blocked (on-ice), e.g, 0\n        bsa (int):\n            Shots blocked (on-ice), e.g, 0\n        msf (int):\n            Missed shots taken (on-ice), e.g, 0\n        msa (int):\n            Missed shots against (on-ice), e.g, 0\n        hdmsf (int):\n            High-danger missed shots taken (on-ice), e.g, 0\n        hdmsa (int):\n            High-danger missed shots against (on-ice), e.g, 0\n        teammate_block (int):\n            Shots blocked by teammates (on-ice), e.g, 0\n        hf (int):\n            Hits for (on-ice), e.g, 0\n        ht (int):\n            Hits taken (on-ice), e.g, 0\n        give (int):\n            Giveaways (on-ice), e.g, 0\n        take (int):\n            Takeaways (on-ice), e.g, 0\n        ozf (int):\n            Offensive zone faceoffs (on-ice), e.g, 0\n        nzf (int):\n            Neutral zone faceoffs (on-ice), e.g, 1\n        dzf (int):\n            Defensive zone faceoffs (on-ice), e.g, 0\n        fow (int):\n            Faceoffs won (on-ice), e.g, 1\n        fol (int):\n            Faceoffs lost (on-ice), e.g, 0\n        ozfw (int):\n            Offensive zone faceoffs won (on-ice), e.g, 0\n        ozfl (int):\n            Offensive zone faceoffs lost (on-ice), e.g, 0\n        nzfw (int):\n            Neutral zone faceoffs won (on-ice), e.g, 1\n        nzfl (int):\n            Neutral zone faceoffs lost (on-ice), e.g, 0\n        dzfw (int):\n            Defensive zone faceoffs won (on-ice), e.g, 0\n        dzfl (int):\n            Defensive zone faceoffs lost (on-ice), e.g, 0\n        pent0 (int):\n            Penalty shots allowed (on-ice), e.g, 0\n        pent2 (int):\n            Minor penalties taken (on-ice), e.g, 0\n        pent4 (int):\n            Double minor penalties taken (on-ice), e.g, 0\n        pent5 (int):\n            Major penalties taken (on-ice), e.g, 0\n        pent10 (int):\n            Game misconduct penalties taken (on-ice), e.g, 0\n        pend0 (int):\n            Penalty shots drawn (on-ice), e.g, 0\n        pend2 (int):\n            Minor penalties drawn (on-ice), e.g, 0\n        pend4 (int):\n            Double minor penalties drawn (on-ice), e.g, 0\n        pend5 (int):\n            Major penalties drawn (on-ice), e.g, 0\n        pend10 (int):\n            Game misconduct penalties drawn (on-ice), e.g, 0\n        ozs (int):\n            Offensive zone starts, e.g, 0\n        nzs (int):\n            Neutral zone starts, e.g, 0\n        dzs (int):\n            Defenzive zone starts, e.g, 0\n        otf (int):\n            On-the-fly starts, e.g, 0\n        g_p60 (float):\n            Goals scored per 60 minutes\n        ihdg_p60 (float):\n            Individual high-danger goals scored per 60\n        a1_p60 (float):\n            Primary assists per 60 minutes\n        a2_p60 (float):\n            Secondary per 60 minutes\n        ixg_p60 (float):\n            Individual xG for per 60 minutes\n        isf_p60 (float):\n            Individual shots for per 60 minutes\n        ihdsf_p60 (float):\n            Individual high-danger shots for per 60 minutes\n        imsf_p60 (float):\n            Individual missed shorts for per 60 minutes\n        ihdm_p60 (float):\n            Individual high-danger missed shots for per 60 minutes\n        iff_p60 (float):\n            Individual fenwick for per 60 minutes\n        ihdff_p60 (float):\n            Individual high-danger fenwick for per 60 minutes\n        isb_p60 (float):\n            Individual shots blocked (for) per 60 minutes\n        icf_p60 (float):\n            Individual corsi for per 60 minutes\n        ibs_p60 (float):\n            Individual blocked shots (against) per 60 minutes\n        igive_p60 (float):\n            Individual giveaways per 60 minutes\n        itake_p60 (float):\n            Individual takeaways per 60 minutes\n        ihf_p60 (float):\n            Individual hits for per 60 minutes\n        iht_p60 (float):\n            Individual hits taken per 60 minutes\n        a1_xg_p60 (float):\n            Individual primary assists' xG per 60 minutes\n        a2_xg_p60 (float):\n            Individual secondary assists' xG per 60 minutes\n        ipent0_p60 (float):\n            Individual penalty shots taken per 60 minutes\n        ipent2_p60 (float):\n            Individual minor penalties taken per 60 minutes\n        ipent4_p60 (float):\n            Individual double minor penalties taken per 60 minutes\n        ipent5_p60 (float):\n            Individual major penalties taken per 60 minutes\n        ipent10_p60 (float):\n            Individual game misconduct pentalties taken per 60 minutes\n        ipend0_p60 (float):\n            Individual penalty shots drawn per 60 minutes\n        ipend2_p60 (float):\n            Individual minor penalties drawn per 60 minutes\n        ipend4_p60 (float):\n            Individual double minor penalties drawn per 60 minutes\n        ipend5_p60 (float):\n            Individual major penalties drawn per 60 minutes\n        ipend10_p60 (float):\n            Individual game misconduct penalties drawn per 60 minutes\n        gf_p60 (float):\n            Goals for (on-ice) per 60 minutes\n        ga_p60 (float):\n            Goals against (on-ice) per 60 minutes\n        hdgf_p60 (float):\n            High-danger goals for (on-ice) per 60 minutes\n        hdga_p60 (float):\n            High-danger goals against (on-ice) per 60 minutes\n        xgf_p60 (float):\n            xG for (on-ice) per 60 minutes\n        xga_p60 (float):\n            xG against (on-ice) per 60 minutes\n        sf_p60 (float):\n            Shots for (on-ice) per 60 minutes\n        sa_p60 (float):\n            Shots against (on-ice) per 60 minutes\n        hdsf_p60 (float):\n            High-danger shots for (on-ice) per 60 minutes\n        hdsa_p60 (float):\n            High danger shots against (on-ice) per 60 minutes\n        ff_p60 (float):\n            Fenwick for (on-ice) per 60 minutes\n        fa_p60 (float):\n            Fenwick against (on-ice) per 60 minutes\n        hdff_p60 (float):\n            High-danger fenwick for (on-ice) per 60 minutes\n        hdfa_p60 (float):\n            High-danger fenwick against (on-ice) per 60 minutes\n        cf_p60 (float):\n            Corsi for (on-ice) per 60 minutes\n        ca_p60 (float):\n            Corsi against (on-ice) per 60 minutes\n        bsf_p60 (float):\n            Blocked shots for (on-ice) per 60 minutes\n        bsa_p60 (float):\n            Blocked shots against (on-ice) per 60 minutes\n        msf_p60 (float):\n            Missed shots for (on-ice) per 60 minutes\n        msa_p60 (float):\n            Missed shots against (on-ice) per 60 minutes\n        hdmsf_p60 (float):\n            High-danger missed shots for (on-ice) per 60 minutes\n        hdmsa_p60 (float):\n            High-danger missed shots against (on-ice) per 60 minutes\n        teammate_block_p60 (float):\n            Shots blocked by teammates (on-ice) per 60 minutes\n        hf_p60 (float):\n            Hits  for (on-ice) per 60 minutes\n        ht_p60 (float):\n            Hits taken (on-ice) per 60 minutes\n        give_p60 (float):\n            Giveaways (on-ice) per 60 minutes\n        take_p60 (float):\n            Takeaways (on-ice) per 60 minutes\n        pent0_p60 (float):\n            Penalty shots taken (on-ice) per 60 minutes\n        pent2_p60 (float):\n            Minor penalties taken (on-ice) per 60 minutes\n        pent4_p60 (float):\n            Double minor penalties taken (on-ice) per 60 minutes\n        pent5_p60 (float):\n            Major penalties taken (on-ice) per 60 minutes\n        pent10_p60 (float):\n            Game misconduct pentalties taken (on-ice) per 60 minutes\n        pend0_p60 (float):\n            Penalty shots drawn (on-ice) per 60 minutes\n        pend2_p60 (float):\n            Minor penalties drawn (on-ice) per 60 minutes\n        pend4_p60 (float):\n            Double minor penalties drawn (on-ice) per 60 minutes\n        pend5_p60 (float):\n            Major penalties drawn (on-ice) per 60 minutes\n        pend10_p60 (float):\n            Game misconduct penalties drawn (on-ice) per 60 minutes\n        gf_percent (float):\n            On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)\n        hdgf_percent (float):\n            On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF /\n            (HDGF + HDGA)\n        xgf_percent (float):\n            On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)\n        sf_percent (float):\n            On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)\n        hdsf_percent (float):\n            On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF /\n            (HDSF + HDSA)\n        ff_percent (float):\n            On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)\n        hdff_percent (float):\n            On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF /\n            (HDFF + HDFA)\n        cf_percent (float):\n            On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)\n        bsf_percent (float):\n            On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)\n        msf_percent (float):\n            On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)\n        hdmsf_percent (float):\n            On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e.,\n            HDMSF / (HDMSF + HDMSA)\n        hf_percent (float):\n            On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)\n        take_percent (float):\n            On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)\n\n    Examples:\n        First, instantiate the class with a game ID\n        &gt;&gt;&gt; game_id = 2023020001\n        &gt;&gt;&gt; scraper = Scraper(game_id)\n\n        Prepares individual and on-ice dataframe with default options\n        &gt;&gt;&gt; scraper.prep_stats()\n\n        Individual and on-ice statistics, aggregated to season level\n        &gt;&gt;&gt; scraper.prep_stats(level=\"season\")\n\n        Individual and on-ice statistics, aggregated to game level, accounting for teammates\n        &gt;&gt;&gt; scraper.prep_stats(level=\"game\", teammates=True)\n\n    \"\"\"\n    levels = self._stats_levels\n\n    if (\n        levels[\"level\"] != level\n        or levels[\"score\"] != score\n        or levels[\"teammates\"] != teammates\n        or levels[\"opposition\"] != opposition\n    ):\n        self._clear_stats()\n\n        new_values = {\"level\": level, \"score\": score, \"teammates\": teammates, \"opposition\": opposition}\n\n        self._stats_levels.update(new_values)\n\n    if self._stats.empty:\n        if not disable_progress_bar:\n            disable_progress_bar = self.disable_progress_bar\n\n        with ChickenProgressIndeterminate(disable=disable_progress_bar) as progress:\n            pbar_message = \"Prepping stats data...\"\n            progress_task = progress.add_task(pbar_message, total=None, refresh=True)\n\n            progress.start_task(progress_task)\n            progress.update(progress_task, total=1, description=pbar_message, refresh=True)\n\n            self._prep_stats(level=level, score=score, teammates=teammates, opposition=opposition)\n\n            progress.update(\n                progress_task,\n                description=\"Finished prepping stats data\",\n                completed=True,\n                advance=True,\n                refresh=True,\n            )\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper.lines","title":"lines  <code>property</code>","text":"<pre><code>lines\n</code></pre> <p>Pandas Dataframe of line-level stats aggregated from play-by-play data.</p> <p>Determine level of aggregation using <code>prep_lines</code> method.</p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 2023 for 2023-24 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2023020001</p> <code>game_date</code> <code>int</code> <p>Date game was played, e.g., 2023-10-10</p> <code>team</code> <code>str</code> <p>Player's team, e.g., NSH</p> <code>opp_team</code> <code>str</code> <p>Opposing team, e.g., TBL</p> <code>strength_state</code> <code>str</code> <p>Strength state, e.g., 5v5</p> <code>period</code> <code>int</code> <p>Period, e.g., 3</p> <code>score_state</code> <code>str</code> <p>Score state, e.g., 2v1</p> <code>forwards</code> <code>str</code> <p>Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY</p> <code>forwards_eh_id</code> <code>str</code> <p>Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY</p> <code>forwards_api_id</code> <code>str</code> <p>Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158</p> <code>defense</code> <code>str</code> <p>Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER</p> <code>defense_eh_id</code> <code>str</code> <p>Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER</p> <code>defense_api_id</code> <code>str</code> <p>Defense teammates' NHL API IDs, e.g., 8474151, 8478851</p> <code>own_goalie</code> <code>str</code> <p>Own goalie, e.g., JUUSE SAROS</p> <code>own_goalie_eh_id</code> <code>str</code> <p>Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS</p> <code>own_goalie_api_id</code> <code>str</code> <p>Own goalie's NHL API ID, e.g., 8477424</p> <code>opp_forwards</code> <code>str</code> <p>Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS</p> <code>opp_forwards_eh_id</code> <code>str</code> <p>Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS</p> <code>opp_forwards_api_id</code> <code>str</code> <p>Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564</p> <code>opp_defense</code> <code>str</code> <p>Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN</p> <code>opp_defense_eh_id</code> <code>str</code> <p>Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN</p> <code>opp_defense_api_id</code> <code>str</code> <p>Opposing defense's NHL API IDs, e.g., 8480246, 8475167</p> <code>opp_goalie</code> <code>str</code> <p>Opposing goalie, e.g., JONAS JOHANSSON</p> <code>opp_goalie_eh_id</code> <code>str</code> <p>Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON</p> <code>opp_goalie_api_id</code> <code>str</code> <p>Opposing goalie's NHL API ID, e.g., 8477992</p> <code>toi</code> <code>float</code> <p>Time on-ice, in minutes, e.g, 0.483333</p> <code>gf</code> <code>int</code> <p>Goals for (on-ice), e.g, 0</p> <code>ga</code> <code>int</code> <p>Goals against (on-ice), e.g, 0</p> <code>hdgf</code> <code>int</code> <p>High-danger goals for (on-ice), e.g, 0</p> <code>hdga</code> <code>int</code> <p>High-danger goals against (on-ice), e.g, 0</p> <code>xgf</code> <code>float</code> <p>xG for (on-ice), e.g., 1.258332</p> <code>xga</code> <code>float</code> <p>xG against (on-ice), e.g, 0.000000</p> <code>sf</code> <code>int</code> <p>Shots for (on-ice), e.g, 4</p> <code>sa</code> <code>int</code> <p>Shots against (on-ice), e.g, 0</p> <code>hdsf</code> <code>int</code> <p>High-danger shots for (on-ice), e.g, 3</p> <code>hdsa</code> <code>int</code> <p>High-danger shots against (on-ice), e.g, 0</p> <code>ff</code> <code>int</code> <p>Fenwick for (on-ice), e.g, 4</p> <code>fa</code> <code>int</code> <p>Fenwick against (on-ice), e.g, 0</p> <code>hdff</code> <code>int</code> <p>High-danger fenwick for (on-ice), e.g, 3</p> <code>hdfa</code> <code>int</code> <p>High-danger fenwick against (on-ice), e.g, 0</p> <code>cf</code> <code>int</code> <p>Corsi for (on-ice), e.g, 4</p> <code>ca</code> <code>int</code> <p>Corsi against (on-ice), e.g, 0</p> <code>bsf</code> <code>int</code> <p>Shots taken that were blocked (on-ice), e.g, 0</p> <code>bsa</code> <code>int</code> <p>Shots blocked (on-ice), e.g, 0</p> <code>msf</code> <code>int</code> <p>Missed shots taken (on-ice), e.g, 0</p> <code>msa</code> <code>int</code> <p>Missed shots against (on-ice), e.g, 0</p> <code>hdmsf</code> <code>int</code> <p>High-danger missed shots taken (on-ice), e.g, 0</p> <code>hdmsa</code> <code>int</code> <p>High-danger missed shots against (on-ice), e.g, 0</p> <code>teammate_block</code> <code>int</code> <p>Shots blocked by teammates (on-ice), e.g, 0</p> <code>hf</code> <code>int</code> <p>Hits for (on-ice), e.g, 0</p> <code>ht</code> <code>int</code> <p>Hits taken (on-ice), e.g, 0</p> <code>give</code> <code>int</code> <p>Giveaways (on-ice), e.g, 0</p> <code>take</code> <code>int</code> <p>Takeaways (on-ice), e.g, 0</p> <code>ozf</code> <code>int</code> <p>Offensive zone faceoffs (on-ice), e.g, 0</p> <code>nzf</code> <code>int</code> <p>Neutral zone faceoffs (on-ice), e.g, 1</p> <code>dzf</code> <code>int</code> <p>Defensive zone faceoffs (on-ice), e.g, 0</p> <code>fow</code> <code>int</code> <p>Faceoffs won (on-ice), e.g, 1</p> <code>fol</code> <code>int</code> <p>Faceoffs lost (on-ice), e.g, 0</p> <code>ozfw</code> <code>int</code> <p>Offensive zone faceoffs won (on-ice), e.g, 0</p> <code>ozfl</code> <code>int</code> <p>Offensive zone faceoffs lost (on-ice), e.g, 0</p> <code>nzfw</code> <code>int</code> <p>Neutral zone faceoffs won (on-ice), e.g, 1</p> <code>nzfl</code> <code>int</code> <p>Neutral zone faceoffs lost (on-ice), e.g, 0</p> <code>dzfw</code> <code>int</code> <p>Defensive zone faceoffs won (on-ice), e.g, 0</p> <code>dzfl</code> <code>int</code> <p>Defensive zone faceoffs lost (on-ice), e.g, 0</p> <code>pent0</code> <code>int</code> <p>Penalty shots allowed (on-ice), e.g, 0</p> <code>pent2</code> <code>int</code> <p>Minor penalties taken (on-ice), e.g, 0</p> <code>pent4</code> <code>int</code> <p>Double minor penalties taken (on-ice), e.g, 0</p> <code>pent5</code> <code>int</code> <p>Major penalties taken (on-ice), e.g, 0</p> <code>pent10</code> <code>int</code> <p>Game misconduct penalties taken (on-ice), e.g, 0</p> <code>pend0</code> <code>int</code> <p>Penalty shots drawn (on-ice), e.g, 0</p> <code>pend2</code> <code>int</code> <p>Minor penalties drawn (on-ice), e.g, 0</p> <code>pend4</code> <code>int</code> <p>Double minor penalties drawn (on-ice), e.g, 0</p> <code>pend5</code> <code>int</code> <p>Major penalties drawn (on-ice), e.g, 0</p> <code>pend10</code> <code>int</code> <p>Game misconduct penalties drawn (on-ice), e.g, 0</p> <code>gf_p60</code> <code>float</code> <p>Goals for (on-ice) per 60 minutes</p> <code>ga_p60</code> <code>float</code> <p>Goals against (on-ice) per 60 minutes</p> <code>hdgf_p60</code> <code>float</code> <p>High-danger goals for (on-ice) per 60 minutes</p> <code>hdga_p60</code> <code>float</code> <p>High-danger goals against (on-ice) per 60 minutes</p> <code>xgf_p60</code> <code>float</code> <p>xG for (on-ice) per 60 minutes</p> <code>xga_p60</code> <code>float</code> <p>xG against (on-ice) per 60 minutes</p> <code>sf_p60</code> <code>float</code> <p>Shots for (on-ice) per 60 minutes</p> <code>sa_p60</code> <code>float</code> <p>Shots against (on-ice) per 60 minutes</p> <code>hdsf_p60</code> <code>float</code> <p>High-danger shots for (on-ice) per 60 minutes</p> <code>hdsa_p60</code> <code>float</code> <p>High danger shots against (on-ice) per 60 minutes</p> <code>ff_p60</code> <code>float</code> <p>Fenwick for (on-ice) per 60 minutes</p> <code>fa_p60</code> <code>float</code> <p>Fenwick against (on-ice) per 60 minutes</p> <code>hdff_p60</code> <code>float</code> <p>High-danger fenwick for (on-ice) per 60 minutes</p> <code>hdfa_p60</code> <code>float</code> <p>High-danger fenwick against (on-ice) per 60 minutes</p> <code>cf_p60</code> <code>float</code> <p>Corsi for (on-ice) per 60 minutes</p> <code>ca_p60</code> <code>float</code> <p>Corsi against (on-ice) per 60 minutes</p> <code>bsf_p60</code> <code>float</code> <p>Blocked shots for (on-ice) per 60 minutes</p> <code>bsa_p60</code> <code>float</code> <p>Blocked shots against (on-ice) per 60 minutes</p> <code>msf_p60</code> <code>float</code> <p>Missed shots for (on-ice) per 60 minutes</p> <code>msa_p60</code> <code>float</code> <p>Missed shots against (on-ice) per 60 minutes</p> <code>hdmsf_p60</code> <code>float</code> <p>High-danger missed shots for (on-ice) per 60 minutes</p> <code>hdmsa_p60</code> <code>float</code> <p>High-danger missed shots against (on-ice) per 60 minutes</p> <code>teammate_block_p60</code> <code>float</code> <p>Shots blocked by teammates (on-ice) per 60 minutes</p> <code>hf_p60</code> <code>float</code> <p>Hits  for (on-ice) per 60 minutes</p> <code>ht_p60</code> <code>float</code> <p>Hits taken (on-ice) per 60 minutes</p> <code>give_p60</code> <code>float</code> <p>Giveaways (on-ice) per 60 minutes</p> <code>take_p60</code> <code>float</code> <p>Takeaways (on-ice) per 60 minutes</p> <code>pent0_p60</code> <code>float</code> <p>Penalty shots taken (on-ice) per 60 minutes</p> <code>pent2_p60</code> <code>float</code> <p>Minor penalties taken (on-ice) per 60 minutes</p> <code>pent4_p60</code> <code>float</code> <p>Double minor penalties taken (on-ice) per 60 minutes</p> <code>pent5_p60</code> <code>float</code> <p>Major penalties taken (on-ice) per 60 minutes</p> <code>pent10_p60</code> <code>float</code> <p>Game misconduct pentalties taken (on-ice) per 60 minutes</p> <code>pend0_p60</code> <code>float</code> <p>Penalty shots drawn (on-ice) per 60 minutes</p> <code>pend2_p60</code> <code>float</code> <p>Minor penalties drawn (on-ice) per 60 minutes</p> <code>pend4_p60</code> <code>float</code> <p>Double minor penalties drawn (on-ice) per 60 minutes</p> <code>pend5_p60</code> <code>float</code> <p>Major penalties drawn (on-ice) per 60 minutes</p> <code>pend10_p60</code> <code>float</code> <p>Game misconduct penalties drawn (on-ice) per 60 minutes</p> <code>gf_percent</code> <code>float</code> <p>On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)</p> <code>hdgf_percent</code> <code>float</code> <p>On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF / (HDGF + HDGA)</p> <code>xgf_percent</code> <code>float</code> <p>On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)</p> <code>sf_percent</code> <code>float</code> <p>On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)</p> <code>hdsf_percent</code> <code>float</code> <p>On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF / (HDSF + HDSA)</p> <code>ff_percent</code> <code>float</code> <p>On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)</p> <code>hdff_percent</code> <code>float</code> <p>On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF / (HDFF + HDFA)</p> <code>cf_percent</code> <code>float</code> <p>On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)</p> <code>bsf_percent</code> <code>float</code> <p>On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)</p> <code>msf_percent</code> <code>float</code> <p>On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)</p> <code>hdmsf_percent</code> <code>float</code> <p>On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e., HDMSF / (HDMSF + HDMSA)</p> <code>hf_percent</code> <code>float</code> <p>On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)</p> <code>take_percent</code> <code>float</code> <p>On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2023020001\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Returns line stats with default options</p> <pre><code>&gt;&gt;&gt; scraper.lines\n</code></pre> <p>Resets line stats to period level, accounting for teammates on-ice</p> <pre><code>&gt;&gt;&gt; scraper.prep_lines(level=\"period\", teammates=True)\n&gt;&gt;&gt; scraper.lines\n</code></pre> <p>Resets line stats to season level, accounting for teammates on-ice and score state</p> <pre><code>&gt;&gt;&gt; scraper.prep_lines(level=\"season\", teammates=True, score=True)\n&gt;&gt;&gt; scraper.lines\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper.prep_lines","title":"prep_lines","text":"<pre><code>prep_lines(\n    position=\"f\",\n    level=\"game\",\n    score=False,\n    teammates=False,\n    opposition=False,\n    disable_progress_bar=None,\n)\n</code></pre> <p>Prepares DataFrame of line-level stats from play-by-play data.</p> <p>Used to prepare, or reset prepared data for later analysis</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>Determines what positions to aggregate. One of F or D</p> <code>'f'</code> <code>level</code> <code>str</code> <p>Determines the level of aggregation. One of season, session, game, period</p> <code>'game'</code> <code>score</code> <code>bool</code> <p>Determines if stats account for score state</p> <code>False</code> <code>teammates</code> <code>bool</code> <p>Determines if stats account for teammates on ice</p> <code>False</code> <code>opposition</code> <code>bool</code> <p>Determines if stats account for opponents on ice</p> <code>False</code> <code>disable_progress_bar</code> <code>bool</code> <p>Determines whether to display the progress bar</p> <code>None</code> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 2023 for 2023-24 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2023020001</p> <code>game_date</code> <code>int</code> <p>Date game was played, e.g., 2023-10-10</p> <code>team</code> <code>str</code> <p>Player's team, e.g., NSH</p> <code>opp_team</code> <code>str</code> <p>Opposing team, e.g., TBL</p> <code>strength_state</code> <code>str</code> <p>Strength state, e.g., 5v5</p> <code>period</code> <code>int</code> <p>Period, e.g., 3</p> <code>score_state</code> <code>str</code> <p>Score state, e.g., 2v1</p> <code>forwards</code> <code>str</code> <p>Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY</p> <code>forwards_eh_id</code> <code>str</code> <p>Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY</p> <code>forwards_api_id</code> <code>str</code> <p>Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158</p> <code>defense</code> <code>str</code> <p>Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER</p> <code>defense_eh_id</code> <code>str</code> <p>Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER</p> <code>defense_api_id</code> <code>str</code> <p>Defense teammates' NHL API IDs, e.g., 8474151, 8478851</p> <code>own_goalie</code> <code>str</code> <p>Own goalie, e.g., JUUSE SAROS</p> <code>own_goalie_eh_id</code> <code>str</code> <p>Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS</p> <code>own_goalie_api_id</code> <code>str</code> <p>Own goalie's NHL API ID, e.g., 8477424</p> <code>opp_forwards</code> <code>str</code> <p>Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS</p> <code>opp_forwards_eh_id</code> <code>str</code> <p>Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS</p> <code>opp_forwards_api_id</code> <code>str</code> <p>Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564</p> <code>opp_defense</code> <code>str</code> <p>Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN</p> <code>opp_defense_eh_id</code> <code>str</code> <p>Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN</p> <code>opp_defense_api_id</code> <code>str</code> <p>Opposing defense's NHL API IDs, e.g., 8480246, 8475167</p> <code>opp_goalie</code> <code>str</code> <p>Opposing goalie, e.g., JONAS JOHANSSON</p> <code>opp_goalie_eh_id</code> <code>str</code> <p>Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON</p> <code>opp_goalie_api_id</code> <code>str</code> <p>Opposing goalie's NHL API ID, e.g., 8477992</p> <code>toi</code> <code>float</code> <p>Time on-ice, in minutes, e.g, 0.483333</p> <code>gf</code> <code>int</code> <p>Goals for (on-ice), e.g, 0</p> <code>ga</code> <code>int</code> <p>Goals against (on-ice), e.g, 0</p> <code>hdgf</code> <code>int</code> <p>High-danger goals for (on-ice), e.g, 0</p> <code>hdga</code> <code>int</code> <p>High-danger goals against (on-ice), e.g, 0</p> <code>xgf</code> <code>float</code> <p>xG for (on-ice), e.g., 1.258332</p> <code>xga</code> <code>float</code> <p>xG against (on-ice), e.g, 0.000000</p> <code>sf</code> <code>int</code> <p>Shots for (on-ice), e.g, 4</p> <code>sa</code> <code>int</code> <p>Shots against (on-ice), e.g, 0</p> <code>hdsf</code> <code>int</code> <p>High-danger shots for (on-ice), e.g, 3</p> <code>hdsa</code> <code>int</code> <p>High-danger shots against (on-ice), e.g, 0</p> <code>ff</code> <code>int</code> <p>Fenwick for (on-ice), e.g, 4</p> <code>fa</code> <code>int</code> <p>Fenwick against (on-ice), e.g, 0</p> <code>hdff</code> <code>int</code> <p>High-danger fenwick for (on-ice), e.g, 3</p> <code>hdfa</code> <code>int</code> <p>High-danger fenwick against (on-ice), e.g, 0</p> <code>cf</code> <code>int</code> <p>Corsi for (on-ice), e.g, 4</p> <code>ca</code> <code>int</code> <p>Corsi against (on-ice), e.g, 0</p> <code>bsf</code> <code>int</code> <p>Shots taken that were blocked (on-ice), e.g, 0</p> <code>bsa</code> <code>int</code> <p>Shots blocked (on-ice), e.g, 0</p> <code>msf</code> <code>int</code> <p>Missed shots taken (on-ice), e.g, 0</p> <code>msa</code> <code>int</code> <p>Missed shots against (on-ice), e.g, 0</p> <code>hdmsf</code> <code>int</code> <p>High-danger missed shots taken (on-ice), e.g, 0</p> <code>hdmsa</code> <code>int</code> <p>High-danger missed shots against (on-ice), e.g, 0</p> <code>teammate_block</code> <code>int</code> <p>Shots blocked by teammates (on-ice), e.g, 0</p> <code>hf</code> <code>int</code> <p>Hits for (on-ice), e.g, 0</p> <code>ht</code> <code>int</code> <p>Hits taken (on-ice), e.g, 0</p> <code>give</code> <code>int</code> <p>Giveaways (on-ice), e.g, 0</p> <code>take</code> <code>int</code> <p>Takeaways (on-ice), e.g, 0</p> <code>ozf</code> <code>int</code> <p>Offensive zone faceoffs (on-ice), e.g, 0</p> <code>nzf</code> <code>int</code> <p>Neutral zone faceoffs (on-ice), e.g, 1</p> <code>dzf</code> <code>int</code> <p>Defensive zone faceoffs (on-ice), e.g, 0</p> <code>fow</code> <code>int</code> <p>Faceoffs won (on-ice), e.g, 1</p> <code>fol</code> <code>int</code> <p>Faceoffs lost (on-ice), e.g, 0</p> <code>ozfw</code> <code>int</code> <p>Offensive zone faceoffs won (on-ice), e.g, 0</p> <code>ozfl</code> <code>int</code> <p>Offensive zone faceoffs lost (on-ice), e.g, 0</p> <code>nzfw</code> <code>int</code> <p>Neutral zone faceoffs won (on-ice), e.g, 1</p> <code>nzfl</code> <code>int</code> <p>Neutral zone faceoffs lost (on-ice), e.g, 0</p> <code>dzfw</code> <code>int</code> <p>Defensive zone faceoffs won (on-ice), e.g, 0</p> <code>dzfl</code> <code>int</code> <p>Defensive zone faceoffs lost (on-ice), e.g, 0</p> <code>pent0</code> <code>int</code> <p>Penalty shots allowed (on-ice), e.g, 0</p> <code>pent2</code> <code>int</code> <p>Minor penalties taken (on-ice), e.g, 0</p> <code>pent4</code> <code>int</code> <p>Double minor penalties taken (on-ice), e.g, 0</p> <code>pent5</code> <code>int</code> <p>Major penalties taken (on-ice), e.g, 0</p> <code>pent10</code> <code>int</code> <p>Game misconduct penalties taken (on-ice), e.g, 0</p> <code>pend0</code> <code>int</code> <p>Penalty shots drawn (on-ice), e.g, 0</p> <code>pend2</code> <code>int</code> <p>Minor penalties drawn (on-ice), e.g, 0</p> <code>pend4</code> <code>int</code> <p>Double minor penalties drawn (on-ice), e.g, 0</p> <code>pend5</code> <code>int</code> <p>Major penalties drawn (on-ice), e.g, 0</p> <code>pend10</code> <code>int</code> <p>Game misconduct penalties drawn (on-ice), e.g, 0</p> <code>gf_p60</code> <code>float</code> <p>Goals for (on-ice) per 60 minutes</p> <code>ga_p60</code> <code>float</code> <p>Goals against (on-ice) per 60 minutes</p> <code>hdgf_p60</code> <code>float</code> <p>High-danger goals for (on-ice) per 60 minutes</p> <code>hdga_p60</code> <code>float</code> <p>High-danger goals against (on-ice) per 60 minutes</p> <code>xgf_p60</code> <code>float</code> <p>xG for (on-ice) per 60 minutes</p> <code>xga_p60</code> <code>float</code> <p>xG against (on-ice) per 60 minutes</p> <code>sf_p60</code> <code>float</code> <p>Shots for (on-ice) per 60 minutes</p> <code>sa_p60</code> <code>float</code> <p>Shots against (on-ice) per 60 minutes</p> <code>hdsf_p60</code> <code>float</code> <p>High-danger shots for (on-ice) per 60 minutes</p> <code>hdsa_p60</code> <code>float</code> <p>High danger shots against (on-ice) per 60 minutes</p> <code>ff_p60</code> <code>float</code> <p>Fenwick for (on-ice) per 60 minutes</p> <code>fa_p60</code> <code>float</code> <p>Fenwick against (on-ice) per 60 minutes</p> <code>hdff_p60</code> <code>float</code> <p>High-danger fenwick for (on-ice) per 60 minutes</p> <code>hdfa_p60</code> <code>float</code> <p>High-danger fenwick against (on-ice) per 60 minutes</p> <code>cf_p60</code> <code>float</code> <p>Corsi for (on-ice) per 60 minutes</p> <code>ca_p60</code> <code>float</code> <p>Corsi against (on-ice) per 60 minutes</p> <code>bsf_p60</code> <code>float</code> <p>Blocked shots for (on-ice) per 60 minutes</p> <code>bsa_p60</code> <code>float</code> <p>Blocked shots against (on-ice) per 60 minutes</p> <code>msf_p60</code> <code>float</code> <p>Missed shots for (on-ice) per 60 minutes</p> <code>msa_p60</code> <code>float</code> <p>Missed shots against (on-ice) per 60 minutes</p> <code>hdmsf_p60</code> <code>float</code> <p>High-danger missed shots for (on-ice) per 60 minutes</p> <code>hdmsa_p60</code> <code>float</code> <p>High-danger missed shots against (on-ice) per 60 minutes</p> <code>teammate_block_p60</code> <code>float</code> <p>Shots blocked by teammates (on-ice) per 60 minutes</p> <code>hf_p60</code> <code>float</code> <p>Hits  for (on-ice) per 60 minutes</p> <code>ht_p60</code> <code>float</code> <p>Hits taken (on-ice) per 60 minutes</p> <code>give_p60</code> <code>float</code> <p>Giveaways (on-ice) per 60 minutes</p> <code>take_p60</code> <code>float</code> <p>Takeaways (on-ice) per 60 minutes</p> <code>pent0_p60</code> <code>float</code> <p>Penalty shots taken (on-ice) per 60 minutes</p> <code>pent2_p60</code> <code>float</code> <p>Minor penalties taken (on-ice) per 60 minutes</p> <code>pent4_p60</code> <code>float</code> <p>Double minor penalties taken (on-ice) per 60 minutes</p> <code>pent5_p60</code> <code>float</code> <p>Major penalties taken (on-ice) per 60 minutes</p> <code>pent10_p60</code> <code>float</code> <p>Game misconduct pentalties taken (on-ice) per 60 minutes</p> <code>pend0_p60</code> <code>float</code> <p>Penalty shots drawn (on-ice) per 60 minutes</p> <code>pend2_p60</code> <code>float</code> <p>Minor penalties drawn (on-ice) per 60 minutes</p> <code>pend4_p60</code> <code>float</code> <p>Double minor penalties drawn (on-ice) per 60 minutes</p> <code>pend5_p60</code> <code>float</code> <p>Major penalties drawn (on-ice) per 60 minutes</p> <code>pend10_p60</code> <code>float</code> <p>Game misconduct penalties drawn (on-ice) per 60 minutes</p> <code>gf_percent</code> <code>float</code> <p>On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)</p> <code>hdgf_percent</code> <code>float</code> <p>On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF / (HDGF + HDGA)</p> <code>xgf_percent</code> <code>float</code> <p>On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)</p> <code>sf_percent</code> <code>float</code> <p>On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)</p> <code>hdsf_percent</code> <code>float</code> <p>On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF / (HDSF + HDSA)</p> <code>ff_percent</code> <code>float</code> <p>On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)</p> <code>hdff_percent</code> <code>float</code> <p>On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF / (HDFF + HDFA)</p> <code>cf_percent</code> <code>float</code> <p>On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)</p> <code>bsf_percent</code> <code>float</code> <p>On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)</p> <code>msf_percent</code> <code>float</code> <p>On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)</p> <code>hdmsf_percent</code> <code>float</code> <p>On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e., HDMSF / (HDMSF + HDMSA)</p> <code>hf_percent</code> <code>float</code> <p>On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)</p> <code>take_percent</code> <code>float</code> <p>On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2023020001\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Prepares on-ice, line-level dataframe with default options</p> <pre><code>&gt;&gt;&gt; scraper.prep_lines()\n</code></pre> <p>Line-level statistics, aggregated to season level</p> <pre><code>&gt;&gt;&gt; scraper.prep_lines(level=\"season\")\n</code></pre> <p>Line-level statistics, aggregated to game level, accounting for teammates</p> <pre><code>&gt;&gt;&gt; scraper.prep_lines(level=\"game\", teammates=True)\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def prep_lines(\n    self,\n    position: Literal[\"f\", \"d\"] = \"f\",\n    level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n    score: bool = False,\n    teammates: bool = False,\n    opposition: bool = False,\n    disable_progress_bar: bool | None = None,\n) -&gt; None:\n    \"\"\"Prepares DataFrame of line-level stats from play-by-play data.\n\n    Used to prepare, or reset prepared data for later analysis\n\n    Parameters:\n        position (str):\n            Determines what positions to aggregate. One of F or D\n        level (str):\n            Determines the level of aggregation. One of season, session, game, period\n        score (bool):\n            Determines if stats account for score state\n        teammates (bool):\n            Determines if stats account for teammates on ice\n        opposition (bool):\n            Determines if stats account for opponents on ice\n        disable_progress_bar (bool):\n            Determines whether to display the progress bar\n\n    Returns:\n        season (int):\n            Season as 8-digit number, e.g., 2023 for 2023-24 season\n        session (str):\n            Whether game is regular season, playoffs, or pre-season, e.g., R\n        game_id (int):\n            Unique game ID assigned by the NHL, e.g., 2023020001\n        game_date (int):\n            Date game was played, e.g., 2023-10-10\n        team (str):\n            Player's team, e.g., NSH\n        opp_team (str):\n            Opposing team, e.g., TBL\n        strength_state (str):\n            Strength state, e.g., 5v5\n        period (int):\n            Period, e.g., 3\n        score_state (str):\n            Score state, e.g., 2v1\n        forwards (str):\n            Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY\n        forwards_eh_id (str):\n            Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n        forwards_api_id (str):\n            Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158\n        defense (str):\n            Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER\n        defense_eh_id (str):\n            Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER\n        defense_api_id (str):\n            Defense teammates' NHL API IDs, e.g., 8474151, 8478851\n        own_goalie (str):\n            Own goalie, e.g., JUUSE SAROS\n        own_goalie_eh_id (str):\n            Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS\n        own_goalie_api_id (str):\n            Own goalie's NHL API ID, e.g., 8477424\n        opp_forwards (str):\n            Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS\n        opp_forwards_eh_id (str):\n            Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS\n        opp_forwards_api_id (str):\n            Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564\n        opp_defense (str):\n            Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN\n        opp_defense_eh_id (str):\n            Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN\n        opp_defense_api_id (str):\n            Opposing defense's NHL API IDs, e.g., 8480246, 8475167\n        opp_goalie (str):\n            Opposing goalie, e.g., JONAS JOHANSSON\n        opp_goalie_eh_id (str):\n            Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON\n        opp_goalie_api_id (str):\n            Opposing goalie's NHL API ID, e.g., 8477992\n        toi (float):\n            Time on-ice, in minutes, e.g, 0.483333\n        gf (int):\n            Goals for (on-ice), e.g, 0\n        ga (int):\n            Goals against (on-ice), e.g, 0\n        hdgf (int):\n            High-danger goals for (on-ice), e.g, 0\n        hdga (int):\n            High-danger goals against (on-ice), e.g, 0\n        xgf (float):\n            xG for (on-ice), e.g., 1.258332\n        xga (float):\n            xG against (on-ice), e.g, 0.000000\n        sf (int):\n            Shots for (on-ice), e.g, 4\n        sa (int):\n            Shots against (on-ice), e.g, 0\n        hdsf (int):\n            High-danger shots for (on-ice), e.g, 3\n        hdsa (int):\n            High-danger shots against (on-ice), e.g, 0\n        ff (int):\n            Fenwick for (on-ice), e.g, 4\n        fa (int):\n            Fenwick against (on-ice), e.g, 0\n        hdff (int):\n            High-danger fenwick for (on-ice), e.g, 3\n        hdfa (int):\n            High-danger fenwick against (on-ice), e.g, 0\n        cf (int):\n            Corsi for (on-ice), e.g, 4\n        ca (int):\n            Corsi against (on-ice), e.g, 0\n        bsf (int):\n            Shots taken that were blocked (on-ice), e.g, 0\n        bsa (int):\n            Shots blocked (on-ice), e.g, 0\n        msf (int):\n            Missed shots taken (on-ice), e.g, 0\n        msa (int):\n            Missed shots against (on-ice), e.g, 0\n        hdmsf (int):\n            High-danger missed shots taken (on-ice), e.g, 0\n        hdmsa (int):\n            High-danger missed shots against (on-ice), e.g, 0\n        teammate_block (int):\n            Shots blocked by teammates (on-ice), e.g, 0\n        hf (int):\n            Hits for (on-ice), e.g, 0\n        ht (int):\n            Hits taken (on-ice), e.g, 0\n        give (int):\n            Giveaways (on-ice), e.g, 0\n        take (int):\n            Takeaways (on-ice), e.g, 0\n        ozf (int):\n            Offensive zone faceoffs (on-ice), e.g, 0\n        nzf (int):\n            Neutral zone faceoffs (on-ice), e.g, 1\n        dzf (int):\n            Defensive zone faceoffs (on-ice), e.g, 0\n        fow (int):\n            Faceoffs won (on-ice), e.g, 1\n        fol (int):\n            Faceoffs lost (on-ice), e.g, 0\n        ozfw (int):\n            Offensive zone faceoffs won (on-ice), e.g, 0\n        ozfl (int):\n            Offensive zone faceoffs lost (on-ice), e.g, 0\n        nzfw (int):\n            Neutral zone faceoffs won (on-ice), e.g, 1\n        nzfl (int):\n            Neutral zone faceoffs lost (on-ice), e.g, 0\n        dzfw (int):\n            Defensive zone faceoffs won (on-ice), e.g, 0\n        dzfl (int):\n            Defensive zone faceoffs lost (on-ice), e.g, 0\n        pent0 (int):\n            Penalty shots allowed (on-ice), e.g, 0\n        pent2 (int):\n            Minor penalties taken (on-ice), e.g, 0\n        pent4 (int):\n            Double minor penalties taken (on-ice), e.g, 0\n        pent5 (int):\n            Major penalties taken (on-ice), e.g, 0\n        pent10 (int):\n            Game misconduct penalties taken (on-ice), e.g, 0\n        pend0 (int):\n            Penalty shots drawn (on-ice), e.g, 0\n        pend2 (int):\n            Minor penalties drawn (on-ice), e.g, 0\n        pend4 (int):\n            Double minor penalties drawn (on-ice), e.g, 0\n        pend5 (int):\n            Major penalties drawn (on-ice), e.g, 0\n        pend10 (int):\n            Game misconduct penalties drawn (on-ice), e.g, 0\n        gf_p60 (float):\n            Goals for (on-ice) per 60 minutes\n        ga_p60 (float):\n            Goals against (on-ice) per 60 minutes\n        hdgf_p60 (float):\n            High-danger goals for (on-ice) per 60 minutes\n        hdga_p60 (float):\n            High-danger goals against (on-ice) per 60 minutes\n        xgf_p60 (float):\n            xG for (on-ice) per 60 minutes\n        xga_p60 (float):\n            xG against (on-ice) per 60 minutes\n        sf_p60 (float):\n            Shots for (on-ice) per 60 minutes\n        sa_p60 (float):\n            Shots against (on-ice) per 60 minutes\n        hdsf_p60 (float):\n            High-danger shots for (on-ice) per 60 minutes\n        hdsa_p60 (float):\n            High danger shots against (on-ice) per 60 minutes\n        ff_p60 (float):\n            Fenwick for (on-ice) per 60 minutes\n        fa_p60 (float):\n            Fenwick against (on-ice) per 60 minutes\n        hdff_p60 (float):\n            High-danger fenwick for (on-ice) per 60 minutes\n        hdfa_p60 (float):\n            High-danger fenwick against (on-ice) per 60 minutes\n        cf_p60 (float):\n            Corsi for (on-ice) per 60 minutes\n        ca_p60 (float):\n            Corsi against (on-ice) per 60 minutes\n        bsf_p60 (float):\n            Blocked shots for (on-ice) per 60 minutes\n        bsa_p60 (float):\n            Blocked shots against (on-ice) per 60 minutes\n        msf_p60 (float):\n            Missed shots for (on-ice) per 60 minutes\n        msa_p60 (float):\n            Missed shots against (on-ice) per 60 minutes\n        hdmsf_p60 (float):\n            High-danger missed shots for (on-ice) per 60 minutes\n        hdmsa_p60 (float):\n            High-danger missed shots against (on-ice) per 60 minutes\n        teammate_block_p60 (float):\n            Shots blocked by teammates (on-ice) per 60 minutes\n        hf_p60 (float):\n            Hits  for (on-ice) per 60 minutes\n        ht_p60 (float):\n            Hits taken (on-ice) per 60 minutes\n        give_p60 (float):\n            Giveaways (on-ice) per 60 minutes\n        take_p60 (float):\n            Takeaways (on-ice) per 60 minutes\n        pent0_p60 (float):\n            Penalty shots taken (on-ice) per 60 minutes\n        pent2_p60 (float):\n            Minor penalties taken (on-ice) per 60 minutes\n        pent4_p60 (float):\n            Double minor penalties taken (on-ice) per 60 minutes\n        pent5_p60 (float):\n            Major penalties taken (on-ice) per 60 minutes\n        pent10_p60 (float):\n            Game misconduct pentalties taken (on-ice) per 60 minutes\n        pend0_p60 (float):\n            Penalty shots drawn (on-ice) per 60 minutes\n        pend2_p60 (float):\n            Minor penalties drawn (on-ice) per 60 minutes\n        pend4_p60 (float):\n            Double minor penalties drawn (on-ice) per 60 minutes\n        pend5_p60 (float):\n            Major penalties drawn (on-ice) per 60 minutes\n        pend10_p60 (float):\n            Game misconduct penalties drawn (on-ice) per 60 minutes\n        gf_percent (float):\n            On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)\n        hdgf_percent (float):\n            On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF /\n            (HDGF + HDGA)\n        xgf_percent (float):\n            On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)\n        sf_percent (float):\n            On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)\n        hdsf_percent (float):\n            On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF /\n            (HDSF + HDSA)\n        ff_percent (float):\n            On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)\n        hdff_percent (float):\n            On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF /\n            (HDFF + HDFA)\n        cf_percent (float):\n            On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)\n        bsf_percent (float):\n            On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)\n        msf_percent (float):\n            On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)\n        hdmsf_percent (float):\n            On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e.,\n            HDMSF / (HDMSF + HDMSA)\n        hf_percent (float):\n            On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)\n        take_percent (float):\n            On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)\n\n    Examples:\n        First, instantiate the class with a game ID\n        &gt;&gt;&gt; game_id = 2023020001\n        &gt;&gt;&gt; scraper = Scraper(game_id)\n\n        Prepares on-ice, line-level dataframe with default options\n        &gt;&gt;&gt; scraper.prep_lines()\n\n        Line-level statistics, aggregated to season level\n        &gt;&gt;&gt; scraper.prep_lines(level=\"season\")\n\n        Line-level statistics, aggregated to game level, accounting for teammates\n        &gt;&gt;&gt; scraper.prep_lines(level=\"game\", teammates=True)\n\n    \"\"\"\n    levels = self._lines_levels\n\n    if (\n        levels[\"position\"] != position\n        or levels[\"level\"] != level\n        or levels[\"score\"] != score\n        or levels[\"teammates\"] != teammates\n        or levels[\"opposition\"] != opposition\n    ):\n        self._lines = pd.DataFrame()\n\n        new_values = {\n            \"position\": position,\n            \"level\": level,\n            \"score\": score,\n            \"teammates\": teammates,\n            \"opposition\": opposition,\n        }\n\n        self._lines_levels.update(new_values)\n\n    if self._lines.empty:\n        if not disable_progress_bar:\n            disable_progress_bar = self.disable_progress_bar\n\n        with ChickenProgressIndeterminate(disable=disable_progress_bar) as progress:\n            pbar_message = \"Prepping lines data...\"\n            progress_task = progress.add_task(pbar_message, total=None, refresh=True)\n\n            progress.start_task(progress_task)\n            progress.update(progress_task, total=1, description=pbar_message, refresh=True)\n\n            self._prep_lines(\n                level=level, position=position, score=score, teammates=teammates, opposition=opposition\n            )\n\n            progress.update(\n                progress_task,\n                description=\"Finished prepping lines data\",\n                completed=True,\n                advance=True,\n                refresh=True,\n            )\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper.team_stats","title":"team_stats  <code>property</code>","text":"<pre><code>team_stats\n</code></pre> <p>Pandas Dataframe of teams stats aggregated from play-by-play data.</p> <p>Determine level of aggregation using <code>prep_team_stats</code> method.</p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 2023 for 2023-24 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2023020001</p> <code>team</code> <code>str</code> <p>Player's team, e.g., NSH</p> <code>opp_team</code> <code>str</code> <p>Opposing team, e.g., TBL</p> <code>strength_state</code> <code>str</code> <p>Strength state, e.g., 5v5</p> <code>period</code> <code>int</code> <p>Period, e.g., 3</p> <code>score_state</code> <code>str</code> <p>Score state, e.g., 2v1</p> <code>toi</code> <code>float</code> <p>Time on-ice, in minutes, e.g, 1.100000</p> <code>gf</code> <code>int</code> <p>Goals for (on-ice), e.g, 0</p> <code>hdgf</code> <code>int</code> <p>High-danger goals for (on-ice), e.g, 0</p> <code>ga</code> <code>int</code> <p>Goals against (on-ice), e.g, 0</p> <code>hdga</code> <code>int</code> <p>High-danger goals against (on-ice), e.g, 0</p> <code>xgf</code> <code>float</code> <p>xG for (on-ice), e.g., 1.271583</p> <code>xga</code> <code>float</code> <p>xG against (on-ice), e.g, 0.000000</p> <code>sf</code> <code>int</code> <p>Shots for (on-ice), e.g, 5</p> <code>sa</code> <code>int</code> <p>Shots against (on-ice), e.g, 0</p> <code>hdsf</code> <code>int</code> <p>High-danger shots for (on-ice), e.g, 3</p> <code>hdsa</code> <code>int</code> <p>High-danger shots against (on-ice), e.g, 0</p> <code>ff</code> <code>int</code> <p>Fenwick for (on-ice), e.g, 5</p> <code>fa</code> <code>int</code> <p>Fenwick against (on-ice), e.g, 0</p> <code>hdff</code> <code>int</code> <p>High-danger fenwick for (on-ice), e.g, 3</p> <code>hdfa</code> <code>int</code> <p>High-danger fenwick against (on-ice), e.g, 0</p> <code>cf</code> <code>int</code> <p>Corsi for (on-ice), e.g, 5</p> <code>ca</code> <code>int</code> <p>Corsi against (on-ice), e.g, 0</p> <code>bsf</code> <code>int</code> <p>Shots taken that were blocked (on-ice), e.g, 0</p> <code>bsa</code> <code>int</code> <p>Shots blocked (on-ice), e.g, 0</p> <code>msf</code> <code>int</code> <p>Missed shots taken (on-ice), e.g, 0</p> <code>msa</code> <code>int</code> <p>Missed shots against (on-ice), e.g, 0</p> <code>hdmsf</code> <code>int</code> <p>High-danger missed shots taken (on-ice), e.g, 0</p> <code>hdmsa</code> <code>int</code> <p>High-danger missed shots against (on-ice), e.g, 0</p> <code>teammate_block</code> <code>int</code> <p>Shots blocked by teammates (on-ice), e.g, 0</p> <code>hf</code> <code>int</code> <p>Hits for (on-ice), e.g, 0</p> <code>ht</code> <code>int</code> <p>Hits taken (on-ice), e.g, 0</p> <code>give</code> <code>int</code> <p>Giveaways (on-ice), e.g, 0</p> <code>take</code> <code>int</code> <p>Takeaways (on-ice), e.g, 0</p> <code>ozf</code> <code>int</code> <p>Offensive zone faceoffs (on-ice), e.g, 0</p> <code>nzf</code> <code>int</code> <p>Neutral zone faceoffs (on-ice), e.g, 4</p> <code>dzf</code> <code>int</code> <p>Defensive zone faceoffs (on-ice), e.g, 0</p> <code>fow</code> <code>int</code> <p>Faceoffs won (on-ice), e.g, 2</p> <code>fol</code> <code>int</code> <p>Faceoffs lost (on-ice), e.g, 0</p> <code>ozfw</code> <code>int</code> <p>Offensive zone faceoffs won (on-ice), e.g, 0</p> <code>ozfl</code> <code>int</code> <p>Offensive zone faceoffs lost (on-ice), e.g, 0</p> <code>nzfw</code> <code>int</code> <p>Neutral zone faceoffs won (on-ice), e.g, 2</p> <code>nzfl</code> <code>int</code> <p>Neutral zone faceoffs lost (on-ice), e.g, 1</p> <code>dzfw</code> <code>int</code> <p>Defensive zone faceoffs won (on-ice), e.g, 0</p> <code>dzfl</code> <code>int</code> <p>Defensive zone faceoffs lost (on-ice), e.g, 1</p> <code>pent0</code> <code>int</code> <p>Penalty shots allowed (on-ice), e.g, 0</p> <code>pent2</code> <code>int</code> <p>Minor penalties taken (on-ice), e.g, 1</p> <code>pent4</code> <code>int</code> <p>Double minor penalties taken (on-ice), e.g, 0</p> <code>pent5</code> <code>int</code> <p>Major penalties taken (on-ice), e.g, 0</p> <code>pent10</code> <code>int</code> <p>Game misconduct penalties taken (on-ice), e.g, 0</p> <code>pend0</code> <code>int</code> <p>Penalty shots drawn (on-ice), e.g, 0</p> <code>pend2</code> <code>int</code> <p>Minor penalties drawn (on-ice), e.g, 0</p> <code>pend4</code> <code>int</code> <p>Double minor penalties drawn (on-ice), e.g, 0</p> <code>pend5</code> <code>int</code> <p>Major penalties drawn (on-ice), e.g, 0</p> <code>pend10</code> <code>int</code> <p>Game misconduct penalties drawn (on-ice), e.g, 0</p> <code>gf_p60</code> <code>float</code> <p>Goals for (on-ice) per 60 minutes</p> <code>ga_p60</code> <code>float</code> <p>Goals against (on-ice) per 60 minutes</p> <code>hdgf_p60</code> <code>float</code> <p>High-danger goals for (on-ice) per 60 minutes</p> <code>hdga_p60</code> <code>float</code> <p>High-danger goals against (on-ice) per 60 minutes</p> <code>xgf_p60</code> <code>float</code> <p>xG for (on-ice) per 60 minutes</p> <code>xga_p60</code> <code>float</code> <p>xG against (on-ice) per 60 minutes</p> <code>sf_p60</code> <code>float</code> <p>Shots for (on-ice) per 60 minutes</p> <code>sa_p60</code> <code>float</code> <p>Shots against (on-ice) per 60 minutes</p> <code>hdsf_p60</code> <code>float</code> <p>High-danger shots for (on-ice) per 60 minutes</p> <code>hdsa_p60</code> <code>float</code> <p>High danger shots against (on-ice) per 60 minutes</p> <code>ff_p60</code> <code>float</code> <p>Fenwick for (on-ice) per 60 minutes</p> <code>fa_p60</code> <code>float</code> <p>Fenwick against (on-ice) per 60 minutes</p> <code>hdff_p60</code> <code>float</code> <p>High-danger fenwick for (on-ice) per 60 minutes</p> <code>hdfa_p60</code> <code>float</code> <p>High-danger fenwick against (on-ice) per 60 minutes</p> <code>cf_p60</code> <code>float</code> <p>Corsi for (on-ice) per 60 minutes</p> <code>ca_p60</code> <code>float</code> <p>Corsi against (on-ice) per 60 minutes</p> <code>bsf_p60</code> <code>float</code> <p>Blocked shots for (on-ice) per 60 minutes</p> <code>bsa_p60</code> <code>float</code> <p>Blocked shots against (on-ice) per 60 minutes</p> <code>msf_p60</code> <code>float</code> <p>Missed shots for (on-ice) per 60 minutes</p> <code>msa_p60</code> <code>float</code> <p>Missed shots against (on-ice) per 60 minutes</p> <code>hdmsf_p60</code> <code>float</code> <p>High-danger missed shots for (on-ice) per 60 minutes</p> <code>hdmsa_p60</code> <code>float</code> <p>High-danger missed shots against (on-ice) per 60 minutes</p> <code>teammate_block_p60</code> <code>float</code> <p>Shots blocked by teammates (on-ice) per 60 minutes</p> <code>hf_p60</code> <code>float</code> <p>Hits  for (on-ice) per 60 minutes</p> <code>ht_p60</code> <code>float</code> <p>Hits taken (on-ice) per 60 minutes</p> <code>give_p60</code> <code>float</code> <p>Giveaways (on-ice) per 60 minutes</p> <code>take_p60</code> <code>float</code> <p>Takeaways (on-ice) per 60 minutes</p> <code>pent0_p60</code> <code>float</code> <p>Penalty shots taken (on-ice) per 60 minutes</p> <code>pent2_p60</code> <code>float</code> <p>Minor penalties taken (on-ice) per 60 minutes</p> <code>pent4_p60</code> <code>float</code> <p>Double minor penalties taken (on-ice) per 60 minutes</p> <code>pent5_p60</code> <code>float</code> <p>Major penalties taken (on-ice) per 60 minutes</p> <code>pent10_p60</code> <code>float</code> <p>Game misconduct pentalties taken (on-ice) per 60 minutes</p> <code>pend0_p60</code> <code>float</code> <p>Penalty shots drawn (on-ice) per 60 minutes</p> <code>pend2_p60</code> <code>float</code> <p>Minor penalties drawn (on-ice) per 60 minutes</p> <code>pend4_p60</code> <code>float</code> <p>Double minor penalties drawn (on-ice) per 60 minutes</p> <code>pend5_p60</code> <code>float</code> <p>Major penalties drawn (on-ice) per 60 minutes</p> <code>pend10_p60</code> <code>float</code> <p>Game misconduct penalties drawn (on-ice) per 60 minutes</p> <code>gf_percent</code> <code>float</code> <p>On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)</p> <code>hdgf_percent</code> <code>float</code> <p>On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF / (HDGF + HDGA)</p> <code>xgf_percent</code> <code>float</code> <p>On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)</p> <code>sf_percent</code> <code>float</code> <p>On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)</p> <code>hdsf_percent</code> <code>float</code> <p>On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF / (HDSF + HDSA)</p> <code>ff_percent</code> <code>float</code> <p>On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)</p> <code>hdff_percent</code> <code>float</code> <p>On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF / (HDFF + HDFA)</p> <code>cf_percent</code> <code>float</code> <p>On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)</p> <code>bsf_percent</code> <code>float</code> <p>On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)</p> <code>msf_percent</code> <code>float</code> <p>On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)</p> <code>hdmsf_percent</code> <code>float</code> <p>On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e., HDMSF / (HDMSF + HDMSA)</p> <code>hf_percent</code> <code>float</code> <p>On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)</p> <code>take_percent</code> <code>float</code> <p>On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2023020001\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Returns team stats with default options</p> <pre><code>&gt;&gt;&gt; scraper.team_stats\n</code></pre> <p>Resets team stats to season level, accounting for opposing team</p> <pre><code>&gt;&gt;&gt; scraper.prep_team_stats(level=\"season\", opposition=True)\n&gt;&gt;&gt; scraper.team_stats\n</code></pre> <p>Resets team stats to season level, accounting for opposing team and score state</p> <pre><code>&gt;&gt;&gt; scraper.prep_team_stats(level=\"season\", opposition=True, score=True)\n&gt;&gt;&gt; scraper.team_stats\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper.prep_team_stats","title":"prep_team_stats","text":"<pre><code>prep_team_stats(\n    level=\"game\",\n    strengths=True,\n    opposition=False,\n    score=False,\n    disable_progress_bar=None,\n)\n</code></pre> <p>Prepares DataFrame of team stats from play-by-play data.</p> <p>Used to prepare, or reset prepared data for later analysis</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>str</code> <p>Determines the level of aggregation. One of season, session, game, period</p> <code>'game'</code> <code>score</code> <code>bool</code> <p>Determines if stats account  for score state</p> <code>False</code> <code>strengths</code> <code>bool</code> <p>Determines if stats account  for strength state</p> <code>True</code> <code>opposition</code> <code>bool</code> <p>Determines if stats account  for opponents on ice</p> <code>False</code> <code>disable_progress_bar</code> <code>bool</code> <p>Determines whether to display the progress bar</p> <code>None</code> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 2023 for 2023-24 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2023020001</p> <code>team</code> <code>str</code> <p>Player's team, e.g., NSH</p> <code>opp_team</code> <code>str</code> <p>Opposing team, e.g., TBL</p> <code>strength_state</code> <code>str</code> <p>Strength state, e.g., 5v5</p> <code>period</code> <code>int</code> <p>Period, e.g., 3</p> <code>score_state</code> <code>str</code> <p>Score state, e.g., 2v1</p> <code>toi</code> <code>float</code> <p>Time on-ice, in minutes, e.g, 1.100000</p> <code>gf</code> <code>int</code> <p>Goals for (on-ice), e.g, 0</p> <code>hdgf</code> <code>int</code> <p>High-danger goals for (on-ice), e.g, 0</p> <code>ga</code> <code>int</code> <p>Goals against (on-ice), e.g, 0</p> <code>hdga</code> <code>int</code> <p>High-danger goals against (on-ice), e.g, 0</p> <code>xgf</code> <code>float</code> <p>xG for (on-ice), e.g., 1.271583</p> <code>xga</code> <code>float</code> <p>xG against (on-ice), e.g, 0.000000</p> <code>sf</code> <code>int</code> <p>Shots for (on-ice), e.g, 5</p> <code>sa</code> <code>int</code> <p>Shots against (on-ice), e.g, 0</p> <code>hdsf</code> <code>int</code> <p>High-danger shots for (on-ice), e.g, 3</p> <code>hdsa</code> <code>int</code> <p>High-danger shots against (on-ice), e.g, 0</p> <code>ff</code> <code>int</code> <p>Fenwick for (on-ice), e.g, 5</p> <code>fa</code> <code>int</code> <p>Fenwick against (on-ice), e.g, 0</p> <code>hdff</code> <code>int</code> <p>High-danger fenwick for (on-ice), e.g, 3</p> <code>hdfa</code> <code>int</code> <p>High-danger fenwick against (on-ice), e.g, 0</p> <code>cf</code> <code>int</code> <p>Corsi for (on-ice), e.g, 5</p> <code>ca</code> <code>int</code> <p>Corsi against (on-ice), e.g, 0</p> <code>bsf</code> <code>int</code> <p>Shots taken that were blocked (on-ice), e.g, 0</p> <code>bsa</code> <code>int</code> <p>Shots blocked (on-ice), e.g, 0</p> <code>msf</code> <code>int</code> <p>Missed shots taken (on-ice), e.g, 0</p> <code>msa</code> <code>int</code> <p>Missed shots against (on-ice), e.g, 0</p> <code>hdmsf</code> <code>int</code> <p>High-danger missed shots taken (on-ice), e.g, 0</p> <code>hdmsa</code> <code>int</code> <p>High-danger missed shots against (on-ice), e.g, 0</p> <code>teammate_block</code> <code>int</code> <p>Shots blocked by teammates (on-ice), e.g, 0</p> <code>hf</code> <code>int</code> <p>Hits for (on-ice), e.g, 0</p> <code>ht</code> <code>int</code> <p>Hits taken (on-ice), e.g, 0</p> <code>give</code> <code>int</code> <p>Giveaways (on-ice), e.g, 0</p> <code>take</code> <code>int</code> <p>Takeaways (on-ice), e.g, 0</p> <code>ozf</code> <code>int</code> <p>Offensive zone faceoffs (on-ice), e.g, 0</p> <code>nzf</code> <code>int</code> <p>Neutral zone faceoffs (on-ice), e.g, 4</p> <code>dzf</code> <code>int</code> <p>Defensive zone faceoffs (on-ice), e.g, 0</p> <code>fow</code> <code>int</code> <p>Faceoffs won (on-ice), e.g, 2</p> <code>fol</code> <code>int</code> <p>Faceoffs lost (on-ice), e.g, 0</p> <code>ozfw</code> <code>int</code> <p>Offensive zone faceoffs won (on-ice), e.g, 0</p> <code>ozfl</code> <code>int</code> <p>Offensive zone faceoffs lost (on-ice), e.g, 0</p> <code>nzfw</code> <code>int</code> <p>Neutral zone faceoffs won (on-ice), e.g, 2</p> <code>nzfl</code> <code>int</code> <p>Neutral zone faceoffs lost (on-ice), e.g, 1</p> <code>dzfw</code> <code>int</code> <p>Defensive zone faceoffs won (on-ice), e.g, 0</p> <code>dzfl</code> <code>int</code> <p>Defensive zone faceoffs lost (on-ice), e.g, 1</p> <code>pent0</code> <code>int</code> <p>Penalty shots allowed (on-ice), e.g, 0</p> <code>pent2</code> <code>int</code> <p>Minor penalties taken (on-ice), e.g, 1</p> <code>pent4</code> <code>int</code> <p>Double minor penalties taken (on-ice), e.g, 0</p> <code>pent5</code> <code>int</code> <p>Major penalties taken (on-ice), e.g, 0</p> <code>pent10</code> <code>int</code> <p>Game misconduct penalties taken (on-ice), e.g, 0</p> <code>pend0</code> <code>int</code> <p>Penalty shots drawn (on-ice), e.g, 0</p> <code>pend2</code> <code>int</code> <p>Minor penalties drawn (on-ice), e.g, 0</p> <code>pend4</code> <code>int</code> <p>Double minor penalties drawn (on-ice), e.g, 0</p> <code>pend5</code> <code>int</code> <p>Major penalties drawn (on-ice), e.g, 0</p> <code>pend10</code> <code>int</code> <p>Game misconduct penalties drawn (on-ice), e.g, 0</p> <code>gf_p60</code> <code>float</code> <p>Goals for (on-ice) per 60 minutes</p> <code>ga_p60</code> <code>float</code> <p>Goals against (on-ice) per 60 minutes</p> <code>hdgf_p60</code> <code>float</code> <p>High-danger goals for (on-ice) per 60 minutes</p> <code>hdga_p60</code> <code>float</code> <p>High-danger goals against (on-ice) per 60 minutes</p> <code>xgf_p60</code> <code>float</code> <p>xG for (on-ice) per 60 minutes</p> <code>xga_p60</code> <code>float</code> <p>xG against (on-ice) per 60 minutes</p> <code>sf_p60</code> <code>float</code> <p>Shots for (on-ice) per 60 minutes</p> <code>sa_p60</code> <code>float</code> <p>Shots against (on-ice) per 60 minutes</p> <code>hdsf_p60</code> <code>float</code> <p>High-danger shots for (on-ice) per 60 minutes</p> <code>hdsa_p60</code> <code>float</code> <p>High danger shots against (on-ice) per 60 minutes</p> <code>ff_p60</code> <code>float</code> <p>Fenwick for (on-ice) per 60 minutes</p> <code>fa_p60</code> <code>float</code> <p>Fenwick against (on-ice) per 60 minutes</p> <code>hdff_p60</code> <code>float</code> <p>High-danger fenwick for (on-ice) per 60 minutes</p> <code>hdfa_p60</code> <code>float</code> <p>High-danger fenwick against (on-ice) per 60 minutes</p> <code>cf_p60</code> <code>float</code> <p>Corsi for (on-ice) per 60 minutes</p> <code>ca_p60</code> <code>float</code> <p>Corsi against (on-ice) per 60 minutes</p> <code>bsf_p60</code> <code>float</code> <p>Blocked shots for (on-ice) per 60 minutes</p> <code>bsa_p60</code> <code>float</code> <p>Blocked shots against (on-ice) per 60 minutes</p> <code>msf_p60</code> <code>float</code> <p>Missed shots for (on-ice) per 60 minutes</p> <code>msa_p60</code> <code>float</code> <p>Missed shots against (on-ice) per 60 minutes</p> <code>hdmsf_p60</code> <code>float</code> <p>High-danger missed shots for (on-ice) per 60 minutes</p> <code>hdmsa_p60</code> <code>float</code> <p>High-danger missed shots against (on-ice) per 60 minutes</p> <code>teammate_block_p60</code> <code>float</code> <p>Shots blocked by teammates (on-ice) per 60 minutes</p> <code>hf_p60</code> <code>float</code> <p>Hits  for (on-ice) per 60 minutes</p> <code>ht_p60</code> <code>float</code> <p>Hits taken (on-ice) per 60 minutes</p> <code>give_p60</code> <code>float</code> <p>Giveaways (on-ice) per 60 minutes</p> <code>take_p60</code> <code>float</code> <p>Takeaways (on-ice) per 60 minutes</p> <code>pent0_p60</code> <code>float</code> <p>Penalty shots taken (on-ice) per 60 minutes</p> <code>pent2_p60</code> <code>float</code> <p>Minor penalties taken (on-ice) per 60 minutes</p> <code>pent4_p60</code> <code>float</code> <p>Double minor penalties taken (on-ice) per 60 minutes</p> <code>pent5_p60</code> <code>float</code> <p>Major penalties taken (on-ice) per 60 minutes</p> <code>pent10_p60</code> <code>float</code> <p>Game misconduct pentalties taken (on-ice) per 60 minutes</p> <code>pend0_p60</code> <code>float</code> <p>Penalty shots drawn (on-ice) per 60 minutes</p> <code>pend2_p60</code> <code>float</code> <p>Minor penalties drawn (on-ice) per 60 minutes</p> <code>pend4_p60</code> <code>float</code> <p>Double minor penalties drawn (on-ice) per 60 minutes</p> <code>pend5_p60</code> <code>float</code> <p>Major penalties drawn (on-ice) per 60 minutes</p> <code>pend10_p60</code> <code>float</code> <p>Game misconduct penalties drawn (on-ice) per 60 minutes</p> <code>gf_percent</code> <code>float</code> <p>On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)</p> <code>hdgf_percent</code> <code>float</code> <p>On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF / (HDGF + HDGA)</p> <code>xgf_percent</code> <code>float</code> <p>On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)</p> <code>sf_percent</code> <code>float</code> <p>On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)</p> <code>hdsf_percent</code> <code>float</code> <p>On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF / (HDSF + HDSA)</p> <code>ff_percent</code> <code>float</code> <p>On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)</p> <code>hdff_percent</code> <code>float</code> <p>On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF / (HDFF + HDFA)</p> <code>cf_percent</code> <code>float</code> <p>On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)</p> <code>bsf_percent</code> <code>float</code> <p>On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)</p> <code>msf_percent</code> <code>float</code> <p>On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)</p> <code>hdmsf_percent</code> <code>float</code> <p>On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e., HDMSF / (HDMSF + HDMSA)</p> <code>hf_percent</code> <code>float</code> <p>On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)</p> <code>take_percent</code> <code>float</code> <p>On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2023020001\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Team dataframe with default options</p> <pre><code>&gt;&gt;&gt; scraper.prep_team_stats()\n</code></pre> <p>Team statistics, aggregated to season level</p> <pre><code>&gt;&gt;&gt; scraper.prep_team_stats(level=\"season\")\n</code></pre> <p>Team statistics, aggregated to game level, accounting for teammates</p> <pre><code>&gt;&gt;&gt; scraper.prep_team_stats(level=\"game\", teammates=True)\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def prep_team_stats(\n    self,\n    level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n    strengths: bool = True,\n    opposition: bool = False,\n    score: bool = False,\n    disable_progress_bar: bool | None = None,\n) -&gt; None:\n    \"\"\"Prepares DataFrame of team stats from play-by-play data.\n\n    Used to prepare, or reset prepared data for later analysis\n\n    Parameters:\n        level (str):\n            Determines the level of aggregation. One of season, session, game, period\n        score (bool):\n            Determines if stats account  for score state\n        strengths (bool):\n            Determines if stats account  for strength state\n        opposition (bool):\n            Determines if stats account  for opponents on ice\n        disable_progress_bar (bool):\n            Determines whether to display the progress bar\n\n    Returns:\n        season (int):\n            Season as 8-digit number, e.g., 2023 for 2023-24 season\n        session (str):\n            Whether game is regular season, playoffs, or pre-season, e.g., R\n        game_id (int):\n            Unique game ID assigned by the NHL, e.g., 2023020001\n        team (str):\n            Player's team, e.g., NSH\n        opp_team (str):\n            Opposing team, e.g., TBL\n        strength_state (str):\n            Strength state, e.g., 5v5\n        period (int):\n            Period, e.g., 3\n        score_state (str):\n            Score state, e.g., 2v1\n        toi (float):\n            Time on-ice, in minutes, e.g, 1.100000\n        gf (int):\n            Goals for (on-ice), e.g, 0\n        hdgf (int):\n            High-danger goals for (on-ice), e.g, 0\n        ga (int):\n            Goals against (on-ice), e.g, 0\n        hdga (int):\n            High-danger goals against (on-ice), e.g, 0\n        xgf (float):\n            xG for (on-ice), e.g., 1.271583\n        xga (float):\n            xG against (on-ice), e.g, 0.000000\n        sf (int):\n            Shots for (on-ice), e.g, 5\n        sa (int):\n            Shots against (on-ice), e.g, 0\n        hdsf (int):\n            High-danger shots for (on-ice), e.g, 3\n        hdsa (int):\n            High-danger shots against (on-ice), e.g, 0\n        ff (int):\n            Fenwick for (on-ice), e.g, 5\n        fa (int):\n            Fenwick against (on-ice), e.g, 0\n        hdff (int):\n            High-danger fenwick for (on-ice), e.g, 3\n        hdfa (int):\n            High-danger fenwick against (on-ice), e.g, 0\n        cf (int):\n            Corsi for (on-ice), e.g, 5\n        ca (int):\n            Corsi against (on-ice), e.g, 0\n        bsf (int):\n            Shots taken that were blocked (on-ice), e.g, 0\n        bsa (int):\n            Shots blocked (on-ice), e.g, 0\n        msf (int):\n            Missed shots taken (on-ice), e.g, 0\n        msa (int):\n            Missed shots against (on-ice), e.g, 0\n        hdmsf (int):\n            High-danger missed shots taken (on-ice), e.g, 0\n        hdmsa (int):\n            High-danger missed shots against (on-ice), e.g, 0\n        teammate_block (int):\n            Shots blocked by teammates (on-ice), e.g, 0\n        hf (int):\n            Hits for (on-ice), e.g, 0\n        ht (int):\n            Hits taken (on-ice), e.g, 0\n        give (int):\n            Giveaways (on-ice), e.g, 0\n        take (int):\n            Takeaways (on-ice), e.g, 0\n        ozf (int):\n            Offensive zone faceoffs (on-ice), e.g, 0\n        nzf (int):\n            Neutral zone faceoffs (on-ice), e.g, 4\n        dzf (int):\n            Defensive zone faceoffs (on-ice), e.g, 0\n        fow (int):\n            Faceoffs won (on-ice), e.g, 2\n        fol (int):\n            Faceoffs lost (on-ice), e.g, 0\n        ozfw (int):\n            Offensive zone faceoffs won (on-ice), e.g, 0\n        ozfl (int):\n            Offensive zone faceoffs lost (on-ice), e.g, 0\n        nzfw (int):\n            Neutral zone faceoffs won (on-ice), e.g, 2\n        nzfl (int):\n            Neutral zone faceoffs lost (on-ice), e.g, 1\n        dzfw (int):\n            Defensive zone faceoffs won (on-ice), e.g, 0\n        dzfl (int):\n            Defensive zone faceoffs lost (on-ice), e.g, 1\n        pent0 (int):\n            Penalty shots allowed (on-ice), e.g, 0\n        pent2 (int):\n            Minor penalties taken (on-ice), e.g, 1\n        pent4 (int):\n            Double minor penalties taken (on-ice), e.g, 0\n        pent5 (int):\n            Major penalties taken (on-ice), e.g, 0\n        pent10 (int):\n            Game misconduct penalties taken (on-ice), e.g, 0\n        pend0 (int):\n            Penalty shots drawn (on-ice), e.g, 0\n        pend2 (int):\n            Minor penalties drawn (on-ice), e.g, 0\n        pend4 (int):\n            Double minor penalties drawn (on-ice), e.g, 0\n        pend5 (int):\n            Major penalties drawn (on-ice), e.g, 0\n        pend10 (int):\n            Game misconduct penalties drawn (on-ice), e.g, 0\n        gf_p60 (float):\n            Goals for (on-ice) per 60 minutes\n        ga_p60 (float):\n            Goals against (on-ice) per 60 minutes\n        hdgf_p60 (float):\n            High-danger goals for (on-ice) per 60 minutes\n        hdga_p60 (float):\n            High-danger goals against (on-ice) per 60 minutes\n        xgf_p60 (float):\n            xG for (on-ice) per 60 minutes\n        xga_p60 (float):\n            xG against (on-ice) per 60 minutes\n        sf_p60 (float):\n            Shots for (on-ice) per 60 minutes\n        sa_p60 (float):\n            Shots against (on-ice) per 60 minutes\n        hdsf_p60 (float):\n            High-danger shots for (on-ice) per 60 minutes\n        hdsa_p60 (float):\n            High danger shots against (on-ice) per 60 minutes\n        ff_p60 (float):\n            Fenwick for (on-ice) per 60 minutes\n        fa_p60 (float):\n            Fenwick against (on-ice) per 60 minutes\n        hdff_p60 (float):\n            High-danger fenwick for (on-ice) per 60 minutes\n        hdfa_p60 (float):\n            High-danger fenwick against (on-ice) per 60 minutes\n        cf_p60 (float):\n            Corsi for (on-ice) per 60 minutes\n        ca_p60 (float):\n            Corsi against (on-ice) per 60 minutes\n        bsf_p60 (float):\n            Blocked shots for (on-ice) per 60 minutes\n        bsa_p60 (float):\n            Blocked shots against (on-ice) per 60 minutes\n        msf_p60 (float):\n            Missed shots for (on-ice) per 60 minutes\n        msa_p60 (float):\n            Missed shots against (on-ice) per 60 minutes\n        hdmsf_p60 (float):\n            High-danger missed shots for (on-ice) per 60 minutes\n        hdmsa_p60 (float):\n            High-danger missed shots against (on-ice) per 60 minutes\n        teammate_block_p60 (float):\n            Shots blocked by teammates (on-ice) per 60 minutes\n        hf_p60 (float):\n            Hits  for (on-ice) per 60 minutes\n        ht_p60 (float):\n            Hits taken (on-ice) per 60 minutes\n        give_p60 (float):\n            Giveaways (on-ice) per 60 minutes\n        take_p60 (float):\n            Takeaways (on-ice) per 60 minutes\n        pent0_p60 (float):\n            Penalty shots taken (on-ice) per 60 minutes\n        pent2_p60 (float):\n            Minor penalties taken (on-ice) per 60 minutes\n        pent4_p60 (float):\n            Double minor penalties taken (on-ice) per 60 minutes\n        pent5_p60 (float):\n            Major penalties taken (on-ice) per 60 minutes\n        pent10_p60 (float):\n            Game misconduct pentalties taken (on-ice) per 60 minutes\n        pend0_p60 (float):\n            Penalty shots drawn (on-ice) per 60 minutes\n        pend2_p60 (float):\n            Minor penalties drawn (on-ice) per 60 minutes\n        pend4_p60 (float):\n            Double minor penalties drawn (on-ice) per 60 minutes\n        pend5_p60 (float):\n            Major penalties drawn (on-ice) per 60 minutes\n        pend10_p60 (float):\n            Game misconduct penalties drawn (on-ice) per 60 minutes\n        gf_percent (float):\n            On-ice goals for as a percentage of total on-ice goals i.e., GF / (GF + GA)\n        hdgf_percent (float):\n            On-ice high-danger goals for as a percentage of total on-ice high-danger goals i.e., HDGF /\n            (HDGF + HDGA)\n        xgf_percent (float):\n            On-ice xG for as a percentage of total on-ice xG i.e., xGF / (xGF + GxA)\n        sf_percent (float):\n            On-ice shots for as a percentage of total on-ice shots i.e., SF / (SF + SA)\n        hdsf_percent (float):\n            On-ice high-danger shots for as a percentage of total on-ice high-danger shots i.e., HDSF /\n            (HDSF + HDSA)\n        ff_percent (float):\n            On-ice fenwick for as a percentage of total on-ice fenick i.e., FF / (FF + FA)\n        hdff_percent (float):\n            On-ice high-danger fenwick for as a percentage of total on-ice high-danger fenwick i.e., HDFF /\n            (HDFF + HDFA)\n        cf_percent (float):\n            On-ice corsi for as a percentage of total on-ice corsi i.e., CF / (CF + CA)\n        bsf_percent (float):\n            On-ice blocked shots for as a percentage of total on-ice blocked shots i.e., BSF / (BSF + BSA)\n        msf_percent (float):\n            On-ice missed shots for as a percentage of total on-ice missed shots i.e., MSF / (MSF + MSA)\n        hdmsf_percent (float):\n            On-ice high-danger missed shots for as a percentage of total on-ice high-danger missed shots i.e.,\n            HDMSF / (HDMSF + HDMSA)\n        hf_percent (float):\n            On-ice hits for as a percentage of total on-ice hits i.e., HF / (HF + HT)\n        take_percent (float):\n            On-ice takeaways for as a percentage of total on-ice giveaways and takeaways i.e., take / (take + give)\n\n    Examples:\n        First, instantiate the class with a game ID\n        &gt;&gt;&gt; game_id = 2023020001\n        &gt;&gt;&gt; scraper = Scraper(game_id)\n\n        Team dataframe with default options\n        &gt;&gt;&gt; scraper.prep_team_stats()\n\n        Team statistics, aggregated to season level\n        &gt;&gt;&gt; scraper.prep_team_stats(level=\"season\")\n\n        Team statistics, aggregated to game level, accounting for teammates\n        &gt;&gt;&gt; scraper.prep_team_stats(level=\"game\", teammates=True)\n\n    \"\"\"\n    levels = self._team_stats_levels\n\n    if (\n        levels[\"level\"] != level\n        or levels[\"score\"] != score\n        or levels[\"strengths\"] != strengths\n        or levels[\"opposition\"] != opposition\n    ):\n        self._team_stats = pd.DataFrame()\n\n        new_values = {\"level\": level, \"score\": score, \"strengths\": strengths, \"opposition\": opposition}\n\n        self._team_stats_levels.update(new_values)\n\n    if self._team_stats.empty:\n        if not disable_progress_bar:\n            disable_progress_bar = self.disable_progress_bar\n\n        with ChickenProgressIndeterminate(disable=disable_progress_bar) as progress:\n            pbar_message = \"Prepping team stats data...\"\n            progress_task = progress.add_task(pbar_message, total=None, refresh=True)\n\n            progress.start_task(progress_task)\n            progress.update(progress_task, total=1, description=pbar_message, refresh=True)\n\n            self._prep_team_stats(level=level, score=score, strengths=strengths, opposition=opposition)\n\n            progress.update(\n                progress_task,\n                description=\"Finished prepping team stats data\",\n                completed=True,\n                advance=True,\n                refresh=True,\n            )\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper.rosters","title":"rosters  <code>property</code>","text":"<pre><code>rosters\n</code></pre> <p>Pandas Dataframe of players scraped from API &amp; HTML endpoints.</p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>team</code> <code>str</code> <p>Team name of the player, e.g., NSH</p> <code>team_name</code> <code>str</code> <p>Full team name, e.g., NASHVILLE PREDATORS</p> <code>team_venue</code> <code>str</code> <p>Whether team is home or away, e.g., AWAY</p> <code>player_name</code> <code>str</code> <p>Player's name, e.g., FILIP FORSBERG</p> <code>api_id</code> <code>int | None</code> <p>Player's NHL API ID, e.g., 8476887</p> <code>eh_id</code> <code>str</code> <p>Evolving Hockey ID for the player, e.g., FILIP.FORSBERG</p> <code>team_jersey</code> <code>str</code> <p>Team and jersey combination used for player identification, e.g., NSH9</p> <code>jersey</code> <code>int</code> <p>Player's jersey number, e.g., 9</p> <code>position</code> <code>str</code> <p>Player's position, e.g., L</p> <code>starter</code> <code>int</code> <p>Whether the player started the game, e.g., 0</p> <code>status</code> <code>str</code> <p>Whether player is active or scratched, e.g., ACTIVE</p> <code>headshot_url</code> <code>str | None</code> <p>URL to get player's headshot, e.g., https://assets.nhle.com/mugs/nhl/20192020/NSH/8476887.png</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Then you can access the property as a Pandas DataFrame</p> <pre><code>&gt;&gt;&gt; scraper.rosters\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper.changes","title":"changes  <code>property</code>","text":"<pre><code>changes\n</code></pre> <p>Pandas Dataframe of changes scraped from HTML shifts &amp; roster endpoints.</p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>event_team</code> <code>str</code> <p>Team that performed the action for the event, e.g., NSH</p> <code>event</code> <code>str</code> <p>Type of event that occurred, e.g., CHANGE</p> <code>event_type</code> <code>str</code> <p>Type of change that occurred, e.g., AWAY CHANGE</p> <code>description</code> <code>str | None</code> <p>Description of the event, e.g., PLAYERS ON: MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE / PLAYERS OFF: YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN</p> <code>period</code> <code>int</code> <p>Period number of the event, e.g., 3</p> <code>period_seconds</code> <code>int</code> <p>Time elapsed in the period, in seconds, e.g., 1178</p> <code>game_seconds</code> <code>int</code> <p>Time elapsed in the game, in seconds, e.g., 3578</p> <code>change_on_count</code> <code>int</code> <p>Number of players on, e.g., 4</p> <code>change_off_count</code> <code>int</code> <p>Number of players off, e.g., 4</p> <code>change_on</code> <code>str</code> <p>Names of players on, e.g., MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE</p> <code>change_on_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the players on, e.g., NSH14, NSH19, NSH64, NSH95</p> <code>change_on_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the players on, e.g., MATTIAS.EKHOLM, CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE</p> <code>change_on_positions</code> <code>str</code> <p>Positions of the players on, e.g., D, C, C, C</p> <code>change_off</code> <code>str</code> <p>Names of players off, e.g., YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN</p> <code>change_off_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the players off, e.g., NSH7, NSH9, NSH33, NSH92</p> <code>change_off_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the players off, e.g., YANNICK.WEBER, FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN</p> <code>change_off_positions</code> <code>str</code> <p>Positions of the players off, e.g., D, L, L, C</p> <code>change_on_forwards_count</code> <code>int</code> <p>Number of forwards on, e.g.,</p> <code>change_off_forwards_count</code> <code>int</code> <p>Number of forwards off, e.g., 3</p> <code>change_on_forwards</code> <code>str</code> <p>Names of forwards on, e.g., CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE</p> <code>change_on_forwards_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the forwards on, e.g., NSH19, NSH64, NSH95</p> <code>change_on_forwards_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the forwards on, e.g., CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE</p> <code>change_off_forwards</code> <code>str</code> <p>Names of forwards off, e.g., FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN</p> <code>change_off_forwards_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the forwards off, e.g., NSH9, NSH33, NSH92</p> <code>change_off_forwards_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the forwards off, e.g., FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN</p> <code>change_on_defense_count</code> <code>int</code> <p>Number of defense on, e.g., 1</p> <code>change_off_defense_count</code> <code>int</code> <p>Number of defense off, e.g., 1</p> <code>change_on_defense</code> <code>str</code> <p>Names of defense on, e.g., MATTIAS EKHOLM</p> <code>change_on_defense_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the defense on, e.g., NSH14</p> <code>change_on_defense_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the defense on, e.g., MATTIAS.EKHOLM</p> <code>change_off_defense</code> <code>str</code> <p>Names of defense off, e.g., YANNICK WEBER</p> <code>change_off_defense_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the defense off, e.g., NSH7</p> <code>change_off_defebse_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the defebse off, e.g., YANNICK.WEBER</p> <code>change_on_goalie_count</code> <code>int</code> <p>Number of goalies on, e.g., 0</p> <code>change_off_goalie_count</code> <code>int</code> <p>Number of goalies off, e.g., 0</p> <code>change_on_goalies</code> <code>str</code> <p>Names of goalies on, e.g., None</p> <code>change_on_goalies_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the goalies on, e.g., None</p> <code>change_on_goalies_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the goalies on, e.g., None</p> <code>change_off_goalies</code> <code>str</code> <p>Names of goalies off, e.g., None</p> <code>change_off_goalies_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the goalies off, e.g., None</p> <code>change_off_goalies_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the goalies off, e.g., None</p> <code>is_home</code> <code>int</code> <p>Dummy indicator whether change team is home, e.g., 0</p> <code>is_away</code> <code>int</code> <p>Dummy indicator whether change team is away, e.g., 1</p> <code>team_venue</code> <code>str</code> <p>Whether team is home or away, e.g., AWAY</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Then you can access the property as a Pandas DataFrame</p> <pre><code>&gt;&gt;&gt; scraper.changes\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper.shifts","title":"shifts  <code>property</code>","text":"<pre><code>shifts\n</code></pre> <p>Pandas Dataframe of shifts scraped from HTML endpoint.</p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>team</code> <code>str</code> <p>Team name of the player, e.g., NSH</p> <code>team_name</code> <code>str</code> <p>Full team name, e.g., NASHVILLE PREDATORS</p> <code>player_name</code> <code>str</code> <p>Player's name, e.g., FILIP FORSBERG</p> <code>eh_id</code> <code>str</code> <p>Evolving Hockey ID for the player, e.g., FILIP.FORSBERG</p> <code>team_jersey</code> <code>str</code> <p>Team and jersey combination used for player identification, e.g., NSH9</p> <code>position</code> <code>str</code> <p>Player's position, e.g., L</p> <code>jersey</code> <code>int</code> <p>Player's jersey number, e.g., 9</p> <code>shift_count</code> <code>int</code> <p>Shift number for that player, e.g., 1</p> <code>period</code> <code>int</code> <p>Period number for the shift, e.g., 1</p> <code>start_time</code> <code>str</code> <p>Time shift started, e.g., 0:00</p> <code>end_time</code> <code>str</code> <p>Time shift ended, e.g., 0:18</p> <code>duration</code> <code>str</code> <p>Length of shift, e.g, 00:18</p> <code>start_time_seconds</code> <code>int</code> <p>Time shift started in seconds, e.g., 0</p> <code>end_time_seconds</code> <code>int</code> <p>Time shift ended in seconds, e.g., 18</p> <code>duration_seconds</code> <code>int</code> <p>Length of shift in seconds, e.g., 18</p> <code>shift_start</code> <code>str</code> <p>Time the shift started as the original string, e.g., 0:00 / 20:00</p> <code>shift_end</code> <code>str</code> <p>Time the shift ended as the original string, e.g., 0:18 / 19:42</p> <code>goalie</code> <code>int</code> <p>Whether player is a goalie, e.g., 0</p> <code>is_home</code> <code>int</code> <p>Whether player is home e.g., 0</p> <code>is_away</code> <code>int</code> <p>Whether player is away, e.g., 1</p> <code>team_venue</code> <code>str</code> <p>Whether player is home or away, e.g., AWAY</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Then you can access the property as a Pandas DataFrame</p> <pre><code>&gt;&gt;&gt; scraper.shifts\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper.api_events","title":"api_events  <code>property</code>","text":"<pre><code>api_events\n</code></pre> <p>Pandas DataFrame of events scraped from API endpoint.</p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>event_idx</code> <code>int</code> <p>Index ID for event, e.g., 689</p> <code>period</code> <code>int</code> <p>Period number of the event, e.g., 3</p> <code>period_seconds</code> <code>int</code> <p>Time elapsed in the period, in seconds, e.g., 1178</p> <code>game_seconds</code> <code>int</code> <p>Time elapsed in the game, in seconds, e.g., 3578</p> <code>event_team</code> <code>str</code> <p>Team that performed the action for the event, e.g., NSH</p> <code>event</code> <code>str</code> <p>Type of event that occurred, e.g., GOAL</p> <code>event_code</code> <code>str</code> <p>Code to indicate type of event that occured, e.g., 505</p> <code>description</code> <code>str | None</code> <p>Description of the event, e.g., None</p> <code>coords_x</code> <code>int</code> <p>x-coordinates where the event occurred, e.g, -96</p> <code>coords_y</code> <code>int</code> <p>y-coordinates where the event occurred, e.g., 11</p> <code>zone</code> <code>str</code> <p>Zone where the event occurred, relative to the event team, e.g., D</p> <code>player_1</code> <code>str</code> <p>Player that performed the action, e.g., PEKKA RINNE</p> <code>player_1_eh_id</code> <code>str</code> <p>Evolving Hockey ID for player_1, e.g., PEKKA.RINNE</p> <code>player_1_position</code> <code>str</code> <p>Position player_1 plays, e.g., G</p> <code>player_1_type</code> <code>str</code> <p>Type of player, e.g., GOAL SCORER</p> <code>player_1_api_id</code> <code>int</code> <p>NHL API ID for player_1, e.g., 8471469</p> <code>player_1_team_jersey</code> <code>str</code> <p>Combination of team and jersey used for player identification purposes, e.g, NSH35</p> <code>player_2</code> <code>str | None</code> <p>Player that performed the action, e.g., None</p> <code>player_2_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for player_2, e.g., None</p> <code>player_2_position</code> <code>str | None</code> <p>Position player_2 plays, e.g., None</p> <code>player_2_type</code> <code>str | None</code> <p>Type of player, e.g., None</p> <code>player_2_api_id</code> <code>str | None</code> <p>NHL API ID for player_2, e.g., None</p> <code>player_2_team_jersey</code> <code>str | None</code> <p>Combination of team and jersey used for player identification purposes, e.g, None</p> <code>player_3</code> <code>str | None</code> <p>Player that performed the action, e.g., None</p> <code>player_3_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for player_3, e.g., None</p> <code>player_3_position</code> <code>str | None</code> <p>Position player_3 plays, e.g., None</p> <code>player_3_type</code> <code>str | None</code> <p>Type of player, e.g., None</p> <code>player_3_api_id</code> <code>str | None</code> <p>NHL API ID for player_3, e.g., None</p> <code>player_3_team_jersey</code> <code>str | None</code> <p>Combination of team and jersey used for player identification purposes, e.g, None</p> <code>strength</code> <code>int</code> <p>Code to indication strength state, e.g., 1560</p> <code>shot_type</code> <code>str | None</code> <p>Type of shot taken, if event is a shot, e.g., WRIST</p> <code>miss_reason</code> <code>str | None</code> <p>Reason shot missed, e.g., None</p> <code>opp_goalie</code> <code>str | None</code> <p>Opposing goalie, e.g., None</p> <code>opp_goalie_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for opposing goalie, e.g., None</p> <code>opp_goalie_api_id</code> <code>str | None</code> <p>NHL API ID for opposing goalie, e.g., None</p> <code>opp_goalie_team_jersey</code> <code>str | None</code> <p>Combination of team and jersey used for player identification purposes, e.g, None</p> <code>event_team_id</code> <code>int</code> <p>NHL ID for the event team, e.g., 18</p> <code>stoppage_reason</code> <code>str | None</code> <p>Reason the play was stopped, e.g., None</p> <code>stoppage_reason_secondary</code> <code>str | None</code> <p>Secondary reason play was stopped, e.g., None</p> <code>penalty_type</code> <code>str | None</code> <p>Type of penalty taken, e.g., None</p> <code>penalty_reason</code> <code>str | None</code> <p>Reason for the penalty, e.g., None</p> <code>penalty_duration</code> <code>int | None</code> <p>Duration of the penalty, e.g., None</p> <code>home_team_defending_side</code> <code>str</code> <p>Side of the ice the home team is defending, e.g., right</p> <code>version</code> <code>int</code> <p>Increases with simultaneous events, used for combining events in the scraper, e.g., 1</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Then you can access the property as a Pandas DataFrame</p> <pre><code>&gt;&gt;&gt; scraper.api_events\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper.api_rosters","title":"api_rosters  <code>property</code>","text":"<pre><code>api_rosters\n</code></pre> <p>Pandas Dataframe of players scraped from API endpoint.</p> <p>Returns:</p> Name Type Description <code>Returns</code> <code>DataFrame</code> <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>team</code> <code>str</code> <p>Team name of the player, e.g., NSH</p> <code>team_venue</code> <code>str</code> <p>Whether team is home or away, e.g., AWAY</p> <code>player_name</code> <code>str</code> <p>Player's name, e.g., FILIP FORSBERG</p> <code>eh_id</code> <code>str</code> <p>Evolving Hockey ID for the player, e.g., FILIP.FORSBERG</p> <code>api_id</code> <code>str</code> <p>NHL API ID for the player, e.g., 8476887</p> <code>team_jersey</code> <code>str</code> <p>Team and jersey combination used for player identification, e.g., NSH9</p> <code>position</code> <code>str</code> <p>Player's position, e.g., L</p> <code>first_name</code> <code>str</code> <p>Player's first name, e.g., FILIP</p> <code>last_name</code> <code>str</code> <p>Player's last name, e.g., FORSBERG</p> <code>headshot_url</code> <code>str</code> <p>URL to retreive player's headshot</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Then you can access the property as a Pandas DataFrame</p> <pre><code>&gt;&gt;&gt; scraper.api_rosters\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper.html_events","title":"html_events  <code>property</code>","text":"<pre><code>html_events\n</code></pre> <p>Pandas Dataframe of events scraped from HTML endpoint.</p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>event_idx</code> <code>int</code> <p>Index ID for event, e.g., 331</p> <code>period</code> <code>int</code> <p>Period number of the event, e.g., 3</p> <code>period_time</code> <code>str</code> <p>Time elapsed in the period, e.g., 19:38</p> <code>period_seconds</code> <code>int</code> <p>Time elapsed in the period, in seconds, e.g., 1178</p> <code>game_seconds</code> <code>int</code> <p>Time elapsed in the game, in seconds, e.g., 3578</p> <code>event_team</code> <code>str</code> <p>Team that performed the action for the event, e.g., NSH</p> <code>event</code> <code>str</code> <p>Type of event that occurred, e.g., GOAL</p> <code>description</code> <code>str | None</code> <p>Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.</p> <code>player_1</code> <code>str</code> <p>Player that performed the action, e.g., PEKKA RINNE</p> <code>player_1_eh_id</code> <code>str</code> <p>Evolving Hockey ID for player_1, e.g., PEKKA.RINNE</p> <code>player_1_position</code> <code>str</code> <p>Position player_1 plays, e.g., G</p> <code>player_2</code> <code>str | None</code> <p>Player that performed the action, e.g., None</p> <code>player_2_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for player_2, e.g., None</p> <code>player_2_position</code> <code>str | None</code> <p>Position player_2 plays, e.g., None</p> <code>player_3</code> <code>str | None</code> <p>Player that performed the action, e.g., None</p> <code>player_3_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for player_3, e.g., None</p> <code>player_3_position</code> <code>str | None</code> <p>Position player_3 plays, e.g., None</p> <code>zone</code> <code>str</code> <p>Zone where the event occurred, relative to the event team, e.g., DEF</p> <code>shot_type</code> <code>str | None</code> <p>Type of shot taken, if event is a shot, e.g., WRIST</p> <code>penalty_length</code> <code>str | None</code> <p>Duration of the penalty, e.g., None</p> <code>penalty</code> <code>str | None</code> <p>Reason for the penalty, e.g., None</p> <code>strength</code> <code>str | None</code> <p>Code to indication strength state, e.g., EV</p> <code>away_skaters</code> <code>str</code> <p>Away skaters on-ice, e.g., 13C, 19C, 64C, 14D, 59D, 35G</p> <code>home_skaters</code> <code>str</code> <p>Home skaters on-ice, e.g., 19C, 77C, 12R, 88R, 2D, 56D</p> <code>version</code> <code>int</code> <p>Increases with simultaneous events, used for combining events in the scraper, e.g., 1</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Then you can access the property as a Pandas DataFrame</p> <pre><code>&gt;&gt;&gt; scraper.html_events\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper.html_rosters","title":"html_rosters  <code>property</code>","text":"<pre><code>html_rosters\n</code></pre> <p>Pandas Dataframe of players scraped from HTML endpoint.</p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>team</code> <code>str</code> <p>Team name of the player, e.g., NSH</p> <code>team_name</code> <code>str</code> <p>Full team name, e.g., NASHVILLE PREDATORS</p> <code>team_venue</code> <code>str</code> <p>Whether team is home or away, e.g., AWAY</p> <code>player_name</code> <code>str</code> <p>Player's name, e.g., FILIP FORSBERG</p> <code>eh_id</code> <code>str</code> <p>Evolving Hockey ID for the player, e.g., FILIP.FORSBERG</p> <code>team_jersey</code> <code>str</code> <p>Team and jersey combination used for player identification, e.g., NSH9</p> <code>jersey</code> <code>int</code> <p>Player's jersey number, e.g., 9</p> <code>position</code> <code>str</code> <p>Player's position, e.g., L</p> <code>starter</code> <code>int</code> <p>Whether the player started the game, e.g., 0</p> <code>status</code> <code>str</code> <p>Whether player is active or scratched, e.g., ACTIVE</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Then you can access the property as a Pandas DataFrame</p> <pre><code>&gt;&gt;&gt; scraper.html_rosters\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper.ind_stats","title":"ind_stats  <code>property</code>","text":"<pre><code>ind_stats\n</code></pre> <p>Pandas Dataframe of individual stats aggregated from play-by-play data.</p> <p>Nested within <code>prep_stats</code> method.</p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 2023 for 2023-24 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2023020001</p> <code>game_date</code> <code>int</code> <p>Date game was played, e.g., 2023-10-10</p> <code>player</code> <code>str</code> <p>Player's name, e.g., FILIP FORSBERG</p> <code>eh_id</code> <code>str</code> <p>Evolving Hockey ID for the player, e.g., FILIP.FORSBERG</p> <code>api_id</code> <code>str</code> <p>NHL API ID for the player, e.g., 8476887</p> <code>position</code> <code>str</code> <p>Player's position, e.g., L</p> <code>team</code> <code>str</code> <p>Player's team, e.g., NSH</p> <code>opp_team</code> <code>str</code> <p>Opposing team, e.g., TBL</p> <code>strength_state</code> <code>str</code> <p>Strength state, e.g., 5v5</p> <code>period</code> <code>int</code> <p>Period, e.g., 3</p> <code>score_state</code> <code>str</code> <p>Score state, e.g., 2v1</p> <code>forwards</code> <code>str</code> <p>Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY</p> <code>forwards_eh_id</code> <code>str</code> <p>Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY</p> <code>forwards_api_id</code> <code>str</code> <p>Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158</p> <code>defense</code> <code>str</code> <p>Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER</p> <code>defense_eh_id</code> <code>str</code> <p>Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER</p> <code>defense_api_id</code> <code>str</code> <p>Defense teammates' NHL API IDs, e.g., 8474151, 8478851</p> <code>own_goalie</code> <code>str</code> <p>Own goalie, e.g., JUUSE SAROS</p> <code>own_goalie_eh_id</code> <code>str</code> <p>Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS</p> <code>own_goalie_api_id</code> <code>str</code> <p>Own goalie's NHL API ID, e.g., 8477424</p> <code>opp_forwards</code> <code>str</code> <p>Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS</p> <code>opp_forwards_eh_id</code> <code>str</code> <p>Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS</p> <code>opp_forwards_api_id</code> <code>str</code> <p>Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564</p> <code>opp_defense</code> <code>str</code> <p>Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN</p> <code>opp_defense_eh_id</code> <code>str</code> <p>Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN</p> <code>opp_defense_api_id</code> <code>str</code> <p>Opposing defense's NHL API IDs, e.g., 8480246, 8475167</p> <code>opp_goalie</code> <code>str</code> <p>Opposing goalie, e.g., JONAS JOHANSSON</p> <code>opp_goalie_eh_id</code> <code>str</code> <p>Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON</p> <code>opp_goalie_api_id</code> <code>str</code> <p>Opposing goalie's NHL API ID, e.g., 8477992</p> <code>g</code> <code>int</code> <p>Goals scored, e.g, 0</p> <code>ihdg</code> <code>int</code> <p>High-danger goals scored, e.g, 0</p> <code>a1</code> <code>int</code> <p>Primary assists, e.g, 0</p> <code>a2</code> <code>int</code> <p>Secondary assists, e.g, 0</p> <code>ixg</code> <code>float</code> <p>Individual xG for, e.g, 1.014336</p> <code>isf</code> <code>int</code> <p>Individual shots taken, e.g, 3</p> <code>ihdsf</code> <code>int</code> <p>High-danger shots taken, e.g, 3</p> <code>imsf</code> <code>int</code> <p>Individual missed shots, e.g, 0</p> <code>ihdm</code> <code>int</code> <p>High-danger missed shots, e.g, 0</p> <code>iff</code> <code>int</code> <p>Individual fenwick for, e.g., 3</p> <code>ihdf</code> <code>int</code> <p>High-danger fenwick for, e.g., 3</p> <code>isb</code> <code>int</code> <p>Shots taken that were blocked, e.g, 0</p> <code>icf</code> <code>int</code> <p>Individual corsi for, e.g., 3</p> <code>ibs</code> <code>int</code> <p>Individual shots blocked on defense, e.g, 0</p> <code>igive</code> <code>int</code> <p>Individual giveaways, e.g, 0</p> <code>itake</code> <code>int</code> <p>Individual takeaways, e.g, 0</p> <code>ihf</code> <code>int</code> <p>Individual hits for, e.g, 0</p> <code>iht</code> <code>int</code> <p>Individual hits taken, e.g, 0</p> <code>ifow</code> <code>int</code> <p>Individual faceoffs won, e.g, 0</p> <code>ifol</code> <code>int</code> <p>Individual faceoffs lost, e.g, 0</p> <code>iozfw</code> <code>int</code> <p>Individual faceoffs won in offensive zone, e.g, 0</p> <code>iozfl</code> <code>int</code> <p>Individual faceoffs lost in offensive zone, e.g, 0</p> <code>inzfw</code> <code>int</code> <p>Individual faceoffs won in neutral zone, e.g, 0</p> <code>inzfl</code> <code>int</code> <p>Individual faceoffs lost in neutral zone, e.g, 0</p> <code>idzfw</code> <code>int</code> <p>Individual faceoffs won in defensive zone, e.g, 0</p> <code>idzfl</code> <code>int</code> <p>Individual faceoffs lost in defensive zone, e.g, 0</p> <code>a1_xg</code> <code>float</code> <p>xG on primary assists, e.g, 0</p> <code>a2_xg</code> <code>float</code> <p>xG on secondary assists, e.g, 0</p> <code>ipent0</code> <code>int</code> <p>Individual penalty shots against, e.g, 0</p> <code>ipent2</code> <code>int</code> <p>Individual minor penalties taken, e.g, 0</p> <code>ipent4</code> <code>int</code> <p>Individual double minor penalties taken, e.g, 0</p> <code>ipent5</code> <code>int</code> <p>Individual major penalties taken, e.g, 0</p> <code>ipent10</code> <code>int</code> <p>Individual game misconduct penalties taken, e.g, 0</p> <code>ipend0</code> <code>int</code> <p>Individual penalty shots drawn, e.g, 0</p> <code>ipend2</code> <code>int</code> <p>Individual minor penalties taken, e.g, 0</p> <code>ipend4</code> <code>int</code> <p>Individual double minor penalties drawn, e.g, 0</p> <code>ipend5</code> <code>int</code> <p>Individual major penalties drawn, e.g, 0</p> <code>ipend10</code> <code>int</code> <p>Individual game misconduct penalties drawn, e.g, 0</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2023020001\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Then you can access the property as a Pandas DataFrame</p> <pre><code>&gt;&gt;&gt; scraper.ind_stats\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper.oi_stats","title":"oi_stats  <code>property</code>","text":"<pre><code>oi_stats\n</code></pre> <p>Pandas Dataframe of on-ice stats aggregated from play-by-play data.</p> <p>Nested within <code>prep_stats</code> method.</p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 2023 for 2023-24 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2023020001</p> <code>game_date</code> <code>int</code> <p>Date game was played, e.g., 2023-10-10</p> <code>player</code> <code>str</code> <p>Player's name, e.g., FILIP FORSBERG</p> <code>eh_id</code> <code>str</code> <p>Evolving Hockey ID for the player, e.g., FILIP.FORSBERG</p> <code>api_id</code> <code>str</code> <p>NHL API ID for the player, e.g., 8476887</p> <code>position</code> <code>str</code> <p>Player's position, e.g., L</p> <code>team</code> <code>str</code> <p>Player's team, e.g., NSH</p> <code>opp_team</code> <code>str</code> <p>Opposing team, e.g., TBL</p> <code>strength_state</code> <code>str</code> <p>Strength state, e.g., 5v5</p> <code>period</code> <code>int</code> <p>Period, e.g., 3</p> <code>score_state</code> <code>str</code> <p>Score state, e.g., 2v1</p> <code>forwards</code> <code>str</code> <p>Forward teammates, e.g., FILIP FORSBERG, JUUSO PARSSINEN, RYAN O'REILLY</p> <code>forwards_eh_id</code> <code>str</code> <p>Forward teammates' Evolving Hockey IDs, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY</p> <code>forwards_api_id</code> <code>str</code> <p>Forward teammates' NHL API IDs, e.g., 8476887, 8481704, 8475158</p> <code>defense</code> <code>str</code> <p>Defense teammates, e.g., RYAN MCDONAGH, ALEX CARRIER</p> <code>defense_eh_id</code> <code>str</code> <p>Defense teammates' Evolving Hockey IDs, e.g., RYAN.MCDONAGH, ALEX.CARRIER</p> <code>defense_api_id</code> <code>str</code> <p>Defense teammates' NHL API IDs, e.g., 8474151, 8478851</p> <code>own_goalie</code> <code>str</code> <p>Own goalie, e.g., JUUSE SAROS</p> <code>own_goalie_eh_id</code> <code>str</code> <p>Own goalie's Evolving Hockey ID, e.g., JUUSE.SAROS</p> <code>own_goalie_api_id</code> <code>str</code> <p>Own goalie's NHL API ID, e.g., 8477424</p> <code>opp_forwards</code> <code>str</code> <p>Opposing forwards, e.g, BRAYDEN POINT, NIKITA KUCHEROV, STEVEN STAMKOS</p> <code>opp_forwards_eh_id</code> <code>str</code> <p>Opposing forwards' Evolving Hockey IDs, e.g., BRAYDEN.POINT, NIKITA.KUCHEROV, STEVEN.STAMKOS</p> <code>opp_forwards_api_id</code> <code>str</code> <p>Opposing forwards' NHL API IDs, e.g., 8478010, 8476453, 8474564</p> <code>opp_defense</code> <code>str</code> <p>Opposing defense, e.g, NICK PERBIX, VICTOR HEDMAN</p> <code>opp_defense_eh_id</code> <code>str</code> <p>Opposing defense's Evolving Hockey IDs, e.g., NICK.PERBIX, VICTOR.HEDMAN</p> <code>opp_defense_api_id</code> <code>str</code> <p>Opposing defense's NHL API IDs, e.g., 8480246, 8475167</p> <code>opp_goalie</code> <code>str</code> <p>Opposing goalie, e.g., JONAS JOHANSSON</p> <code>opp_goalie_eh_id</code> <code>str</code> <p>Opposing goalie's Evolving Hockey ID, e.g, JONAS.JOHANSSON</p> <code>opp_goalie_api_id</code> <code>str</code> <p>Opposing goalie's NHL API ID, e.g., 8477992</p> <code>toi</code> <code>float</code> <p>Time on-ice, in minutes, e.g, 0.483333</p> <code>gf</code> <code>int</code> <p>Goals for (on-ice), e.g, 0</p> <code>hdgf</code> <code>int</code> <p>High-danger goals for (on-ice), e.g, 0</p> <code>ga</code> <code>int</code> <p>Goals against (on-ice), e.g, 0</p> <code>hdga</code> <code>int</code> <p>High-danger goals against (on-ice), e.g, 0</p> <code>xgf</code> <code>float</code> <p>xG for (on-ice), e.g., 1.258332</p> <code>xga</code> <code>float</code> <p>xG against (on-ice), e.g, 0.000000</p> <code>sf</code> <code>int</code> <p>Shots for (on-ice), e.g, 4</p> <code>sa</code> <code>int</code> <p>Shots against (on-ice), e.g, 0</p> <code>hdsf</code> <code>int</code> <p>High-danger shots for (on-ice), e.g, 3</p> <code>hdsa</code> <code>int</code> <p>High-danger shots against (on-ice), e.g, 0</p> <code>ff</code> <code>int</code> <p>Fenwick for (on-ice), e.g, 4</p> <code>fa</code> <code>int</code> <p>Fenwick against (on-ice), e.g, 0</p> <code>hdff</code> <code>int</code> <p>High-danger fenwick for (on-ice), e.g, 3</p> <code>hdfa</code> <code>int</code> <p>High-danger fenwick against (on-ice), e.g, 0</p> <code>cf</code> <code>int</code> <p>Corsi for (on-ice), e.g, 4</p> <code>ca</code> <code>int</code> <p>Corsi against (on-ice), e.g, 0</p> <code>bsf</code> <code>int</code> <p>Shots taken that were blocked (on-ice), e.g, 0</p> <code>bsa</code> <code>int</code> <p>Shots blocked (on-ice), e.g, 0</p> <code>msf</code> <code>int</code> <p>Missed shots taken (on-ice), e.g, 0</p> <code>msa</code> <code>int</code> <p>Missed shots against (on-ice), e.g, 0</p> <code>hdmsf</code> <code>int</code> <p>High-danger missed shots taken (on-ice), e.g, 0</p> <code>hdmsa</code> <code>int</code> <p>High-danger missed shots against (on-ice), e.g, 0</p> <code>teammate_block</code> <code>int</code> <p>Shots blocked by teammates (on-ice), e.g, 0</p> <code>hf</code> <code>int</code> <p>Hits for (on-ice), e.g, 0</p> <code>ht</code> <code>int</code> <p>Hits taken (on-ice), e.g, 0</p> <code>give</code> <code>int</code> <p>Giveaways (on-ice), e.g, 0</p> <code>take</code> <code>int</code> <p>Takeaways (on-ice), e.g, 0</p> <code>ozf</code> <code>int</code> <p>Offensive zone faceoffs (on-ice), e.g, 0</p> <code>nzf</code> <code>int</code> <p>Neutral zone faceoffs (on-ice), e.g, 1</p> <code>dzf</code> <code>int</code> <p>Defensive zone faceoffs (on-ice), e.g, 0</p> <code>fow</code> <code>int</code> <p>Faceoffs won (on-ice), e.g, 1</p> <code>fol</code> <code>int</code> <p>Faceoffs lost (on-ice), e.g, 0</p> <code>ozfw</code> <code>int</code> <p>Offensive zone faceoffs won (on-ice), e.g, 0</p> <code>ozfl</code> <code>int</code> <p>Offensive zone faceoffs lost (on-ice), e.g, 0</p> <code>nzfw</code> <code>int</code> <p>Neutral zone faceoffs won (on-ice), e.g, 1</p> <code>nzfl</code> <code>int</code> <p>Neutral zone faceoffs lost (on-ice), e.g, 0</p> <code>dzfw</code> <code>int</code> <p>Defensive zone faceoffs won (on-ice), e.g, 0</p> <code>dzfl</code> <code>int</code> <p>Defensive zone faceoffs lost (on-ice), e.g, 0</p> <code>pent0</code> <code>int</code> <p>Penalty shots allowed (on-ice), e.g, 0</p> <code>pent2</code> <code>int</code> <p>Minor penalties taken (on-ice), e.g, 0</p> <code>pent4</code> <code>int</code> <p>Double minor penalties taken (on-ice), e.g, 0</p> <code>pent5</code> <code>int</code> <p>Major penalties taken (on-ice), e.g, 0</p> <code>pent10</code> <code>int</code> <p>Game misconduct penalties taken (on-ice), e.g, 0</p> <code>pend0</code> <code>int</code> <p>Penalty shots drawn (on-ice), e.g, 0</p> <code>pend2</code> <code>int</code> <p>Minor penalties drawn (on-ice), e.g, 0</p> <code>pend4</code> <code>int</code> <p>Double minor penalties drawn (on-ice), e.g, 0</p> <code>pend5</code> <code>int</code> <p>Major penalties drawn (on-ice), e.g, 0</p> <code>pend10</code> <code>int</code> <p>Game misconduct penalties drawn (on-ice), e.g, 0</p> <code>ozs</code> <code>int</code> <p>Offensive zone starts, e.g, 0</p> <code>nzs</code> <code>int</code> <p>Neutral zone starts, e.g, 0</p> <code>dzs</code> <code>int</code> <p>Defenzive zone starts, e.g, 0</p> <code>otf</code> <code>int</code> <p>On-the-fly starts, e.g, 0</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2023020001\n&gt;&gt;&gt; scraper = Scraper(game_id)\n</code></pre> <p>Then you can access the property as a Pandas DataFrame</p> <pre><code>&gt;&gt;&gt; scraper.ind_stats\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Scraper.add_games","title":"add_games","text":"<pre><code>add_games(game_ids)\n</code></pre> <p>Method to add games to the Scraper.</p> <p>Parameters:</p> Name Type Description Default <code>game_ids</code> <code>list or int or float or str</code> <p>List-like object of or single 10-digit game identifier, e.g., 2023020001</p> required <p>Examples:</p> <p>Instantiate Scraper</p> <pre><code>&gt;&gt;&gt; game_ids = list(range(2023020001, 2023020011))\n&gt;&gt;&gt; scraper = Scraper(game_ids)\n</code></pre> <p>Scrape something</p> <pre><code>&gt;&gt;&gt; scraper.play_by_play\n</code></pre> <p>Add games</p> <pre><code>&gt;&gt;&gt; scraper.add_games(2023020011)\n</code></pre> <p>Scrape some more</p> <pre><code>&gt;&gt;&gt; scraper.play_by_play\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def add_games(self, game_ids: list[int | str | float] | int) -&gt; None:\n    \"\"\"Method to add games to the Scraper.\n\n    Parameters:\n        game_ids (list or int or float or str):\n            List-like object of or single 10-digit game identifier, e.g., 2023020001\n\n    Examples:\n        Instantiate Scraper\n        &gt;&gt;&gt; game_ids = list(range(2023020001, 2023020011))\n        &gt;&gt;&gt; scraper = Scraper(game_ids)\n\n        Scrape something\n        &gt;&gt;&gt; scraper.play_by_play\n\n        Add games\n        &gt;&gt;&gt; scraper.add_games(2023020011)\n\n        Scrape some more\n        &gt;&gt;&gt; scraper.play_by_play\n\n\n    \"\"\"\n    if isinstance(game_ids, str | int):  # Not covered by tests\n        game_ids = [game_ids]\n\n    game_ids = [int(x) for x in game_ids if x not in self.game_ids]  # Not covered by tests\n\n    self.game_ids.extend(game_ids)  # Not covered by tests\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Game","title":"Game","text":"<p>Class instance for scraping play-by-play and other data for individual games. Utilized within Scraper.</p> <p>Parameters:</p> Name Type Description Default <code>game_id</code> <code>int or float or str</code> <p>10-digit game identifier, e.g., 2023020001</p> required <code>requests_session</code> <code>Session</code> <p>If scraping multiple games, can provide single Session object to reduce stress on the API / HTML endpoints</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>game_id</code> <code>int</code> <p>10-digit game identifier, e.g., 2019020684</p> <code>game_state</code> <code>str</code> <p>Whether game is scheduled, started, finished, or official, e.g., OFF</p> <code>game_schedule_state</code> <code>str</code> <p>Whether the game has been scheduled, e.g., OK</p> <code>current_period</code> <code>int</code> <p>Current period, or if game has finished, then latest period, e.g., 3</p> <code>current_period_type</code> <code>str</code> <p>Whether period is regular or overtime, e.g., REG</p> <code>time_remaining</code> <code>str</code> <p>Amount of time remaining in the game, e.g., '00:00'</p> <code>seconds_remaining</code> <code>int</code> <p>Amounting of time remaining in the game in seconds, e.g., 0</p> <code>running</code> <code>bool</code> <p>Whether the game is currently running, e.g., False</p> <code>in_intermission</code> <code>bool</code> <p>Whether the game is currently in intermission, e.g., False</p> <code>season</code> <code>int</code> <p>Season in which the game was played, e.g., 20192020</p> <code>session</code> <code>str</code> <p>Whether the game is regular season, playoffs, or pre-season, e.g., R</p> <code>html_id</code> <code>str</code> <p>Game ID used for scraping HTML endpoints, e.g., 020684</p> <code>game_date</code> <code>str</code> <p>Date game was played, e.g., 2020-01-09</p> <code>start_time_et</code> <code>str</code> <p>Start time in Eastern timezone, regardless of venue, e.g., 20:30</p> <code>venue</code> <code>str</code> <p>Venue name, e.g., UNITED CENTER</p> <code>tv_broadcasts</code> <code>dict</code> <p>TV broadcasts information, e.g., {141: {'market': 'A', 'countryCode': 'US', 'network': 'FS-TN'}, ...}</p> <code>home_team</code> <code>dict</code> <p>Home team information, e.g., {'id': 16, 'name': 'BLACKHAWKS', 'abbrev': 'CHI', ...}</p> <code>away_team</code> <code>dict</code> <p>Away team information, e.g., {'id': 18, 'name': 'PREDATORS', 'abbrev': 'NSH', ...}</p> <code>api_endpoint</code> <code>str</code> <p>URL for accessing play-by-play and API rosters, e.g., 'https://api-web.nhle.com/v1/gamecenter/2019020684/play-by-play'</p> <code>api_endpoint_other</code> <code>str</code> <p>URL for accessing other game information, e.g., 'https://api-web.nhle.com/v1/gamecenter/2019020684/landing'</p> <code>html_rosters_endpoint</code> <code>str</code> <p>URL for accessing rosters from HTML endpoint, e.g., 'https://www.nhl.com/scores/htmlreports/20192020/RO020684.HTM'</p> <code>home_shifts_endpoint</code> <code>str</code> <p>URL for accessing home shifts from HTML endpoint, e.g., 'https://www.nhl.com/scores/htmlreports/20192020/TH020684.HTM'</p> <code>away_shifts_endpoint</code> <code>str</code> <p>URL for accessing away shifts from HTML endpoint, e.g., 'https://www.nhl.com/scores/htmlreports/20192020/TV020684.HTM'</p> <code>html_events_endpoint</code> <code>str</code> <p>URL for accessing events from HTML endpoint, e.g., 'https://www.nhl.com/scores/htmlreports/20192020/PL020684.HTM'</p> Note <p>You can return any of the properties as a Pandas DataFrame by appending '_df' to the property</p> <p>Examples:</p> <p>First, instantiate the Game object</p> <pre><code>&gt;&gt;&gt; game = Game(2023020001)\n</code></pre> <p>Scrape play-by-play information</p> <pre><code>&gt;&gt;&gt; pbp = game.play_by_play  # Returns the data as a list\n</code></pre> <p>Get play-by-play as a Pandas DataFrame</p> <pre><code>&gt;&gt;&gt; pbp_df = game.play_by_play_df  # Returns the data as a Pandas DataFrame\n</code></pre> <p>The object stores information from each component of the play-by-play data</p> <pre><code>&gt;&gt;&gt; shifts = game.shifts  # Returns a list of shifts\n&gt;&gt;&gt; rosters = game.rosters  # Returns a list of players from both API &amp; HTML endpoints\n&gt;&gt;&gt; changes = game.changes  # Returns a list of changes constructed from shifts &amp; roster data\n</code></pre> <p>Data can also be returned as a Pandas DataFrame, rather than a list</p> <pre><code>&gt;&gt;&gt; shifts_df = game.shifts_df  # Same as above, but as Pandas DataFrame\n</code></pre> <p>Access data from API or HTML endpoints, or both</p> <pre><code>&gt;&gt;&gt; api_events = game.api_events\n&gt;&gt;&gt; api_rosters = game.api_rosters\n&gt;&gt;&gt; html_events = game.html_events\n&gt;&gt;&gt; html_rosters = game.html_rosters\n</code></pre> <p>The Game object is fairly rich with information</p> <pre><code>&gt;&gt;&gt; game_date = game.game_date\n&gt;&gt;&gt; home_team = game.home_team\n&gt;&gt;&gt; game_state = game.game_state\n&gt;&gt;&gt; seconds_remaining = game.seconds_remaining\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>class Game:\n    \"\"\"Class instance for scraping play-by-play and other data for individual games. Utilized within Scraper.\n\n    Parameters:\n        game_id (int or float or str):\n            10-digit game identifier, e.g., 2023020001\n        requests_session (requests.Session, optional):\n            If scraping multiple games, can provide single Session object to reduce stress on the API / HTML endpoints\n\n    Attributes:\n        game_id (int):\n            10-digit game identifier, e.g., 2019020684\n        game_state (str):\n            Whether game is scheduled, started, finished, or official, e.g., OFF\n        game_schedule_state (str):\n            Whether the game has been scheduled, e.g., OK\n        current_period (int):\n            Current period, or if game has finished, then latest period, e.g., 3\n        current_period_type (str):\n            Whether period is regular or overtime, e.g., REG\n        time_remaining (str):\n            Amount of time remaining in the game, e.g., '00:00'\n        seconds_remaining (int):\n            Amounting of time remaining in the game in seconds, e.g., 0\n        running (bool):\n            Whether the game is currently running, e.g., False\n        in_intermission (bool):\n            Whether the game is currently in intermission, e.g., False\n        season (int):\n            Season in which the game was played, e.g., 20192020\n        session (str):\n            Whether the game is regular season, playoffs, or pre-season, e.g., R\n        html_id (str):\n            Game ID used for scraping HTML endpoints, e.g., 020684\n        game_date (str):\n            Date game was played, e.g., 2020-01-09\n        start_time_et (str):\n            Start time in Eastern timezone, regardless of venue, e.g., 20:30\n        venue (str):\n            Venue name, e.g., UNITED CENTER\n        tv_broadcasts (dict):\n            TV broadcasts information, e.g., {141: {'market': 'A', 'countryCode': 'US', 'network': 'FS-TN'}, ...}\n        home_team (dict):\n            Home team information, e.g., {'id': 16, 'name': 'BLACKHAWKS', 'abbrev': 'CHI', ...}\n        away_team (dict):\n            Away team information, e.g., {'id': 18, 'name': 'PREDATORS', 'abbrev': 'NSH', ...}\n        api_endpoint (str):\n            URL for accessing play-by-play and API rosters, e.g.,\n            'https://api-web.nhle.com/v1/gamecenter/2019020684/play-by-play'\n        api_endpoint_other (str):\n            URL for accessing other game information, e.g.,\n            'https://api-web.nhle.com/v1/gamecenter/2019020684/landing'\n        html_rosters_endpoint (str):\n            URL for accessing rosters from HTML endpoint, e.g.,\n            'https://www.nhl.com/scores/htmlreports/20192020/RO020684.HTM'\n        home_shifts_endpoint (str):\n            URL for accessing home shifts from HTML endpoint, e.g.,\n            'https://www.nhl.com/scores/htmlreports/20192020/TH020684.HTM'\n        away_shifts_endpoint (str):\n            URL for accessing away shifts from HTML endpoint, e.g.,\n            'https://www.nhl.com/scores/htmlreports/20192020/TV020684.HTM'\n        html_events_endpoint (str):\n            URL for accessing events from HTML endpoint, e.g.,\n            'https://www.nhl.com/scores/htmlreports/20192020/PL020684.HTM'\n\n    Note:\n        You can return any of the properties as a Pandas DataFrame by appending '_df' to the property\n\n    Examples:\n        First, instantiate the Game object\n        &gt;&gt;&gt; game = Game(2023020001)\n\n        Scrape play-by-play information\n        &gt;&gt;&gt; pbp = game.play_by_play  # Returns the data as a list\n\n        Get play-by-play as a Pandas DataFrame\n        &gt;&gt;&gt; pbp_df = game.play_by_play_df  # Returns the data as a Pandas DataFrame\n\n        The object stores information from each component of the play-by-play data\n        &gt;&gt;&gt; shifts = game.shifts  # Returns a list of shifts\n        &gt;&gt;&gt; rosters = game.rosters  # Returns a list of players from both API &amp; HTML endpoints\n        &gt;&gt;&gt; changes = game.changes  # Returns a list of changes constructed from shifts &amp; roster data\n\n        Data can also be returned as a Pandas DataFrame, rather than a list\n        &gt;&gt;&gt; shifts_df = game.shifts_df  # Same as above, but as Pandas DataFrame\n\n        Access data from API or HTML endpoints, or both\n        &gt;&gt;&gt; api_events = game.api_events\n        &gt;&gt;&gt; api_rosters = game.api_rosters\n        &gt;&gt;&gt; html_events = game.html_events\n        &gt;&gt;&gt; html_rosters = game.html_rosters\n\n        The Game object is fairly rich with information\n        &gt;&gt;&gt; game_date = game.game_date\n        &gt;&gt;&gt; home_team = game.home_team\n        &gt;&gt;&gt; game_state = game.game_state\n        &gt;&gt;&gt; seconds_remaining = game.seconds_remaining\n\n    \"\"\"\n\n    # TODO: Add play_by_play_ext information to documentation\n    # TODO: Check that documentation reflects roster changes\n\n    def __init__(self, game_id: str | int | float, requests_session: requests.Session | None = None):\n        \"\"\"Instantiates a Game object for a given game ID.\n\n        If nested, you can provide a requests.Session object to optimize speed.\n        \"\"\"\n        if str(game_id).isdigit() is False or len(str(game_id)) != 10:\n            raise Exception(f\"{game_id} IS NOT A VALID GAME ID\")\n\n        # Game ID\n        self.game_id: int = int(game_id)\n\n        # season\n        year = int(str(self.game_id)[0:4])\n        self.season: int = int(f\"{year}{year + 1}\")\n\n        # game session\n        game_sessions = {\"01\": \"PR\", \"02\": \"R\", \"03\": \"P\"}\n        game_session = str(self.game_id)[4:6]\n        self.session: str = game_sessions[game_session]\n\n        # HTML game ID\n        self.html_id: str = str(game_id)[4:]\n\n        # Live endpoint for many things\n        url = f\"https://api-web.nhle.com/v1/gamecenter/{self.game_id}/play-by-play\"\n        self.api_endpoint: str = url\n\n        # Alternative live endpoint\n        url = f\"https://api-web.nhle.com/v1/gamecenter/{self.game_id}/landing\"\n        self.api_endpoint_other = url\n\n        # HTML rosters endpoint\n        url = f\"https://www.nhl.com/scores/htmlreports/{self.season}/RO{self.html_id}.HTM\"\n        self.html_rosters_endpoint: str = url\n\n        # shifts endpoints\n        home_url = f\"https://www.nhl.com/scores/htmlreports/{self.season}/TH{self.html_id}.HTM\"\n        self.home_shifts_endpoint: str = home_url\n\n        away_url = f\"https://www.nhl.com/scores/htmlreports/{self.season}/TV{self.html_id}.HTM\"\n        self.away_shifts_endpoint: str = away_url\n\n        # HTML events endpoint\n        url = f\"https://www.nhl.com/scores/htmlreports/{self.season}/PL{self.html_id}.HTM\"\n        self.html_events_endpoint: str = url\n\n        # requests session\n        if requests_session is None:\n            self._requests_session = ChickenSession()\n        else:\n            self._requests_session = requests_session\n\n        # Downloading information from NHL api\n        response: dict = self._requests_session.get(self.api_endpoint).json()\n        self.api_response: dict = response\n\n        # Away team information\n        away_team = response[\"awayTeam\"]\n\n        if away_team[\"abbrev\"] == \"PHX\":\n            away_team[\"abbrev\"] = \"ARI\"\n\n        self.away_team = {\n            \"id\": away_team[\"id\"],\n            \"name\": away_team[\"commonName\"][\"default\"].upper(),\n            \"abbrev\": away_team[\"abbrev\"],\n            \"logo\": away_team[\"logo\"],\n        }\n\n        # Home team information\n        home_team = response[\"homeTeam\"]\n\n        if home_team[\"abbrev\"] == \"PHX\":\n            home_team[\"abbrev\"] = \"ARI\"\n\n        self.home_team = {\n            \"id\": home_team[\"id\"],\n            \"name\": home_team[\"commonName\"][\"default\"].upper(),\n            \"abbrev\": home_team[\"abbrev\"],\n            \"logo\": home_team[\"logo\"],\n        }\n\n        # Venue information\n        self.venue: str = response[\"venue\"][\"default\"].upper()\n\n        est = pytz.timezone(\"US/Eastern\")\n\n        if \"Z\" in response[\"startTimeUTC\"]:\n            response[\"startTimeUTC\"] = response[\"startTimeUTC\"][:-1] + \"+00:00\"\n\n        self._start_time_utc_dt: dt = dt.fromisoformat(response[\"startTimeUTC\"]).astimezone(UTC)\n        self._start_time_et_dt: dt = self._start_time_utc_dt.astimezone(est)\n\n        # Game date and start time as strings\n        self.game_date = self._start_time_et_dt.strftime(\"%Y-%m-%d\")\n        self.start_time_et = self._start_time_et_dt.strftime(\"%H:%M\")  # Consider start time local?\n\n        # Broadcast information\n        broadcasts = {x[\"id\"]: {k: v for k, v in x.items() if k != \"id\"} for x in response[\"tvBroadcasts\"]}\n        self.tv_broadcasts = broadcasts\n\n        # Game status\n        self.game_state = response[\"gameState\"]\n\n        # Whether game is finalized in the schedule or not\n        self.game_schedule_state = response[\"gameScheduleState\"]\n\n        # Clock information\n        clock = response[\"clock\"]\n\n        self.time_remaining = clock.get(\"timeRemaining\")\n        self.seconds_remaining = clock.get(\"secondsRemaining\")\n        self.running = clock[\"running\"]\n        self.in_intermission = clock[\"inIntermission\"]\n\n        # Period information\n        if response[\"gameState\"] != \"FUT\":\n            self.current_period = response[\"periodDescriptor\"][\"number\"]\n            self.current_period_type = response[\"periodDescriptor\"][\"periodType\"]\n\n        self._es_model = es_model\n        self._pp_model = pp_model\n        self._sh_model = sh_model\n        self._ef_model = ef_model\n        self._ea_model = ea_model\n\n        # Setting up placeholders for data storage\n        self._api_events = None\n        self._api_rosters = None\n        self._changes = None\n        self._html_events = None\n        self._html_rosters = None\n        self._play_by_play = None\n        self._play_by_play_ext = None\n        self._pred_goal = None\n        self._rosters = None\n        self._shifts = None\n\n        self._xg_fields = {}\n\n    def _munge_api_events(self) -&gt; None:\n        \"\"\"Method to munge events from API endpoint. Updates self._api_events.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Game object\n            &gt;&gt;&gt; game = Game(2023020001)\n\n            Before cleaning the data, game._api_events is None\n            &gt;&gt;&gt; game._api_events  # Returns None\n\n            However, you can access the raw events from the API feed\n            &gt;&gt;&gt; game.api_response[\"plays\"]\n\n            Once you've cleaned the data using `_munge_api_events`, it's then available from\n            game._api_events, or game.api_events, which is the preferred method of accessing the data\n\n            &gt;&gt;&gt; game._munge_api_events()  # Cleans the raw data from game.api_response['plays']\n            &gt;&gt;&gt; game._api_events  # Returns clean API events data\n            &gt;&gt;&gt; game.api_events  # Also returns clean API events data, preferred method of accessing\n        \"\"\"\n        self._api_events = [x for x in self.api_response[\"plays\"]]\n\n        rosters = {x[\"api_id\"]: x for x in self._api_rosters}\n\n        teams_dict = {self.home_team[\"id\"]: self.home_team[\"abbrev\"], self.away_team[\"id\"]: self.away_team[\"abbrev\"]}\n\n        event_list = []\n\n        for event in self._api_events:\n            time_split = event[\"timeInPeriod\"].split(\":\")\n\n            period = int(event[\"periodDescriptor\"][\"number\"])\n            period_type = event[\"periodDescriptor\"][\"periodType\"]\n            period_seconds = (int(time_split[0]) * 60) + int(time_split[1])\n\n            if self.session == \"R\" and period == 5:\n                game_seconds = 3900\n\n            else:\n                game_seconds = ((period - 1) * 1200) + period_seconds\n\n            event_info = {}\n\n            new_values = {\n                \"season\": self.season,\n                \"session\": self.session,\n                \"game_id\": self.game_id,\n                \"event_idx\": event[\"sortOrder\"],\n                \"period\": period,\n                \"period_type\": period_type,\n                \"period_seconds\": period_seconds,\n                \"game_seconds\": game_seconds,\n                \"event\": event[\"typeDescKey\"],\n                \"event_code\": event[\"typeCode\"],\n                \"strength\": event.get(\"situationCode\"),\n                \"home_team_defending_side\": event.get(\"homeTeamDefendingSide\"),\n            }\n\n            event_info.update(new_values)\n\n            if event_info[\"event\"] == \"period-start\":\n                event_info[\"event\"] = \"PSTR\"\n\n            if event_info[\"event\"] == \"period-end\":\n                event_info[\"event\"] = \"PEND\"\n\n            if event_info[\"event\"] == \"game-end\":\n                event_info[\"event\"] = \"GEND\"\n\n            if event_info[\"event\"] == \"shootout-complete\":\n                event_info[\"event\"] = \"SOC\"\n\n            if event.get(\"details\"):\n                new_values = {\n                    \"event_team\": teams_dict.get(event[\"details\"].get(\"eventOwnerTeamId\")),\n                    \"coords_x\": event[\"details\"].get(\"xCoord\"),\n                    \"coords_y\": event[\"details\"].get(\"yCoord\"),\n                    \"zone\": event[\"details\"].get(\"zoneCode\"),\n                    \"event_team_id\": event[\"details\"].get(\"eventOwnerTeamId\"),\n                }\n\n                event_info.update(new_values)\n\n                if event_info[\"event\"] == \"faceoff\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"winningPlayerId\"]\n                    event_info[\"player_1_type\"] = \"WINNER\"\n                    event_info[\"player_2_api_id\"] = event[\"details\"][\"losingPlayerId\"]\n                    event_info[\"player_2_type\"] = \"LOSER\"\n\n                    event_info[\"event\"] = \"FAC\"\n\n                if event_info[\"event\"] == \"stoppage\":\n                    event_info[\"stoppage_reason\"] = event[\"details\"][\"reason\"].replace(\"-\", \" \").upper()\n                    event_info[\"stoppage_reason_secondary\"] = (\n                        event[\"details\"].get(\"secondaryReason\", \"\").replace(\"-\", \" \").upper()\n                    )\n\n                    event_info[\"event\"] = \"STOP\"\n\n                if event_info[\"event\"] == \"hit\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"hittingPlayerId\"]\n                    event_info[\"player_1_type\"] = \"HITTER\"\n                    event_info[\"player_2_api_id\"] = event[\"details\"][\"hitteePlayerId\"]\n                    event_info[\"player_2_type\"] = \"HITTEE\"\n\n                    event_info[\"event\"] = \"HIT\"\n\n                if event_info[\"event\"] == \"giveaway\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"playerId\"]\n                    event_info[\"player_1_type\"] = \"GIVER\"\n\n                    event_info[\"event\"] = \"GIVE\"\n\n                if event_info[\"event\"] == \"shot-on-goal\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"shootingPlayerId\"]\n                    event_info[\"player_1_type\"] = \"SHOOTER\"\n                    event_info[\"opp_goalie_api_id\"] = event[\"details\"].get(\"goalieInNetId\", \"EMPTY_NET\")\n                    event_info[\"shot_type\"] = event[\"details\"].get(\"shotType\", \"WRIST\").upper()\n\n                    event_info[\"event\"] = \"SHOT\"\n\n                if event_info[\"event\"] == \"takeaway\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"playerId\"]\n                    event_info[\"player_1_type\"] = \"TAKER\"\n\n                    event_info[\"event\"] = \"TAKE\"\n\n                if event_info[\"event\"] == \"missed-shot\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"shootingPlayerId\"]\n                    event_info[\"player_1_type\"] = \"SHOOTER\"\n                    event_info[\"opp_goalie_api_id\"] = event[\"details\"].get(\"goalieInNetId\", \"EMPTY NET\")\n                    event_info[\"shot_type\"] = event[\"details\"].get(\"shotType\", \"WRIST\").upper()\n                    event_info[\"miss_reason\"] = event[\"details\"].get(\"reason\", \"\").replace(\"-\", \" \").upper()\n\n                    event_info[\"event\"] = \"MISS\"\n\n                if event_info[\"event\"] == \"blocked-shot\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"].get(\"blockingPlayerId\")\n                    event_info[\"player_1_type\"] = \"BLOCKER\"\n\n                    if event_info[\"player_1_api_id\"] is None:  # Not covered by tests\n                        event_info[\"event_team\"] = \"OTHER\"\n                        event_info[\"player_1\"] = \"REFEREE\"\n                        event_info[\"player_1_api_id\"] = None\n                        event_info[\"player_1_eh_id\"] = \"REFEREE\"\n\n                    event_info[\"player_2_api_id\"] = event[\"details\"][\"shootingPlayerId\"]\n                    event_info[\"player_2_type\"] = \"SHOOTER\"\n\n                    event_info[\"event\"] = \"BLOCK\"\n\n                if event_info[\"event\"] == \"goal\":\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"scoringPlayerId\"]\n                    event_info[\"player_1_type\"] = \"GOAL SCORER\"\n                    event_info[\"player_2_api_id\"] = event[\"details\"].get(\"assist1PlayerId\")\n\n                    if event_info[\"player_2_api_id\"] is not None:\n                        event_info[\"player_2_type\"] = \"PRIMARY ASSIST\"\n\n                    event_info[\"player_3_api_id\"] = event[\"details\"].get(\"assist2PlayerId\")\n\n                    if event_info[\"player_3_api_id\"] is not None:\n                        event_info[\"player_3_type\"] = \"SECONDARY ASSIST\"\n\n                    event_info[\"opp_goalie_api_id\"] = event[\"details\"].get(\"goalieInNetId\", \"EMPTY NET\")\n                    event_info[\"shot_type\"] = event[\"details\"].get(\"shotType\", \"WRIST\").upper()\n\n                    event_info[\"event\"] = \"GOAL\"\n\n                if event_info[\"event\"] == \"penalty\":\n                    event_info[\"penalty_type\"] = event[\"details\"][\"typeCode\"]\n                    event_info[\"penalty_reason\"] = event[\"details\"][\"descKey\"].upper()\n                    event_info[\"penalty_duration\"] = event[\"details\"].get(\"duration\")\n\n                    if (\n                        (event_info[\"penalty_type\"] == \"BEN\" and event[\"details\"].get(\"committedByPlayerId\") is None)\n                        or (\n                            \"HEAD-COACH\" in event_info[\"penalty_reason\"] or \"TEAM-STAFF\" in event_info[\"penalty_reason\"]\n                        )\n                        and event[\"details\"].get(\"committedByPlayerId\") is None\n                    ):\n                        event_info[\"player_1\"] = \"BENCH\"\n                        event_info[\"player_1_api_id\"] = None\n                        event_info[\"player_1_eh_id\"] = \"BENCH\"\n                        event_info[\"player_1_type\"] = \"COMMITTED BY\"\n                        event_info[\"player_2_api_id\"] = event[\"details\"].get(\"servedByPlayerId\")\n                        event_info[\"player_2_type\"] = \"SERVED BY\"\n\n                    else:\n                        event_info[\"player_1_api_id\"] = event[\"details\"].get(\"committedByPlayerId\")\n                        event_info[\"player_1_type\"] = \"COMMITTED BY\"\n                        event_info[\"player_2_api_id\"] = event[\"details\"].get(\"drawnByPlayerId\")\n                        event_info[\"player_2_type\"] = \"DRAWN BY\"\n\n                        if event_info[\"player_2_api_id\"] is None:\n                            event_info[\"player_2_api_id\"] = event[\"details\"].get(\"servedByPlayerId\")\n                            event_info[\"player_2_type\"] = \"SERVED BY\"\n\n                        else:\n                            event_info[\"player_3_api_id\"] = event[\"details\"].get(\"servedByPlayerId\")\n                            event_info[\"player_3_type\"] = \"SERVED BY\"\n\n                    event_info[\"event\"] = \"PENL\"\n\n                if event_info[\"event\"] == \"delayed-penalty\":\n                    event_info[\"event\"] = \"DELPEN\"\n\n                if event_info[\"event\"] == \"failed-shot-attempt\":  # Not covered by tests\n                    event_info[\"player_1_api_id\"] = event[\"details\"][\"shootingPlayerId\"]\n                    event_info[\"player_1_type\"] = \"SHOOTER\"\n                    event_info[\"opp_goalie_api_id\"] = event[\"details\"].get(\"goalieInNetId\", \"EMPTY NET\")\n\n                    event_info[\"event\"] = \"MISS\"\n\n            event_info = api_events_fixes(self.game_id, event_info)\n\n            player_cols = [\"player_1_api_id\", \"player_2_api_id\", \"player_3_api_id\", \"opp_goalie_api_id\"]\n\n            for player_col in player_cols:\n                if (\n                    player_col not in event_info\n                    or event_info[player_col] is None\n                    or event_info[player_col] == \"BENCH\"\n                    or event_info[player_col] == \"REFEREE\"\n                ):\n                    continue\n\n                else:\n                    player_info = rosters.get(event_info[player_col], {})\n\n                    new_cols = {\n                        player_col.replace(\"_api_id\", \"\"): player_info.get(\"player_name\"),\n                        player_col.replace(\"_api_id\", \"_eh_id\"): player_info.get(\"eh_id\"),\n                        player_col.replace(\"_api_id\", \"_team_jersey\"): player_info.get(\"team_jersey\"),\n                        player_col.replace(\"_api_id\", \"_position\"): player_info.get(\"position\"),\n                    }\n\n                    event_info.update(new_cols)\n\n            if event_info[\"event\"] == \"BLOCK\":\n                player_1_team = event_info.get(\"player_1_team_jersey\")\n\n                if player_1_team:\n                    player_1_team = player_1_team[:3]\n                    event_info[\"event_team\"] = player_1_team\n\n            event_list.append(event_info)\n\n        final_events = []\n\n        for event in event_list:\n            other_events = [\n                x\n                for x in event_list\n                # if x != event\n                if x[\"event\"] == event[\"event\"]\n                and x[\"game_seconds\"] == event[\"game_seconds\"]\n                and x.get(\"player_1\") is not None\n                and x[\"period\"] == event[\"period\"]\n                and x.get(\"player_1_api_id\") == event.get(\"player_1_api_id\")\n            ]\n\n            event[\"version\"] = 1\n\n            if len(other_events) &gt; 0:\n                for idx, _other_event in enumerate(other_events):\n                    if event == other_events[0]:\n                        continue\n\n                    version = idx + 1\n                    event[\"version\"] = version\n\n            final_events.append(APIEvent.model_validate(event).model_dump())\n\n        self._api_events = final_events\n\n    @property\n    def api_events(self) -&gt; list:\n        \"\"\"List of events scraped from API endpoint. Each event is a dictionary with the below keys.\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).api_events_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_idx (int):\n                Index ID for event, e.g., 689\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            event_code (str):\n                Code to indicate type of event that occured, e.g., 505\n            description (str | None):\n                Description of the event, e.g., None\n            coords_x (int):\n                x-coordinates where the event occurred, e.g, -96\n            coords_y (int):\n                y-coordinates where the event occurred, e.g., 11\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., D\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_1_type (str):\n                Type of player, e.g., GOAL SCORER\n            player_1_api_id (int):\n                NHL API ID for player_1, e.g., 8471469\n            player_1_team_jersey (str):\n                Combination of team and jersey used for player identification purposes, e.g, NSH35\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_2_type (str | None):\n                Type of player, e.g., None\n            player_2_api_id (str | None):\n                NHL API ID for player_2, e.g., None\n            player_2_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            player_3_type (str | None):\n                Type of player, e.g., None\n            player_3_api_id (str | None):\n                NHL API ID for player_3, e.g., None\n            player_3_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            strength (int):\n                Code to indication strength state, e.g., 1560\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            miss_reason (str | None):\n                Reason shot missed, e.g., None\n            opp_goalie (str | None):\n                Opposing goalie, e.g., None\n            opp_goalie_eh_id (str | None):\n                Evolving Hockey ID for opposing goalie, e.g., None\n            opp_goalie_api_id (str | None):\n                NHL API ID for opposing goalie, e.g., None\n            opp_goalie_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            event_team_id (int):\n                NHL ID for the event team, e.g., 18\n            stoppage_reason (str | None):\n                Reason the play was stopped, e.g., None\n            stoppage_reason_secondary (str | None):\n                Secondary reason play was stopped, e.g., None\n            penalty_type (str | None):\n                Type of penalty taken, e.g., None\n            penalty_reason (str | None):\n                Reason for the penalty, e.g., None\n            penalty_duration (int | None):\n                Duration of the penalty, e.g., None\n            home_team_defending_side (str):\n                Side of the ice the home team is defending, e.g., right\n            version (int):\n                Increases with simultaneous events, used for combining events in the scraper, e.g., 1\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.api_events\n\n        \"\"\"\n        if self._api_events is None:\n            if self._api_rosters is None:\n                self._munge_api_rosters()\n\n            self._munge_api_events()\n\n        return self._api_events\n\n    @property\n    def api_events_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of events scraped from API endpoint.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_idx (int):\n                Index ID for event, e.g., 689\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            event_code (str):\n                Code to indicate type of event that occured, e.g., 505\n            description (str | None):\n                Description of the event, e.g., None\n            coords_x (int):\n                x-coordinates where the event occurred, e.g, -96\n            coords_y (int):\n                y-coordinates where the event occurred, e.g., 11\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., D\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_1_type (str):\n                Type of player, e.g., GOAL SCORER\n            player_1_api_id (int):\n                NHL API ID for player_1, e.g., 8471469\n            player_1_team_jersey (str):\n                Combination of team and jersey used for player identification purposes, e.g, NSH35\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_2_type (str | None):\n                Type of player, e.g., None\n            player_2_api_id (str | None):\n                NHL API ID for player_2, e.g., None\n            player_2_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            player_3_type (str | None):\n                Type of player, e.g., None\n            player_3_api_id (str | None):\n                NHL API ID for player_3, e.g., None\n            player_3_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            strength (int):\n                Code to indication strength state, e.g., 1560\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            miss_reason (str | None):\n                Reason shot missed, e.g., None\n            opp_goalie (str | None):\n                Opposing goalie, e.g., None\n            opp_goalie_eh_id (str | None):\n                Evolving Hockey ID for opposing goalie, e.g., None\n            opp_goalie_api_id (str | None):\n                NHL API ID for opposing goalie, e.g., None\n            opp_goalie_team_jersey (str | None):\n                Combination of team and jersey used for player identification purposes, e.g, None\n            event_team_id (int):\n                NHL ID for the event team, e.g., 18\n            stoppage_reason (str | None):\n                Reason the play was stopped, e.g., None\n            stoppage_reason_secondary (str | None):\n                Secondary reason play was stopped, e.g., None\n            penalty_type (str | None):\n                Type of penalty taken, e.g., None\n            penalty_reason (str | None):\n                Reason for the penalty, e.g., None\n            penalty_duration (int | None):\n                Duration of the penalty, e.g., None\n            home_team_defending_side (str):\n                Side of the ice the home team is defending, e.g., right\n            version (int):\n                Increases with simultaneous events, used for combining events in the scraper, e.g., 1\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.api_events_df\n        \"\"\"\n        if self._api_events is None:\n            if self._api_rosters is None:\n                self._munge_api_rosters()\n\n            self._munge_api_events()\n\n        return pd.DataFrame(self._api_events)\n\n    def _munge_api_rosters(self) -&gt; None:\n        \"\"\"Method to munge list of players from API  endpoint. Updates self._api_rosters.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Game object\n            &gt;&gt;&gt; game = Game(2023020001)\n\n            Before cleaning the data, game._api_rosters is None\n            &gt;&gt;&gt; game._rosters  # Returns None\n\n            However, you can access the raw roster data from the API feed\n            &gt;&gt;&gt; game.api_response[\"rosterSpots\"]\n\n            Once you've cleaned the data using `_munge_api_rosters`, it's then available from\n            game._api_rosters, or game.api_rosters, which is the preferred method of accesing the data\n\n            &gt;&gt;&gt; game._munge_api_rosters()  # Cleans the raw data from game.api_response['plays']\n            &gt;&gt;&gt; game._api_rosters  # Returns clean API rosters data\n            &gt;&gt;&gt; game.api_rosters  # Also returns clean API rosters data, preferred method of accessing\n        \"\"\"\n        players = []\n\n        team_info = {\n            self.home_team[\"id\"]: {\"venue\": \"HOME\", \"team\": self.home_team[\"abbrev\"]},\n            self.away_team[\"id\"]: {\"venue\": \"AWAY\", \"team\": self.away_team[\"abbrev\"]},\n        }\n\n        for player in self.api_response[\"rosterSpots\"]:\n            first_name = unidecode(player[\"firstName\"][\"default\"]).encode(\"latin\").decode(\"utf=8\").upper().strip()\n\n            last_name = unidecode(player[\"lastName\"][\"default\"]).encode(\"latin\").decode(\"utf=8\").upper().strip()\n\n            player_name = first_name + \" \" + last_name\n\n            player_name = (\n                player_name.replace(\"ALEXANDRE\", \"ALEX\").replace(\"ALEXANDER\", \"ALEX\").replace(\"CHRISTOPHER\", \"CHRIS\")\n            )\n\n            player_name = correct_names_dict.get(player_name, player_name)\n\n            eh_id = (player_name.split(\" \", 1)[0] + \".\" + player_name.split(\" \", 1)[1]).replace(\"..\", \".\")\n\n            eh_id = correct_api_names_dict.get(player[\"playerId\"], eh_id)\n\n            team = team_info[player[\"teamId\"]]\n\n            player_info = {\n                \"season\": self.season,\n                \"session\": self.session,\n                \"game_id\": self.game_id,\n                \"team\": team[\"team\"],\n                \"team_venue\": team[\"venue\"],\n                \"player_name\": player_name,\n                \"first_name\": first_name,\n                \"last_name\": last_name,\n                \"api_id\": player[\"playerId\"],\n                \"eh_id\": correct_api_names_dict.get(player[\"playerId\"], eh_id),\n                \"team_jersey\": team[\"team\"] + str(player[\"sweaterNumber\"]),\n                \"jersey\": player[\"sweaterNumber\"],\n                \"position\": player[\"positionCode\"],\n                \"headshot_url\": player.get(\"headshot\", \"\"),\n            }\n\n            players.append(APIRosterPlayer.model_validate(player_info).model_dump())\n\n        if self.game_id == 2013020971:\n            new_player = {\n                \"season\": self.season,\n                \"session\": self.session,\n                \"game_id\": self.game_id,\n                \"team\": \"CBJ\",\n                \"team_venue\": \"AWAY\",\n                \"player_name\": \"NATHAN HORTON\",\n                \"first_name\": \"NATHAN\",\n                \"last_name\": \"HORTON\",\n                \"api_id\": 8470596,\n                \"eh_id\": \"NATHAN.HORTON\",\n                \"team_jersey\": \"CBJ8\",\n                \"jersey\": 8,\n                \"position\": \"R\",\n                \"headshot_url\": \"\",\n            }\n\n            players.append(APIRosterPlayer.model_validate(new_player).model_dump())\n\n        players = sorted(players, key=lambda k: (k[\"team_venue\"], k[\"player_name\"]))\n\n        self._api_rosters = players\n\n    @property\n    def api_rosters(self) -&gt; list:\n        \"\"\"List of players scraped from API endpoint. Returns a dictionary of players with the below keys.\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).api_rosters_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            api_id (str):\n                NHL API ID for the player, e.g., 8476887\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            position (str):\n                Player's position, e.g., L\n            first_name (str):\n                Player's first name, e.g., FILIP\n            last_name (str):\n                Player's last name, e.g., FORSBERG\n            headshot_url (str):\n                URL to retreive player's headshot\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.api_rosters\n        \"\"\"\n        if self._api_rosters is None:\n            self._munge_api_rosters()\n\n        return self._api_rosters\n\n    @property\n    def api_rosters_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of players scraped from API endpoint.\n\n        Returns:\n            Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            api_id (str):\n                NHL API ID for the player, e.g., 8476887\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            position (str):\n                Player's position, e.g., L\n            first_name (str):\n                Player's first name, e.g., FILIP\n            last_name (str):\n                Player's last name, e.g., FORSBERG\n            headshot_url (str):\n                URL to retreive player's headshot\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.api_rosters_df\n        \"\"\"\n        if self._api_rosters is None:\n            self._munge_api_rosters()\n\n        return pd.DataFrame(self._api_rosters)\n\n    def _munge_changes(self) -&gt; None:\n        \"\"\"Method to munge list of changes from HTML shifts &amp; rosters endpoints. Updates self._changes.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Game object\n            &gt;&gt;&gt; game = Game(2023020001)\n\n            Before cleaning the data, game._changes is None\n            &gt;&gt;&gt; game._changes  # Returns None\n\n            Once you scrape the shifts data, you can access it in raw form, prior to any processing\n            &gt;&gt;&gt; game._scrape_shifts()  # Scrapes raw data and adds it to game._shifts\n            &gt;&gt;&gt; game.shifts  # Returns cleaned shifts data\n            &gt;&gt;&gt; game.shifts_df  # Same, but a Pandas DataFrame\n\n            You then have to manually clean the data to convert it to changes\n            &gt;&gt;&gt; game._munge_shifts()  # Necessary before munging the changes\n            &gt;&gt;&gt; game._munge_changes()\n            &gt;&gt;&gt; game.changes  # Returns cleaned changes data\n            &gt;&gt;&gt; game.changes_df  # Same but a Pandas DataFrame\n        \"\"\"\n        game_id = self.game_id\n        season = self.season\n        game_session = self.session\n        shifts = self._shifts\n\n        game_list = []\n\n        periods = np.unique([x[\"period\"] for x in shifts]).tolist()\n\n        teams = [\"HOME\", \"AWAY\"]\n\n        for period in periods:\n            max([x[\"end_time_seconds\"] for x in shifts if x[\"period\"] == period])\n\n            for team in teams:\n                changes_dict = {}\n\n                changes_on = np.unique(\n                    [x[\"start_time_seconds\"] for x in shifts if x[\"period\"] == period and x[\"team_venue\"] == team]\n                ).tolist()\n\n                for change_on in changes_on:\n                    players_on = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period and x[\"start_time_seconds\"] == change_on and x[\"team_venue\"] == team\n                    ]\n\n                    players_on = sorted(players_on, key=lambda k: (k[\"jersey\"]))\n\n                    f_positions = [\"L\", \"C\", \"R\"]\n\n                    forwards_on = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"start_time_seconds\"] == change_on\n                        and x[\"team_venue\"] == team\n                        and x[\"position\"] in f_positions\n                    ]\n\n                    forwards_on = sorted(forwards_on, key=lambda k: (k[\"jersey\"]))\n\n                    defense_on = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"start_time_seconds\"] == change_on\n                        and x[\"team_venue\"] == team\n                        and x[\"position\"] == \"D\"\n                    ]\n\n                    defense_on = sorted(defense_on, key=lambda k: (k[\"jersey\"]))\n\n                    goalies_on = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"start_time_seconds\"] == change_on\n                        and x[\"team_venue\"] == team\n                        and x[\"position\"] == \"G\"\n                    ]\n\n                    goalies_on = sorted(goalies_on, key=lambda k: (k[\"jersey\"]))\n\n                    new_values = {\n                        \"season\": season,\n                        \"session\": game_session,\n                        \"game_id\": game_id,\n                        \"event\": \"CHANGE\",\n                        \"event_team\": players_on[0][\"team\"],\n                        \"is_home\": players_on[0][\"is_home\"],\n                        \"is_away\": players_on[0][\"is_away\"],\n                        \"team_venue\": team,\n                        \"period\": period,\n                        \"period_time\": players_on[0][\"start_time\"],\n                        \"period_seconds\": players_on[0][\"start_time_seconds\"],\n                        \"change_on_count\": len(players_on),\n                        \"change_off_count\": 0,\n                        \"change_on_jersey\": [x[\"team_jersey\"] for x in players_on],\n                        \"change_on\": [x[\"player_name\"] for x in players_on],\n                        \"change_on_eh_id\": [x[\"eh_id\"] for x in players_on],\n                        \"change_on_api_id\": [str(x[\"api_id\"]) for x in players_on],\n                        \"change_on_positions\": [x[\"position\"] for x in players_on],\n                        \"change_off_jersey\": \"\",\n                        \"change_off\": \"\",\n                        \"change_off_eh_id\": \"\",\n                        \"change_off_api_id\": \"\",\n                        \"change_off_positions\": \"\",\n                        \"change_on_forwards_count\": len(forwards_on),\n                        \"change_off_forwards_count\": 0,\n                        \"change_on_forwards_jersey\": [x[\"team_jersey\"] for x in forwards_on],\n                        \"change_on_forwards\": [x[\"player_name\"] for x in forwards_on],\n                        \"change_on_forwards_eh_id\": [x[\"eh_id\"] for x in forwards_on],\n                        \"change_on_forwards_api_id\": [str(x[\"api_id\"]) for x in forwards_on],\n                        \"change_off_forwards_jersey\": \"\",\n                        \"change_off_forwards\": \"\",\n                        \"change_off_forwards_eh_id\": \"\",\n                        \"change_off_forwards_api_id\": \"\",\n                        \"change_on_defense_count\": len(defense_on),\n                        \"change_off_defense_count\": 0,\n                        \"change_on_defense_jersey\": [x[\"team_jersey\"] for x in defense_on],\n                        \"change_on_defense\": [x[\"player_name\"] for x in defense_on],\n                        \"change_on_defense_eh_id\": [x[\"eh_id\"] for x in defense_on],\n                        \"change_on_defense_api_id\": [str(x[\"api_id\"]) for x in defense_on],\n                        \"change_off_defense_jersey\": \"\",\n                        \"change_off_defense\": \"\",\n                        \"change_off_defense_eh_id\": \"\",\n                        \"change_off_defense_api_id\": \"\",\n                        \"change_on_goalie_count\": len(goalies_on),\n                        \"change_off_goalie_count\": 0,\n                        \"change_on_goalie_jersey\": [x[\"team_jersey\"] for x in goalies_on],\n                        \"change_on_goalie\": [x[\"player_name\"] for x in goalies_on],\n                        \"change_on_goalie_eh_id\": [x[\"eh_id\"] for x in goalies_on],\n                        \"change_on_goalie_api_id\": [str(x[\"api_id\"]) for x in goalies_on],\n                        \"change_off_goalie_jersey\": \"\",\n                        \"change_off_goalie\": \"\",\n                        \"change_off_goalie_eh_id\": \"\",\n                        \"change_off_goalie_api_id\": \"\",\n                    }\n\n                    changes_dict.update({change_on: new_values})\n\n                changes_off = np.unique(\n                    [x[\"end_time_seconds\"] for x in shifts if x[\"period\"] == period and x[\"team_venue\"] == team]\n                ).tolist()\n\n                for change_off in changes_off:\n                    players_off = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period and x[\"end_time_seconds\"] == change_off and x[\"team_venue\"] == team\n                    ]\n\n                    players_off = sorted(players_off, key=lambda k: (k[\"jersey\"]))\n\n                    f_positions = [\"L\", \"C\", \"R\"]\n\n                    forwards_off = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"end_time_seconds\"] == change_off\n                        and x[\"team_venue\"] == team\n                        and x[\"position\"] in f_positions\n                    ]\n\n                    forwards_off = sorted(forwards_off, key=lambda k: (k[\"jersey\"]))\n\n                    defense_off = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"end_time_seconds\"] == change_off\n                        and x[\"team_venue\"] == team\n                        and x[\"position\"] == \"D\"\n                    ]\n\n                    defense_off = sorted(defense_off, key=lambda k: (k[\"jersey\"]))\n\n                    goalies_off = [\n                        x\n                        for x in shifts\n                        if x[\"period\"] == period\n                        and x[\"end_time_seconds\"] == change_off\n                        and x[\"team_venue\"] == team\n                        and x[\"position\"] == \"G\"\n                    ]\n\n                    goalies_off = sorted(goalies_off, key=lambda k: (k[\"jersey\"]))\n\n                    new_values = {\n                        \"season\": season,\n                        \"session\": game_session,\n                        \"game_id\": game_id,\n                        \"event\": \"CHANGE\",\n                        \"event_team\": players_off[0][\"team\"],\n                        \"team_venue\": team,\n                        \"is_home\": players_off[0][\"is_home\"],\n                        \"is_away\": players_off[0][\"is_away\"],\n                        \"period\": period,\n                        \"period_time\": players_off[0][\"end_time\"],\n                        \"period_seconds\": players_off[0][\"end_time_seconds\"],\n                        \"change_off_count\": len(players_off),\n                        \"change_off_jersey\": [x[\"team_jersey\"] for x in players_off],\n                        \"change_off\": [x[\"player_name\"] for x in players_off],\n                        \"change_off_eh_id\": [x[\"eh_id\"] for x in players_off],\n                        \"change_off_api_id\": [str(x[\"api_id\"]) for x in players_off],\n                        \"change_off_positions\": [x[\"position\"] for x in players_off],\n                        \"change_off_forwards_count\": len(forwards_off),\n                        \"change_off_forwards_jersey\": [x[\"team_jersey\"] for x in forwards_off],\n                        \"change_off_forwards\": [x[\"player_name\"] for x in forwards_off],\n                        \"change_off_forwards_eh_id\": [x[\"eh_id\"] for x in forwards_off],\n                        \"change_off_forwards_api_id\": [str(x[\"api_id\"]) for x in forwards_off],\n                        \"change_off_defense_count\": len(defense_off),\n                        \"change_off_defense_jersey\": [x[\"team_jersey\"] for x in defense_off],\n                        \"change_off_defense\": [x[\"player_name\"] for x in defense_off],\n                        \"change_off_defense_eh_id\": [x[\"eh_id\"] for x in defense_off],\n                        \"change_off_defense_api_id\": [str(x[\"api_id\"]) for x in defense_off],\n                        \"change_off_goalie_count\": len(goalies_off),\n                        \"change_off_goalie_jersey\": [x[\"team_jersey\"] for x in goalies_off],\n                        \"change_off_goalie\": [x[\"player_name\"] for x in goalies_off],\n                        \"change_off_goalie_eh_id\": [x[\"eh_id\"] for x in goalies_off],\n                        \"change_off_goalie_api_id\": [str(x[\"api_id\"]) for x in goalies_off],\n                    }\n\n                    if change_off in changes_on:\n                        changes_dict[change_off].update(new_values)\n\n                    else:\n                        new_values.update(\n                            {\n                                \"change_on_count\": 0,\n                                \"change_on_forwards_count\": 0,\n                                \"change_on_defense_count\": 0,\n                                \"change_on_goalie_count\": 0,\n                            }\n                        )\n\n                        changes_dict[change_off] = new_values\n\n                game_list.extend(list(changes_dict.values()))\n\n        game_list = sorted(game_list, key=lambda k: (k[\"period\"], k[\"period_seconds\"], k[\"is_away\"]))\n\n        final_changes = []\n\n        for change in game_list:\n            players_on = \", \".join(change.get(\"change_on\", []))\n\n            players_off = \", \".join(change.get(\"change_off\", []))\n\n            on_num = len(change.get(\"change_on\", []))\n\n            off_num = len(change.get(\"change_off\", []))\n\n            if on_num &gt; 0 and off_num &gt; 0:\n                change[\"description\"] = f\"PLAYERS ON: {players_on} / PLAYERS OFF: {players_off}\"\n\n            if on_num &gt; 0 and off_num == 0:\n                change[\"description\"] = f\"PLAYERS ON: {players_on}\"\n\n            if off_num &gt; 0 and on_num == 0:\n                change[\"description\"] = f\"PLAYERS OFF: {players_off}\"\n\n            if change[\"period\"] == 5 and game_session == \"R\":  # Not covered by tests\n                change[\"game_seconds\"] = 3900 + change[\"period_seconds\"]\n\n            else:\n                change[\"game_seconds\"] = (int(change[\"period\"]) - 1) * 1200 + change[\"period_seconds\"]\n\n            if change[\"is_home\"] == 1:\n                change[\"event_type\"] = \"HOME CHANGE\"\n\n            else:\n                change[\"event_type\"] = \"AWAY CHANGE\"\n\n            final_changes.append(ChangeEvent.model_validate(change).model_dump())\n\n        self._changes = final_changes\n\n    @property\n    def changes(self) -&gt; list:\n        \"\"\"List of changes scraped from API endpoint. Each change is a dictionary with the below keys.\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).changes_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., CHANGE\n            event_type (str):\n                Type of change that occurred, e.g., AWAY CHANGE\n            description (str | None):\n                Description of the event, e.g.,\n                PLAYERS ON: MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n                / PLAYERS OFF: YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            change_on_count (int):\n                Number of players on, e.g., 4\n            change_off_count (int):\n                Number of players off, e.g., 4\n            change_on (str):\n                Names of players on, e.g., MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n            change_on_jersey (str):\n                Combination of jerseys and numbers for the players on, e.g., NSH14, NSH19, NSH64, NSH95\n            change_on_eh_id (str):\n                Evolving Hockey IDs of the players on, e.g.,\n                MATTIAS.EKHOLM, CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE\n            change_on_positions (str):\n                Positions of the players on, e.g., D, C, C, C\n            change_off (str):\n                Names of players off, e.g., YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            change_off_jersey (str):\n                Combination of jerseys and numbers for the players off, e.g., NSH7, NSH9, NSH33, NSH92\n            change_off_eh_id (str):\n                Evolving Hockey IDs of the players off, e.g.,\n                YANNICK.WEBER, FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN\n            change_off_positions (str):\n                Positions of the players off, e.g., D, L, L, C\n            change_on_forwards_count (int):\n                Number of forwards on, e.g.,\n            change_off_forwards_count (int):\n                Number of forwards off, e.g., 3\n            change_on_forwards (str):\n                Names of forwards on, e.g., CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n            change_on_forwards_jersey (str):\n                Combination of jerseys and numbers for the forwards on, e.g., NSH19, NSH64, NSH95\n            change_on_forwards_eh_id (str):\n                Evolving Hockey IDs of the forwards on, e.g.,\n                CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE\n            change_off_forwards (str):\n                Names of forwards off, e.g., FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            change_off_forwards_jersey (str):\n                Combination of jerseys and numbers for the forwards off, e.g., NSH9, NSH33, NSH92\n            change_off_forwards_eh_id (str):\n                Evolving Hockey IDs of the forwards off, e.g.,\n                FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN\n            change_on_defense_count (int):\n                Number of defense on, e.g., 1\n            change_off_defense_count (int):\n                Number of defense off, e.g., 1\n            change_on_defense (str):\n                Names of defense on, e.g., MATTIAS EKHOLM\n            change_on_defense_jersey (str):\n                Combination of jerseys and numbers for the defense on, e.g., NSH14\n            change_on_defense_eh_id (str):\n                Evolving Hockey IDs of the defense on, e.g., MATTIAS.EKHOLM\n            change_off_defense (str):\n                Names of defense off, e.g., YANNICK WEBER\n            change_off_defense_jersey (str):\n                Combination of jerseys and numbers for the defense off, e.g., NSH7\n            change_off_defebse_eh_id (str):\n                Evolving Hockey IDs of the defebse off, e.g., YANNICK.WEBER\n            change_on_goalie_count (int):\n                Number of goalies on, e.g., 0\n            change_off_goalie_count (int):\n                Number of goalies off, e.g., 0\n            change_on_goalies (str):\n                Names of goalies on, e.g., None\n            change_on_goalies_jersey (str):\n                Combination of jerseys and numbers for the goalies on, e.g., None\n            change_on_goalies_eh_id (str):\n                Evolving Hockey IDs of the goalies on, e.g., None\n            change_off_goalies (str):\n                Names of goalies off, e.g., None\n            change_off_goalies_jersey (str):\n                Combination of jerseys and numbers for the goalies off, e.g., None\n            change_off_goalies_eh_id (str):\n                Evolving Hockey IDs of the goalies off, e.g., None\n            is_home (int):\n                Dummy indicator whether change team is home, e.g., 0\n            is_away (int):\n                Dummy indicator whether change team is away, e.g., 1\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.changes\n\n        \"\"\"\n        # TODO: Add API ID columns to documentation\n\n        if self._changes is None:\n            if self._rosters is None:\n                if self._html_rosters is None:\n                    self._scrape_html_rosters()\n                    self._munge_html_rosters()\n\n                if self._api_rosters is None:\n                    self._munge_api_rosters()\n\n                self._combine_rosters()\n\n            if self._shifts is None:\n                self._scrape_shifts()\n                self._munge_shifts()\n\n            self._munge_changes()\n\n        return self._changes\n\n    @property\n    def changes_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of changes scraped from HTML shifts &amp; roster endpoints.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., CHANGE\n            event_type (str):\n                Type of change that occurred, e.g., AWAY CHANGE\n            description (str | None):\n                Description of the event, e.g.,\n                PLAYERS ON: MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n                / PLAYERS OFF: YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            change_on_count (int):\n                Number of players on, e.g., 4\n            change_off_count (int):\n                Number of players off, e.g., 4\n            change_on (str):\n                Names of players on, e.g., MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n            change_on_jersey (str):\n                Combination of jerseys and numbers for the players on, e.g., NSH14, NSH19, NSH64, NSH95\n            change_on_eh_id (str):\n                Evolving Hockey IDs of the players on, e.g.,\n                MATTIAS.EKHOLM, CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE\n            change_on_positions (str):\n                Positions of the players on, e.g., D, C, C, C\n            change_off (str):\n                Names of players off, e.g., YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            change_off_jersey (str):\n                Combination of jerseys and numbers for the players off, e.g., NSH7, NSH9, NSH33, NSH92\n            change_off_eh_id (str):\n                Evolving Hockey IDs of the players off, e.g.,\n                YANNICK.WEBER, FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN\n            change_off_positions (str):\n                Positions of the players off, e.g., D, L, L, C\n            change_on_forwards_count (int):\n                Number of forwards on, e.g.,\n            change_off_forwards_count (int):\n                Number of forwards off, e.g., 3\n            change_on_forwards (str):\n                Names of forwards on, e.g., CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE\n            change_on_forwards_jersey (str):\n                Combination of jerseys and numbers for the forwards on, e.g., NSH19, NSH64, NSH95\n            change_on_forwards_eh_id (str):\n                Evolving Hockey IDs of the forwards on, e.g.,\n                CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE\n            change_off_forwards (str):\n                Names of forwards off, e.g., FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN\n            change_off_forwards_jersey (str):\n                Combination of jerseys and numbers for the forwards off, e.g., NSH9, NSH33, NSH92\n            change_off_forwards_eh_id (str):\n                Evolving Hockey IDs of the forwards off, e.g.,\n                FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN\n            change_on_defense_count (int):\n                Number of defense on, e.g., 1\n            change_off_defense_count (int):\n                Number of defense off, e.g., 1\n            change_on_defense (str):\n                Names of defense on, e.g., MATTIAS EKHOLM\n            change_on_defense_jersey (str):\n                Combination of jerseys and numbers for the defense on, e.g., NSH14\n            change_on_defense_eh_id (str):\n                Evolving Hockey IDs of the defense on, e.g., MATTIAS.EKHOLM\n            change_off_defense (str):\n                Names of defense off, e.g., YANNICK WEBER\n            change_off_defense_jersey (str):\n                Combination of jerseys and numbers for the defense off, e.g., NSH7\n            change_off_defebse_eh_id (str):\n                Evolving Hockey IDs of the defebse off, e.g., YANNICK.WEBER\n            change_on_goalie_count (int):\n                Number of goalies on, e.g., 0\n            change_off_goalie_count (int):\n                Number of goalies off, e.g., 0\n            change_on_goalies (str):\n                Names of goalies on, e.g., None\n            change_on_goalies_jersey (str):\n                Combination of jerseys and numbers for the goalies on, e.g., None\n            change_on_goalies_eh_id (str):\n                Evolving Hockey IDs of the goalies on, e.g., None\n            change_off_goalies (str):\n                Names of goalies off, e.g., None\n            change_off_goalies_jersey (str):\n                Combination of jerseys and numbers for the goalies off, e.g., None\n            change_off_goalies_eh_id (str):\n                Evolving Hockey IDs of the goalies off, e.g., None\n            is_home (int):\n                Dummy indicator whether change team is home, e.g., 0\n            is_away (int):\n                Dummy indicator whether change team is away, e.g., 1\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.changes_df\n\n        \"\"\"\n        # TODO: Add API ID columns to documentation\n\n        if self._changes is None:\n            if self._rosters is None:\n                if self._html_rosters is None:\n                    self._scrape_html_rosters()\n                    self._munge_html_rosters()\n\n                if self._api_rosters is None:\n                    self._munge_api_rosters()\n\n                self._combine_rosters()\n\n            if self._shifts is None:\n                self._scrape_shifts()\n                self._munge_shifts()\n\n            self._munge_changes()\n\n        return pd.DataFrame(self._changes)\n\n    def _scrape_html_events(self) -&gt; None:\n        \"\"\"Method for scraping events from HTML endpoint. Updates self._html_events.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Game object\n            &gt;&gt;&gt; game = Game(2023020001)\n\n            Before cleaning the data, game._html_events is None\n            &gt;&gt;&gt; game._html_events  # Returns None\n\n            Once you scrape the data, you can access it in raw form, prior to any processing\n            &gt;&gt;&gt; game._scrape_html_events()  # Scrapes raw data and adds it to game._html_events\n            &gt;&gt;&gt; game.html_events  # Returns raw events, prior to processing\n            &gt;&gt;&gt; game.html_events_df  # Same, but a Pandas DataFrame\n\n            You then have to manually clean the data\n            &gt;&gt;&gt; game._munge_html_events()\n            &gt;&gt;&gt; game.html_events  # Returns cleaned events data\n            &gt;&gt;&gt; game.html_events_df  # Same but a Pandas DataFrame\n        \"\"\"\n        url = self.html_events_endpoint\n\n        s = self._requests_session\n\n        try:\n            response = s.get(url)\n        except RetryError:  # Not covered by tests\n            return None\n\n        soup = BeautifulSoup(response.content.decode(\"ISO-8859-1\"), \"lxml\")\n\n        events = []\n\n        if soup.find(\"html\") is None:  # Not covered by tests\n            return None\n\n        tds = soup.find_all(\"td\", {\"class\": re.compile(\".*bborder.*\")})\n\n        events_data = hs_strip_html(tds)\n\n        events_data = [unidecode(x).replace(\"\\n \", \", \").replace(\"\\n\", \"\") for x in events_data]\n\n        length = int(len(events_data) / 8)\n\n        events_data = np.array(events_data).reshape(length, 8)\n\n        for _idx, event in enumerate(events_data):\n            column_names = [\n                \"event_idx\",\n                \"period\",\n                \"strength\",\n                \"time\",\n                \"event\",\n                \"description\",\n                \"away_skaters\",\n                \"home_skaters\",\n            ]\n\n            if \"#\" in event:\n                continue\n\n            else:\n                event = dict(zip(column_names, event, strict=False))\n\n                new_values = {\n                    \"season\": self.season,\n                    \"session\": self.session,\n                    \"game_id\": self.game_id,\n                    \"event_idx\": int(event[\"event_idx\"]),\n                    \"description\": unidecode(event[\"description\"]).upper(),\n                    \"period\": event[\"period\"],\n                }\n\n                event.update(new_values)\n\n                # This event is missing from the API and doesn't have a player in the HTML endpoint\n\n                if self.game_id == 2022020194 and event[\"event_idx\"] == 134:\n                    continue\n\n                if self.game_id == 2022020673 and event[\"event_idx\"] == 208:\n                    continue\n\n                events.append(event)\n\n        self._html_events = events\n\n    def _munge_html_events(self) -&gt; None:\n        \"\"\"Method to munge list of events from HTML endpoint. Updates self._html_events.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Game object\n            &gt;&gt;&gt; game = Game(2023020001)\n\n            Before cleaning the data, game._html_events is None\n            &gt;&gt;&gt; game._html_events  # Returns None\n\n            Once you scrape the data, you can access it in raw form, prior to any processing\n            &gt;&gt;&gt; game._scrape_html_events()  # Scrapes raw data and adds it to game._html_events\n            &gt;&gt;&gt; game.html_events  # Returns raw events, prior to processing\n            &gt;&gt;&gt; game.html_events_df  # Same, but a Pandas DataFrame\n\n            You then have to manually clean the data\n            &gt;&gt;&gt; game._munge_html_events()\n            &gt;&gt;&gt; game.html_events  # Returns cleaned events data\n            &gt;&gt;&gt; game.html_events_df  # Same but a Pandas DataFrame\n        \"\"\"\n        game_session = self.session\n\n        if self._html_rosters is None:  # Not covered by tests\n            self._scrape_html_rosters()\n            self._munge_html_rosters()\n\n        roster = self._html_rosters\n\n        # Compiling regex expressions to save time later\n\n        event_team_re = re.compile(r\"^([A-Z]{3}|[A-Z]\\.[A-Z])\")\n        numbers_re = re.compile(r\"#([0-9]{1,2})\")\n        event_players_re = re.compile(r\"([A-Z]{3}\\s+#[0-9]{1,2})\")\n        re.compile(r\"([A-Z]{1,2})\")\n        fo_team_re = re.compile(r\"([A-Z]{3}) WON\")\n        block_team_re = re.compile(r\"BLOCKED BY\\s+([A-Z]{3})\")\n        re.compile(r\"(\\d+)\")\n        zone_re = re.compile(r\"([A-Za-z]{3}). ZONE\")\n        penalty_re = re.compile(r\"([A-Za-z]*|[A-Za-z]*-[A-Za-z]*|[A-Za-z]*\\s+\\(.*\\))\\s*\\(\")\n        penalty_length_re = re.compile(r\"(\\d+) MIN\")\n        shot_re = re.compile(r\",\\s+([A-Za-z]*|[A-Za-z]*-[A-Za-z]*)\\s*,\")\n        distance_re = re.compile(r\"(\\d+) FT\")\n        served_re = re.compile(r\"([A-Z]{3})\\s.+SERVED BY: #([0-9]+)\")\n        # served_drawn_re = re.compile('([A-Z]{3})\\s#.*\\sSERVED BY: #([0-9]+)')\n        drawn_re = re.compile(r\"DRAWN BY: ([A-Z]{3}) #([0-9]+)\")\n\n        actives = {player[\"team_jersey\"]: player for player in roster if player[\"status\"] == \"ACTIVE\"}\n\n        scratches = {player[\"team_jersey\"]: player for player in roster if player[\"status\"] == \"SCRATCH\"}\n\n        for event in self._html_events:\n            non_descripts = {\n                \"PGSTR\": \"PRE-GAME START\",\n                \"PGEND\": \"PRE-GAME END\",\n                \"ANTHEM\": \"NATIONAL ANTHEM\",\n                \"EISTR\": \"EARLY INTERMISSION START\",\n                \"EIEND\": \"EARLY INTERMISSION END\",\n                \"SPC\": \"PUCK IN CROWD\",\n                \"GOFF\": \"GAME OFFICIAL\",\n                \"EGT\": \"EMERGENCY GOALTENDER\",\n            }\n\n            if event[\"event\"] in list(non_descripts.keys()):\n                event[\"description\"] = non_descripts[event[\"event\"]]\n\n                if event[\"event\"] == \"SPC\":\n                    event[\"event\"] = \"STOP\"\n\n            # Replacing the team names with three-letter codes from API endpoint\n\n            new_team_names = {\"L.A\": \"LAK\", \"N.J\": \"NJD\", \"S.J\": \"SJS\", \"T.B\": \"TBL\", \"PHX\": \"ARI\"}\n\n            for old_name, new_name in new_team_names.items():\n                event[\"description\"] = event[\"description\"].replace(old_name, new_name).upper()\n\n            event = html_events_fixes(self.game_id, event)\n\n            if event[\"event\"] == \"PEND\" and event[\"time\"] == \"-16:0-120:00\":  # Not covered by tests\n                goals = [x for x in self._html_events if x[\"period\"] == event[\"period\"] and x[\"event\"] == \"GOAL\"]\n\n                if len(goals) == 0:\n                    if int(event[\"period\"]) == 4 and event[\"session\"] == \"R\":\n                        event[\"time\"] = event[\"time\"].replace(\"-16:0-120:00\", \"5:000:00\")\n\n                    else:\n                        event[\"time\"] = event[\"time\"].replace(\"-16:0-120:00\", \"20:000:00\")\n\n                elif len(goals) &gt; 0:\n                    goal = goals[-1]\n\n                    event[\"time\"] = event[\"time\"].replace(\"-16:0-120:00\", goal[\"time\"])\n\n            non_team_events = [\n                \"STOP\",\n                \"ANTHEM\",\n                \"PGSTR\",\n                \"PGEND\",\n                \"PSTR\",\n                \"PEND\",\n                \"EISTR\",\n                \"EIEND\",\n                \"GEND\",\n                \"SOC\",\n                \"PBOX\",\n            ]\n\n            if event[\"event\"] not in non_team_events:\n                try:\n                    event[\"event_team\"] = re.search(event_team_re, event[\"description\"]).group(1)\n\n                    if event[\"event_team\"] == \"LEA\":  # Not covered by tests\n                        event[\"event_team\"] = \"\"\n\n                except AttributeError:\n                    continue\n\n            if event[\"event\"] == \"FAC\":\n                try:\n                    event[\"event_team\"] = re.search(fo_team_re, event[\"description\"]).group(1)\n\n                except AttributeError:\n                    event[\"event_team\"] = None\n\n            if event[\"event\"] == \"BLOCK\" and \"BLOCKED BY\" in event[\"description\"]:\n                event[\"event_team\"] = re.search(block_team_re, event[\"description\"]).group(1)\n\n            event[\"period\"] = int(event[\"period\"])\n\n            time_split = event[\"time\"].split(\":\")\n\n            event[\"period_time\"] = time_split[0] + \":\" + time_split[1][:2]\n\n            event[\"period_seconds\"] = (60 * int(event[\"period_time\"].split(\":\")[0])) + int(\n                event[\"period_time\"].split(\":\")[1]\n            )\n\n            event[\"game_seconds\"] = (int(event[\"period\"]) - 1) * 1200 + event[\"period_seconds\"]\n\n            if event[\"period\"] == 5 and game_session == \"R\":\n                event[\"game_seconds\"] = 3900 + event[\"period_seconds\"]\n\n            event_list = [\"GOAL\", \"SHOT\", \"TAKE\", \"GIVE\"]\n\n            if event[\"event\"] in event_list:\n                event_players = [event[\"event_team\"] + num for num in re.findall(numbers_re, event[\"description\"])]\n\n            else:\n                event_players = re.findall(event_players_re, event[\"description\"])\n\n            if event[\"event\"] == \"FAC\" and event[\"event_team\"] not in event_players[0]:\n                event_players[0], event_players[1] = event_players[1], event_players[0]\n\n            if event[\"event\"] == \"BLOCK\" and \"TEAMMATE\" in event[\"description\"]:\n                event[\"event_team\"] = event[\"description\"][:3]\n\n                event_players.insert(0, \"TEAMMATE\")\n\n            elif event[\"event\"] == \"BLOCK\" and \"BLOCKED BY OTHER\" in event[\"description\"]:  # Not covered by tests\n                event[\"event_team\"] = \"OTHER\"\n\n                event_players.insert(0, \"REFEREE\")\n\n            elif event[\"event\"] == \"BLOCK\" and event[\"event_team\"] not in event_players[0]:\n                event_players[0], event_players[1] = event_players[1], event_players[0]\n\n            for idx, event_player in enumerate(event_players):\n                num = idx + 1\n\n                event_player = event_player.replace(\" #\", \"\")\n\n                if event_player == \"TEAMMATE\":\n                    player_name = \"TEAMMATE\"\n                    eh_id = \"TEAMMATE\"\n                    position = None\n\n                elif event_player == \"REFEREE\":  # Not covered by tests\n                    player_name = \"REFEREE\"\n                    eh_id = \"REFEREE\"\n                    position = None\n\n                else:\n                    try:\n                        player_name = actives[event_player][\"player_name\"]\n                        eh_id = actives[event_player][\"eh_id\"]\n                        position = actives[event_player][\"position\"]\n\n                    except KeyError:\n                        player_name = scratches[event_player][\"player_name\"]\n                        eh_id = scratches[event_player][\"eh_id\"]\n                        position = scratches[event_player][\"position\"]\n\n                new_values = {\n                    f\"player_{num}\": player_name,\n                    f\"player_{num}_eh_id\": eh_id,\n                    f\"player_{num}_position\": position,\n                }\n\n                event.update(new_values)\n\n            try:\n                event[\"zone\"] = re.search(zone_re, event[\"description\"]).group(1).upper()\n\n                if \"BLOCK\" in event[\"event\"] and event[\"zone\"] == \"DEF\":\n                    event[\"zone\"] = \"OFF\"\n\n            except AttributeError:\n                pass\n\n            if event[\"event\"] == \"PENL\":\n                if (\"TEAM\" in event[\"description\"] and \"SERVED BY\" in event[\"description\"]) or (\n                    \"HEAD COACH\" in event[\"description\"]\n                ):\n                    event[\"player_1\"] = \"BENCH\"\n\n                    event[\"player_1_eh_id\"] = \"BENCH\"\n\n                    event[\"player_1_position\"] = None\n\n                    try:\n                        served_by = re.search(served_re, event[\"description\"])\n\n                        name = served_by.group(1) + str(served_by.group(2))\n\n                    except AttributeError:  # Not covered by tests\n                        try:\n                            drawn_by = re.search(drawn_re, event[\"description\"])\n\n                            name = drawn_by.group(1) + str(drawn_by.group(2))\n\n                        except AttributeError:\n                            continue\n\n                    event[\"player_2\"] = actives[name][\"player_name\"]\n\n                    event[\"player_2_eh_id\"] = actives[name][\"eh_id\"]\n\n                    event[\"player_2_position\"] = actives[name][\"position\"]\n\n                if \"SERVED BY\" in event[\"description\"] and \"DRAWN BY\" in event[\"description\"]:\n                    try:\n                        drawn_by = re.search(drawn_re, event[\"description\"])\n\n                        drawn_name = drawn_by.group(1) + str(drawn_by.group(2))\n\n                        event[\"player_2\"] = actives[drawn_name][\"player_name\"]\n\n                        event[\"player_2_eh_id\"] = actives[drawn_name][\"eh_id\"]\n\n                        event[\"player_2_position\"] = actives[drawn_name][\"position\"]\n\n                        if event[\"player_1_eh_id\"] == event[\"player_2_eh_id\"]:\n                            event[\"player_1\"] = \"BENCH\"\n                            event[\"player_1_eh_id\"] = \"BENCH\"\n                            event[\"player_1_position\"] = None\n\n                        served_by = re.search(served_re, event[\"description\"])\n\n                        served_name = served_by.group(1) + str(served_by.group(2))\n\n                        event[\"player_3\"] = actives[served_name][\"player_name\"]\n\n                        event[\"player_3_eh_id\"] = actives[served_name][\"eh_id\"]\n\n                        event[\"player_3_position\"] = actives[served_name][\"position\"]\n\n                        if \"TEAM\" in event[\"description\"] or \"HEAD COACH\" in event[\"description\"]:\n                            event[\"player_2\"], event[\"player_3\"] = (event[\"player_3\"], event[\"player_2\"])\n\n                            event[\"player_2_eh_id\"], event[\"player_3_eh_id\"] = (\n                                event[\"player_3_eh_id\"],\n                                event[\"player_2_eh_id\"],\n                            )\n\n                            event[\"player_2_position\"], event[\"player_3_position\"] = (\n                                event[\"player_3_position\"],\n                                event[\"player_2_position\"],\n                            )\n\n                    except AttributeError:  # Not covered by tests\n                        pass\n\n                elif \"SERVED BY\" in event[\"description\"]:\n                    try:\n                        served_by = re.search(served_re, event[\"description\"])\n\n                        served_name = served_by.group(1) + str(served_by.group(2))\n\n                        event[\"player_2\"] = actives[served_name][\"player_name\"]\n\n                        event[\"player_2_eh_id\"] = actives[served_name][\"eh_id\"]\n\n                        event[\"player_2_position\"] = actives[served_name][\"position\"]\n\n                    except AttributeError:  # Not covered by tests\n                        pass\n\n                elif \"DRAWN BY\" in event[\"description\"]:\n                    try:\n                        drawn_by = re.search(drawn_re, event[\"description\"])\n\n                        drawn_name = drawn_by.group(1) + str(drawn_by.group(2))\n\n                        event[\"player_2\"] = actives[drawn_name][\"player_name\"]\n\n                        event[\"player_2_eh_id\"] = actives[drawn_name][\"eh_id\"]\n\n                        event[\"player_2_position\"] = actives[drawn_name][\"position\"]\n\n                    except AttributeError:  # Not covered by tests\n                        pass\n\n                if \"player_1\" not in event:  # Not covered by tests\n                    new_values = {\"player_1\": \"BENCH\", \"player_1_eh_id\": \"BENCH\", \"player_1_position\": \"\"}\n\n                    event.update(new_values)\n\n                try:\n                    event[\"penalty_length\"] = int(re.search(penalty_length_re, event[\"description\"]).group(1))\n\n                except TypeError:  # Not covered by tests\n                    pass\n\n                try:\n                    event[\"penalty\"] = re.search(penalty_re, event[\"description\"]).group(1).upper()\n\n                except AttributeError:  # Not covered by tests\n                    continue\n\n                if \"INTERFERENCE\" in event[\"description\"] and \"GOALKEEPER\" in event[\"description\"]:\n                    event[\"penalty\"] = \"GOALKEEPER INTERFERENCE\"\n\n                elif \"CROSS\" in event[\"description\"] and \"CHECKING\" in event[\"description\"]:\n                    event[\"penalty\"] = \"CROSS-CHECKING\"\n\n                elif (\n                    \"DELAY\" in event[\"description\"]\n                    and \"GAME\" in event[\"description\"]\n                    and \"PUCK OVER\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"DELAY OF GAME - PUCK OVER GLASS\"\n\n                elif (\n                    \"DELAY\" in event[\"description\"]\n                    and \"GAME\" in event[\"description\"]\n                    and \"FO VIOL\" in event[\"description\"]\n                ):  # Not covered by tests\n                    event[\"penalty\"] = \"DELAY OF GAME - FACEOFF VIOLATION\"\n\n                elif (\n                    \"DELAY\" in event[\"description\"]\n                    and \"GAME\" in event[\"description\"]\n                    and \"EQUIPMENT\" in event[\"description\"]\n                ):  # Not covered by tests\n                    event[\"penalty\"] = \"DELAY OF GAME - EQUIPMENT\"\n\n                elif (\n                    \"DELAY\" in event[\"description\"]\n                    and \"GAME\" in event[\"description\"]\n                    and \"UNSUCC\" in event[\"description\"]\n                ):\n                    event[\"penalty\"] = \"DELAY OF GAME - UNSUCCESSFUL CHALLENGE\"\n\n                elif (\n                    \"DELAY\" in event[\"description\"]\n                    and \"GAME\" in event[\"description\"]\n                    and \"SMOTHERING\" in event[\"description\"]\n                ):  # Not covered by tests\n                    event[\"penalty\"] = \"DELAY OF GAME - SMOTHERING THE PUCK\"\n\n                elif (\n                    \"ILLEGAL\" in event[\"description\"]\n                    and \"CHECK\" in event[\"description\"]\n                    and \"HEAD\" in event[\"description\"]\n                ):  # Not covered by tests\n                    event[\"penalty\"] = \"ILLEGAL CHECK TO HEAD\"\n\n                elif (\n                    \"HIGH-STICKING\" in event[\"description\"] and \"- DOUBLE\" in event[\"description\"]\n                ):  # Not covered by tests\n                    event[\"penalty\"] = \"HIGH-STICKING - DOUBLE MINOR\"\n\n                elif \"GAME MISCONDUCT\" in event[\"description\"]:\n                    event[\"penalty\"] = \"GAME MISCONDUCT\"\n\n                elif \"MATCH PENALTY\" in event[\"description\"]:\n                    event[\"penalty\"] = \"MATCH PENALTY\"\n\n                elif \"NET\" in event[\"description\"] and \"DISPLACED\" in event[\"description\"]:  # Not covered by tests\n                    event[\"penalty\"] = \"DISPLACED NET\"\n\n                elif (\n                    \"THROW\" in event[\"description\"]\n                    and \"OBJECT\" in event[\"description\"]\n                    and \"AT PUCK\" in event[\"description\"]\n                ):  # Not covered by tests\n                    event[\"penalty\"] = \"THROWING OBJECT AT PUCK\"\n\n                elif (\n                    \"INSTIGATOR\" in event[\"description\"] and \"FACE SHIELD\" in event[\"description\"]\n                ):  # Not covered by tests\n                    event[\"penalty\"] = \"INSTIGATOR - FACE SHIELD\"\n\n                elif \"GOALIE LEAVE CREASE\" in event[\"description\"]:\n                    event[\"penalty\"] = \"LEAVING THE CREASE\"\n\n                elif \"REMOVING\" in event[\"description\"] and \"HELMET\" in event[\"description\"]:  # Not covered by tests\n                    event[\"penalty\"] = \"REMOVING OPPONENT HELMET\"\n\n                elif \"BROKEN\" in event[\"description\"] and \"STICK\" in event[\"description\"]:  # Not covered by tests\n                    event[\"penalty\"] = \"HOLDING BROKEN STICK\"\n\n                elif \"HOOKING\" in event[\"description\"] and \"BREAKAWAY\" in event[\"description\"]:\n                    event[\"penalty\"] = \"HOOKING - BREAKAWAY\"\n\n                elif \"HOLDING\" in event[\"description\"] and \"BREAKAWAY\" in event[\"description\"]:\n                    event[\"penalty\"] = \"HOLDING - BREAKAWAY\"\n\n                elif \"TRIPPING\" in event[\"description\"] and \"BREAKAWAY\" in event[\"description\"]:  # Not covered by tests\n                    event[\"penalty\"] = \"TRIPPING - BREAKAWAY\"\n\n                elif \"SLASH\" in event[\"description\"] and \"BREAKAWAY\" in event[\"description\"]:  # Not covered by tests\n                    event[\"penalty\"] = \"SLASHING - BREAKAWAY\"\n\n                elif \"TEAM TOO MANY\" in event[\"description\"]:\n                    event[\"penalty\"] = \"TOO MANY MEN ON THE ICE\"\n\n                elif \"HOLDING\" in event[\"description\"] and \"STICK\" in event[\"description\"]:\n                    event[\"penalty\"] = \"HOLDING THE STICK\"\n\n                elif \"THROWING\" in event[\"description\"] and \"STICK\" in event[\"description\"]:  # Not covered by tests\n                    event[\"penalty\"] = \"THROWING STICK\"\n\n                elif \"CLOSING\" in event[\"description\"] and \"HAND\" in event[\"description\"]:\n                    event[\"penalty\"] = \"CLOSING HAND ON PUCK\"\n\n                elif \"ABUSE\" in event[\"description\"] and \"OFFICIALS\" in event[\"description\"]:\n                    event[\"penalty\"] = \"ABUSE OF OFFICIALS\"\n\n                elif \"UNSPORTSMANLIKE CONDUCT\" in event[\"description\"]:\n                    event[\"penalty\"] = \"UNSPORTSMANLIKE CONDUCT\"\n\n                elif (\n                    \"PUCK\" in event[\"description\"]\n                    and \"THROWN\" in event[\"description\"]\n                    and \"FWD\" in event[\"description\"]\n                ):  # Not covered by tests\n                    event[\"penalty\"] = \"PUCK THROWN FORWARD - GOALKEEPER\"\n\n                elif \"DELAY\" in event[\"description\"] and \"GAME\" in event[\"description\"]:\n                    event[\"penalty\"] = \"DELAY OF GAME\"\n\n                elif event[\"penalty\"] == \"MISCONDUCT\":\n                    event[\"penalty\"] = \"GAME MISCONDUCT\"\n\n            shot_events = [\"GOAL\", \"SHOT\", \"MISS\", \"BLOCK\"]\n\n            if event[\"event\"] in shot_events:\n                try:\n                    event[\"shot_type\"] = re.search(shot_re, event[\"description\"]).group(1).upper()\n\n                except AttributeError:\n                    event[\"shot_type\"] = \"WRIST\"\n\n                    pass\n\n                if \"BETWEEN LEGS\" in event[\"description\"]:  # Not covered by tests\n                    event[\"shot_type\"] = \"BETWEEN LEGS\"\n\n            try:\n                event[\"pbp_distance\"] = int(re.search(distance_re, event[\"description\"]).group(1))\n\n            except AttributeError:\n                if event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]:\n                    event[\"pbp_distance\"] = 0\n\n                pass\n\n        self._html_events = sorted(self._html_events, key=lambda k: (k[\"event_idx\"]))\n\n        final_events = []\n\n        for event in self._html_events:\n            if \"period_seconds\" not in event and \"time\" in event:\n                event[\"period\"] = int(event[\"period\"])\n\n                time_split = event[\"time\"].split(\":\")\n\n                event[\"period_time\"] = time_split[0] + \":\" + time_split[1][:2]\n\n                event[\"period_seconds\"] = (60 * int(event[\"period_time\"].split(\":\")[0])) + int(\n                    event[\"period_time\"].split(\":\")[1]\n                )\n\n            if \"game_seconds\" not in event:\n                event[\"game_seconds\"] = (int(event[\"period\"]) - 1) * 1200 + event[\"period_seconds\"]\n\n                if event[\"period\"] == 5 and event[\"session\"] == \"R\":\n                    event[\"game_seconds\"] = 3900 + event[\"period_seconds\"]\n\n            if \"version\" not in event:\n                other_events = [\n                    x\n                    for x in self._html_events\n                    # if x != event\n                    if x[\"event\"] == event[\"event\"]\n                    and x.get(\"game_seconds\") == event[\"game_seconds\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x.get(\"player_1_eh_id\") is not None\n                    and event.get(\"player_1_eh_id\") is not None\n                    and x[\"player_1_eh_id\"] == event[\"player_1_eh_id\"]\n                ]\n\n                version = 1\n\n                event[\"version\"] = version\n\n                if len(other_events) &gt; 0:\n                    for idx, _other_event in enumerate(other_events):\n                        if event == other_events[0]:\n                            continue\n\n                        version = idx + 1\n                        event[\"version\"] = version\n\n            final_events.append(HTMLEvent.model_validate(event).model_dump())\n\n        self._html_events = final_events\n\n    @property\n    def html_events(self) -&gt; list:\n        \"\"\"List of events scraped from HTML endpoint. Each event is a dictionary with the below keys.\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).html_events_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_idx (int):\n                Index ID for event, e.g., 331\n            period (int):\n                Period number of the event, e.g., 3\n            period_time (str):\n                Time elapsed in the period, e.g., 19:38\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            description (str | None):\n                Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., DEF\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            penalty_length (str | None):\n                Duration of the penalty, e.g., None\n            penalty (str | None):\n                Reason for the penalty, e.g., None\n            strength (str | None):\n                Code to indication strength state, e.g., EV\n            away_skaters (str):\n                Away skaters on-ice, e.g., 13C, 19C, 64C, 14D, 59D, 35G\n            home_skaters (str):\n                Home skaters on-ice, e.g., 19C, 77C, 12R, 88R, 2D, 56D\n            version (int):\n                Increases with simultaneous events, used for combining events in the scraper, e.g., 1\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.html_events\n\n        \"\"\"\n        if self._html_events is None:\n            if self._html_rosters is None:\n                self._scrape_html_rosters()\n                self._munge_html_rosters()\n\n            self._scrape_html_events()\n            self._munge_html_events()\n\n        return self._html_events\n\n    @property\n    def html_events_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of events scraped from HTML endpoint.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            event_idx (int):\n                Index ID for event, e.g., 331\n            period (int):\n                Period number of the event, e.g., 3\n            period_time (str):\n                Time elapsed in the period, e.g., 19:38\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            description (str | None):\n                Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., DEF\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            penalty_length (str | None):\n                Duration of the penalty, e.g., None\n            penalty (str | None):\n                Reason for the penalty, e.g., None\n            strength (str | None):\n                Code to indication strength state, e.g., EV\n            away_skaters (str):\n                Away skaters on-ice, e.g., 13C, 19C, 64C, 14D, 59D, 35G\n            home_skaters (str):\n                Home skaters on-ice, e.g., 19C, 77C, 12R, 88R, 2D, 56D\n            version (int):\n                Increases with simultaneous events, used for combining events in the scraper, e.g., 1\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.html_events_df\n\n        \"\"\"\n        if self._html_events is None:\n            if self._html_rosters is None:\n                self._scrape_html_rosters()\n                self._munge_html_rosters()\n\n            self._scrape_html_events()\n            self._munge_html_events()\n\n        return pd.DataFrame(self._html_events)\n\n    def _scrape_html_rosters(self) -&gt; None:\n        \"\"\"Method for scraping players from HTML endpoint. Updates self._html_rosters.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Game object\n            &gt;&gt;&gt; game = Game(2023020001)\n\n            Before cleaning the data, game._html_rosters is None\n            &gt;&gt;&gt; game._html_rosters  # Returns None\n\n            Once you scrape the data, you can access it in raw form, prior to any processing\n            &gt;&gt;&gt; game._scrape_html_rosters()  # Scrapes raw data and adds it to game._html_rosters\n            &gt;&gt;&gt; game.html_rosters  # Returns raw rosters, prior to processing\n            &gt;&gt;&gt; game.html_rosters_df  # Same, but a Pandas DataFrame\n\n            You then have to manually clean the data\n            &gt;&gt;&gt; game._munge_html_rosters()\n            &gt;&gt;&gt; game.html_rosters  # Returns cleaned rosters data\n            &gt;&gt;&gt; game.html_rosters_df  # Same but a Pandas DataFrame\n        \"\"\"\n        # URL and scraping url\n\n        url = self.html_rosters_endpoint\n\n        s = self._requests_session\n\n        try:\n            page = s.get(url)\n        except RetryError:  # Not covered by tests\n            return None\n\n        # Continue if status code is bad\n\n        if page.status_code == 404:  # Not covered by tests\n            return None\n\n        # Reading the HTML file using beautiful soup package\n\n        soup = BeautifulSoup(page.content.decode(\"ISO-8859-1\"), \"lxml\", multi_valued_attributes=None)\n\n        # Information for reading the HTML data\n\n        td_dict = {\"align\": \"center\", \"class\": [\"teamHeading + border\", \"teamHeading + border \"], \"width\": \"50%\"}\n\n        # Finding all active players in the html file\n\n        teamsoup = soup.find_all(\"td\", td_dict)\n\n        # Dictionary for finding each team's table in the HTML file\n\n        table_dict = {\n            \"align\": \"center\",\n            \"border\": \"0\",\n            \"cellpadding\": \"0\",\n            \"cellspacing\": \"0\",\n            \"width\": \"100%\",\n            \"xmlns:ext\": \"\",\n        }\n\n        # Dictionary to collect the team names\n\n        team_names = {}\n\n        # Dictionary to collect the team tables from the HTML data for iterating\n\n        team_soup_list = []\n\n        # List of teams for iterating\n\n        team_list = [\"away\", \"home\"]\n\n        # List to collect the player dictionaries during iteration\n\n        player_list = []\n\n        # Iterating through the home and away teams to collect names and tables\n\n        for idx, team in enumerate(team_list):\n            # Collecting team names\n\n            team_name = unidecode(teamsoup[idx].get_text().encode(\"latin-1\").decode(\"utf-8\")).upper()\n\n            # Correcting the Coyotes team name\n\n            if team_name == \"PHOENIX COYOTES\":\n                team_name = \"ARIZONA COYOTES\"\n\n            team_names.update({team: team_name})\n\n            # Collecting tables of active players\n\n            team_soup_list.append((soup.find_all(\"table\", table_dict))[idx].find_all(\"td\"))\n\n        # Iterating through the team's tables of active players\n\n        for idx, team_soup in enumerate(team_soup_list):\n            table_dict = {\n                \"align\": \"center\",\n                \"border\": \"0\",\n                \"cellpadding\": \"0\",\n                \"cellspacing\": \"0\",\n                \"width\": \"100%\",\n                \"xmlns:ext\": \"\",\n            }\n\n            stuff = soup.find_all(\"table\", table_dict)[idx].find_all(\"td\", {\"class\": \"bold\"})\n\n            starters = list(np.reshape(stuff, (int(len(stuff) / 3), 3))[:, 2])\n\n            # Getting length to create numpy array\n\n            length = int(len(team_soup) / 3)\n\n            # Creating a numpy array from the data, chopping off the headers to create my own\n\n            active_array = np.array(team_soup).reshape(length, 3)\n\n            # Getting original headers\n\n            og_headers = active_array[0]\n\n            if \"Name\" not in og_headers and \"Nom/Name\" not in og_headers:  # Not covered by tests\n                continue\n\n            # Chop off the headers to create my own\n\n            actives = active_array[1:]\n\n            # Iterating through each player, or row in the array\n\n            for player in actives:\n                # New headers for the data. Original headers | ['#', 'Pos', 'Name']\n\n                if len(player) == 3:\n                    headers = [\"jersey\", \"position\", \"player_name\"]\n\n                # Sometimes headers are missing\n\n                else:  # Not covered by tests\n                    headers = [\"jersey\", \"player_name\"]\n\n                # Creating dictionary with headers as keys from the player data\n\n                player = dict(zip(headers, player, strict=False))\n\n                # Adding new values to the player dictionary\n\n                new_values = {\n                    \"team_name\": team_names.get(team_list[idx]),\n                    \"team_venue\": team_list[idx].upper(),\n                    \"status\": \"ACTIVE\",\n                }\n\n                if player[\"player_name\"] in starters:\n                    player[\"starter\"] = 1\n\n                else:\n                    player[\"starter\"] = 0\n\n                player[\"player_name\"] = (\n                    re.sub(r\"\\(\\s?(.*)\\)\", \"\", player[\"player_name\"]).strip().encode(\"latin-1\").decode(\"utf-8\").upper()\n                )\n\n                player[\"player_name\"] = unidecode(player[\"player_name\"])\n\n                if \"position\" not in headers:  # Not covered by tests\n                    player[\"position\"] = None\n\n                # Update the player's dictionary with new values\n\n                player.update(new_values)\n\n                # Append player dictionary to list of players\n\n                player_list.append(player)\n\n        # Check if scratches are present\n\n        if len(soup.find_all(\"table\", table_dict)) &gt; 2:\n            # If scratches are present, iterate through the team's scratch tables\n\n            for idx, team in enumerate(team_list):\n                # Getting team's scratches from HTML\n\n                scratch_soup = (soup.find_all(\"table\", table_dict))[idx + 2].find_all(\"td\")\n\n                # Checking to see if there is at least one set of scratches (first row are headers)\n\n                if len(scratch_soup) &gt; 1:\n                    # Getting the number of scratches\n\n                    length = int(len(scratch_soup) / 3)\n\n                    # Creating numpy array of scratches, removing headers\n\n                    scratches = np.array(scratch_soup).reshape(length, 3)[1:]\n\n                    # Iterating through the array\n\n                    for player in scratches:\n                        # New headers for the data. Original headers | ['#', 'Pos', 'Name']\n\n                        if len(player) == 3:\n                            headers = [\"jersey\", \"position\", \"player_name\"]\n\n                        # Sometimes headers are missing\n\n                        else:  # Not covered by tests\n                            headers = [\"jersey\", \"player_name\"]\n\n                        # Creating dictionary with headers as keys from the player data\n\n                        player = dict(zip(headers, player, strict=False))\n\n                        # Adding new values to the player dictionary\n\n                        new_values = {\n                            \"team_name\": team_names.get(team_list[idx]),\n                            \"team_venue\": team_list[idx].upper(),\n                            \"starter\": 0,\n                            \"status\": \"SCRATCH\",\n                        }\n\n                        if \"position\" not in headers:  # Not covered by tests\n                            player[\"position\"] = None\n\n                        player[\"player_name\"] = (\n                            re.sub(r\"\\(\\s?(.*)\\)\", \"\", player[\"player_name\"])\n                            .strip()\n                            .encode(\"latin-1\")\n                            .decode(\"utf-8\")\n                            .upper()\n                        )\n\n                        player[\"player_name\"] = unidecode(player[\"player_name\"])\n\n                        # Updating player dictionary\n\n                        player.update(new_values)\n\n                        # Appending the player dictionary to the player list\n\n                        player_list.append(player)\n\n        self._html_rosters = player_list\n\n    def _munge_html_rosters(self) -&gt; None:\n        \"\"\"Method to munge list of players from HTML endpoint. Updates self._html_rosters.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Game object\n            &gt;&gt;&gt; game = Game(2023020001)\n\n            Before cleaning the data, game._html_rosters is None\n            &gt;&gt;&gt; game._html_rosters  # Returns None\n\n            Once you scrape the data, you can access it in raw form, prior to any processing\n            &gt;&gt;&gt; game._scrape_html_rosters()  # Scrapes raw data and adds it to game._html_rosters\n            &gt;&gt;&gt; game.html_rosters  # Returns raw rosters, prior to processing\n            &gt;&gt;&gt; game.html_rosters_df  # Same, but a Pandas DataFrame\n\n            You then have to manually clean the data\n            &gt;&gt;&gt; game._munge_html_rosters()\n            &gt;&gt;&gt; game.html_rosters  # Returns cleaned rosters data\n            &gt;&gt;&gt; game.html_rosters_df  # Same but a Pandas DataFrame\n        \"\"\"\n        season = self.season\n        game_session = self.session\n\n        # Iterating through each player to change information\n\n        final_rosters = []\n\n        for player in self._html_rosters:\n            # Fixing jersey data type\n\n            player = html_rosters_fixes(self.game_id, player)\n\n            player[\"jersey\"] = int(player[\"jersey\"])\n\n            # Adding new values in a batch\n\n            new_values = {\"season\": int(season), \"session\": game_session, \"game_id\": self.game_id}\n\n            player.update(new_values)\n\n            player[\"player_name\"] = (\n                player[\"player_name\"]\n                .replace(\"ALEXANDRE\", \"ALEX\")\n                .replace(\"ALEXANDER\", \"ALEX\")\n                .replace(\"CHRISTOPHER\", \"CHRIS\")\n            )\n\n            player[\"player_name\"] = correct_names_dict.get(player[\"player_name\"], player[\"player_name\"])\n\n            # Creating Evolving Hockey ID\n\n            player[\"eh_id\"] = unidecode(player[\"player_name\"])\n\n            name_split = player[\"eh_id\"].split(\" \", maxsplit=1)\n\n            player[\"eh_id\"] = f\"{name_split[0]}.{name_split[1]}\"\n\n            player[\"eh_id\"] = player[\"eh_id\"].replace(\"..\", \".\")\n\n            # Correcting Evolving Hockey IDs for duplicates\n\n            duplicates = {\n                \"SEBASTIAN.AHO\": player[\"position\"] == \"D\",\n                \"COLIN.WHITE\": player[\"season\"] &gt;= 20162017,\n                \"SEAN.COLLINS\": player[\"position\"] != \"D\",\n                \"ALEX.PICARD\": player[\"position\"] != \"D\",\n                \"ERIK.GUSTAFSSON\": player[\"season\"] &gt;= 20152016,\n                \"MIKKO.LEHTONEN\": player[\"season\"] &gt;= 20202021,\n                \"NATHAN.SMITH\": player[\"season\"] &gt;= 20212022,\n                \"DANIIL.TARASOV\": player[\"position\"] == \"G\",\n            }\n\n            # Iterating through the duplicate names and conditions\n\n            for duplicate_name, condition in duplicates.items():\n                if player[\"eh_id\"] == duplicate_name and condition:\n                    player[\"eh_id\"] = f\"{duplicate_name}2\"\n\n            # Something weird with Colin White\n\n            if player[\"eh_id\"] == \"COLIN.\":  # Not covered by tests\n                player[\"eh_id\"] = \"COLIN.WHITE2\"\n\n            player[\"team\"] = team_codes.get(player[\"team_name\"])\n\n            player[\"team_jersey\"] = f\"{player['team']}{player['jersey']}\"\n\n            final_rosters.append(HTMLRosterPlayer.model_validate(player).model_dump())\n\n        self._html_rosters = final_rosters\n\n        self._html_rosters = sorted(self._html_rosters, key=lambda k: (k[\"team_venue\"], k[\"status\"], k[\"player_name\"]))\n\n    @property\n    def html_rosters(self) -&gt; list:\n        \"\"\"List of players scraped from HTML endpoint. Returns a dictionary of players with the below keys.\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).html_rosters_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            jersey (int):\n                Player's jersey number, e.g., 9\n            position (str):\n                Player's position, e.g., L\n            starter (int):\n                Whether the player started the game, e.g., 0\n            status (str):\n                Whether player is active or scratched, e.g., ACTIVE\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.html_rosters\n\n        \"\"\"\n        if self._html_rosters is None:\n            self._scrape_html_rosters()\n            self._munge_html_rosters()\n\n        return self._html_rosters\n\n    @property\n    def html_rosters_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of players scraped from HTML endpoint.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            jersey (int):\n                Player's jersey number, e.g., 9\n            position (str):\n                Player's position, e.g., L\n            starter (int):\n                Whether the player started the game, e.g., 0\n            status (str):\n                Whether player is active or scratched, e.g., ACTIVE\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.html_rosters_df\n\n        \"\"\"\n        if self._html_rosters is None:\n            self._scrape_html_rosters()\n            self._munge_html_rosters()\n\n        return pd.DataFrame(self._html_rosters)\n\n    def _combine_events(self) -&gt; None:\n        \"\"\"Method to combine API and HTML events. Updates self._play_by_play.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First instantiate the Game object\n            &gt;&gt;&gt; game = Game(2023020001)\n\n            Requires all other data sources to be clean\n\n            HTML rosters\n            &gt;&gt;&gt; game._scrape_html_rosters()\n            &gt;&gt;&gt; game._munge_html_rosters()\n\n            API rosters\n            &gt;&gt;&gt; game._munge_api_rosters()\n\n            Combined rosters\n            &gt;&gt;&gt; game._combine_rosters()\n\n            HTML events\n            &gt;&gt;&gt; game._scrape_html_events()  # Scrapes events from HTML feed\n            &gt;&gt;&gt; game._munge_html_events()  # Preps raw events, updates game._html_events\n\n            API events\n            &gt;&gt;&gt; game._munge_api_events()  # Preps raw events, updates game._api_events\n\n            Shifts and changes\n            &gt;&gt;&gt; game._scrape_html_events()  # Scrapes shifts from HTML feed\n            &gt;&gt;&gt; game._munge_shifts()  # Preps raw shifts, updates game._shifts\n            &gt;&gt;&gt; game._munge_changes()  # Preps changes\n\n            Combines them all\n            &gt;&gt;&gt; game._combine_events()  # Combines raw events, into game._play_by_play\n\n            Data can then be manually cleaned\n            &gt;&gt;&gt; game._munge_play_by_play()\n            &gt;&gt;&gt; game._prep_xg()\n            &gt;&gt;&gt; game._play_by_play  # Returns cleaned data\n        \"\"\"\n        html_events = self._html_events\n        api_events = self._api_events\n\n        game_list = []\n\n        for event in html_events:\n            if event[\"event\"] == \"EGPID\":  # Not covered by tests\n                continue\n\n            event_data = {}\n\n            event_data.update(event)\n\n            non_team_events = [\n                \"STOP\",\n                \"ANTHEM\",\n                \"PGSTR\",\n                \"PGEND\",\n                \"PSTR\",\n                \"PEND\",\n                \"EISTR\",\n                \"EIEND\",\n                \"GEND\",\n                \"SOC\",\n                \"EGT\",\n                \"PBOX\",\n                \"PRDY\",\n                \"POFF\",\n                \"GOFF\",\n            ]\n\n            if event[\"event\"] in non_team_events:\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                    and x[\"version\"] == event[\"version\"]\n                ]\n\n            elif event[\"event\"] == \"CHL\" and event.get(\"event_team\") is None:  # Not covered by tests\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                    and x[\"version\"] == event[\"version\"]\n                ]\n\n            elif event[\"event\"] == \"CHL\" and event.get(\"event_team\") is not None:\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x.get(\"event_team\") is not None\n                    and event.get(\"event_team\") is not None\n                    and x[\"event_team\"] == event[\"event_team\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                    and x[\"version\"] == event[\"version\"]\n                ]\n\n            elif event[\"event\"] == \"PENL\":\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x[\"event_team\"] == event[\"event_team\"]\n                    and x[\"player_1_eh_id\"] == event[\"player_1_eh_id\"]\n                    and x.get(\"player_2_eh_id\") == event.get(\"player_2_eh_id\")\n                    and x.get(\"player_3_eh_id\") == event.get(\"player_3_eh_id\")\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                ]\n\n            elif event[\"event\"] == \"BLOCK\" and event[\"player_1\"] == \"TEAMMATE\":  # Not covered by tests\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x.get(\"event_team\") is not None\n                    and event.get(\"event_team\") is not None\n                    and x[\"event_team\"] == event[\"event_team\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                    and x[\"version\"] == event[\"version\"]\n                ]\n\n            else:\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x.get(\"event_team\") is not None\n                    and event.get(\"event_team\") is not None\n                    and x[\"event_team\"] == event[\"event_team\"]\n                    and x.get(\"player_1_eh_id\") is not None\n                    and event.get(\"player_1_eh_id\") is not None\n                    and x[\"player_1_eh_id\"] == event[\"player_1_eh_id\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                    and x[\"version\"] == event[\"version\"]\n                ]\n\n            if event[\"event\"] == \"FAC\" and len(api_matches) == 0:  # Not covered by tests\n                api_matches = [\n                    x\n                    for x in api_events\n                    if x[\"event\"] == event[\"event\"]\n                    and x[\"period\"] == event[\"period\"]\n                    and x[\"period_seconds\"] == event[\"period_seconds\"]\n                    and x[\"version\"] == event[\"version\"]\n                ]\n\n            if len(api_matches) == 0:\n                game_list.append(event_data)\n\n                continue\n\n            elif len(api_matches) == 1:\n                api_match = api_matches[0]\n\n                new_values = {\n                    \"event_idx_api\": api_match.get(\"event_idx\"),\n                    \"coords_x\": api_match.get(\"coords_x\"),\n                    \"coords_y\": api_match.get(\"coords_y\"),\n                    \"player_1_eh_id_api\": api_match.get(\"player_1_eh_id\"),\n                    \"player_1_api_id\": api_match.get(\"player_1_api_id\"),\n                    \"player_1_type\": api_match.get(\"player_1_type\"),\n                    \"player_2_eh_id_api\": api_match.get(\"player_2_eh_id\"),\n                    \"player_2_api_id\": api_match.get(\"player_2_api_id\"),\n                    \"player_2_type\": api_match.get(\"player_2_type\"),\n                    \"player_3_eh_id_api\": api_match.get(\"player_3_eh_id\"),\n                    \"player_3_api_id\": api_match.get(\"player_3_api_id\"),\n                    \"player_3_type\": api_match.get(\"player_3_type\"),\n                    \"version_api\": api_match.get(\"version\", 1),\n                }\n\n                event_data.update(new_values)\n\n                if event[\"event\"] == \"BLOCK\" and event[\"player_1\"] == \"TEAMMATE\":  # Not covered by tests\n                    new_values = {\n                        \"player_1\": api_match.get(\"player_1\", event[\"player_1\"]),\n                        \"player_1_eh_id\": api_match.get(\"player_1_eh_id\", event[\"player_1_eh_id\"]),\n                        \"player_1_position\": api_match.get(\"player_1_position\", event[\"player_1_position\"]),\n                    }\n\n                    event_data.update(new_values)\n\n                game_list.append(event_data)\n\n        game_list.extend(self._changes)\n\n        for event in game_list:\n            new_values = {\n                \"game_date\": self.game_date,\n                \"home_team\": self.home_team[\"abbrev\"],\n                \"away_team\": self.away_team[\"abbrev\"],\n            }\n\n            event.update(new_values)\n\n            if \"version\" not in event:\n                event[\"version\"] = 1\n\n            if event[\"period\"] == 5 and event[\"session\"] == \"R\":  # Not covered by tests\n                event[\"sort_value\"] = event[\"event_idx\"]\n\n            else:\n                sort_dict = {\n                    \"PGSTR\": 1,\n                    \"PGEND\": 2,\n                    \"ANTHEM\": 3,\n                    \"EGT\": 3,\n                    \"CHL\": 3,\n                    \"DELPEN\": 3,\n                    \"BLOCK\": 3,\n                    \"GIVE\": 3,\n                    \"HIT\": 3,\n                    \"MISS\": 3,\n                    \"SHOT\": 3,\n                    \"TAKE\": 3,\n                    \"GOAL\": 5,\n                    \"STOP\": 6,\n                    \"PENL\": 7,\n                    \"PBOX\": 7,\n                    \"PSTR\": 7,\n                    \"CHANGE\": 8,\n                    \"EISTR\": 9,\n                    \"EIEND\": 10,\n                    \"FAC\": 12,\n                    \"PEND\": 13,\n                    \"SOC\": 14,\n                    \"GEND\": 15,\n                    \"GOFF\": 16,\n                }\n\n                event[\"sort_value\"] = sort_dict[event[\"event\"]]\n\n        game_list = sorted(\n            game_list, key=lambda k: (k[\"period\"], k[\"period_seconds\"], k[\"sort_value\"])\n        )  # , k['version']\n\n        self._play_by_play = game_list\n\n    def _munge_play_by_play(self) -&gt; None:\n        \"\"\"Method to munge list of events and changes for play-by-play. Updates self._play_by_play.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Game object\n            &gt;&gt;&gt; game = Game(2023020001)\n\n            Requires clean events from the shifts, API events, and HTML events feeds\n\n            HTML events\n            &gt;&gt;&gt; game._scrape_html_events()  # Scrapes events from HTML feed\n            &gt;&gt;&gt; game._munge_html_events()  # Preps raw events, updates game._html_events\n\n            API events\n            &gt;&gt;&gt; game._munge_api_events()  # Preps raw events, updates game._api_events\n\n            Shifts and changes\n            &gt;&gt;&gt; game._scrape_html_events()  # Scrapes shifts from HTML feed\n            &gt;&gt;&gt; game._munge_shifts()  # Preps raw shifts, updates game._shifts\n            &gt;&gt;&gt; game._munge_changes()  # Preps changes\n\n            Combines them all\n            &gt;&gt;&gt; game._combine_events()  # Combines raw events, into game._play_by_play\n\n            Data can then be manually cleaned\n            &gt;&gt;&gt; game._munge_play_by_play()\n            &gt;&gt;&gt; game._prep_xg()\n            &gt;&gt;&gt; game._play_by_play  # Returns cleaned data\n        \"\"\"\n        game_session = self.session\n\n        home_score = 0\n\n        away_score = 0\n\n        for idx, event in enumerate(self._play_by_play):\n            if event.get(\"event_team\") == event[\"home_team\"]:\n                event[\"opp_team\"] = event[\"away_team\"]\n\n            elif event.get(\"event_team\") == event[\"away_team\"]:\n                event[\"opp_team\"] = event[\"home_team\"]\n\n            else:\n                event[\"event_team\"] = event[\"home_team\"]\n                event[\"opp_team\"] = event[\"away_team\"]\n\n            event[\"home_forwards_eh_id\"] = []\n            event[\"home_forwards_api_id\"] = []\n            event[\"home_forwards\"] = []\n            event[\"home_forwards_positions\"] = []\n\n            event[\"home_defense_eh_id\"] = []\n            event[\"home_defense_api_id\"] = []\n            event[\"home_defense\"] = []\n            event[\"home_defense_positions\"] = []\n\n            event[\"home_goalie_eh_id\"] = []\n            event[\"home_goalie_api_id\"] = []\n            event[\"home_goalie\"] = []\n\n            event[\"away_forwards_eh_id\"] = []\n            event[\"away_forwards_api_id\"] = []\n            event[\"away_forwards\"] = []\n            event[\"away_forwards_positions\"] = []\n\n            event[\"away_defense_eh_id\"] = []\n            event[\"away_defense_api_id\"] = []\n            event[\"away_defense\"] = []\n            event[\"away_defense_positions\"] = []\n\n            event[\"away_goalie_eh_id\"] = []\n            event[\"away_goalie_api_id\"] = []\n            event[\"away_goalie\"] = []\n\n            if (\n                self._play_by_play[(idx - 1)][\"event\"] == \"GOAL\"\n                and self._play_by_play[(idx - 1)][\"event_team\"] == event[\"home_team\"]\n            ):\n                if game_session == \"R\" and event[\"period\"] != 5:\n                    home_score += 1\n\n                elif game_session == \"R\" and event[\"period\"] == 5:  # Not covered by tests\n                    ot_events = [\n                        x for x in self._play_by_play if x[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"] and x[\"period\"] == 5\n                    ]\n\n                    home_goals = [\n                        x\n                        for x in self._play_by_play\n                        if x[\"event\"] == \"GOAL\" and x[\"period\"] == 5 and x[\"event_team\"] == event[\"home_team\"]\n                    ]\n\n                    away_goals = [\n                        x\n                        for x in self._play_by_play\n                        if x[\"event\"] == \"GOAL\" and x[\"period\"] == 5 and x[\"event_team\"] == event[\"away_team\"]\n                    ]\n\n                    if event == ot_events[-1] and len(home_goals) &gt; len(away_goals):\n                        home_score += 1\n\n                else:\n                    home_score += 1\n\n            elif (\n                self._play_by_play[(idx - 1)][\"event\"] == \"GOAL\"\n                and self._play_by_play[(idx - 1)][\"event_team\"] == event[\"away_team\"]\n            ):\n                if game_session == \"R\" and event[\"period\"] != 5:\n                    away_score += 1\n\n                elif game_session == \"R\" and event[\"period\"] == 5:  # Not covered by tests\n                    ot_events = [\n                        x for x in self._play_by_play if x[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"] and x[\"period\"] == 5\n                    ]\n\n                    home_goals = [\n                        x\n                        for x in self._play_by_play\n                        if x[\"event\"] == \"GOAL\" and x[\"period\"] == 5 and x[\"event_team\"] == event[\"home_team\"]\n                    ]\n\n                    away_goals = [\n                        x\n                        for x in self._play_by_play\n                        if x[\"event\"] == \"GOAL\" and x[\"period\"] == 5 and x[\"event_team\"] == event[\"away_team\"]\n                    ]\n\n                    if event == ot_events[-1] and len(away_goals) &gt; len(home_goals):\n                        away_score += 1\n\n                else:\n                    away_score += 1\n\n            event[\"home_score\"] = home_score\n            event[\"home_score_diff\"] = home_score - away_score\n\n            event[\"away_score\"] = away_score\n            event[\"away_score_diff\"] = away_score - home_score\n\n            event[\"score_state\"] = f\"{home_score}v{away_score}\"\n            event[\"score_diff\"] = home_score - away_score\n\n        roster = [x for x in self._rosters if x[\"status\"] == \"ACTIVE\"]\n\n        roster = sorted(roster, key=lambda k: (k[\"team_venue\"], k[\"jersey\"]))\n\n        for player in roster:\n            counter = 0\n\n            for event in self._play_by_play:\n                if (\n                    event.get(\"event_team\", \"NaN\") in player[\"team_jersey\"]\n                    and event[\"event\"] == \"CHANGE\"\n                    and event.get(\"change_on\") is not None\n                ):\n                    players_on = [x for x in event[\"change_on_jersey\"].split(\", \") if x == player[\"team_jersey\"]]\n\n                    if len(players_on) &gt; 0:\n                        counter += 1\n\n                if (\n                    event.get(\"event_team\", \"NaN\") in player[\"team_jersey\"]\n                    and event[\"event\"] == \"CHANGE\"\n                    and event.get(\"change_off\") is not None\n                ):\n                    players_off = [x for x in event[\"change_off_jersey\"].split(\", \") if x == player[\"team_jersey\"]]\n\n                    if len(players_off) &gt; 0:\n                        counter -= 1\n\n                if counter &gt; 0:\n                    forwards = [\"L\", \"C\", \"R\"]\n\n                    if player[\"team_venue\"] == \"HOME\":\n                        if player[\"position\"] in forwards:\n                            event[\"home_forwards_eh_id\"].append(player[\"eh_id\"])\n                            event[\"home_forwards_api_id\"].append(str(player[\"api_id\"]))\n                            event[\"home_forwards\"].append(player[\"player_name\"])\n                            event[\"home_forwards_positions\"].append(player[\"position\"])\n\n                        elif player[\"position\"] == \"D\":\n                            event[\"home_defense_eh_id\"].append(player[\"eh_id\"])\n                            event[\"home_defense_api_id\"].append(str(player[\"api_id\"]))\n                            event[\"home_defense\"].append(player[\"player_name\"])\n                            event[\"home_defense_positions\"].append(player[\"position\"])\n\n                        elif player[\"position\"] == \"G\":\n                            event[\"home_goalie_eh_id\"].append(player[\"eh_id\"])\n                            event[\"home_goalie_api_id\"].append(str(player[\"api_id\"]))\n                            event[\"home_goalie\"].append(player[\"player_name\"])\n\n                    else:\n                        if player[\"position\"] in forwards:\n                            event[\"away_forwards_eh_id\"].append(player[\"eh_id\"])\n                            event[\"away_forwards_api_id\"].append(str(player[\"api_id\"]))\n                            event[\"away_forwards\"].append(player[\"player_name\"])\n                            event[\"away_forwards_positions\"].append(player[\"position\"])\n\n                        elif player[\"position\"] == \"D\":\n                            event[\"away_defense_eh_id\"].append(player[\"eh_id\"])\n                            event[\"away_defense_api_id\"].append(str(player[\"api_id\"]))\n                            event[\"away_defense\"].append(player[\"player_name\"])\n                            event[\"away_defense_positions\"].append(player[\"position\"])\n\n                        elif player[\"position\"] == \"G\":\n                            event[\"away_goalie_eh_id\"].append(player[\"eh_id\"])\n                            event[\"away_goalie_api_id\"].append(str(player[\"api_id\"]))\n                            event[\"away_goalie\"].append(player[\"player_name\"])\n\n        # Instantiating shapely objects for high-danger and danger area computations\n\n        high_danger1 = Polygon(np.array([[69, -9], [89, -9], [89, 9], [69, 9]]))\n        high_danger2 = Polygon(np.array([[-69, -9], [-89, -9], [-89, 9], [-69, 9]]))\n\n        danger1 = Polygon(\n            np.array(\n                [[89, 9], [89, -9], [69, -22], [54, -22], [54, -9], [44, -9], [44, 9], [54, 9], [54, 22], [69, 22]]\n            )\n        )\n        danger2 = Polygon(\n            np.array(\n                [\n                    [-89, 9],\n                    [-89, -9],\n                    [-69, -22],\n                    [-54, -22],\n                    [-54, -9],\n                    [-44, -9],\n                    [-44, 9],\n                    [-54, 9],\n                    [-54, 22],\n                    [-69, 22],\n                ]\n            )\n        )\n\n        final_events = []\n        final_events_ext = []\n\n        for idx, event in enumerate(self._play_by_play):\n            event_length_idx = idx if event == self._play_by_play[-1] else idx + 1\n\n            new_values = {\n                \"event_idx\": idx + 1,\n                \"event_length\": self._play_by_play[event_length_idx][\"game_seconds\"] - event[\"game_seconds\"],\n                \"home_on_eh_id\": event[\"home_forwards_eh_id\"] + event[\"home_defense_eh_id\"],\n                \"home_on_api_id\": event[\"home_forwards_api_id\"] + event[\"home_defense_api_id\"],\n                \"home_on\": event[\"home_forwards\"] + event[\"home_defense\"],\n                \"home_on_positions\": event[\"home_forwards_positions\"] + event[\"home_defense_positions\"],\n                \"away_on_eh_id\": event[\"away_forwards_eh_id\"] + event[\"away_defense_eh_id\"],\n                \"away_on_api_id\": event[\"away_forwards_api_id\"] + event[\"away_defense_api_id\"],\n                \"away_on\": event[\"away_forwards\"] + event[\"away_defense\"],\n                \"away_on_positions\": event[\"away_forwards_positions\"] + event[\"away_defense_positions\"],\n            }\n\n            event.update(new_values)\n\n            if event.get(\"event_team\") == event[\"home_team\"]:\n                event[\"is_home\"] = 1\n\n            else:\n                event[\"is_home\"] = 0\n\n            if event.get(\"event_team\") == event[\"away_team\"]:\n                event[\"is_away\"] = 1\n\n            else:\n                event[\"is_away\"] = 0\n\n            if (\n                event.get(\"coords_x\") is not None\n                and event.get(\"coords_x\") != \"\"\n                and event.get(\"coords_y\") is not None\n                and event.get(\"coords_y\") != \"\"\n            ):\n                # Fixing event angle and distance for errors\n\n                is_fenwick = event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]\n                is_long_distance = event[\"pbp_distance\"] is not None and event.get(\"pbp_distance\", 0) &gt; 89\n                x_is_neg = event.get(\"coords_x\", 0) &lt; 0\n                x_is_pos = event.get(\"coords_x\", 0) &gt; 0\n                bad_shots = event.get(\"shot_type\", \"WRIST\") not in [\n                    \"TIP-IN\",\n                    \"WRAP-AROUND\",\n                    \"WRAP\",\n                    \"DEFLECTED\",\n                    \"BAT\",\n                    \"BETWEEN LEGS\",\n                    \"POKE\",\n                ]\n\n                zone_cond = event.get(\"zone\") != \"OFF\"\n\n                x_is_neg_conds = is_fenwick &amp; is_long_distance &amp; x_is_neg &amp; bad_shots &amp; zone_cond\n\n                x_is_pos_conds = is_fenwick &amp; is_long_distance &amp; x_is_pos &amp; bad_shots &amp; zone_cond\n\n                if x_is_neg_conds is True:\n                    event[\"event_distance\"] = ((abs(event[\"coords_x\"]) + 89) ** 2 + event[\"coords_y\"] ** 2) ** (1 / 2)\n\n                    try:\n                        event[\"event_angle\"] = np.degrees(\n                            abs(np.arctan(event[\"coords_y\"] / (abs(event[\"coords_x\"] + 89))))\n                        )\n\n                    except ZeroDivisionError:  # Not covered by tests\n                        event[\"event_angle\"] = np.degrees(abs(np.arctan(np.nan)))\n\n                elif x_is_pos_conds is True:\n                    event[\"event_distance\"] = ((event[\"coords_x\"] + 89) ** 2 + event[\"coords_y\"] ** 2) ** (1 / 2)\n\n                    try:\n                        event[\"event_angle\"] = np.degrees(abs(np.arctan(event[\"coords_y\"] / (event[\"coords_x\"] + 89))))\n\n                    except ZeroDivisionError:  # Not covered by tests\n                        event[\"event_angle\"] = np.degrees(abs(np.arctan(np.nan)))\n\n                else:\n                    event[\"event_distance\"] = ((89 - abs(event[\"coords_x\"])) ** 2 + event[\"coords_y\"] ** 2) ** (1 / 2)\n\n                    try:\n                        event[\"event_angle\"] = np.degrees(\n                            abs(np.arctan(event[\"coords_y\"] / (89 - abs(event[\"coords_x\"]))))\n                        )\n\n                    except ZeroDivisionError:\n                        event[\"event_angle\"] = np.degrees(abs(np.arctan(np.nan)))\n\n            if (\n                event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]\n                and event.get(\"zone\") == \"DEF\"\n                and event.get(\"event_distance\", 0) &lt;= 64\n            ):  # Not covered by tests\n                event[\"zone\"] = \"OFF\"\n\n            if event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]:\n                if event.get(\"zone\") == \"OFF\":\n                    if event.get(\"coords_x\") is not None and event.get(\"coords_y\") is not None:\n                        shot_coords = Point(event[\"coords_x\"], event[\"coords_y\"])\n\n                        if danger1.contains(shot_coords) or danger2.contains(shot_coords):\n                            event[\"danger\"] = 1\n\n                        else:\n                            event[\"danger\"] = 0\n\n                        if high_danger1.contains(shot_coords) or high_danger2.contains(shot_coords):\n                            event[\"high_danger\"] = 1\n\n                            event[\"danger\"] = 0\n\n                        else:\n                            event[\"high_danger\"] = 0\n\n                    else:\n                        event[\"high_danger\"] = 0\n\n                        event[\"danger\"] = 0\n\n                else:\n                    event[\"high_danger\"] = 0\n\n                    event[\"danger\"] = 0\n\n            event[\"home_skaters\"] = len(event[\"home_on_eh_id\"])\n            event[\"away_skaters\"] = len(event[\"away_on_eh_id\"])\n\n            event[\"home_forwards_count\"] = len(event[\"home_forwards\"])\n            event[\"home_defense_count\"] = len(event[\"home_defense\"])\n\n            if event[\"home_skaters\"] &gt; 0:\n                event[\"home_forwards_percent\"] = event[\"home_forwards_count\"] / event[\"home_skaters\"]\n\n            else:\n                event[\"home_forwards_percent\"] = 0\n\n            event[\"away_forwards_count\"] = len(event[\"away_forwards\"])\n            event[\"away_defense_count\"] = len(event[\"away_defense\"])\n\n            if event[\"away_skaters\"] &gt; 0:\n                event[\"away_forwards_percent\"] = event[\"away_forwards_count\"] / event[\"away_skaters\"]\n\n            else:\n                event[\"away_forwards_percent\"] = 0\n\n            home_on = \"E\" if not event[\"home_goalie\"] else event[\"home_skaters\"]\n\n            away_on = \"E\" if not event[\"away_goalie\"] else event[\"away_skaters\"]\n\n            event[\"strength_state\"] = f\"{home_on}v{away_on}\"\n\n            if event.get(\"event_team\") == event[\"home_team\"] or not event.get(\"event_team\"):\n                new_values = {\n                    \"strength_state\": f\"{home_on}v{away_on}\",\n                    \"score_state\": f\"{event['home_score']}v{event['away_score']}\",\n                    \"score_diff\": event[\"home_score_diff\"],\n                    \"event_team_skaters\": event[\"home_skaters\"],\n                    \"teammates_eh_id\": event[\"home_on_eh_id\"],\n                    \"teammates_api_id\": event[\"home_on_api_id\"],\n                    \"teammates\": event[\"home_on\"],\n                    \"teammates_positions\": event[\"home_on_positions\"],\n                    \"forwards_eh_id\": event[\"home_forwards_eh_id\"],\n                    \"forwards_api_id\": event[\"home_forwards_api_id\"],\n                    \"forwards\": event[\"home_forwards\"],\n                    \"forwards_count\": event[\"home_forwards_count\"],\n                    \"forwards_percent\": event[\"home_forwards_percent\"],\n                    \"defense_eh_id\": event[\"home_defense_eh_id\"],\n                    \"defense_api_id\": event[\"home_defense_api_id\"],\n                    \"defense\": event[\"home_defense\"],\n                    \"defense_count\": event[\"home_defense_count\"],\n                    \"own_goalie_eh_id\": event[\"home_goalie_eh_id\"],\n                    \"own_goalie_api_id\": event[\"home_goalie_api_id\"],\n                    \"own_goalie\": event[\"home_goalie\"],\n                    \"opp_strength_state\": f\"{away_on}v{home_on}\",\n                    \"opp_score_state\": f\"{event['away_score']}v{event['home_score']}\",\n                    \"opp_score_diff\": event[\"away_score_diff\"],\n                    \"opp_team_skaters\": event[\"away_skaters\"],\n                    \"opp_team_on_eh_id\": event[\"away_on_eh_id\"],\n                    \"opp_team_on_api_id\": event[\"away_on_api_id\"],\n                    \"opp_team_on\": event[\"away_on\"],\n                    \"opp_team_on_positions\": event[\"away_on_positions\"],\n                    \"opp_forwards_eh_id\": event[\"away_forwards_eh_id\"],\n                    \"opp_forwards_api_id\": event[\"away_forwards_api_id\"],\n                    \"opp_forwards\": event[\"away_forwards\"],\n                    \"opp_forwards_count\": event[\"away_forwards_count\"],\n                    \"opp_forwards_percent\": event[\"away_forwards_percent\"],\n                    \"opp_defense_eh_id\": event[\"away_defense_eh_id\"],\n                    \"opp_defense_api_id\": event[\"away_defense_api_id\"],\n                    \"opp_defense\": event[\"away_defense\"],\n                    \"opp_defense_count\": event[\"away_defense_count\"],\n                    \"opp_goalie_eh_id\": event[\"away_goalie_eh_id\"],\n                    \"opp_goalie_api_id\": event[\"away_goalie_api_id\"],\n                    \"opp_goalie\": event[\"away_goalie\"],\n                }\n\n            elif event.get(\"event_team\") == event[\"away_team\"]:\n                new_values = {\n                    \"strength_state\": f\"{away_on}v{home_on}\",\n                    \"score_state\": f\"{event['away_score']}v{event['home_score']}\",\n                    \"score_diff\": event[\"away_score_diff\"],\n                    \"event_team_skaters\": event[\"away_skaters\"],\n                    \"teammates_eh_id\": event[\"away_on_eh_id\"],\n                    \"teammates_api_id\": event[\"away_on_api_id\"],\n                    \"teammates\": event[\"away_on\"],\n                    \"teammates_positions\": event[\"away_on_positions\"],\n                    \"forwards_eh_id\": event[\"away_forwards_eh_id\"],\n                    \"forwards_api_id\": event[\"away_forwards_api_id\"],\n                    \"forwards\": event[\"away_forwards\"],\n                    \"forwards_count\": event[\"away_forwards_count\"],\n                    \"forwards_percent\": event[\"away_forwards_percent\"],\n                    \"defense_eh_id\": event[\"away_defense_eh_id\"],\n                    \"defense_api_id\": event[\"away_defense_api_id\"],\n                    \"defense\": event[\"away_defense\"],\n                    \"defense_count\": event[\"away_defense_count\"],\n                    \"own_goalie_eh_id\": event[\"away_goalie_eh_id\"],\n                    \"own_goalie_api_id\": event[\"away_goalie_api_id\"],\n                    \"own_goalie\": event[\"away_goalie\"],\n                    \"opp_strength_state\": f\"{home_on}v{away_on}\",\n                    \"opp_score_state\": f\"{event['home_score']}v{event['away_score']}\",\n                    \"opp_score_diff\": event[\"home_score_diff\"],\n                    \"opp_team_skaters\": event[\"home_skaters\"],\n                    \"opp_team_on_eh_id\": event[\"home_on_eh_id\"],\n                    \"opp_team_on_api_id\": event[\"home_on_api_id\"],\n                    \"opp_team_on\": event[\"home_on\"],\n                    \"opp_team_on_positions\": event[\"home_on_positions\"],\n                    \"opp_forwards_eh_id\": event[\"home_forwards_eh_id\"],\n                    \"opp_forwards_api_id\": event[\"home_forwards_api_id\"],\n                    \"opp_forwards\": event[\"home_forwards\"],\n                    \"opp_forwards_count\": event[\"home_forwards_count\"],\n                    \"opp_forwards_percent\": event[\"home_forwards_percent\"],\n                    \"opp_defense_eh_id\": event[\"home_defense_eh_id\"],\n                    \"opp_defense_api_id\": event[\"home_defense_api_id\"],\n                    \"opp_defense\": event[\"home_defense\"],\n                    \"opp_defense_count\": event[\"home_defense_count\"],\n                    \"opp_goalie_eh_id\": event[\"home_goalie_eh_id\"],\n                    \"opp_goalie_api_id\": event[\"home_goalie_api_id\"],\n                    \"opp_goalie\": event[\"home_goalie\"],\n                }\n\n            event.update(new_values)\n\n            event_team_lists = {\n                \"event_on_x\": event.get(\"teammates\", []),\n                \"event_on_x_eh_id\": event.get(\"teammates_eh_id\", []),\n                \"event_on_x_api_id\": event.get(\"teammates_api_id\", []),\n                \"event_on_x_pos\": event.get(\"teammates_positions\", []),\n            }\n\n            if event.get(\"own_goalie\"):\n                event_team_lists.update(\n                    {\n                        \"event_on_x\": event[\"teammates\"] + event[\"own_goalie\"],\n                        \"event_on_x_eh_id\": event[\"teammates_eh_id\"] + event[\"own_goalie_eh_id\"],\n                        \"event_on_x_api_id\": event[\"teammates_api_id\"] + event[\"own_goalie_api_id\"],\n                        \"event_on_x_pos\": event[\"teammates_positions\"] + [\"G\"],\n                    }\n                )\n\n            for list_name, event_team_list in event_team_lists.items():\n                for player_num, player in enumerate(event_team_list):\n                    col_name = list_name.replace(\"x\", str(player_num + 1))\n                    event[col_name] = player\n\n            opp_team_lists = {\n                \"opp_on_x\": event.get(\"opp_team_on\", []),\n                \"opp_on_x_eh_id\": event.get(\"opp_team_on_eh_id\", []),\n                \"opp_on_x_api_id\": event.get(\"opp_team_on_api_id\", []),\n                \"opp_on_x_pos\": event.get(\"opp_team_on_positions\", []),\n            }\n\n            if event.get(\"opp_goalie\"):\n                opp_team_lists.update(\n                    {\n                        \"opp_on_x\": event[\"opp_team_on\"] + event[\"opp_goalie\"],\n                        \"opp_on_x_eh_id\": event[\"opp_team_on_eh_id\"] + event[\"opp_goalie_eh_id\"],\n                        \"opp_on_x_api_id\": event[\"opp_team_on_api_id\"] + event[\"opp_goalie_api_id\"],\n                        \"opp_on_x_pos\": event[\"opp_team_on_positions\"] + [\"G\"],\n                    }\n                )\n\n            for list_name, opp_team_list in opp_team_lists.items():\n                for player_num, player in enumerate(opp_team_list):\n                    col_name = list_name.replace(\"x\", str(player_num + 1))\n                    event[col_name] = player\n\n            if event[\"event\"] == \"CHANGE\":\n                if event[\"change_on\"]:\n                    change_on_lists = {\n                        \"change_on_x\": event.get(\"change_on\", \"\").split(\", \"),\n                        \"change_on_x_eh_id\": event.get(\"change_on_eh_id\", \"\").split(\", \"),\n                        \"change_on_x_api_id\": event.get(\"change_on_api_id\", \"\").split(\", \"),\n                        \"change_on_x_pos\": event.get(\"change_on_positions\", \"\").split(\", \"),\n                    }\n\n                    for list_name, change_on_list in change_on_lists.items():\n                        for player_num, player in enumerate(change_on_list):\n                            col_name = list_name.replace(\"x\", str(player_num + 1))\n                            event[col_name] = player\n\n                if event[\"change_off\"]:\n                    change_off_lists = {\n                        \"change_off_x\": event.get(\"change_off\", \"\").split(\", \"),\n                        \"change_off_x_eh_id\": event.get(\"change_off_eh_id\", \"\").split(\", \"),\n                        \"change_off_x_api_id\": event.get(\"change_off_api_id\", \"\").split(\", \"),\n                        \"change_off_x_pos\": event.get(\"change_off_positions\", \"\").split(\", \"),\n                    }\n\n                    for list_name, change_off_list in change_off_lists.items():\n                        for player_num, player in enumerate(change_off_list):\n                            col_name = list_name.replace(\"x\", str(player_num + 1))\n                            event[col_name] = player\n\n            if \"PENALTY SHOT\" in event[\"description\"]:\n                event[\"strength_state\"] = \"1v0\"\n\n            if (event[\"home_skaters\"] &gt; 5 and event[\"home_goalie\"] != []) or (\n                event[\"away_skaters\"] &gt; 5 and event[\"away_goalie\"] != []\n            ):\n                event[\"strength_state\"] = \"ILLEGAL\"\n\n                event[\"opp_strength_state\"] = \"ILLEGAL\"\n\n            if event[\"period\"] == 5 and event[\"session\"] == \"R\":  # Not covered by tests\n                event[\"strength_state\"] = \"1v0\"\n\n            if event[\"event\"] == \"CHANGE\":\n                faceoffs = [\n                    x\n                    for x in self._play_by_play\n                    if (\n                        x[\"event\"] == \"FAC\"\n                        and x[\"game_seconds\"] == event[\"game_seconds\"]\n                        and x[\"period\"] == event[\"period\"]\n                    )\n                ]\n\n                if len(faceoffs) &gt; 0:\n                    # game_seconds_list = [x[\"game_seconds\"] for x in self._play_by_play]\n\n                    # max_seconds = max(game_seconds_list)\n\n                    bad_seconds = []  # [0, 1200, 2400, 3600, 3900, max_seconds]\n\n                    if event[\"game_seconds\"] not in bad_seconds:\n                        event[\"coords_x\"] = faceoffs[0].get(\"coords_x\", \"\")\n\n                        event[\"coords_y\"] = faceoffs[0].get(\"coords_y\", \"\")\n\n                        if event[\"event_team\"] == faceoffs[0][\"event_team\"]:\n                            event[\"zone_start\"] = faceoffs[0][\"zone\"]\n\n                        else:\n                            zones = {\"OFF\": \"DEF\", \"DEF\": \"OFF\", \"NEU\": \"NEU\"}\n\n                            event[\"zone_start\"] = zones.get(faceoffs[0][\"zone\"])\n\n                else:\n                    event[\"zone_start\"] = \"OTF\"\n\n            event_dummies = [\n                \"block\",\n                \"change\",\n                \"chl\",\n                \"fac\",\n                \"give\",\n                \"goal\",\n                \"hit\",\n                \"miss\",\n                \"penl\",\n                \"shot\",\n                \"stop\",\n                \"take\",\n            ]\n\n            for event_dummy in event_dummies:\n                if event[\"event\"].lower() == event_dummy:\n                    event[event_dummy] = 1\n\n                else:\n                    event[event_dummy] = 0\n\n            if event[\"event\"] == \"GOAL\" or event[\"event\"] == \"SHOT\":\n                event[\"shot\"] = 1\n\n            fenwick_events = [\"SHOT\", \"GOAL\", \"MISS\"]\n\n            if event[\"event\"] in fenwick_events:\n                event[\"fenwick\"] = 1\n\n            else:\n                event[\"fenwick\"] = 0\n\n            corsi_events = fenwick_events + [\"BLOCK\"]\n\n            if event[\"event\"] in corsi_events:\n                event[\"corsi\"] = 1\n\n            else:\n                event[\"corsi\"] = 0\n\n            if event.get(\"high_danger\") == 1:\n                if event[\"event\"] in [\"GOAL\", \"SHOT\", \"MISS\"]:\n                    event[\"hd_fenwick\"] = 1\n\n                if event[\"event\"] == \"GOAL\":\n                    event[\"hd_goal\"] = 1\n                    event[\"hd_shot\"] = 1\n\n                if event[\"event\"] == \"SHOT\":\n                    event[\"hd_shot\"] = 1\n\n                if event[\"event\"] == \"MISS\":\n                    event[\"hd_miss\"] = 1\n\n            else:\n                event[\"hd_goal\"] = 0\n                event[\"hd_shot\"] = 0\n                event[\"hd_miss\"] = 0\n                event[\"hd_fenwick\"] = 0\n\n            if event[\"event\"] == \"FAC\":\n                if event[\"zone\"] == \"OFF\":\n                    event[\"ozf\"] = 1\n\n                else:\n                    event[\"ozf\"] = 0\n\n                if event[\"zone\"] == \"DEF\":\n                    event[\"dzf\"] = 1\n\n                else:\n                    event[\"dzf\"] = 0\n\n                if event[\"zone\"] == \"NEU\":\n                    event[\"nzf\"] = 1\n\n                else:\n                    event[\"nzf\"] = 0\n\n            else:\n                event[\"ozf\"] = 0\n                event[\"nzf\"] = 0\n                event[\"dzf\"] = 0\n\n            if event[\"event\"] == \"CHANGE\" and event.get(\"zone_start\"):\n                if event[\"zone_start\"] == \"OFF\":\n                    event[\"ozc\"] = 1\n\n                else:\n                    event[\"ozc\"] = 0\n\n                if event[\"zone_start\"] == \"DEF\":\n                    event[\"dzc\"] = 1\n\n                else:\n                    event[\"dzc\"] = 0\n\n                if event[\"zone_start\"] == \"NEU\":\n                    event[\"nzc\"] = 1\n\n                else:\n                    event[\"nzc\"] = 0\n\n                if event[\"zone_start\"] == \"OTF\":\n                    event[\"otf\"] = 1\n\n                else:\n                    event[\"otf\"] = 0\n\n            else:\n                event[\"ozc\"] = 0\n                event[\"nzc\"] = 0\n                event[\"dzc\"] = 0\n                event[\"otf\"] = 0\n\n            if event[\"event\"] == \"PENL\":\n                penalty_lengths = [0, 2, 4, 5, 10]\n\n                for penalty_length in penalty_lengths:\n                    if event.get(\"penalty_length\") == penalty_length:\n                        event[f\"pen{penalty_length}\"] = 1\n\n                    else:\n                        event[f\"pen{penalty_length}\"] = 0\n\n            else:\n                event[\"pen0\"] = 0\n                event[\"pen2\"] = 0\n                event[\"pen4\"] = 0\n                event[\"pen5\"] = 0\n                event[\"pen10\"] = 0\n\n            if event[\"event\"] == \"BLOCK\" and \"BLOCKED BY TEAMMATE\" in event[\"description\"]:  # Not covered by tests\n                event[\"teammate_block\"] = 1\n                event[\"block\"] = 0\n            else:\n                event[\"teammate_block\"] = 0\n\n            game_id_str = str(event[\"game_id\"])\n            event_idx_str = str(event[\"event_idx\"])\n\n            if len(event_idx_str) == 1:\n                event_id = game_id_str + \"000\" + event_idx_str\n\n            elif len(event_idx_str) == 2:\n                event_id = game_id_str + \"00\" + event_idx_str\n\n            elif len(event_idx_str) == 3:\n                event_id = game_id_str + \"0\" + event_idx_str\n\n            elif len(event_idx_str) == 4:  # Not covered by tests\n                event_id = game_id_str + event_idx_str\n\n            event[\"id\"] = int(event_id)\n\n            final_events.append(PBPEvent.model_validate(event).model_dump())\n            final_events_ext.append(PBPEventExt.model_validate(event).model_dump())\n\n        self._play_by_play = final_events\n        self._play_by_play_ext = final_events_ext\n\n    def _prep_xg(self):\n        \"\"\"Method to add xG predictions to play-by-play data. Updates self._play_by_play.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Game object\n            &gt;&gt;&gt; game = Game(2023020001)\n\n            Requires clean events from the shifts, API events, and HTML events feeds\n\n            HTML events\n            &gt;&gt;&gt; game._scrape_html_events()  # Scrapes events from HTML feed\n            &gt;&gt;&gt; game._munge_html_events()  # Preps raw events, updates game._html_events\n\n            API events\n            &gt;&gt;&gt; game._munge_api_events()  # Preps raw events, updates game._api_events\n\n            Shifts and changes\n            &gt;&gt;&gt; game._scrape_html_events()  # Scrapes shifts from HTML feed\n            &gt;&gt;&gt; game._munge_shifts()  # Preps raw shifts, updates game._shifts\n            &gt;&gt;&gt; game._munge_changes()  # Preps changes\n\n            Combines them all\n            &gt;&gt;&gt; game._combine_events()  # Combines raw events, into game._play_by_play\n\n            Data can then be manually cleaned\n            &gt;&gt;&gt; game._munge_play_by_play()\n            &gt;&gt;&gt; game._prep_xg()\n            &gt;&gt;&gt; game._play_by_play  # Returns cleaned data\n        \"\"\"\n        plays = self._play_by_play\n\n        even_strengths = [\"5v5\", \"4v4\", \"3v3\"]\n        powerplay_strengths = [\"5v4\", \"4v3\", \"5v3\"]\n        shorthanded_strengths = [\"4v5\", \"3v4\", \"3v5\"]\n        empty_for_strengths = [\"Ev5\", \"Ev4\", \"Ev3\"]\n        empty_against_strengths = [\"5vE\", \"4vE\", \"3vE\"]\n\n        important_events = [\n            \"SHOT\",\n            \"FAC\",\n            \"HIT\",\n            \"BLOCK\",\n            \"MISS\",\n            \"GIVE\",\n            \"TAKE\",\n            # \"PENL\",\n            \"GOAL\",\n        ]\n\n        xg_plays = [\n            x\n            for x in plays\n            if x[\"event\"] in important_events\n            and x[\"strength_state\"] != \"1v0\"\n            and x[\"strength_state\"] != \"EvE\"\n            and x[\"coords_x\"] is not None\n            and x[\"coords_y\"] is not None\n        ]\n\n        xg_idxs = [x[\"event_idx\"] for x in xg_plays]\n\n        non_xg_plays = [x for x in plays if x[\"event_idx\"] not in xg_idxs]\n\n        for play in non_xg_plays:\n            play[\"pred_goal\"] = 0.0\n\n        for idx, play in enumerate(xg_plays):\n            if play[\"event\"] not in [\"GOAL\", \"SHOT\", \"MISS\"]:\n                play[\"pred_goal\"] = 0.0\n                continue\n\n            xg_fields = {\n                \"period\": play[\"period\"],\n                \"period_seconds\": play[\"period_seconds\"],\n                \"score_diff\": play[\"score_diff\"],\n                \"danger\": play[\"danger\"],\n                \"high_danger\": play[\"danger\"],\n                \"event_distance\": play[\"event_distance\"],\n                \"event_angle\": play[\"event_angle\"],\n                \"is_home\": play[\"is_home\"],\n                # \"forwards_count\": play[\"forwards_count\"],\n                # \"forwards_percent\": play[\"forwards_percent\"],\n                # \"opp_forwards_count\": play[\"opp_forwards_count\"],\n                # \"opp_forwards_percent\": play[\"opp_forwards_percent\"],\n            }\n\n            if play.get(\"player_1_position\") in [\"L\", \"C\", \"R\"]:\n                xg_fields[\"position_f\"] = 1\n                xg_fields[\"position_d\"] = 0\n                xg_fields[\"position_g\"] = 0\n\n            if play.get(\"player_1_position\") == \"D\":\n                xg_fields[\"position_f\"] = 0\n                xg_fields[\"position_d\"] = 1\n                xg_fields[\"position_g\"] = 0\n\n            if play.get(\"player_1_position\") == \"G\":\n                xg_fields[\"position_f\"] = 0\n                xg_fields[\"position_d\"] = 0\n                xg_fields[\"position_g\"] = 1\n\n            shot_types = [\n                \"backhand\",\n                \"bat\",\n                \"between_legs\",\n                \"cradle\",\n                \"deflected\",\n                \"poke\",\n                \"slap\",\n                \"snap\",\n                \"tip_in\",\n                \"wrap_around\",\n                \"wrist\",\n            ]\n\n            for shot_type in shot_types:\n                if play[\"shot_type\"] == shot_type.upper().replace(\"_\", \"-\"):\n                    xg_fields.update({shot_type: 1})\n\n                else:\n                    xg_fields.update({shot_type: 0})\n\n            if idx == 0 or xg_plays[idx - 1][\"period\"] != play[\"period\"]:  # Not covered by tests\n                new_fields = [\n                    \"is_rebound\",\n                    \"rush_attempt\",\n                    \"seconds_since_last\",\n                    \"event_type_last\",\n                    \"distance_from_last\",\n                    \"prior_shot_same\",\n                    \"prior_miss_same\",\n                    \"prior_block_same\",\n                    \"prior_give_same\",\n                    \"prior_take_same\",\n                    \"prior_hit_same\",\n                    \"prior_shot_opp\",\n                    \"prior_miss_opp\",\n                    \"prior_block_opp\",\n                    \"prior_give_opp\",\n                    \"prior_take_opp\",\n                    \"prior_hit_opp\",\n                    \"prior_face\",\n                ]\n\n                new_fields = {x: 0 for x in new_fields}\n\n                xg_fields.update(new_fields)\n\n            else:\n                previous_play = xg_plays[idx - 1]\n\n                seconds_since_last = play[\"game_seconds\"] - previous_play[\"game_seconds\"]\n\n                xg_fields[\"seconds_since_last\"] = seconds_since_last\n\n                event_team_last = previous_play[\"event_team\"]\n                event_type_last = previous_play[\"event\"]\n                coords_x_last = previous_play[\"coords_x\"]\n                coords_y_last = previous_play[\"coords_y\"]\n                zone_last = previous_play[\"zone\"]\n\n                distance_from_last = (\n                    (play[\"coords_x\"] - coords_x_last) ** 2 + (play[\"coords_y\"] - coords_y_last) ** 2\n                ) ** (1 / 2)\n\n                xg_fields[\"distance_from_last\"] = distance_from_last\n\n                same_team_as_last = play[\"event_team\"] == event_team_last\n                not_same_team_as_last = play[\"event_team\"] != event_team_last\n\n                last_is_shot = previous_play[\"event\"] == \"SHOT\"\n                last_is_miss = previous_play[\"event\"] == \"MISS\"\n                last_is_block = previous_play[\"event\"] == \"BLOCK\"\n                last_is_give = previous_play[\"event\"] == \"GIVE\"\n                last_is_take = previous_play[\"event\"] == \"TAKE\"\n                last_is_hit = previous_play[\"event\"] == \"HIT\"\n                last_is_face = previous_play[\"event\"] == \"FACE\"\n\n                if last_is_shot &amp; same_team_as_last:\n                    xg_fields[\"prior_shot_same\"] = 1\n                else:\n                    xg_fields[\"prior_shot_same\"] = 0\n\n                if last_is_miss &amp; same_team_as_last:\n                    xg_fields[\"prior_miss_same\"] = 1\n                else:\n                    xg_fields[\"prior_miss_same\"] = 0\n\n                if last_is_block &amp; same_team_as_last:\n                    xg_fields[\"prior_block_same\"] = 1\n                else:\n                    xg_fields[\"prior_block_same\"] = 0\n\n                if last_is_give &amp; same_team_as_last:\n                    xg_fields[\"prior_give_same\"] = 1\n                else:\n                    xg_fields[\"prior_give_same\"] = 0\n\n                if last_is_take &amp; same_team_as_last:\n                    xg_fields[\"prior_take_same\"] = 1\n                else:\n                    xg_fields[\"prior_take_same\"] = 0\n\n                if last_is_hit &amp; same_team_as_last:\n                    xg_fields[\"prior_hit_same\"] = 1\n                else:\n                    xg_fields[\"prior_hit_same\"] = 0\n\n                if last_is_shot &amp; not_same_team_as_last:\n                    xg_fields[\"prior_shot_opp\"] = 1\n                else:\n                    xg_fields[\"prior_shot_opp\"] = 0\n\n                if last_is_miss &amp; not_same_team_as_last:\n                    xg_fields[\"prior_miss_opp\"] = 1\n                else:\n                    xg_fields[\"prior_miss_opp\"] = 0\n\n                if last_is_block &amp; not_same_team_as_last:\n                    xg_fields[\"prior_block_opp\"] = 1\n                else:\n                    xg_fields[\"prior_block_opp\"] = 0\n\n                if last_is_give &amp; not_same_team_as_last:\n                    xg_fields[\"prior_give_opp\"] = 1\n                else:\n                    xg_fields[\"prior_give_opp\"] = 0\n\n                if last_is_take &amp; not_same_team_as_last:\n                    xg_fields[\"prior_take_opp\"] = 1\n                else:\n                    xg_fields[\"prior_take_opp\"] = 0\n\n                if last_is_hit &amp; not_same_team_as_last:\n                    xg_fields[\"prior_hit_opp\"] = 1\n                else:\n                    xg_fields[\"prior_hit_opp\"] = 0\n\n                if last_is_face:  # Not covered by tests\n                    xg_fields[\"prior_face\"] = 1\n                else:\n                    xg_fields[\"prior_face\"] = 0\n\n                if play[\"score_diff\"] &gt; 4:\n                    xg_fields[\"score_diff\"] = 4\n\n                elif play[\"score_diff\"] &lt; -4:\n                    xg_fields[\"score_diff\"] = -4\n\n                if (\n                    event_type_last in [\"SHOT\", \"MISS\"] and same_team_as_last and xg_fields[\"seconds_since_last\"] &lt;= 3\n                ) or (event_type_last == \"BLOCK\" and not_same_team_as_last and xg_fields[\"seconds_since_last\"] &lt;= 3):\n                    xg_fields[\"is_rebound\"] = 1\n\n                else:\n                    xg_fields[\"is_rebound\"] = 0\n\n                if xg_fields[\"seconds_since_last\"] &lt;= 4 and zone_last == \"NEU\":\n                    xg_fields[\"rush_attempt\"] = 1\n\n                else:\n                    xg_fields[\"rush_attempt\"] = 0\n\n            strength_states_list = [\n                even_strengths,\n                powerplay_strengths,\n                shorthanded_strengths,\n                empty_for_strengths,\n                empty_against_strengths,\n            ]\n\n            strength_states_flat = [\n                strength_state for strength_states in strength_states_list for strength_state in strength_states\n            ]\n\n            if play[\"strength_state\"] not in strength_states_flat:\n                play[\"pred_goal\"] = 0.0\n                continue\n\n            for strength_states in strength_states_list:\n                if play[\"strength_state\"] in strength_states:\n                    for strength_state in strength_states:\n                        if play[\"strength_state\"] == strength_state:\n                            xg_fields[f\"strength_state_{strength_state}\"] = 1\n\n                        else:\n                            xg_fields[f\"strength_state_{strength_state}\"] = 0\n\n            xg_fields = XGFields.model_validate(xg_fields).model_dump(exclude_unset=True)\n            xg_data = np.array(list(xg_fields.values()), ndmin=2)\n\n            self._xg_fields.update({play[\"event_idx\"]: xg_data})\n\n            if play[\"strength_state\"] in even_strengths:\n                preds = self._es_model.predict_proba(xg_data)\n\n            if play[\"strength_state\"] in powerplay_strengths:\n                preds = self._pp_model.predict_proba(xg_data)\n\n            if play[\"strength_state\"] in shorthanded_strengths:\n                preds = self._sh_model.predict_proba(xg_data)\n\n            if play[\"strength_state\"] in empty_for_strengths:\n                preds = self._ef_model.predict_proba(xg_data)\n\n            if play[\"strength_state\"] in empty_against_strengths:\n                preds = self._ea_model.predict_proba(xg_data)\n\n            pred_goal = preds[:, 1][0]\n            play[\"pred_goal\"] = pred_goal\n\n            play = calculate_score_adjustment(play, score_adjustments)\n\n        new_plays = xg_plays + non_xg_plays\n\n        new_plays = sorted(new_plays, key=lambda x: x[\"event_idx\"])\n\n        self._play_by_play = new_plays\n\n    @property\n    def play_by_play(self) -&gt; list:\n        \"\"\"List of events in play-by-play. Each event is a dictionary with the below keys.\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).play_by_play_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            game_date (str):\n                Date game was played, e.g., 2020-01-09\n            event_idx (int):\n                Index ID for event, e.g., 667\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            strength_state (str):\n                Strength state, e.g., 5vE\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., CHI\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            description (str | None):\n                Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., DEF\n            coords_x (int):\n                x-coordinates where the event occurred, e.g, -96\n            coords_y (int):\n                y-coordinates where the event occurred, e.g., 11\n            danger (int):\n                Whether shot event occurred from danger area, e.g., 0\n            high_danger (int):\n                Whether shot event occurred from high-danger area, e.g., 0\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_eh_id_api (str):\n                Evolving Hockey ID for player_1 from the api_events (for debugging), e.g., PEKKA.RINNE\n            player_1_api_id (int):\n                NHL API ID for player_1, e.g., 8471469\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_1_type (str):\n                Type of player, e.g., GOAL SCORER\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_eh_id_api (str | None):\n                Evolving Hockey ID for player_2 from the api_events (for debugging), e.g., None\n            player_2_api_id (int | None):\n                NHL API ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_2_type (str | None):\n                Type of player, e.g., None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_eh_id_api (str | None):\n                Evolving Hockey ID for player_3 from the api_events (for debugging), e.g., None\n            player_3_api_id (int | None):\n                NHL API ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            player_3_type (str | None):\n                Type of player, e.g., None\n            score_state (str):\n                Score of the game from event team's perspective, e.g., 4v2\n            score_diff (int):\n                Score differential from event team's perspective, e.g., 2\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            event_length (int):\n                Time elapsed since previous event, e.g., 5\n            event_distance (float | None):\n                Calculated distance of event from goal, e.g, 185.32673849177834\n            pbp_distance (int):\n                Distance of event from goal from description, e.g., 185\n            event_angle (float | None):\n                Angle of event towards goal, e.g., 57.52880770915151\n            penalty (str | None):\n                Name of penalty, e.g., None\n            penalty_length (int | None):\n                Duration of penalty, e.g., None\n            home_score (int):\n                Home team's score, e.g., 2\n            home_score_diff (int):\n                Home team's score differential, e.g., -2\n            away_score (int):\n                Away team's score, e.g., 4\n            away_score_diff (int):\n                Away team's score differential, e.g., 2\n            is_home (int):\n                Whether event team is home, e.g., 0\n            is_away (int):\n                Whether event is away, e.g., 1\n            home_team (str):\n                Home team, e.g., CHI\n            away_team (str):\n                Away team, e.g., NSH\n            home_skaters (int):\n                Number of home team skaters on-ice (excl. goalies), e.g., 6\n            away_skaters (int):\n                Number of away team skaters on-ice (excl. goalies), e.g., 5\n            home_on (list | str | None):\n                Name of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            home_on_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_on_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            home_on_positions (list | str | None):\n                Positions of home team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            away_on (list | str | None):\n                Name of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            away_on_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            away_on_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            away_on_positions (list | str | None):\n                Positions of away team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            event_team_skaters (int | None):\n                Number of event team skaters on-ice (excl. goalies), e.g., 5\n            teammates (list | str | None):\n                Name of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            teammates_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            teammates_api_id (list | str | None = None):\n                NHL API IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            teammates_positions (list | str | None):\n                Positions of event team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            own_goalie (list | str | None):\n                Name of the event team's goalie, e.g., PEKKA RINNE\n            own_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the event team's goalie, e.g., PEKKA.RINNE\n            own_goalie_api_id (list | str | None):\n                NHL API ID of the event team's goalie, e.g., 8471469\n            forwards (list | str | None):\n                Name of event team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            forwards_api_id (list | str | None):\n                NHL API IDs of event team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            defense (list | str | None):\n                Name of event team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            defense_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            defense_api_id (list | str | None):\n                NHL API IDs of event team's skaters on-ice, e.g., 8475218, 8474600\n            opp_strength_state (str | None):\n                Strength state from opposing team's perspective, e.g., Ev5\n            opp_score_state (str | None):\n                Score state from opposing team's perspective, e.g., 2v4\n            opp_score_diff (int | None):\n                Score differential from opposing team's perspective, e.g., -2\n            opp_team_skaters (int | None):\n                Number of opposing team skaters on-ice (excl. goalies), e.g., 6\n            opp_team_on (list | str | None):\n                Name of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_team_on_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_team_on_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            opp_team_on_positions (list | str | None):\n                Positions of opposing team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            opp_goalie (list | str | None):\n                Name of the opposing team's goalie, e.g., None\n            opp_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the opposing team's goalie, e.g., None\n            opp_goalie_api_id (list | str | None):\n                NHL API ID of the opposing team's goalie, e.g., None\n            opp_forwards (list | str | None):\n                Name of opposing team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            opp_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            opp_forwards_api_id (list | str | None):\n                NHL API IDs of opposing team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            opp_defense (list | str | None):\n                Name of opposing team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_defense_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice, e.g., 8470281, 8476979\n            home_forwards (list | str | None):\n                Name of home team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            home_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            home_forwards_api_id (list | str | None = None):\n                NHL API IDs of home team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            home_defense (list | str | None):\n                Name of home team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            home_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_defense_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice, e.g., 8470281, 8476979\n            home_goalie (list | str | None):\n                Name of the home team's goalie, e.g., None\n            home_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the home team's goalie, e.g., None\n            home_goalie_api_id (list | str | None):\n                NHL API ID of the home team's goalie, e.g., None\n            away_forwards (list | str | None):\n                Name of away team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            away_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            away_forwards_api_id (list | str | None):\n                NHL API IDs of away team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            away_defense (list | str | None):\n                Name of away team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            away_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            away_defense_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice, e.g., 8475218, 8474600\n            away_goalie (list | str | None):\n                Name of the away team's goalie, e.g., PEKKA RINNE\n            away_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the away team's goalie, e.g., PEKKA.RINNE\n            away_goalie_api_id (list | str | None):\n                NHL API ID of the away team's goalie, e.g., 8471469\n            change_on_count (int | None):\n                Number of players on, e.g., None\n            change_off_count (int | None):\n                Number of players off, e.g., None\n            change_on (list | str | None):\n                Names of the players on, e.g., None\n            change_on_eh_id (list | str | None):\n                Evolving Hockey IDs of the players on, e.g., None\n            change_on_api_id (list | str | None):\n                NHL API IDs of the players on, e.g., None\n            change_on_positions (list | str | None):\n                Postions of the players on, e.g., None\n            change_off (list | str | None):\n                Names of the players off, e.g., None\n            change_off_eh_id (list | str | None):\n                Evolving Hockey IDs of the players off, e.g., None\n            change_off_api_id (list | str | None):\n                NHL API IDs of the players off, e.g., None\n            change_off_positions (list | str | None):\n                Positions of the players off, e.g., None\n            change_on_forwards_count (int | None):\n                Number of forwards changing on, e.g., None\n            change_off_forwards_count (int | None):\n                Number of forwards off, e.g., None\n            change_on_forwards (list | str | None):\n                Names of the forwards on, e.g., None\n            change_on_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards on, e.g., None\n            change_on_forwards_api_id (list | str | None):\n                NHL API IDs of the forwards on, e.g., None\n            change_off_forwards (list | str | None):\n                Names of the forwards off, e.g., None\n            change_off_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards off, e.g., None\n            change_off_forwards_api_id (list | str | None):\n                NHL API IDs of the forwards off, e.g., None\n            change_on_defense_count (int | None):\n                Number of defense on, e.g., None\n            change_off_defense_count (int | None):\n                Number of defense off, e.g., None\n            change_on_defense (list | str | None):\n                Names of the defense on, e.g., None\n            change_on_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense on, e.g., None\n            change_on_defense_api_id (list | str | None):\n                NHL API IDs of the defense on, e.g., None\n            change_off_defense (list | str | None):\n                Names of the defense off, e.g., None\n            change_off_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense off, e.g., None\n            change_off_defense_api_id (list | str | None):\n                NHL API IDs of the defense off, e.g., None\n            change_on_goalie_count (int | None):\n                Number of goalies on, e.g., None\n            change_off_goalie_count (int | None):\n                Number of goalies off, e.g., None\n            change_on_goalie (list | str | None):\n                Name of goalie on, e.g., None\n            change_on_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie on, e.g., None\n            change_on_goalie_api_id (list | str | None):\n                NHL API ID of the goalie on, e.g., None\n            change_off_goalie (list | str | None):\n                Name of the goalie off, e.g., None\n            change_off_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie off, e.g., None\n            change_off_goalie_api_id (list | str | None):\n                NHL API ID of the goalie off, e.g., None\n            goal (int):\n                Dummy indicator whether event is a goal, e.g., 1\n            shot (int):\n                Dummy indicator whether event is a shot, e.g., 1\n            miss (int):\n                Dummy indicator whether event is a miss, e.g., 0\n            fenwick (int):\n                Dummy indicator whether event is a fenwick event, e.g., 1\n            corsi (int):\n                Dummy indicator whether event is a corsi event, e.g., 1\n            block (int):\n                Dummy indicator whether event is a block, e.g., 0\n            hit (int):\n                Dummy indicator whether event is a hit, e.g., 0\n            give (int):\n                Dummy indicator whether event is a give, e.g., 0\n            take (int):\n                Dummy indicator whether event is a take, e.g., 0\n            fac (int):\n                Dummy indicator whether event is a faceoff, e.g., 0\n            penl (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            change (int):\n                Dummy indicator whether event is a change, e.g., 0\n            stop (int):\n                Dummy indicator whether event is a stop, e.g., 0\n            chl (int):\n                Dummy indicator whether event is a challenge, e.g., 0\n            ozf (int):\n                Dummy indicator whether event is a offensive zone faceoff, e.g., 0\n            nzf (int):\n                Dummy indicator whether event is a neutral zone faceoff, e.g., 0\n            dzf (int):\n                Dummy indicator whether event is a defensive zone faceoff, e.g., 0\n            ozc (int):\n                Dummy indicator whether event is a offensive zone change, e.g., 0\n            nzc (int):\n                Dummy indicator whether event is a neutral zone change, e.g., 0\n            dzc (int):\n                Dummy indicator whether event is a defensive zone change, e.g., 0\n            otf (int):\n                Dummy indicator whether event is an on-the-fly change, e.g., 0\n            pen0 (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            pen2 (int):\n                Dummy indicator whether event is a minor penalty, e.g., 0\n            pen4 (int):\n                Dummy indicator whether event is a double minor penalty, e.g., 0\n            pen5 (int):\n                Dummy indicator whether event is a major penalty, e.g., 0\n            pen10 (int):\n                Dummy indicator whether event is a game misconduct penalty, e.g., 0\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.play_by_play\n\n        \"\"\"\n        if self._play_by_play is None:\n            if self._rosters is None:\n                if self._api_rosters is None:\n                    self._munge_api_rosters()\n\n                if self._html_rosters is None:\n                    self._scrape_html_rosters()\n                    self._munge_html_rosters()\n\n                self._combine_rosters()\n\n            if self._changes is None:\n                self._scrape_shifts()\n                self._munge_shifts()\n\n                self._munge_changes()\n\n            if self._html_events is None:\n                self._scrape_html_events()\n                self._munge_html_events()\n\n            if self._api_events is None:\n                self._munge_api_events()\n\n            self._combine_events()\n            self._munge_play_by_play()\n            self._prep_xg()\n\n        return self._play_by_play\n\n    @property\n    def play_by_play_ext(self) -&gt; list:\n        \"\"\"List of additional columns used for aggregating on-ice statistics.\n\n        Returns:\n            id (int):\n                Unique play identifier, the equivalent of the game ID and event_idx concatenated\n            event_idx (int):\n                Index ID for event\n            event_on_1 (str | None):\n                Player name\n            event_on_1_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            event_on_1_api_id (int | None):\n                ID used for matching NHL API data\n            event_on_1_pos (str | None):\n                Player position\n            event_on_2 (str | None):\n                Player name\n            event_on_2_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            event_on_2_api_id (int | None):\n                ID used for matching NHL API data\n            event_on_2_pos (str | None):\n                Player position\n            event_on_3 (str | None):\n                Player name\n            event_on_3_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            event_on_3_api_id (int | None):\n                ID used for matching NHL API data\n            event_on_3_pos (str | None):\n                Player position\n            event_on_4 (str | None):\n                Player name\n            event_on_4_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            event_on_4_api_id (int | None):\n                ID used for matching NHL API data\n            event_on_4_pos (str | None):\n                Player position\n            event_on_5 (str | None):\n                Player name\n            event_on_5_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            event_on_5_api_id (int | None):\n                ID used for matching NHL API data\n            event_on_5_pos (str | None):\n                Player position\n            event_on_6 (str | None):\n                Player name\n            event_on_6_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            event_on_6_api_id (int | None):\n                ID used for matching NHL API data\n            event_on_6_pos (str | None):\n                Player position\n            event_on_7 (str | None):\n                Player name\n            event_on_7_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            event_on_7_api_id (int | None):\n                ID used for matching NHL API data\n            event_on_7_pos (str | None):\n                Player position\n            opp_on_1 (str | None):\n                Player name\n            opp_on_1_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            opp_on_1_api_id (int | None):\n                ID used for matching NHL API data\n            opp_on_1_pos (str | None):\n                Player position\n            opp_on_2 (str | None):\n                Player name\n            opp_on_2_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            opp_on_2_api_id (int | None):\n                ID used for matching NHL API data\n            opp_on_2_pos (str | None):\n                Player position\n            opp_on_3 (str | None):\n                Player name\n            opp_on_3_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            opp_on_3_api_id (int | None):\n                ID used for matching NHL API data\n            opp_on_3_pos (str | None):\n                Player position\n            opp_on_4 (str | None):\n                Player name\n            opp_on_4_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            opp_on_4_api_id (int | None):\n                ID used for matching NHL API data\n            opp_on_4_pos (str | None):\n                Player position\n            opp_on_5 (str | None):\n                Player name\n            opp_on_5_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            opp_on_5_api_id (int | None):\n                ID used for matching NHL API data\n            opp_on_5_pos (str | None):\n                Player position\n            opp_on_6 (str | None):\n                Player name\n            opp_on_6_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            opp_on_6_api_id (int | None):\n                ID used for matching NHL API data\n            opp_on_6_pos (str | None):\n                Player position\n            opp_on_7 (str | None):\n                Player name\n            opp_on_7_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            opp_on_7_api_id (int | None):\n                ID used for matching NHL API data\n            opp_on_7_pos (str | None):\n                Player position\n            change_on_1 (str | None):\n                Player name\n            change_on_1_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_on_1_api_id (int | None):\n                ID used for matching NHL API data\n            change_on_1_pos (str | None):\n                Player position\n            change_on_2 (str | None):\n                Player name\n            change_on_2_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_on_2_api_id (int | None):\n                ID used for matching NHL API data\n            change_on_2_pos (str | None):\n                Player position\n            change_on_3 (str | None):\n                Player name\n            change_on_3_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_on_3_api_id (int | None):\n                ID used for matching NHL API data\n            change_on_3_pos (str | None):\n                Player position\n            change_on_4 (str | None):\n                Player name\n            change_on_4_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_on_4_api_id (int | None):\n                ID used for matching NHL API data\n            change_on_4_pos (str | None):\n                Player position\n            change_on_5 (str | None):\n                Player name\n            change_on_5_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_on_5_api_id (int | None):\n                ID used for matching NHL API data\n            change_on_5_pos (str | None):\n                Player position\n            change_on_6 (str | None):\n                Player name\n            change_on_6_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_on_6_api_id (int | None):\n                ID used for matching NHL API data\n            change_on_6_pos (str | None):\n                Player position\n            change_on_7 (str | None):\n                Player name\n            change_on_7_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_on_7_api_id (int | None):\n                ID used for matching NHL API data\n            change_on_7_pos (str | None):\n                Player position\n            change_off_1 (str | None):\n                Player name\n            change_off_1_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_off_1_api_id (int | None):\n                ID used for matching NHL API data\n            change_off_1_pos (str | None):\n                Player position\n            change_off_2 (str | None):\n                Player name\n            change_off_2_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_off_2_api_id (int | None):\n                ID used for matching NHL API data\n            change_off_2_pos (str | None):\n                Player position\n            change_off_3 (str | None):\n                Player name\n            change_off_3_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_off_3_api_id (int | None):\n                ID used for matching NHL API data\n            change_off_3_pos (str | None):\n                Player position\n            change_off_4 (str | None):\n                Player name\n            change_off_4_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_off_4_api_id (int | None):\n                ID used for matching NHL API data\n            change_off_4_pos (str | None):\n                Player position\n            change_off_5 (str | None):\n                Player name\n            change_off_5_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_off_5_api_id (int | None):\n                ID used for matching NHL API data\n            change_off_5_pos (str | None):\n                Player position\n            change_off_6 (str | None):\n                Player name\n            change_off_6_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_off_6_api_id (int | None):\n                ID used for matching NHL API data\n            change_off_6_pos (str | None):\n                Player position\n            change_off_7 (str | None):\n                Player name\n            change_off_7_eh_id (str | None):\n                ID used for matching with Evolving Hockey data\n            change_off_7_api_id (int | None):\n                ID used for matching NHL API data\n            change_off_7_pos (str | None):\n                Player position\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.play_by_play_ext\n\n        \"\"\"\n        if self._play_by_play is None:\n            if self._rosters is None:\n                if self._api_rosters is None:\n                    self._munge_api_rosters()\n\n                if self._html_rosters is None:\n                    self._scrape_html_rosters()\n                    self._munge_html_rosters()\n\n                self._combine_rosters()\n\n            if self._changes is None:\n                self._scrape_shifts()\n                self._munge_shifts()\n\n                self._munge_changes()\n\n            if self._html_events is None:\n                self._scrape_html_events()\n                self._munge_html_events()\n\n            if self._api_events is None:\n                self._munge_api_events()\n\n            self._combine_events()\n            self._munge_play_by_play()\n            self._prep_xg()\n\n        return self._play_by_play_ext\n\n    @property\n    def play_by_play_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of play-by-play data.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            game_date (str):\n                Date game was played, e.g., 2020-01-09\n            event_idx (int):\n                Index ID for event, e.g., 667\n            period (int):\n                Period number of the event, e.g., 3\n            period_seconds (int):\n                Time elapsed in the period, in seconds, e.g., 1178\n            game_seconds (int):\n                Time elapsed in the game, in seconds, e.g., 3578\n            strength_state (str):\n                Strength state, e.g., 5vE\n            event_team (str):\n                Team that performed the action for the event, e.g., NSH\n            opp_team (str):\n                Opposing team, e.g., CHI\n            event (str):\n                Type of event that occurred, e.g., GOAL\n            description (str | None):\n                Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n            zone (str):\n                Zone where the event occurred, relative to the event team, e.g., DEF\n            coords_x (int):\n                x-coordinates where the event occurred, e.g, -96\n            coords_y (int):\n                y-coordinates where the event occurred, e.g., 11\n            danger (int):\n                Whether shot event occurred from danger area, e.g., 0\n            high_danger (int):\n                Whether shot event occurred from high-danger area, e.g., 0\n            player_1 (str):\n                Player that performed the action, e.g., PEKKA RINNE\n            player_1_eh_id (str):\n                Evolving Hockey ID for player_1, e.g., PEKKA.RINNE\n            player_1_eh_id_api (str):\n                Evolving Hockey ID for player_1 from the api_events (for debugging), e.g., PEKKA.RINNE\n            player_1_api_id (int):\n                NHL API ID for player_1, e.g., 8471469\n            player_1_position (str):\n                Position player_1 plays, e.g., G\n            player_1_type (str):\n                Type of player, e.g., GOAL SCORER\n            player_2 (str | None):\n                Player that performed the action, e.g., None\n            player_2_eh_id (str | None):\n                Evolving Hockey ID for player_2, e.g., None\n            player_2_eh_id_api (str | None):\n                Evolving Hockey ID for player_2 from the api_events (for debugging), e.g., None\n            player_2_api_id (int | None):\n                NHL API ID for player_2, e.g., None\n            player_2_position (str | None):\n                Position player_2 plays, e.g., None\n            player_2_type (str | None):\n                Type of player, e.g., None\n            player_3 (str | None):\n                Player that performed the action, e.g., None\n            player_3_eh_id (str | None):\n                Evolving Hockey ID for player_3, e.g., None\n            player_3_eh_id_api (str | None):\n                Evolving Hockey ID for player_3 from the api_events (for debugging), e.g., None\n            player_3_api_id (int | None):\n                NHL API ID for player_3, e.g., None\n            player_3_position (str | None):\n                Position player_3 plays, e.g., None\n            player_3_type (str | None):\n                Type of player, e.g., None\n            score_state (str):\n                Score of the game from event team's perspective, e.g., 4v2\n            score_diff (int):\n                Score differential from event team's perspective, e.g., 2\n            shot_type (str | None):\n                Type of shot taken, if event is a shot, e.g., WRIST\n            event_length (int):\n                Time elapsed since previous event, e.g., 5\n            event_distance (float | None):\n                Calculated distance of event from goal, e.g, 185.32673849177834\n            pbp_distance (int):\n                Distance of event from goal from description, e.g., 185\n            event_angle (float | None):\n                Angle of event towards goal, e.g., 57.52880770915151\n            penalty (str | None):\n                Name of penalty, e.g., None\n            penalty_length (int | None):\n                Duration of penalty, e.g., None\n            home_score (int):\n                Home team's score, e.g., 2\n            home_score_diff (int):\n                Home team's score differential, e.g., -2\n            away_score (int):\n                Away team's score, e.g., 4\n            away_score_diff (int):\n                Away team's score differential, e.g., 2\n            is_home (int):\n                Whether event team is home, e.g., 0\n            is_away (int):\n                Whether event is away, e.g., 1\n            home_team (str):\n                Home team, e.g., CHI\n            away_team (str):\n                Away team, e.g., NSH\n            home_skaters (int):\n                Number of home team skaters on-ice (excl. goalies), e.g., 6\n            away_skaters (int):\n                Number of away team skaters on-ice (excl. goalies), e.g., 5\n            home_on (list | str | None):\n                Name of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            home_on_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_on_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            home_on_positions (list | str | None):\n                Positions of home team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            away_on (list | str | None):\n                Name of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            away_on_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            away_on_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            away_on_positions (list | str | None):\n                Positions of away team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            event_team_skaters (int | None):\n                Number of event team skaters on-ice (excl. goalies), e.g., 5\n            teammates (list | str | None):\n                Name of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI\n            teammates_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI\n            teammates_api_id (list | str | None = None):\n                NHL API IDs of event team's skaters on-ice (excl. goalies), e.g.,\n                8474009, 8475714, 8475798, 8475218, 8474600\n            teammates_positions (list | str | None):\n                Positions of event team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D\n            own_goalie (list | str | None):\n                Name of the event team's goalie, e.g., PEKKA RINNE\n            own_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the event team's goalie, e.g., PEKKA.RINNE\n            own_goalie_api_id (list | str | None):\n                NHL API ID of the event team's goalie, e.g., 8471469\n            forwards (list | str | None):\n                Name of event team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            forwards_api_id (list | str | None):\n                NHL API IDs of event team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            defense (list | str | None):\n                Name of event team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            defense_eh_id (list | str | None):\n                Evolving Hockey IDs of event team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            defense_api_id (list | str | None):\n                NHL API IDs of event team's skaters on-ice, e.g., 8475218, 8474600\n            opp_strength_state (str | None):\n                Strength state from opposing team's perspective, e.g., Ev5\n            opp_score_state (str | None):\n                Score state from opposing team's perspective, e.g., 2v4\n            opp_score_diff (int | None):\n                Score differential from opposing team's perspective, e.g., -2\n            opp_team_skaters (int | None):\n                Number of opposing team skaters on-ice (excl. goalies), e.g., 6\n            opp_team_on (list | str | None):\n                Name of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_team_on_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_team_on_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice (excl. goalies), e.g.,\n                8479337, 8473604, 8481523, 8474141, 8470281, 8476979\n            opp_team_on_positions (list | str | None):\n                Positions of opposing team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D\n            opp_goalie (list | str | None):\n                Name of the opposing team's goalie, e.g., None\n            opp_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the opposing team's goalie, e.g., None\n            opp_goalie_api_id (list | str | None):\n                NHL API ID of the opposing team's goalie, e.g., None\n            opp_forwards (list | str | None):\n                Name of opposing team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            opp_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            opp_forwards_api_id (list | str | None):\n                NHL API IDs of opposing team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            opp_defense (list | str | None):\n                Name of opposing team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            opp_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of opposing team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            opp_defense_api_id (list | str | None):\n                NHL API IDs of opposing team's skaters on-ice, e.g., 8470281, 8476979\n            home_forwards (list | str | None):\n                Name of home team's forwards on-ice, e.g.,\n                ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n            home_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's forwards on-ice, e.g.,\n                ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n            home_forwards_api_id (list | str | None = None):\n                NHL API IDs of home team's forwards on-ice, e.g.,\n                8479337, 8473604, 8481523, 8474141\n            home_defense (list | str | None):\n                Name of home team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n            home_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of home team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n            home_defense_api_id (list | str | None):\n                NHL API IDs of home team's skaters on-ice, e.g., 8470281, 8476979\n            home_goalie (list | str | None):\n                Name of the home team's goalie, e.g., None\n            home_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the home team's goalie, e.g., None\n            home_goalie_api_id (list | str | None):\n                NHL API ID of the home team's goalie, e.g., None\n            away_forwards (list | str | None):\n                Name of away team's forwards on-ice, e.g.,\n                NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n            away_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's forwards on-ice, e.g.,\n                NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n            away_forwards_api_id (list | str | None):\n                NHL API IDs of away team's forwards on-ice, e.g., 8474009, 8475714, 8475798\n            away_defense (list | str | None):\n                Name of away team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI\n            away_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of away team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n            away_defense_api_id (list | str | None):\n                NHL API IDs of away team's skaters on-ice, e.g., 8475218, 8474600\n            away_goalie (list | str | None):\n                Name of the away team's goalie, e.g., PEKKA RINNE\n            away_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the away team's goalie, e.g., PEKKA.RINNE\n            away_goalie_api_id (list | str | None):\n                NHL API ID of the away team's goalie, e.g., 8471469\n            change_on_count (int | None):\n                Number of players on, e.g., None\n            change_off_count (int | None):\n                Number of players off, e.g., None\n            change_on (list | str | None):\n                Names of the players on, e.g., None\n            change_on_eh_id (list | str | None):\n                Evolving Hockey IDs of the players on, e.g., None\n            change_on_positions (list | str | None):\n                Postions of the players on, e.g., None\n            change_off (list | str | None):\n                Names of the players off, e.g., None\n            change_off_eh_id (list | str | None):\n                Evolving Hockey IDs of the players off, e.g., None\n            change_off_positions (list | str | None):\n                Positions of the players off, e.g., None\n            change_on_forwards_count (int | None):\n                Number of forwards changing on, e.g., None\n            change_off_forwards_count (int | None):\n                Number of forwards off, e.g., None\n            change_on_forwards (list | str | None):\n                Names of the forwards on, e.g., None\n            change_on_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards on, e.g., None\n            change_off_forwards (list | str | None):\n                Names of the forwards off, e.g., None\n            change_off_forwards_eh_id (list | str | None):\n                Evolving Hockey IDs of the forwards off, e.g., None\n            change_on_defense_count (int | None):\n                Number of defense on, e.g., None\n            change_off_defense_count (int | None):\n                Number of defense off, e.g., None\n            change_on_defense (list | str | None):\n                Names of the defense on, e.g., None\n            change_on_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense on, e.g., None\n            change_off_defense (list | str | None):\n                Names of the defense off, e.g., None\n            change_off_defense_eh_id (list | str | None):\n                Evolving Hockey IDs of the defense off, e.g., None\n            change_on_goalie_count (int | None):\n                Number of goalies on, e.g., None\n            change_off_goalie_count (int | None):\n                Number of goalies off, e.g., None\n            change_on_goalie (list | str | None):\n                Name of goalie on, e.g., None\n            change_on_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie on, e.g., None\n            change_off_goalie (list | str | None):\n                Name of the goalie off, e.g., None\n            change_off_goalie_eh_id (list | str | None):\n                Evolving Hockey ID of the goalie off, e.g., None\n            goal (int):\n                Dummy indicator whether event is a goal, e.g., 1\n            shot (int):\n                Dummy indicator whether event is a shot, e.g., 1\n            miss (int):\n                Dummy indicator whether event is a miss, e.g., 0\n            fenwick (int):\n                Dummy indicator whether event is a fenwick event, e.g., 1\n            corsi (int):\n                Dummy indicator whether event is a corsi event, e.g., 1\n            block (int):\n                Dummy indicator whether event is a block, e.g., 0\n            hit (int):\n                Dummy indicator whether event is a hit, e.g., 0\n            give (int):\n                Dummy indicator whether event is a give, e.g., 0\n            take (int):\n                Dummy indicator whether event is a take, e.g., 0\n            fac (int):\n                Dummy indicator whether event is a faceoff, e.g., 0\n            penl (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            change (int):\n                Dummy indicator whether event is a change, e.g., 0\n            stop (int):\n                Dummy indicator whether event is a stop, e.g., 0\n            chl (int):\n                Dummy indicator whether event is a challenge, e.g., 0\n            ozf (int):\n                Dummy indicator whether event is a offensive zone faceoff, e.g., 0\n            nzf (int):\n                Dummy indicator whether event is a neutral zone faceoff, e.g., 0\n            dzf (int):\n                Dummy indicator whether event is a defensive zone faceoff, e.g., 0\n            ozc (int):\n                Dummy indicator whether event is a offensive zone change, e.g., 0\n            nzc (int):\n                Dummy indicator whether event is a neutral zone change, e.g., 0\n            dzc (int):\n                Dummy indicator whether event is a defensive zone change, e.g., 0\n            otf (int):\n                Dummy indicator whether event is an on-the-fly change, e.g., 0\n            pen0 (int):\n                Dummy indicator whether event is a penalty, e.g., 0\n            pen2 (int):\n                Dummy indicator whether event is a minor penalty, e.g., 0\n            pen4 (int):\n                Dummy indicator whether event is a double minor penalty, e.g., 0\n            pen5 (int):\n                Dummy indicator whether event is a major penalty, e.g., 0\n            pen10 (int):\n                Dummy indicator whether event is a game misconduct penalty, e.g., 0\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.play_by_play_df\n\n        \"\"\"\n        if self._play_by_play is None:\n            if self._rosters is None:\n                if self._api_rosters is None:\n                    self._munge_api_rosters()\n\n                if self._html_rosters is None:\n                    self._scrape_html_rosters()\n                    self._munge_html_rosters()\n\n                self._combine_rosters()\n\n            if self._changes is None:\n                self._scrape_shifts()\n                self._munge_shifts()\n\n                self._munge_changes()\n\n            if self._html_events is None:\n                self._scrape_html_events()\n                self._munge_html_events()\n\n            if self._api_events is None:\n                self._munge_api_events()\n\n            self._combine_events()\n            self._munge_play_by_play()\n            self._prep_xg()\n\n        return pd.DataFrame(self._play_by_play)\n\n    def _combine_rosters(self) -&gt; None:\n        \"\"\"Method to combine API and HTML rosters. Updates self._rosters.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Game object\n            &gt;&gt;&gt; game = Game(2023020001)\n\n            Requires clean rosters from the API and HTML feeds\n\n            HTML rosters\n            &gt;&gt;&gt; game._scrape_html_rosters()\n            &gt;&gt;&gt; game._munge_html_rosters()\n\n            API rosters\n            &gt;&gt;&gt; game._munge_api_rosters()\n\n            Combined rosters\n            &gt;&gt;&gt; game._combine_rosters()\n\n            However, the combined rosters do not need to be manually cleaned - data are\n            cleaned at the level of their respective source\n            &gt;&gt;&gt; game._rosters  # Returns clean rosters if all of the above have been performed\n\n        \"\"\"\n        html_rosters = self._html_rosters\n        api_rosters = self._api_rosters\n\n        api_rosters_dict = {x[\"team_jersey\"]: x for x in api_rosters}\n\n        players = []\n\n        for player in html_rosters:\n            if player[\"status\"] == \"ACTIVE\":\n                api_info = api_rosters_dict[player[\"team_jersey\"]]\n\n            else:\n                api_info = {\"api_id\": None, \"headshot_url\": None}\n\n            player_info = {}\n\n            player_info.update(player)\n\n            new_values = {\"api_id\": api_info[\"api_id\"], \"headshot_url\": api_info[\"headshot_url\"]}\n\n            player_info.update(new_values)\n\n            player_info = rosters_fixes(self.game_id, player_info)\n\n            players.append(RosterPlayer.model_validate(player_info).model_dump())\n\n        self._rosters = players\n\n    @property\n    def rosters(self) -&gt; list:\n        \"\"\"List of players scraped from API &amp; HTML endpoints. Returns a dictionary of players with the below keys.\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).rosters_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            api_id (int | None):\n                Player's NHL API ID, e.g., 8476887\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            jersey (int):\n                Player's jersey number, e.g., 9\n            position (str):\n                Player's position, e.g., L\n            starter (int):\n                Whether the player started the game, e.g., 0\n            status (str):\n                Whether player is active or scratched, e.g., ACTIVE\n            headshot_url (str | None):\n                URL to get player's headshot, e.g., https://assets.nhle.com/mugs/nhl/20192020/NSH/8476887.png\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.rosters\n\n        \"\"\"\n        if self._rosters is None:\n            if self._api_rosters is None:\n                self._munge_api_rosters()\n\n            if self._html_rosters is None:\n                self._scrape_html_rosters()\n                self._munge_html_rosters()\n\n            self._combine_rosters()\n\n        return self._rosters\n\n    @property\n    def rosters_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of players scraped from API &amp; HTML endpoints.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            team_venue (str):\n                Whether team is home or away, e.g., AWAY\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            api_id (int | None):\n                Player's NHL API ID, e.g., 8476887\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            jersey (int):\n                Player's jersey number, e.g., 9\n            position (str):\n                Player's position, e.g., L\n            starter (int):\n                Whether the player started the game, e.g., 0\n            status (str):\n                Whether player is active or scratched, e.g., ACTIVE\n            headshot_url (str | None):\n                URL to get player's headshot, e.g., https://assets.nhle.com/mugs/nhl/20192020/NSH/8476887.png\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.rosters_df\n\n        \"\"\"\n        if self._rosters is None:\n            if self._api_rosters is None:\n                self._munge_api_rosters()\n\n            if self._html_rosters is None:\n                self._scrape_html_rosters()\n                self._munge_html_rosters()\n\n            self._combine_rosters()\n\n        return pd.DataFrame(self._rosters)\n\n    def _scrape_shifts(self) -&gt; None:\n        \"\"\"Method for scraping shifts from HTML endpoint. Updates self._shifts.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Game object\n            &gt;&gt;&gt; game = Game(2023020001)\n\n            Before cleaning the data, game._shifts is None\n            &gt;&gt;&gt; game._shifts  # Returns None\n\n            Once you scrape the data, you can access it in raw form, prior to any processing\n            &gt;&gt;&gt; game._scrape_shifts()  # Scrapes raw data and adds it to game._shifts\n            &gt;&gt;&gt; game.shifts  # Returns cleaned shifts data\n            &gt;&gt;&gt; game.shifts_df  # Same, but a Pandas DataFrame\n\n            You then have to manually clean the data\n            &gt;&gt;&gt; game._munge_shifts()\n            &gt;&gt;&gt; game.shifts  # Returns cleaned shifts data\n            &gt;&gt;&gt; game.shifts_df  # Same but a Pandas DataFrame\n        \"\"\"\n        # Creating basic information from game ID\n        season = self.season\n        game_session = self.session\n        game_id = self.game_id\n        s = self._requests_session\n\n        # This is the list for collecting all the game information for the end\n\n        game_list = []\n\n        # Dictionary of urls for scraping\n\n        urls_dict = {\"HOME\": self.home_shifts_endpoint, \"AWAY\": self.away_shifts_endpoint}\n\n        # Iterating through the url dictionary\n\n        for team_venue, url in urls_dict.items():\n            response = s.get(url)\n\n            soup = BeautifulSoup(response.content.decode(\"ISO-8859-1\"), \"lxml\", multi_valued_attributes=None)\n\n            # Getting team names from the HTML Data\n\n            team_name = soup.find(\"td\", {\"align\": \"center\", \"class\": \"teamHeading + border\"})\n\n            # Converting team names to proper format\n\n            if team_name is None:  # Not covered by tests\n                continue\n\n            team_name = unidecode(team_name.get_text())\n\n            if team_name == \"PHOENIX COYOTES\":\n                team_name = \"ARIZONA COYOTES\"\n\n            elif \"CANADIENS\" in team_name:\n                team_name = \"MONTREAL CANADIENS\"\n\n            # Getting players from the HTML data\n\n            players = soup.find_all(\"td\", {\"class\": [\"playerHeading + border\", \"lborder + bborder\"]})\n\n            # Creating a dictionary to collect the players' information\n\n            players_dict = {}\n\n            # Iterating through the players\n\n            for player in players:\n                # Getting player's data\n\n                data = player.get_text()\n\n                # If there is a name in the data, get the information\n\n                if \", \" in data:\n                    name = data.split(\",\", 1)\n\n                    jersey = name[0].split(\" \")[0].strip()\n\n                    last_name = name[0].split(\" \", 1)[1].strip()\n\n                    first_name = re.sub(r\"\\(\\s?(.+)\\)\", \"\", name[1]).strip()\n\n                    full_name = f\"{first_name} {last_name}\"\n\n                    if full_name == \" \":  # Not covered by tests\n                        continue\n\n                    new_values = {full_name: {\"player_name\": full_name, \"jersey\": jersey, \"shifts\": []}}\n\n                    players_dict.update(new_values)\n\n                # If there is not a name it is likely because these are shift information, not player information\n\n                else:\n                    if full_name == \" \":  # Not covered by tests\n                        continue\n\n                    # Extend the player's shift information with the shift data\n\n                    players_dict[full_name][\"shifts\"].extend([data])\n\n            # Iterating through the player's dictionary,\n            # which has a key of the player's name and an array of shift-arrays\n\n            for player, shifts in players_dict.items():\n                # Getting the number of shifts\n\n                length = int(len(np.array(shifts[\"shifts\"])) / 5)\n\n                # Reshaping the shift data into fields and values\n\n                for _number, shift in enumerate(np.array(shifts[\"shifts\"]).reshape(length, 5)):\n                    # Adding header values to the shift data\n\n                    headers = [\"shift_count\", \"period\", \"shift_start\", \"shift_end\", \"duration\"]\n\n                    # Creating a dictionary from the headers and the shift data\n\n                    shift_dict = dict(zip(headers, shift.flatten(), strict=False))\n\n                    # Adding other data to the shift dictionary\n\n                    new_values = {\n                        \"season\": season,\n                        \"session\": game_session,\n                        \"game_id\": game_id,\n                        \"team_name\": team_name,\n                        \"team\": team_codes[team_name],\n                        \"team_venue\": team_venue.upper(),\n                        \"player_name\": unidecode(shifts[\"player_name\"]).upper(),\n                        \"team_jersey\": f\"{team_codes[team_name]}{shifts['jersey']}\",\n                        \"jersey\": int(shifts[\"jersey\"]),\n                        \"period\": int(shift_dict[\"period\"].replace(\"OT\", \"4\").replace(\"SO\", \"5\")),\n                        \"shift_count\": int(shift_dict[\"shift_count\"]),\n                        \"shift_start\": unidecode(shift_dict[\"shift_start\"]).strip(),\n                        \"start_time\": unidecode(shift_dict[\"shift_start\"]).strip().split(\"/\", 1)[0].strip(),\n                        \"shift_end\": unidecode(shift_dict[\"shift_end\"]).strip(),\n                        \"end_time\": unidecode(shift_dict[\"shift_end\"]).strip().split(\"/\", 1)[0].strip(),\n                    }\n\n                    shift_dict.update(new_values)\n\n                    # Appending the shift dictionary to the list of shift dictionaries\n\n                    if shift_dict[\"start_time\"] != \"31:23\":\n                        game_list.append(shift_dict)\n\n        self._shifts = game_list\n\n    def _munge_shifts(self) -&gt; None:\n        \"\"\"Method to munge list of shifts from HTML endpoint. Updates self._shifts.\"\"\"\n        season = self.season\n        game_session = self.session\n\n        # Iterating through the lists of shifts\n\n        roster = self._rosters\n\n        actives = {x[\"team_jersey\"]: x for x in roster if x[\"status\"] == \"ACTIVE\"}\n        scratches = {x[\"team_jersey\"]: x for x in roster if x[\"status\"] == \"SCRATCH\"}\n\n        if self.game_id == 2020020860:\n            new_shifts = {\n                \"DAL29\": 5,\n                \"CHI60\": 4,\n                \"DAL14\": 27,\n                \"DAL21\": 22,\n                \"DAL3\": 28,\n                \"CHI5\": 27,\n                \"CHI88\": 26,\n                \"CHI12\": 26,\n            }\n\n            for new_player, shift_count in new_shifts.items():\n                new_player_info = actives[new_player]\n\n                new_goalies = [\"DAL29\", \"CHI60\"]\n\n                if new_player in new_goalies:\n                    shift_start = \"0:00 / 5:00\"\n                    shift_end = \"4:30 / 0:30\"\n                    duration = \"4:30\"\n                    start_time = \"0:00\"\n                    end_time = \"4:30\"\n\n                new_players = [\"DAL14\", \"DAL21\", \"DAL3\", \"CHI5\"]\n\n                if new_player in new_players:\n                    shift_start = \"3:47 / 1:13\"\n                    shift_end = \"4:30 / 0:30\"\n                    duration = \"00:43\"\n                    start_time = \"3:47\"\n                    end_time = \"4:30\"\n\n                if new_player == \"CHI88\":\n                    shift_start = \"3:51 / 1:09\"\n                    shift_end = \"4:30 / 0:30\"\n                    duration = \"00:39\"\n                    start_time = \"3:51\"\n                    end_time = \"4:30\"\n\n                if new_player == \"CHI12\":\n                    shift_start = \"4:14 / 0:46\"\n                    shift_end = \"4:30 / 0:30\"\n                    duration = \"00:16\"\n                    start_time = \"4:14\"\n                    end_time = \"4:30\"\n\n                new_shift = {\n                    \"shift_count\": shift_count,\n                    \"period\": 4,\n                    \"shift_start\": shift_start,\n                    \"shift_end\": shift_end,\n                    \"duration\": duration,\n                    \"season\": 20202021,\n                    \"session\": \"R\",\n                    \"game_id\": self.game_id,\n                    \"team_name\": new_player_info[\"team_name\"],\n                    \"team\": new_player_info[\"team\"],\n                    \"team_venue\": new_player_info[\"team_venue\"],\n                    \"player_name\": new_player_info[\"player_name\"],\n                    \"team_jersey\": new_player_info[\"team_jersey\"],\n                    \"jersey\": new_player_info[\"jersey\"],\n                    \"start_time\": start_time,\n                    \"end_time\": end_time,\n                }\n\n                self._shifts.append(new_shift)\n\n        for shift in self._shifts:\n            # Get active players and store them in a new dictionary with team jersey as key\n            # and other info as a value-dictionary\n\n            shift[\"eh_id\"] = actives.get(shift[\"team_jersey\"], scratches.get(shift[\"team_jersey\"]))[\"eh_id\"]\n\n            shift[\"api_id\"] = actives.get(shift[\"team_jersey\"], scratches.get(shift[\"team_jersey\"]))[\"api_id\"]\n\n            shift[\"position\"] = actives.get(shift[\"team_jersey\"], scratches.get(shift[\"team_jersey\"]))[\"position\"]\n\n            # Replacing some player names\n\n            shift[\"player_name\"] = (\n                shift[\"player_name\"]\n                .replace(\"ALEXANDRE\", \"ALEX\")\n                .replace(\"ALEXANDER\", \"ALEX\")\n                .replace(\"CHRISTOPHER\", \"CHRIS\")\n            )\n\n            shift[\"player_name\"] = correct_names_dict.get(shift[\"player_name\"], shift[\"player_name\"])\n\n            # Adding seconds columns\n\n            cols = [\"start_time\", \"end_time\", \"duration\"]\n\n            for col in cols:\n                time_split = shift[col].split(\":\", 1)\n\n                # Sometimes the shift value can be blank, if it is, we'll skip the field and fix later\n\n                try:\n                    shift[f\"{col}_seconds\"] = 60 * int(time_split[0]) + int(time_split[1])\n\n                except ValueError:  # Not covered by tests\n                    continue\n\n            # Fixing end time if it is blank or empty\n\n            if shift[\"end_time\"] == \" \" or shift[\"end_time\"] == \"\":  # Not covered by tests\n                # Calculating end time based on duration seconds\n\n                shift[\"end_time_seconds\"] = shift[\"start_time_seconds\"] + shift[\"duration_seconds\"]\n\n                # Creating end time based on time delta\n\n                shift[\"end_time\"] = str(timedelta(seconds=shift[\"end_time_seconds\"])).split(\":\", 1)[1]\n\n            # If the shift start is after the shift end, we need to fix the error\n\n            if shift[\"start_time_seconds\"] &gt; shift[\"end_time_seconds\"]:  # Not covered by tests\n                # Creating new values based on game session and period\n\n                if shift[\"period\"] &lt; 4:\n                    # Setting the end time\n\n                    shift[\"end_time\"] = \"20:00\"\n\n                    # Setting the end time in seconds\n\n                    shift[\"end_time_seconds\"] = 1200\n\n                    # Setting the shift end\n\n                    shift[\"shift_end\"] = \"20:00 / 0:00\"\n\n                    # Setting duration and duration in seconds\n\n                    shift[\"duration_seconds\"] = shift[\"end_time_seconds\"] - shift[\"start_time_seconds\"]\n\n                    shift[\"duration\"] = str(timedelta(seconds=shift[\"duration_seconds\"])).split(\":\", 1)[1]\n\n                else:\n                    total_seconds = 1200 if game_session == \"P\" else 300\n\n                    # Need to get the end period to get the end time in seconds\n\n                    max_period = max([int(shift[\"period\"]) for shift in self._shifts if shift[\"period\"] != \" \"])\n\n                    # Getting the end time in seconds for the final period\n\n                    max_seconds = max(\n                        [\n                            shift[\"end_time_seconds\"]\n                            for shift in self._shifts\n                            if \"end_time_seconds\" in shift and shift[\"period\"] == max_period\n                        ]\n                    )\n\n                    shift[\"end_time_seconds\"] = max_seconds\n\n                    # Setting end time\n\n                    end_time = str(timedelta(seconds=max_seconds)).split(\":\", 1)[1]\n\n                    # Setting remainder time\n\n                    remainder = str(timedelta(seconds=(total_seconds - max_seconds))).split(\":\", 1)[1]\n\n                    shift[\"end_time\"] = end_time\n\n                    shift[\"shift_end\"] = f\"{end_time} / {remainder}\"\n\n            # Setting goalie values\n\n            if shift[\"position\"] == \"G\":\n                shift[\"goalie\"] = 1\n\n            else:\n                shift[\"goalie\"] = 0\n\n            # Setting home and away values\n\n            if shift[\"team_venue\"] == \"HOME\":\n                shift[\"is_home\"] = 1\n\n                shift[\"is_away\"] = 0\n\n            else:\n                shift[\"is_home\"] = 0\n\n                shift[\"is_away\"] = 1\n\n        periods = np.unique([x[\"period\"] for x in self._shifts]).tolist()\n\n        # Setting list of teams to iterate through while iterating through the periods\n\n        teams = [\"HOME\", \"AWAY\"]\n\n        for period in periods:\n            # Getting max seconds for the period\n\n            max_seconds = max([int(x[\"end_time_seconds\"]) for x in self._shifts if x[\"period\"] == period])\n\n            # Iterating through home and away teams\n\n            for team in teams:\n                # Getting the team's goalies for the game\n\n                team_goalies = [x for x in self._shifts if x[\"goalie\"] == 1 and x[\"team_venue\"] == team]\n\n                # Getting the goalies for the period\n\n                goalies = [\n                    x for x in self._shifts if x[\"goalie\"] == 1 and x[\"team_venue\"] == team and x[\"period\"] == period\n                ]\n\n                # If there are no goalies changing during the period, we need to add them\n\n                if len(goalies) &lt; 1:  # Not covered by tests\n                    if period == 1:\n                        if len(team_goalies) &lt; 1:\n                            first_goalie = {}\n\n                            starter = [\n                                x\n                                for x in actives.values()\n                                if x[\"position\"] == \"G\" and x[\"team_venue\"] == team and x[\"starter\"] == 1\n                            ][0]\n\n                            new_values = {\n                                \"season\": season,\n                                \"session\": game_session,\n                                \"game_id\": self.game_id,\n                                \"period\": period,\n                                \"team_venue\": team,\n                                \"goalie\": 1,\n                                \"shift_count\": 1,\n                            }\n\n                            new_values.update(starter)\n\n                            if team == \"HOME\":\n                                new_values.update({\"is_home\": 1, \"is_away\": 0})\n\n                            else:\n                                new_values.update({\"is_away\": 1, \"is_home\": 0})\n\n                            first_goalie.update(new_values)\n\n                        else:\n                            first_goalie = team_goalies[0]\n\n                        # Initial dictionary is set using data from the first goalie to appear\n\n                        goalie_shift = dict(first_goalie)\n\n                    else:\n                        # Initial dictionary is set using data from the pervious goalie to appear\n\n                        prev_goalie = [x for x in team_goalies if x[\"period\"] == (period - 1)][-1]\n\n                        goalie_shift = dict(prev_goalie)\n\n                    # Setting goalie shift number so we can identify later\n\n                    goalie_shift[\"number\"] = 0\n\n                    # Setting the period for the current period\n\n                    goalie_shift[\"period\"] = period\n\n                    # Setting the start time\n\n                    goalie_shift[\"start_time\"] = \"0:00\"\n\n                    # Setting the start time in seconds\n\n                    goalie_shift[\"start_time_seconds\"] = 0\n\n                    # If during regular time\n\n                    if period &lt; 4:\n                        # Setting shift start value\n\n                        goalie_shift[\"shift_start\"] = \"0:00 / 20:00\"\n\n                        if max_seconds &lt; 1200:\n                            # Setting end time value\n\n                            goalie_shift[\"end_time\"] = \"20:00\"\n\n                            # Setting end time in seconds\n\n                            goalie_shift[\"end_time_seconds\"] = 1200\n\n                            # Setting the duration, assuming they were out there the whole time\n\n                            goalie_shift[\"duration\"] = \"20:00\"\n\n                            # Setting the duration in seconds, assuming they were out there the whole time\n\n                            goalie_shift[\"duration_seconds\"] = 1200\n\n                            # Setting the shift end value\n\n                            goalie_shift[\"shift_end\"] = \"20:00 / 0:00\"\n\n                    # If the period is greater than 3\n\n                    else:\n                        # Need to account for whether regular season or playoffs\n\n                        if game_session == \"P\":\n                            goalie_shift[\"shift_start\"] = \"0:00 / 20:00\"\n\n                            total_seconds = 1200\n\n                        else:\n                            goalie_shift[\"shift_start\"] = \"0:00 / 5:00\"\n\n                            total_seconds = 300\n\n                        if max_seconds &lt; total_seconds:\n                            # Getting end time\n\n                            end_time = str(timedelta(seconds=max_seconds)).split(\":\", 1)[1]\n\n                            # Getting remainder time\n\n                            remainder = str(timedelta(seconds=(total_seconds - max_seconds))).split(\":\", 1)[1]\n\n                            # Setting values\n\n                            goalie_shift[\"end_time_seconds\"] = max_seconds\n\n                            goalie_shift[\"end_time\"] = end_time\n\n                            goalie_shift[\"shift_end\"] = f\"{end_time} / {remainder}\"\n\n                    # Appending the new goalie shift to the game list\n\n                    self._shifts.append(goalie_shift)\n\n            # Iterating through the shifts\n\n            for shift in self._shifts:\n                # Fixing goalie errors\n\n                if (\n                    shift[\"goalie\"] == 1\n                    and shift[\"period\"] == period\n                    and (not shift.get(\"shift_end\") or shift[\"shift_end\"] == \"0:00 / 0:00\")\n                ):  # Not covered by tests\n                    if period &lt; 4:\n                        shift[\"shift_end\"] = \"20:00 / 0:00\"\n                        shift[\"end_time\"] = \"20:00\"\n                        shift[\"end_time_seconds\"] = 1200\n\n                    else:\n                        total_seconds = 300 if game_session == \"R\" else 1200\n\n                        end_time = str(timedelta(seconds=max_seconds)).split(\":\", 1)[1]\n\n                        remainder = str(timedelta(seconds=(total_seconds - max_seconds))).split(\":\", 1)[1]\n\n                        shift[\"end_time_seconds\"] = max_seconds\n                        shift[\"end_time\"] = end_time\n                        shift[\"shift_end\"] = f\"{end_time} / {remainder}\"\n\n                    # Setting duration and duration in seconds\n\n                    shift[\"duration_seconds\"] = shift[\"end_time_seconds\"] - shift[\"start_time_seconds\"]\n\n                    shift[\"duration\"] = str(timedelta(seconds=shift[\"duration_seconds\"])).split(\":\", 1)[1]\n\n        self._shifts = [PlayerShift.model_validate(shift).model_dump() for shift in self._shifts]\n\n    @property\n    def shifts(self) -&gt; list:\n        \"\"\"List of shifts scraped from HTML endpoint. Returns a dictionary of player - shifts with the below keys.\n\n        Note:\n            You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g.,\n            `Game(2019020684).shifts_df`\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            position (str):\n                Player's position, e.g., L\n            jersey (int):\n                Player's jersey number, e.g., 9\n            shift_count (int):\n                Shift number for that player, e.g., 1\n            period (int):\n                Period number for the shift, e.g., 1\n            start_time (str):\n                Time shift started, e.g., 0:00\n            end_time (str):\n                Time shift ended, e.g., 0:18\n            duration (str):\n                Length of shift, e.g, 00:18\n            start_time_seconds (int):\n                Time shift started in seconds, e.g., 0\n            end_time_seconds (int):\n                Time shift ended in seconds, e.g., 18\n            duration_seconds (int):\n                Length of shift in seconds, e.g., 18\n            shift_start (str):\n                Time the shift started as the original string, e.g., 0:00 / 20:00\n            shift_end (str):\n                Time the shift ended as the original string, e.g., 0:18 / 19:42\n            goalie (int):\n                Whether player is a goalie, e.g., 0\n            is_home (int):\n                Whether player is home e.g., 0\n            is_away (int):\n                Whether player is away, e.g., 1\n            team_venue (str):\n                Whether player is home or away, e.g., AWAY\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property\n            &gt;&gt;&gt; game.shifts\n\n        \"\"\"\n        # TODO: Add API ID to documentation\n\n        if self._shifts is None:\n            if self._rosters is None:\n                if self._html_rosters is None:\n                    self._scrape_html_rosters()\n                    self._munge_html_rosters()\n\n                if self._api_rosters is None:\n                    self._munge_api_rosters()\n\n                self._combine_rosters()\n\n            self._scrape_shifts()\n            self._munge_shifts()\n\n        return self._shifts\n\n    @property\n    def shifts_df(self) -&gt; pd.DataFrame:\n        \"\"\"Pandas Dataframe of shifts scraped from HTML endpoint.\n\n        Returns:\n            season (int):\n                Season as 8-digit number, e.g., 20192020 for 2019-20 season\n            session (str):\n                Whether game is regular season, playoffs, or pre-season, e.g., R\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2019020684\n            team (str):\n                Team name of the player, e.g., NSH\n            team_name (str):\n                Full team name, e.g., NASHVILLE PREDATORS\n            player_name (str):\n                Player's name, e.g., FILIP FORSBERG\n            eh_id (str):\n                Evolving Hockey ID for the player, e.g., FILIP.FORSBERG\n            team_jersey (str):\n                Team and jersey combination used for player identification, e.g., NSH9\n            position (str):\n                Player's position, e.g., L\n            jersey (int):\n                Player's jersey number, e.g., 9\n            shift_count (int):\n                Shift number for that player, e.g., 1\n            period (int):\n                Period number for the shift, e.g., 1\n            start_time (str):\n                Time shift started, e.g., 0:00\n            end_time (str):\n                Time shift ended, e.g., 0:18\n            duration (str):\n                Length of shift, e.g, 00:18\n            start_time_seconds (int):\n                Time shift started in seconds, e.g., 0\n            end_time_seconds (int):\n                Time shift ended in seconds, e.g., 18\n            duration_seconds (int):\n                Length of shift in seconds, e.g., 18\n            shift_start (str):\n                Time the shift started as the original string, e.g., 0:00 / 20:00\n            shift_end (str):\n                Time the shift ended as the original string, e.g., 0:18 / 19:42\n            goalie (int):\n                Whether player is a goalie, e.g., 0\n            is_home (int):\n                Whether player is home e.g., 0\n            is_away (int):\n                Whether player is away, e.g., 1\n            team_venue (str):\n                Whether player is home or away, e.g., AWAY\n\n        Examples:\n            First, instantiate the class with a game ID\n            &gt;&gt;&gt; game_id = 2019020684\n            &gt;&gt;&gt; game = Game(game_id)\n\n            Then you can access the property as a Pandas DataFrame\n            &gt;&gt;&gt; game.shifts_df\n\n        \"\"\"\n        # TODO: Add API ID to documentation\n\n        if self._shifts is None:\n            if self._rosters is None:\n                if self._html_rosters is None:\n                    self._scrape_html_rosters()\n                    self._munge_html_rosters()\n\n                if self._api_rosters is None:\n                    self._munge_api_rosters()\n\n                self._combine_rosters()\n\n            self._scrape_shifts()\n            self._munge_shifts()\n\n        return pd.DataFrame(self._shifts)\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Game.play_by_play","title":"play_by_play  <code>property</code>","text":"<pre><code>play_by_play\n</code></pre> <p>List of events in play-by-play. Each event is a dictionary with the below keys.</p> Note <p>You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g., <code>Game(2019020684).play_by_play_df</code></p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>game_date</code> <code>str</code> <p>Date game was played, e.g., 2020-01-09</p> <code>event_idx</code> <code>int</code> <p>Index ID for event, e.g., 667</p> <code>period</code> <code>int</code> <p>Period number of the event, e.g., 3</p> <code>period_seconds</code> <code>int</code> <p>Time elapsed in the period, in seconds, e.g., 1178</p> <code>game_seconds</code> <code>int</code> <p>Time elapsed in the game, in seconds, e.g., 3578</p> <code>strength_state</code> <code>str</code> <p>Strength state, e.g., 5vE</p> <code>event_team</code> <code>str</code> <p>Team that performed the action for the event, e.g., NSH</p> <code>opp_team</code> <code>str</code> <p>Opposing team, e.g., CHI</p> <code>event</code> <code>str</code> <p>Type of event that occurred, e.g., GOAL</p> <code>description</code> <code>str | None</code> <p>Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.</p> <code>zone</code> <code>str</code> <p>Zone where the event occurred, relative to the event team, e.g., DEF</p> <code>coords_x</code> <code>int</code> <p>x-coordinates where the event occurred, e.g, -96</p> <code>coords_y</code> <code>int</code> <p>y-coordinates where the event occurred, e.g., 11</p> <code>danger</code> <code>int</code> <p>Whether shot event occurred from danger area, e.g., 0</p> <code>high_danger</code> <code>int</code> <p>Whether shot event occurred from high-danger area, e.g., 0</p> <code>player_1</code> <code>str</code> <p>Player that performed the action, e.g., PEKKA RINNE</p> <code>player_1_eh_id</code> <code>str</code> <p>Evolving Hockey ID for player_1, e.g., PEKKA.RINNE</p> <code>player_1_eh_id_api</code> <code>str</code> <p>Evolving Hockey ID for player_1 from the api_events (for debugging), e.g., PEKKA.RINNE</p> <code>player_1_api_id</code> <code>int</code> <p>NHL API ID for player_1, e.g., 8471469</p> <code>player_1_position</code> <code>str</code> <p>Position player_1 plays, e.g., G</p> <code>player_1_type</code> <code>str</code> <p>Type of player, e.g., GOAL SCORER</p> <code>player_2</code> <code>str | None</code> <p>Player that performed the action, e.g., None</p> <code>player_2_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for player_2, e.g., None</p> <code>player_2_eh_id_api</code> <code>str | None</code> <p>Evolving Hockey ID for player_2 from the api_events (for debugging), e.g., None</p> <code>player_2_api_id</code> <code>int | None</code> <p>NHL API ID for player_2, e.g., None</p> <code>player_2_position</code> <code>str | None</code> <p>Position player_2 plays, e.g., None</p> <code>player_2_type</code> <code>str | None</code> <p>Type of player, e.g., None</p> <code>player_3</code> <code>str | None</code> <p>Player that performed the action, e.g., None</p> <code>player_3_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for player_3, e.g., None</p> <code>player_3_eh_id_api</code> <code>str | None</code> <p>Evolving Hockey ID for player_3 from the api_events (for debugging), e.g., None</p> <code>player_3_api_id</code> <code>int | None</code> <p>NHL API ID for player_3, e.g., None</p> <code>player_3_position</code> <code>str | None</code> <p>Position player_3 plays, e.g., None</p> <code>player_3_type</code> <code>str | None</code> <p>Type of player, e.g., None</p> <code>score_state</code> <code>str</code> <p>Score of the game from event team's perspective, e.g., 4v2</p> <code>score_diff</code> <code>int</code> <p>Score differential from event team's perspective, e.g., 2</p> <code>shot_type</code> <code>str | None</code> <p>Type of shot taken, if event is a shot, e.g., WRIST</p> <code>event_length</code> <code>int</code> <p>Time elapsed since previous event, e.g., 5</p> <code>event_distance</code> <code>float | None</code> <p>Calculated distance of event from goal, e.g, 185.32673849177834</p> <code>pbp_distance</code> <code>int</code> <p>Distance of event from goal from description, e.g., 185</p> <code>event_angle</code> <code>float | None</code> <p>Angle of event towards goal, e.g., 57.52880770915151</p> <code>penalty</code> <code>str | None</code> <p>Name of penalty, e.g., None</p> <code>penalty_length</code> <code>int | None</code> <p>Duration of penalty, e.g., None</p> <code>home_score</code> <code>int</code> <p>Home team's score, e.g., 2</p> <code>home_score_diff</code> <code>int</code> <p>Home team's score differential, e.g., -2</p> <code>away_score</code> <code>int</code> <p>Away team's score, e.g., 4</p> <code>away_score_diff</code> <code>int</code> <p>Away team's score differential, e.g., 2</p> <code>is_home</code> <code>int</code> <p>Whether event team is home, e.g., 0</p> <code>is_away</code> <code>int</code> <p>Whether event is away, e.g., 1</p> <code>home_team</code> <code>str</code> <p>Home team, e.g., CHI</p> <code>away_team</code> <code>str</code> <p>Away team, e.g., NSH</p> <code>home_skaters</code> <code>int</code> <p>Number of home team skaters on-ice (excl. goalies), e.g., 6</p> <code>away_skaters</code> <code>int</code> <p>Number of away team skaters on-ice (excl. goalies), e.g., 5</p> <code>home_on</code> <code>list | str | None</code> <p>Name of home team's skaters on-ice (excl. goalies), e.g., ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON</p> <code>home_on_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of home team's skaters on-ice (excl. goalies), e.g., ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2</p> <code>home_on_api_id</code> <code>list | str | None</code> <p>NHL API IDs of home team's skaters on-ice (excl. goalies), e.g., 8479337, 8473604, 8481523, 8474141, 8470281, 8476979</p> <code>home_on_positions</code> <code>list | str | None</code> <p>Positions of home team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D</p> <code>away_on</code> <code>list | str | None</code> <p>Name of away team's skaters on-ice (excl. goalies), e.g., NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI</p> <code>away_on_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of away team's skaters on-ice (excl. goalies), e.g., NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI</p> <code>away_on_api_id</code> <code>list | str | None</code> <p>NHL API IDs of away team's skaters on-ice (excl. goalies), e.g., 8474009, 8475714, 8475798, 8475218, 8474600</p> <code>away_on_positions</code> <code>list | str | None</code> <p>Positions of away team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D</p> <code>event_team_skaters</code> <code>int | None</code> <p>Number of event team skaters on-ice (excl. goalies), e.g., 5</p> <code>teammates</code> <code>list | str | None</code> <p>Name of event team's skaters on-ice (excl. goalies), e.g., NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND, MATTIAS EKHOLM, ROMAN JOSI</p> <code>teammates_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of event team's skaters on-ice (excl. goalies), e.g., NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND, MATTIAS.EKHOLM, ROMAN.JOSI</p> <code>teammates_api_id</code> <code>list | str | None = None</code> <p>NHL API IDs of event team's skaters on-ice (excl. goalies), e.g., 8474009, 8475714, 8475798, 8475218, 8474600</p> <code>teammates_positions</code> <code>list | str | None</code> <p>Positions of event team's skaters on-ice (excl. goalies), e.g., C, C, C, D, D</p> <code>own_goalie</code> <code>list | str | None</code> <p>Name of the event team's goalie, e.g., PEKKA RINNE</p> <code>own_goalie_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey ID of the event team's goalie, e.g., PEKKA.RINNE</p> <code>own_goalie_api_id</code> <code>list | str | None</code> <p>NHL API ID of the event team's goalie, e.g., 8471469</p> <code>forwards</code> <code>list | str | None</code> <p>Name of event team's forwards on-ice, e.g., NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND</p> <code>forwards_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of event team's forwards on-ice, e.g., NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND</p> <code>forwards_api_id</code> <code>list | str | None</code> <p>NHL API IDs of event team's forwards on-ice, e.g., 8474009, 8475714, 8475798</p> <code>defense</code> <code>list | str | None</code> <p>Name of event team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI</p> <code>defense_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of event team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI</p> <code>defense_api_id</code> <code>list | str | None</code> <p>NHL API IDs of event team's skaters on-ice, e.g., 8475218, 8474600</p> <code>opp_strength_state</code> <code>str | None</code> <p>Strength state from opposing team's perspective, e.g., Ev5</p> <code>opp_score_state</code> <code>str | None</code> <p>Score state from opposing team's perspective, e.g., 2v4</p> <code>opp_score_diff</code> <code>int | None</code> <p>Score differential from opposing team's perspective, e.g., -2</p> <code>opp_team_skaters</code> <code>int | None</code> <p>Number of opposing team skaters on-ice (excl. goalies), e.g., 6</p> <code>opp_team_on</code> <code>list | str | None</code> <p>Name of opposing team's skaters on-ice (excl. goalies), e.g., ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE, DUNCAN KEITH, ERIK GUSTAFSSON</p> <code>opp_team_on_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of opposing team's skaters on-ice (excl. goalies), e.g., ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE, DUNCAN.KEITH, ERIK.GUSTAFSSON2</p> <code>opp_team_on_api_id</code> <code>list | str | None</code> <p>NHL API IDs of opposing team's skaters on-ice (excl. goalies), e.g., 8479337, 8473604, 8481523, 8474141, 8470281, 8476979</p> <code>opp_team_on_positions</code> <code>list | str | None</code> <p>Positions of opposing team's skaters on-ice (excl. goalies), e.g., R, C, C, R, D, D</p> <code>opp_goalie</code> <code>list | str | None</code> <p>Name of the opposing team's goalie, e.g., None</p> <code>opp_goalie_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey ID of the opposing team's goalie, e.g., None</p> <code>opp_goalie_api_id</code> <code>list | str | None</code> <p>NHL API ID of the opposing team's goalie, e.g., None</p> <code>opp_forwards</code> <code>list | str | None</code> <p>Name of opposing team's forwards on-ice, e.g., ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE</p> <code>opp_forwards_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of opposing team's forwards on-ice, e.g., ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE</p> <code>opp_forwards_api_id</code> <code>list | str | None</code> <p>NHL API IDs of opposing team's forwards on-ice, e.g., 8479337, 8473604, 8481523, 8474141</p> <code>opp_defense</code> <code>list | str | None</code> <p>Name of opposing team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON</p> <code>opp_defense_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of opposing team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2</p> <code>opp_defense_api_id</code> <code>list | str | None</code> <p>NHL API IDs of opposing team's skaters on-ice, e.g., 8470281, 8476979</p> <code>home_forwards</code> <code>list | str | None</code> <p>Name of home team's forwards on-ice, e.g., ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE</p> <code>home_forwards_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of home team's forwards on-ice, e.g., ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE</p> <code>home_forwards_api_id</code> <code>list | str | None = None</code> <p>NHL API IDs of home team's forwards on-ice, e.g., 8479337, 8473604, 8481523, 8474141</p> <code>home_defense</code> <code>list | str | None</code> <p>Name of home team's defense on-ice, e.g., DUNCAN KEITH, ERIK GUSTAFSSON</p> <code>home_defense_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of home team's defense on-ice, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2</p> <code>home_defense_api_id</code> <code>list | str | None</code> <p>NHL API IDs of home team's skaters on-ice, e.g., 8470281, 8476979</p> <code>home_goalie</code> <code>list | str | None</code> <p>Name of the home team's goalie, e.g., None</p> <code>home_goalie_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey ID of the home team's goalie, e.g., None</p> <code>home_goalie_api_id</code> <code>list | str | None</code> <p>NHL API ID of the home team's goalie, e.g., None</p> <code>away_forwards</code> <code>list | str | None</code> <p>Name of away team's forwards on-ice, e.g., NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND</p> <code>away_forwards_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of away team's forwards on-ice, e.g., NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND</p> <code>away_forwards_api_id</code> <code>list | str | None</code> <p>NHL API IDs of away team's forwards on-ice, e.g., 8474009, 8475714, 8475798</p> <code>away_defense</code> <code>list | str | None</code> <p>Name of away team's defense on-ice, e.g., MATTIAS EKHOLM, ROMAN JOSI</p> <code>away_defense_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of away team's defense on-ice, e.g., MATTIAS.EKHOLM, ROMAN.JOSI</p> <code>away_defense_api_id</code> <code>list | str | None</code> <p>NHL API IDs of away team's skaters on-ice, e.g., 8475218, 8474600</p> <code>away_goalie</code> <code>list | str | None</code> <p>Name of the away team's goalie, e.g., PEKKA RINNE</p> <code>away_goalie_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey ID of the away team's goalie, e.g., PEKKA.RINNE</p> <code>away_goalie_api_id</code> <code>list | str | None</code> <p>NHL API ID of the away team's goalie, e.g., 8471469</p> <code>change_on_count</code> <code>int | None</code> <p>Number of players on, e.g., None</p> <code>change_off_count</code> <code>int | None</code> <p>Number of players off, e.g., None</p> <code>change_on</code> <code>list | str | None</code> <p>Names of the players on, e.g., None</p> <code>change_on_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of the players on, e.g., None</p> <code>change_on_api_id</code> <code>list | str | None</code> <p>NHL API IDs of the players on, e.g., None</p> <code>change_on_positions</code> <code>list | str | None</code> <p>Postions of the players on, e.g., None</p> <code>change_off</code> <code>list | str | None</code> <p>Names of the players off, e.g., None</p> <code>change_off_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of the players off, e.g., None</p> <code>change_off_api_id</code> <code>list | str | None</code> <p>NHL API IDs of the players off, e.g., None</p> <code>change_off_positions</code> <code>list | str | None</code> <p>Positions of the players off, e.g., None</p> <code>change_on_forwards_count</code> <code>int | None</code> <p>Number of forwards changing on, e.g., None</p> <code>change_off_forwards_count</code> <code>int | None</code> <p>Number of forwards off, e.g., None</p> <code>change_on_forwards</code> <code>list | str | None</code> <p>Names of the forwards on, e.g., None</p> <code>change_on_forwards_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of the forwards on, e.g., None</p> <code>change_on_forwards_api_id</code> <code>list | str | None</code> <p>NHL API IDs of the forwards on, e.g., None</p> <code>change_off_forwards</code> <code>list | str | None</code> <p>Names of the forwards off, e.g., None</p> <code>change_off_forwards_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of the forwards off, e.g., None</p> <code>change_off_forwards_api_id</code> <code>list | str | None</code> <p>NHL API IDs of the forwards off, e.g., None</p> <code>change_on_defense_count</code> <code>int | None</code> <p>Number of defense on, e.g., None</p> <code>change_off_defense_count</code> <code>int | None</code> <p>Number of defense off, e.g., None</p> <code>change_on_defense</code> <code>list | str | None</code> <p>Names of the defense on, e.g., None</p> <code>change_on_defense_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of the defense on, e.g., None</p> <code>change_on_defense_api_id</code> <code>list | str | None</code> <p>NHL API IDs of the defense on, e.g., None</p> <code>change_off_defense</code> <code>list | str | None</code> <p>Names of the defense off, e.g., None</p> <code>change_off_defense_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey IDs of the defense off, e.g., None</p> <code>change_off_defense_api_id</code> <code>list | str | None</code> <p>NHL API IDs of the defense off, e.g., None</p> <code>change_on_goalie_count</code> <code>int | None</code> <p>Number of goalies on, e.g., None</p> <code>change_off_goalie_count</code> <code>int | None</code> <p>Number of goalies off, e.g., None</p> <code>change_on_goalie</code> <code>list | str | None</code> <p>Name of goalie on, e.g., None</p> <code>change_on_goalie_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey ID of the goalie on, e.g., None</p> <code>change_on_goalie_api_id</code> <code>list | str | None</code> <p>NHL API ID of the goalie on, e.g., None</p> <code>change_off_goalie</code> <code>list | str | None</code> <p>Name of the goalie off, e.g., None</p> <code>change_off_goalie_eh_id</code> <code>list | str | None</code> <p>Evolving Hockey ID of the goalie off, e.g., None</p> <code>change_off_goalie_api_id</code> <code>list | str | None</code> <p>NHL API ID of the goalie off, e.g., None</p> <code>goal</code> <code>int</code> <p>Dummy indicator whether event is a goal, e.g., 1</p> <code>shot</code> <code>int</code> <p>Dummy indicator whether event is a shot, e.g., 1</p> <code>miss</code> <code>int</code> <p>Dummy indicator whether event is a miss, e.g., 0</p> <code>fenwick</code> <code>int</code> <p>Dummy indicator whether event is a fenwick event, e.g., 1</p> <code>corsi</code> <code>int</code> <p>Dummy indicator whether event is a corsi event, e.g., 1</p> <code>block</code> <code>int</code> <p>Dummy indicator whether event is a block, e.g., 0</p> <code>hit</code> <code>int</code> <p>Dummy indicator whether event is a hit, e.g., 0</p> <code>give</code> <code>int</code> <p>Dummy indicator whether event is a give, e.g., 0</p> <code>take</code> <code>int</code> <p>Dummy indicator whether event is a take, e.g., 0</p> <code>fac</code> <code>int</code> <p>Dummy indicator whether event is a faceoff, e.g., 0</p> <code>penl</code> <code>int</code> <p>Dummy indicator whether event is a penalty, e.g., 0</p> <code>change</code> <code>int</code> <p>Dummy indicator whether event is a change, e.g., 0</p> <code>stop</code> <code>int</code> <p>Dummy indicator whether event is a stop, e.g., 0</p> <code>chl</code> <code>int</code> <p>Dummy indicator whether event is a challenge, e.g., 0</p> <code>ozf</code> <code>int</code> <p>Dummy indicator whether event is a offensive zone faceoff, e.g., 0</p> <code>nzf</code> <code>int</code> <p>Dummy indicator whether event is a neutral zone faceoff, e.g., 0</p> <code>dzf</code> <code>int</code> <p>Dummy indicator whether event is a defensive zone faceoff, e.g., 0</p> <code>ozc</code> <code>int</code> <p>Dummy indicator whether event is a offensive zone change, e.g., 0</p> <code>nzc</code> <code>int</code> <p>Dummy indicator whether event is a neutral zone change, e.g., 0</p> <code>dzc</code> <code>int</code> <p>Dummy indicator whether event is a defensive zone change, e.g., 0</p> <code>otf</code> <code>int</code> <p>Dummy indicator whether event is an on-the-fly change, e.g., 0</p> <code>pen0</code> <code>int</code> <p>Dummy indicator whether event is a penalty, e.g., 0</p> <code>pen2</code> <code>int</code> <p>Dummy indicator whether event is a minor penalty, e.g., 0</p> <code>pen4</code> <code>int</code> <p>Dummy indicator whether event is a double minor penalty, e.g., 0</p> <code>pen5</code> <code>int</code> <p>Dummy indicator whether event is a major penalty, e.g., 0</p> <code>pen10</code> <code>int</code> <p>Dummy indicator whether event is a game misconduct penalty, e.g., 0</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; game = Game(game_id)\n</code></pre> <p>Then you can access the property</p> <pre><code>&gt;&gt;&gt; game.play_by_play\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Game.play_by_play_ext","title":"play_by_play_ext  <code>property</code>","text":"<pre><code>play_by_play_ext\n</code></pre> <p>List of additional columns used for aggregating on-ice statistics.</p> <p>Returns:</p> Name Type Description <code>id</code> <code>int</code> <p>Unique play identifier, the equivalent of the game ID and event_idx concatenated</p> <code>event_idx</code> <code>int</code> <p>Index ID for event</p> <code>event_on_1</code> <code>str | None</code> <p>Player name</p> <code>event_on_1_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>event_on_1_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>event_on_1_pos</code> <code>str | None</code> <p>Player position</p> <code>event_on_2</code> <code>str | None</code> <p>Player name</p> <code>event_on_2_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>event_on_2_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>event_on_2_pos</code> <code>str | None</code> <p>Player position</p> <code>event_on_3</code> <code>str | None</code> <p>Player name</p> <code>event_on_3_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>event_on_3_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>event_on_3_pos</code> <code>str | None</code> <p>Player position</p> <code>event_on_4</code> <code>str | None</code> <p>Player name</p> <code>event_on_4_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>event_on_4_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>event_on_4_pos</code> <code>str | None</code> <p>Player position</p> <code>event_on_5</code> <code>str | None</code> <p>Player name</p> <code>event_on_5_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>event_on_5_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>event_on_5_pos</code> <code>str | None</code> <p>Player position</p> <code>event_on_6</code> <code>str | None</code> <p>Player name</p> <code>event_on_6_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>event_on_6_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>event_on_6_pos</code> <code>str | None</code> <p>Player position</p> <code>event_on_7</code> <code>str | None</code> <p>Player name</p> <code>event_on_7_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>event_on_7_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>event_on_7_pos</code> <code>str | None</code> <p>Player position</p> <code>opp_on_1</code> <code>str | None</code> <p>Player name</p> <code>opp_on_1_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>opp_on_1_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>opp_on_1_pos</code> <code>str | None</code> <p>Player position</p> <code>opp_on_2</code> <code>str | None</code> <p>Player name</p> <code>opp_on_2_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>opp_on_2_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>opp_on_2_pos</code> <code>str | None</code> <p>Player position</p> <code>opp_on_3</code> <code>str | None</code> <p>Player name</p> <code>opp_on_3_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>opp_on_3_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>opp_on_3_pos</code> <code>str | None</code> <p>Player position</p> <code>opp_on_4</code> <code>str | None</code> <p>Player name</p> <code>opp_on_4_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>opp_on_4_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>opp_on_4_pos</code> <code>str | None</code> <p>Player position</p> <code>opp_on_5</code> <code>str | None</code> <p>Player name</p> <code>opp_on_5_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>opp_on_5_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>opp_on_5_pos</code> <code>str | None</code> <p>Player position</p> <code>opp_on_6</code> <code>str | None</code> <p>Player name</p> <code>opp_on_6_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>opp_on_6_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>opp_on_6_pos</code> <code>str | None</code> <p>Player position</p> <code>opp_on_7</code> <code>str | None</code> <p>Player name</p> <code>opp_on_7_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>opp_on_7_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>opp_on_7_pos</code> <code>str | None</code> <p>Player position</p> <code>change_on_1</code> <code>str | None</code> <p>Player name</p> <code>change_on_1_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>change_on_1_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>change_on_1_pos</code> <code>str | None</code> <p>Player position</p> <code>change_on_2</code> <code>str | None</code> <p>Player name</p> <code>change_on_2_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>change_on_2_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>change_on_2_pos</code> <code>str | None</code> <p>Player position</p> <code>change_on_3</code> <code>str | None</code> <p>Player name</p> <code>change_on_3_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>change_on_3_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>change_on_3_pos</code> <code>str | None</code> <p>Player position</p> <code>change_on_4</code> <code>str | None</code> <p>Player name</p> <code>change_on_4_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>change_on_4_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>change_on_4_pos</code> <code>str | None</code> <p>Player position</p> <code>change_on_5</code> <code>str | None</code> <p>Player name</p> <code>change_on_5_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>change_on_5_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>change_on_5_pos</code> <code>str | None</code> <p>Player position</p> <code>change_on_6</code> <code>str | None</code> <p>Player name</p> <code>change_on_6_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>change_on_6_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>change_on_6_pos</code> <code>str | None</code> <p>Player position</p> <code>change_on_7</code> <code>str | None</code> <p>Player name</p> <code>change_on_7_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>change_on_7_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>change_on_7_pos</code> <code>str | None</code> <p>Player position</p> <code>change_off_1</code> <code>str | None</code> <p>Player name</p> <code>change_off_1_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>change_off_1_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>change_off_1_pos</code> <code>str | None</code> <p>Player position</p> <code>change_off_2</code> <code>str | None</code> <p>Player name</p> <code>change_off_2_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>change_off_2_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>change_off_2_pos</code> <code>str | None</code> <p>Player position</p> <code>change_off_3</code> <code>str | None</code> <p>Player name</p> <code>change_off_3_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>change_off_3_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>change_off_3_pos</code> <code>str | None</code> <p>Player position</p> <code>change_off_4</code> <code>str | None</code> <p>Player name</p> <code>change_off_4_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>change_off_4_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>change_off_4_pos</code> <code>str | None</code> <p>Player position</p> <code>change_off_5</code> <code>str | None</code> <p>Player name</p> <code>change_off_5_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>change_off_5_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>change_off_5_pos</code> <code>str | None</code> <p>Player position</p> <code>change_off_6</code> <code>str | None</code> <p>Player name</p> <code>change_off_6_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>change_off_6_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>change_off_6_pos</code> <code>str | None</code> <p>Player position</p> <code>change_off_7</code> <code>str | None</code> <p>Player name</p> <code>change_off_7_eh_id</code> <code>str | None</code> <p>ID used for matching with Evolving Hockey data</p> <code>change_off_7_api_id</code> <code>int | None</code> <p>ID used for matching NHL API data</p> <code>change_off_7_pos</code> <code>str | None</code> <p>Player position</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; game = Game(game_id)\n</code></pre> <p>Then you can access the property</p> <pre><code>&gt;&gt;&gt; game.play_by_play_ext\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Game.rosters","title":"rosters  <code>property</code>","text":"<pre><code>rosters\n</code></pre> <p>List of players scraped from API &amp; HTML endpoints. Returns a dictionary of players with the below keys.</p> Note <p>You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g., <code>Game(2019020684).rosters_df</code></p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>team</code> <code>str</code> <p>Team name of the player, e.g., NSH</p> <code>team_name</code> <code>str</code> <p>Full team name, e.g., NASHVILLE PREDATORS</p> <code>team_venue</code> <code>str</code> <p>Whether team is home or away, e.g., AWAY</p> <code>player_name</code> <code>str</code> <p>Player's name, e.g., FILIP FORSBERG</p> <code>api_id</code> <code>int | None</code> <p>Player's NHL API ID, e.g., 8476887</p> <code>eh_id</code> <code>str</code> <p>Evolving Hockey ID for the player, e.g., FILIP.FORSBERG</p> <code>team_jersey</code> <code>str</code> <p>Team and jersey combination used for player identification, e.g., NSH9</p> <code>jersey</code> <code>int</code> <p>Player's jersey number, e.g., 9</p> <code>position</code> <code>str</code> <p>Player's position, e.g., L</p> <code>starter</code> <code>int</code> <p>Whether the player started the game, e.g., 0</p> <code>status</code> <code>str</code> <p>Whether player is active or scratched, e.g., ACTIVE</p> <code>headshot_url</code> <code>str | None</code> <p>URL to get player's headshot, e.g., https://assets.nhle.com/mugs/nhl/20192020/NSH/8476887.png</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; game = Game(game_id)\n</code></pre> <p>Then you can access the property</p> <pre><code>&gt;&gt;&gt; game.rosters\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Game.changes","title":"changes  <code>property</code>","text":"<pre><code>changes\n</code></pre> <p>List of changes scraped from API endpoint. Each change is a dictionary with the below keys.</p> Note <p>You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g., <code>Game(2019020684).changes_df</code></p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>event_team</code> <code>str</code> <p>Team that performed the action for the event, e.g., NSH</p> <code>event</code> <code>str</code> <p>Type of event that occurred, e.g., CHANGE</p> <code>event_type</code> <code>str</code> <p>Type of change that occurred, e.g., AWAY CHANGE</p> <code>description</code> <code>str | None</code> <p>Description of the event, e.g., PLAYERS ON: MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE / PLAYERS OFF: YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN</p> <code>period</code> <code>int</code> <p>Period number of the event, e.g., 3</p> <code>period_seconds</code> <code>int</code> <p>Time elapsed in the period, in seconds, e.g., 1178</p> <code>game_seconds</code> <code>int</code> <p>Time elapsed in the game, in seconds, e.g., 3578</p> <code>change_on_count</code> <code>int</code> <p>Number of players on, e.g., 4</p> <code>change_off_count</code> <code>int</code> <p>Number of players off, e.g., 4</p> <code>change_on</code> <code>str</code> <p>Names of players on, e.g., MATTIAS EKHOLM, CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE</p> <code>change_on_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the players on, e.g., NSH14, NSH19, NSH64, NSH95</p> <code>change_on_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the players on, e.g., MATTIAS.EKHOLM, CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE</p> <code>change_on_positions</code> <code>str</code> <p>Positions of the players on, e.g., D, C, C, C</p> <code>change_off</code> <code>str</code> <p>Names of players off, e.g., YANNICK WEBER, FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN</p> <code>change_off_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the players off, e.g., NSH7, NSH9, NSH33, NSH92</p> <code>change_off_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the players off, e.g., YANNICK.WEBER, FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN</p> <code>change_off_positions</code> <code>str</code> <p>Positions of the players off, e.g., D, L, L, C</p> <code>change_on_forwards_count</code> <code>int</code> <p>Number of forwards on, e.g.,</p> <code>change_off_forwards_count</code> <code>int</code> <p>Number of forwards off, e.g., 3</p> <code>change_on_forwards</code> <code>str</code> <p>Names of forwards on, e.g., CALLE JARNKROK, MIKAEL GRANLUND, MATT DUCHENE</p> <code>change_on_forwards_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the forwards on, e.g., NSH19, NSH64, NSH95</p> <code>change_on_forwards_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the forwards on, e.g., CALLE.JARNKROK, MIKAEL.GRANLUND, MATT.DUCHENE</p> <code>change_off_forwards</code> <code>str</code> <p>Names of forwards off, e.g., FILIP FORSBERG, VIKTOR ARVIDSSON, RYAN JOHANSEN</p> <code>change_off_forwards_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the forwards off, e.g., NSH9, NSH33, NSH92</p> <code>change_off_forwards_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the forwards off, e.g., FILIP.FORSBERG, VIKTOR.ARVIDSSON, RYAN.JOHANSEN</p> <code>change_on_defense_count</code> <code>int</code> <p>Number of defense on, e.g., 1</p> <code>change_off_defense_count</code> <code>int</code> <p>Number of defense off, e.g., 1</p> <code>change_on_defense</code> <code>str</code> <p>Names of defense on, e.g., MATTIAS EKHOLM</p> <code>change_on_defense_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the defense on, e.g., NSH14</p> <code>change_on_defense_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the defense on, e.g., MATTIAS.EKHOLM</p> <code>change_off_defense</code> <code>str</code> <p>Names of defense off, e.g., YANNICK WEBER</p> <code>change_off_defense_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the defense off, e.g., NSH7</p> <code>change_off_defebse_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the defebse off, e.g., YANNICK.WEBER</p> <code>change_on_goalie_count</code> <code>int</code> <p>Number of goalies on, e.g., 0</p> <code>change_off_goalie_count</code> <code>int</code> <p>Number of goalies off, e.g., 0</p> <code>change_on_goalies</code> <code>str</code> <p>Names of goalies on, e.g., None</p> <code>change_on_goalies_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the goalies on, e.g., None</p> <code>change_on_goalies_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the goalies on, e.g., None</p> <code>change_off_goalies</code> <code>str</code> <p>Names of goalies off, e.g., None</p> <code>change_off_goalies_jersey</code> <code>str</code> <p>Combination of jerseys and numbers for the goalies off, e.g., None</p> <code>change_off_goalies_eh_id</code> <code>str</code> <p>Evolving Hockey IDs of the goalies off, e.g., None</p> <code>is_home</code> <code>int</code> <p>Dummy indicator whether change team is home, e.g., 0</p> <code>is_away</code> <code>int</code> <p>Dummy indicator whether change team is away, e.g., 1</p> <code>team_venue</code> <code>str</code> <p>Whether team is home or away, e.g., AWAY</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; game = Game(game_id)\n</code></pre> <p>Then you can access the property</p> <pre><code>&gt;&gt;&gt; game.changes\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Game.shifts","title":"shifts  <code>property</code>","text":"<pre><code>shifts\n</code></pre> <p>List of shifts scraped from HTML endpoint. Returns a dictionary of player - shifts with the below keys.</p> Note <p>You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g., <code>Game(2019020684).shifts_df</code></p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>team</code> <code>str</code> <p>Team name of the player, e.g., NSH</p> <code>team_name</code> <code>str</code> <p>Full team name, e.g., NASHVILLE PREDATORS</p> <code>player_name</code> <code>str</code> <p>Player's name, e.g., FILIP FORSBERG</p> <code>eh_id</code> <code>str</code> <p>Evolving Hockey ID for the player, e.g., FILIP.FORSBERG</p> <code>team_jersey</code> <code>str</code> <p>Team and jersey combination used for player identification, e.g., NSH9</p> <code>position</code> <code>str</code> <p>Player's position, e.g., L</p> <code>jersey</code> <code>int</code> <p>Player's jersey number, e.g., 9</p> <code>shift_count</code> <code>int</code> <p>Shift number for that player, e.g., 1</p> <code>period</code> <code>int</code> <p>Period number for the shift, e.g., 1</p> <code>start_time</code> <code>str</code> <p>Time shift started, e.g., 0:00</p> <code>end_time</code> <code>str</code> <p>Time shift ended, e.g., 0:18</p> <code>duration</code> <code>str</code> <p>Length of shift, e.g, 00:18</p> <code>start_time_seconds</code> <code>int</code> <p>Time shift started in seconds, e.g., 0</p> <code>end_time_seconds</code> <code>int</code> <p>Time shift ended in seconds, e.g., 18</p> <code>duration_seconds</code> <code>int</code> <p>Length of shift in seconds, e.g., 18</p> <code>shift_start</code> <code>str</code> <p>Time the shift started as the original string, e.g., 0:00 / 20:00</p> <code>shift_end</code> <code>str</code> <p>Time the shift ended as the original string, e.g., 0:18 / 19:42</p> <code>goalie</code> <code>int</code> <p>Whether player is a goalie, e.g., 0</p> <code>is_home</code> <code>int</code> <p>Whether player is home e.g., 0</p> <code>is_away</code> <code>int</code> <p>Whether player is away, e.g., 1</p> <code>team_venue</code> <code>str</code> <p>Whether player is home or away, e.g., AWAY</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; game = Game(game_id)\n</code></pre> <p>Then you can access the property</p> <pre><code>&gt;&gt;&gt; game.shifts\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Game.api_events","title":"api_events  <code>property</code>","text":"<pre><code>api_events\n</code></pre> <p>List of events scraped from API endpoint. Each event is a dictionary with the below keys.</p> Note <p>You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g., <code>Game(2019020684).api_events_df</code></p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>event_idx</code> <code>int</code> <p>Index ID for event, e.g., 689</p> <code>period</code> <code>int</code> <p>Period number of the event, e.g., 3</p> <code>period_seconds</code> <code>int</code> <p>Time elapsed in the period, in seconds, e.g., 1178</p> <code>game_seconds</code> <code>int</code> <p>Time elapsed in the game, in seconds, e.g., 3578</p> <code>event_team</code> <code>str</code> <p>Team that performed the action for the event, e.g., NSH</p> <code>event</code> <code>str</code> <p>Type of event that occurred, e.g., GOAL</p> <code>event_code</code> <code>str</code> <p>Code to indicate type of event that occured, e.g., 505</p> <code>description</code> <code>str | None</code> <p>Description of the event, e.g., None</p> <code>coords_x</code> <code>int</code> <p>x-coordinates where the event occurred, e.g, -96</p> <code>coords_y</code> <code>int</code> <p>y-coordinates where the event occurred, e.g., 11</p> <code>zone</code> <code>str</code> <p>Zone where the event occurred, relative to the event team, e.g., D</p> <code>player_1</code> <code>str</code> <p>Player that performed the action, e.g., PEKKA RINNE</p> <code>player_1_eh_id</code> <code>str</code> <p>Evolving Hockey ID for player_1, e.g., PEKKA.RINNE</p> <code>player_1_position</code> <code>str</code> <p>Position player_1 plays, e.g., G</p> <code>player_1_type</code> <code>str</code> <p>Type of player, e.g., GOAL SCORER</p> <code>player_1_api_id</code> <code>int</code> <p>NHL API ID for player_1, e.g., 8471469</p> <code>player_1_team_jersey</code> <code>str</code> <p>Combination of team and jersey used for player identification purposes, e.g, NSH35</p> <code>player_2</code> <code>str | None</code> <p>Player that performed the action, e.g., None</p> <code>player_2_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for player_2, e.g., None</p> <code>player_2_position</code> <code>str | None</code> <p>Position player_2 plays, e.g., None</p> <code>player_2_type</code> <code>str | None</code> <p>Type of player, e.g., None</p> <code>player_2_api_id</code> <code>str | None</code> <p>NHL API ID for player_2, e.g., None</p> <code>player_2_team_jersey</code> <code>str | None</code> <p>Combination of team and jersey used for player identification purposes, e.g, None</p> <code>player_3</code> <code>str | None</code> <p>Player that performed the action, e.g., None</p> <code>player_3_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for player_3, e.g., None</p> <code>player_3_position</code> <code>str | None</code> <p>Position player_3 plays, e.g., None</p> <code>player_3_type</code> <code>str | None</code> <p>Type of player, e.g., None</p> <code>player_3_api_id</code> <code>str | None</code> <p>NHL API ID for player_3, e.g., None</p> <code>player_3_team_jersey</code> <code>str | None</code> <p>Combination of team and jersey used for player identification purposes, e.g, None</p> <code>strength</code> <code>int</code> <p>Code to indication strength state, e.g., 1560</p> <code>shot_type</code> <code>str | None</code> <p>Type of shot taken, if event is a shot, e.g., WRIST</p> <code>miss_reason</code> <code>str | None</code> <p>Reason shot missed, e.g., None</p> <code>opp_goalie</code> <code>str | None</code> <p>Opposing goalie, e.g., None</p> <code>opp_goalie_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for opposing goalie, e.g., None</p> <code>opp_goalie_api_id</code> <code>str | None</code> <p>NHL API ID for opposing goalie, e.g., None</p> <code>opp_goalie_team_jersey</code> <code>str | None</code> <p>Combination of team and jersey used for player identification purposes, e.g, None</p> <code>event_team_id</code> <code>int</code> <p>NHL ID for the event team, e.g., 18</p> <code>stoppage_reason</code> <code>str | None</code> <p>Reason the play was stopped, e.g., None</p> <code>stoppage_reason_secondary</code> <code>str | None</code> <p>Secondary reason play was stopped, e.g., None</p> <code>penalty_type</code> <code>str | None</code> <p>Type of penalty taken, e.g., None</p> <code>penalty_reason</code> <code>str | None</code> <p>Reason for the penalty, e.g., None</p> <code>penalty_duration</code> <code>int | None</code> <p>Duration of the penalty, e.g., None</p> <code>home_team_defending_side</code> <code>str</code> <p>Side of the ice the home team is defending, e.g., right</p> <code>version</code> <code>int</code> <p>Increases with simultaneous events, used for combining events in the scraper, e.g., 1</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; game = Game(game_id)\n</code></pre> <p>Then you can access the property</p> <pre><code>&gt;&gt;&gt; game.api_events\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Game.api_rosters","title":"api_rosters  <code>property</code>","text":"<pre><code>api_rosters\n</code></pre> <p>List of players scraped from API endpoint. Returns a dictionary of players with the below keys.</p> Note <p>You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g., <code>Game(2019020684).api_rosters_df</code></p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>team</code> <code>str</code> <p>Team name of the player, e.g., NSH</p> <code>team_venue</code> <code>str</code> <p>Whether team is home or away, e.g., AWAY</p> <code>player_name</code> <code>str</code> <p>Player's name, e.g., FILIP FORSBERG</p> <code>eh_id</code> <code>str</code> <p>Evolving Hockey ID for the player, e.g., FILIP.FORSBERG</p> <code>api_id</code> <code>str</code> <p>NHL API ID for the player, e.g., 8476887</p> <code>team_jersey</code> <code>str</code> <p>Team and jersey combination used for player identification, e.g., NSH9</p> <code>position</code> <code>str</code> <p>Player's position, e.g., L</p> <code>first_name</code> <code>str</code> <p>Player's first name, e.g., FILIP</p> <code>last_name</code> <code>str</code> <p>Player's last name, e.g., FORSBERG</p> <code>headshot_url</code> <code>str</code> <p>URL to retreive player's headshot</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; game = Game(game_id)\n</code></pre> <p>Then you can access the property</p> <pre><code>&gt;&gt;&gt; game.api_rosters\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Game.html_events","title":"html_events  <code>property</code>","text":"<pre><code>html_events\n</code></pre> <p>List of events scraped from HTML endpoint. Each event is a dictionary with the below keys.</p> Note <p>You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g., <code>Game(2019020684).html_events_df</code></p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>event_idx</code> <code>int</code> <p>Index ID for event, e.g., 331</p> <code>period</code> <code>int</code> <p>Period number of the event, e.g., 3</p> <code>period_time</code> <code>str</code> <p>Time elapsed in the period, e.g., 19:38</p> <code>period_seconds</code> <code>int</code> <p>Time elapsed in the period, in seconds, e.g., 1178</p> <code>game_seconds</code> <code>int</code> <p>Time elapsed in the game, in seconds, e.g., 3578</p> <code>event_team</code> <code>str</code> <p>Team that performed the action for the event, e.g., NSH</p> <code>event</code> <code>str</code> <p>Type of event that occurred, e.g., GOAL</p> <code>description</code> <code>str | None</code> <p>Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.</p> <code>player_1</code> <code>str</code> <p>Player that performed the action, e.g., PEKKA RINNE</p> <code>player_1_eh_id</code> <code>str</code> <p>Evolving Hockey ID for player_1, e.g., PEKKA.RINNE</p> <code>player_1_position</code> <code>str</code> <p>Position player_1 plays, e.g., G</p> <code>player_2</code> <code>str | None</code> <p>Player that performed the action, e.g., None</p> <code>player_2_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for player_2, e.g., None</p> <code>player_2_position</code> <code>str | None</code> <p>Position player_2 plays, e.g., None</p> <code>player_3</code> <code>str | None</code> <p>Player that performed the action, e.g., None</p> <code>player_3_eh_id</code> <code>str | None</code> <p>Evolving Hockey ID for player_3, e.g., None</p> <code>player_3_position</code> <code>str | None</code> <p>Position player_3 plays, e.g., None</p> <code>zone</code> <code>str</code> <p>Zone where the event occurred, relative to the event team, e.g., DEF</p> <code>shot_type</code> <code>str | None</code> <p>Type of shot taken, if event is a shot, e.g., WRIST</p> <code>penalty_length</code> <code>str | None</code> <p>Duration of the penalty, e.g., None</p> <code>penalty</code> <code>str | None</code> <p>Reason for the penalty, e.g., None</p> <code>strength</code> <code>str | None</code> <p>Code to indication strength state, e.g., EV</p> <code>away_skaters</code> <code>str</code> <p>Away skaters on-ice, e.g., 13C, 19C, 64C, 14D, 59D, 35G</p> <code>home_skaters</code> <code>str</code> <p>Home skaters on-ice, e.g., 19C, 77C, 12R, 88R, 2D, 56D</p> <code>version</code> <code>int</code> <p>Increases with simultaneous events, used for combining events in the scraper, e.g., 1</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; game = Game(game_id)\n</code></pre> <p>Then you can access the property</p> <pre><code>&gt;&gt;&gt; game.html_events\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Game.html_rosters","title":"html_rosters  <code>property</code>","text":"<pre><code>html_rosters\n</code></pre> <p>List of players scraped from HTML endpoint. Returns a dictionary of players with the below keys.</p> Note <p>You can return any of the properties as a Pandas DataFrame by appending '_df' to the property, e.g., <code>Game(2019020684).html_rosters_df</code></p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>Season as 8-digit number, e.g., 20192020 for 2019-20 season</p> <code>session</code> <code>str</code> <p>Whether game is regular season, playoffs, or pre-season, e.g., R</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2019020684</p> <code>team</code> <code>str</code> <p>Team name of the player, e.g., NSH</p> <code>team_name</code> <code>str</code> <p>Full team name, e.g., NASHVILLE PREDATORS</p> <code>team_venue</code> <code>str</code> <p>Whether team is home or away, e.g., AWAY</p> <code>player_name</code> <code>str</code> <p>Player's name, e.g., FILIP FORSBERG</p> <code>eh_id</code> <code>str</code> <p>Evolving Hockey ID for the player, e.g., FILIP.FORSBERG</p> <code>team_jersey</code> <code>str</code> <p>Team and jersey combination used for player identification, e.g., NSH9</p> <code>jersey</code> <code>int</code> <p>Player's jersey number, e.g., 9</p> <code>position</code> <code>str</code> <p>Player's position, e.g., L</p> <code>starter</code> <code>int</code> <p>Whether the player started the game, e.g., 0</p> <code>status</code> <code>str</code> <p>Whether player is active or scratched, e.g., ACTIVE</p> <p>Examples:</p> <p>First, instantiate the class with a game ID</p> <pre><code>&gt;&gt;&gt; game_id = 2019020684\n&gt;&gt;&gt; game = Game(game_id)\n</code></pre> <p>Then you can access the property</p> <pre><code>&gt;&gt;&gt; game.html_rosters\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Season","title":"Season","text":"<p>Scrapes schedule and standings data.</p> <p>Helpful for pulling game IDs and scraping programmatically.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int or float or str</code> <p>4-digit year identifier, the first year in the season, e.g., 2023</p> required <p>Attributes:</p> Name Type Description <code>season</code> <code>int</code> <p>8-digit year identifier, the year entered, plus 1, e.g., 20232024</p> <p>Examples:</p> <p>First, instantiate the Season object</p> <pre><code>&gt;&gt;&gt; season = Season(2023)\n</code></pre> <p>Scrape schedule information</p> <pre><code>&gt;&gt;&gt; nsh_schedule = season.schedule(\"NSH\")  # Returns the schedule for the Nashville Predators\n</code></pre> <p>Scrape standings information</p> <pre><code>&gt;&gt;&gt; standings = season.standings  # Returns the latest standings for that season\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>class Season:\n    \"\"\"Scrapes schedule and standings data.\n\n    Helpful for pulling game IDs and scraping programmatically.\n\n    Parameters:\n        year (int or float or str):\n            4-digit year identifier, the first year in the season, e.g., 2023\n\n    Attributes:\n        season (int):\n            8-digit year identifier, the year entered, plus 1, e.g., 20232024\n\n    Examples:\n        First, instantiate the Season object\n        &gt;&gt;&gt; season = Season(2023)\n\n        Scrape schedule information\n        &gt;&gt;&gt; nsh_schedule = season.schedule(\"NSH\")  # Returns the schedule for the Nashville Predators\n\n        Scrape standings information\n        &gt;&gt;&gt; standings = season.standings  # Returns the latest standings for that season\n\n    \"\"\"\n\n    def __init__(self, year: str | int | float):\n        \"\"\"Instantiates a Season object for a given year.\"\"\"\n        if len(str(year)) == 8:\n            self.season = int(year)\n\n        elif len(str(year)) == 4:\n            self.season = int(f\"{year}{int(year) + 1}\")\n\n        first_year = int(str(self.season)[0:4])\n\n        teams_1917 = [\"MTL\", \"MWN\", \"SEN\"]  # \"TAN\"]\n\n        teams_1918 = [\"MTL\", \"SEN\", \"TAN\"]\n\n        teams_1919 = [\"MTL\", \"QBD\", \"SEN\", \"TSP\"]\n\n        teams_1920 = [\"HAM\", \"MTL\", \"SEN\", \"TSP\"]\n\n        teams_1924 = [\"BOS\", \"HAM\", \"MMR\", \"MTL\", \"SEN\", \"TSP\"]\n\n        teams_1925 = [\"BOS\", \"MMR\", \"MTL\", \"NYA\", \"PIR\", \"SEN\", \"TSP\"]\n\n        teams_1926 = [\"BOS\", \"CHI\", \"DCG\", \"MMR\", \"MTL\", \"NYA\", \"NYR\", \"PIR\", \"SEN\", \"TSP\"]\n\n        teams_1927 = [\"BOS\", \"CHI\", \"DCG\", \"MMR\", \"MTL\", \"NYA\", \"NYR\", \"PIR\", \"SEN\", \"TOR\"]\n\n        teams_1930 = [\"BOS\", \"CHI\", \"DFL\", \"MMR\", \"MTL\", \"NYA\", \"NYR\", \"QUA\", \"SEN\", \"TOR\"]\n\n        teams_1931 = [\"BOS\", \"CHI\", \"DFL\", \"MMR\", \"MTL\", \"NYA\", \"NYR\", \"TOR\"]\n\n        teams_1932 = [\"BOS\", \"CHI\", \"DET\", \"MMR\", \"MTL\", \"NYA\", \"NYR\", \"SEN\", \"TOR\"]\n\n        teams_1934 = [\"BOS\", \"CHI\", \"DET\", \"MMR\", \"MTL\", \"NYA\", \"NYR\", \"SLE\", \"TOR\"]\n\n        teams_1935 = [\"BOS\", \"CHI\", \"DET\", \"MMR\", \"MTL\", \"NYA\", \"NYR\", \"TOR\"]\n\n        teams_1938 = [\"BOS\", \"CHI\", \"DET\", \"MTL\", \"NYA\", \"NYR\", \"TOR\"]\n\n        teams_1941 = [\"BOS\", \"BRK\", \"CHI\", \"DET\", \"MTL\", \"NYR\", \"TOR\"]\n\n        teams_1942 = [\"BOS\", \"CHI\", \"DET\", \"MTL\", \"NYR\", \"TOR\"]\n\n        teams_1967 = [\"BOS\", \"CHI\", \"DET\", \"LAK\", \"MNS\", \"MTL\", \"NYR\", \"OAK\", \"PHI\", \"PIT\", \"STL\", \"TOR\"]\n\n        teams_1970 = [\"BOS\", \"BUF\", \"CGS\", \"CHI\", \"DET\", \"LAK\", \"MNS\", \"MTL\", \"NYR\", \"PHI\", \"PIT\", \"STL\", \"TOR\", \"VAN\"]\n\n        teams_1972 = [\n            \"AFM\",\n            \"BOS\",\n            \"BUF\",\n            \"CGS\",\n            \"CHI\",\n            \"DET\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n        ]\n\n        teams_1974 = [\n            \"AFM\",\n            \"BOS\",\n            \"BUF\",\n            \"CGS\",\n            \"CHI\",\n            \"DET\",\n            \"KCS\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_1976 = [\n            \"AFM\",\n            \"BOS\",\n            \"BUF\",\n            \"CHI\",\n            \"CLE\",\n            \"CLR\",\n            \"DET\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_1978 = [\n            \"AFM\",\n            \"BOS\",\n            \"BUF\",\n            \"CHI\",\n            \"CLR\",\n            \"DET\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_1979 = [\n            \"AFM\",\n            \"BOS\",\n            \"BUF\",\n            \"CHI\",\n            \"CLR\",\n            \"DET\",\n            \"EDM\",\n            \"HFD\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"QUE\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1980 = [\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"CLR\",\n            \"DET\",\n            \"EDM\",\n            \"HFD\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"QUE\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1982 = [\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"DET\",\n            \"EDM\",\n            \"HFD\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"QUE\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1991 = [\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"DET\",\n            \"EDM\",\n            \"HFD\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"PHI\",\n            \"PIT\",\n            \"QUE\",\n            \"SJS\",\n            \"STL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1992 = [\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"DET\",\n            \"EDM\",\n            \"HFD\",\n            \"LAK\",\n            \"MNS\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PIT\",\n            \"QUE\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1993 = [\n            \"ANA\",\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"HFD\",\n            \"LAK\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PIT\",\n            \"QUE\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1995 = [\n            \"ANA\",\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"HFD\",\n            \"LAK\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WIN\",\n            \"WSH\",\n        ]\n\n        teams_1996 = [\n            \"ANA\",\n            \"BOS\",\n            \"BUF\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"HFD\",\n            \"LAK\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PHX\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_1997 = [\n            \"ANA\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MTL\",\n            \"NJD\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PHX\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_1998 = [\n            \"ANA\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PHX\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_1999 = [\n            \"ANA\",\n            \"ATL\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PHX\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_2000 = [\n            \"ANA\",\n            \"ATL\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CBJ\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MIN\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PHX\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WSH\",\n        ]\n\n        teams_2011 = [\n            \"ANA\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CBJ\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MIN\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PHX\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WPG\",\n            \"WSH\",\n        ]\n\n        teams_2014 = [\n            \"ANA\",\n            \"ARI\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CBJ\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MIN\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"WPG\",\n            \"WSH\",\n        ]\n\n        teams_2017 = [\n            \"ANA\",\n            \"ARI\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CBJ\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MIN\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PIT\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"VGK\",\n            \"WPG\",\n            \"WSH\",\n        ]\n\n        teams_2021 = [\n            \"ANA\",\n            \"ARI\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CBJ\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MIN\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PIT\",\n            \"SEA\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"VAN\",\n            \"VGK\",\n            \"WPG\",\n            \"WSH\",\n        ]\n\n        teams_2024 = [\n            \"ANA\",\n            \"BOS\",\n            \"BUF\",\n            \"CAR\",\n            \"CBJ\",\n            \"CGY\",\n            \"CHI\",\n            \"COL\",\n            \"DAL\",\n            \"DET\",\n            \"EDM\",\n            \"FLA\",\n            \"LAK\",\n            \"MIN\",\n            \"MTL\",\n            \"NJD\",\n            \"NSH\",\n            \"NYI\",\n            \"NYR\",\n            \"OTT\",\n            \"PHI\",\n            \"PIT\",\n            \"SEA\",\n            \"SJS\",\n            \"STL\",\n            \"TBL\",\n            \"TOR\",\n            \"UTA\",\n            \"VAN\",\n            \"VGK\",\n            \"WPG\",\n            \"WSH\",\n        ]\n\n        self._teams_dict = {\n            1917: teams_1917,\n            1918: teams_1918,\n            1919: teams_1919,\n            1920: teams_1920,\n            1921: teams_1920,\n            1922: teams_1920,\n            1923: teams_1920,\n            1924: teams_1924,\n            1925: teams_1925,\n            1926: teams_1926,\n            1927: teams_1927,\n            1928: teams_1927,\n            1929: teams_1927,\n            1930: teams_1930,\n            1931: teams_1931,\n            1932: teams_1932,\n            1933: teams_1932,\n            1934: teams_1934,\n            1935: teams_1935,\n            1936: teams_1935,\n            1937: teams_1935,\n            1938: teams_1938,\n            1939: teams_1938,\n            1940: teams_1938,\n            1941: teams_1941,\n            1942: teams_1942,\n            1943: teams_1942,\n            1944: teams_1942,\n            1945: teams_1942,\n            1946: teams_1942,\n            1947: teams_1942,\n            1948: teams_1942,\n            1949: teams_1942,\n            1950: teams_1942,\n            1951: teams_1942,\n            1952: teams_1942,\n            1953: teams_1942,\n            1954: teams_1942,\n            1955: teams_1942,\n            1956: teams_1942,\n            1957: teams_1942,\n            1958: teams_1942,\n            1959: teams_1942,\n            1960: teams_1942,\n            1961: teams_1942,\n            1962: teams_1942,\n            1963: teams_1942,\n            1964: teams_1942,\n            1965: teams_1942,\n            1966: teams_1942,\n            1967: teams_1967,\n            1968: teams_1967,\n            1969: teams_1967,\n            1970: teams_1970,\n            1971: teams_1970,\n            1972: teams_1972,\n            1973: teams_1972,\n            1974: teams_1974,\n            1975: teams_1974,\n            1976: teams_1976,\n            1977: teams_1976,\n            1978: teams_1978,\n            1979: teams_1979,\n            1980: teams_1980,\n            1981: teams_1980,\n            1982: teams_1982,\n            1983: teams_1982,\n            1984: teams_1982,\n            1985: teams_1982,\n            1986: teams_1982,\n            1987: teams_1982,\n            1988: teams_1982,\n            1989: teams_1982,\n            1990: teams_1982,\n            1991: teams_1991,\n            1992: teams_1992,\n            1993: teams_1993,\n            1994: teams_1993,\n            1995: teams_1995,\n            1996: teams_1996,\n            1997: teams_1997,\n            1998: teams_1998,\n            1999: teams_1999,\n            2000: teams_2000,\n            2001: teams_2000,\n            2002: teams_2000,\n            2003: teams_2000,\n            2004: teams_2000,\n            2005: teams_2000,\n            2006: teams_2000,\n            2007: teams_2000,\n            2008: teams_2000,\n            2009: teams_2000,\n            2010: teams_2000,\n            2011: teams_2011,\n            2012: teams_2011,\n            2013: teams_2011,\n            2014: teams_2014,\n            2015: teams_2014,\n            2016: teams_2014,\n            2017: teams_2017,\n            2018: teams_2017,\n            2019: teams_2017,\n            2020: teams_2017,\n            2021: teams_2021,\n            2022: teams_2021,\n            2023: teams_2021,\n            2024: teams_2024,\n        }\n\n        self.teams = self._teams_dict.get(first_year)\n\n        if self._teams_dict.get(first_year) is None:\n            raise Exception(f\"{first_year} IS NOT SUPPORTED\")\n\n        self._schedule = []\n\n        self._scraped_schedule_teams = []\n\n        self._scraped_schedule = []\n\n        self._standings = []\n\n        self._requests_session = ChickenSession()\n\n        self._season_str = str(self.season)[:4] + \"-\" + str(self.season)[6:8]\n\n    def _scrape_schedule(\n        self, team_schedule: str = \"all\", sessions: list[str] | str | None = None, disable_progress_bar=False\n    ) -&gt; None:\n        \"\"\"Method to scrape the schedule from NHL API endpoint.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Season object\n            &gt;&gt;&gt; season = Season(2023)\n\n            Before scraping the data, any of the storage objects are None\n            &gt;&gt;&gt; season.schedule  # Returns an empty list\n\n            You can use the `_scrape_schedule` method to get any data\n            &gt;&gt;&gt; season._scrape_schedule()  # Scrapes all teams, all games available\n            &gt;&gt;&gt; season._schedule  # Returns schedule\n        \"\"\"\n        schedule_list = []\n\n        if team_schedule not in self._scraped_schedule_teams:\n            with self._requests_session as s:\n                with ChickenProgress(disable=disable_progress_bar) as progress:\n                    if team_schedule == \"all\":\n                        teams = self.teams\n\n                        pbar_stub = f\"{self._season_str} schedule information\"\n\n                        pbar_message = f\"Downloading {pbar_stub} for all teams...\"\n\n                        sched_task = progress.add_task(pbar_message, total=len(teams))\n\n                        for team in teams:\n                            if team in self._scraped_schedule_teams:  # Not covered by tests\n                                if team != teams[-1]:\n                                    pbar_message = f\"Downloading {pbar_stub} for {team}...\"\n                                else:\n                                    pbar_message = f\"Finished downloading {pbar_stub}\"\n                                progress.update(sched_task, description=pbar_message, advance=1, refresh=True)\n\n                                continue\n\n                            url = f\"https://api-web.nhle.com/v1/club-schedule-season/{team}/{self.season}\"\n\n                            response = s.get(url).json()\n                            if response[\"games\"]:\n                                games = [x for x in response[\"games\"] if x[\"id\"] not in self._scraped_schedule]\n                                games = self._munge_schedule(games, sessions)\n                                schedule_list.extend(games)\n                                self._scraped_schedule_teams.append(team)\n                                self._scraped_schedule.extend(x[\"game_id\"] for x in games)\n                            if team != teams[-1]:\n                                pbar_message = f\"Downloading {pbar_stub} for {team}...\"\n                            else:\n                                pbar_message = f\"Finished downloading {pbar_stub}\"\n                            progress.update(sched_task, description=pbar_message, advance=1, refresh=True)\n                    else:\n                        if team_schedule not in self._scraped_schedule_teams:\n                            pbar_stub = f\"{self._season_str} schedule information for {team_schedule}\"\n                            pbar_message = f\"Downloading {pbar_stub}...\"\n                            sched_task = progress.add_task(pbar_message, total=1)\n\n                            url = f\"https://api-web.nhle.com/v1/club-schedule-season/{team_schedule}/{self.season}\"\n                            response = s.get(url).json()\n                            if response[\"games\"]:\n                                games = [x for x in response[\"games\"] if x[\"id\"] not in self._scraped_schedule]\n                                games = self._munge_schedule(games, sessions)\n                                schedule_list.extend(games)\n                                self._scraped_schedule.extend(x[\"game_id\"] for x in games)\n                                self._scraped_schedule_teams.append(team_schedule)\n\n                            pbar_message = f\"Finished downloading {pbar_stub}\"\n                            progress.update(sched_task, description=pbar_message, advance=1, refresh=True)\n\n        schedule_list = sorted(schedule_list, key=lambda x: (x[\"game_date_dt\"], x[\"game_id\"]))\n\n        self._schedule.extend(schedule_list)\n\n    @staticmethod\n    def _munge_schedule(games: list[dict], sessions: list[str] | str | None) -&gt; list[dict]:\n        \"\"\"Method to munge the schedule from NHL API endpoint.\n\n        Nested within `_scrape_schedule` method.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n        \"\"\"\n        returned_games = []\n\n        for game in games:\n            if not sessions:\n                if int(game[\"gameType\"]) not in [2, 3]:\n                    continue\n\n            else:\n                session_dict = {\"PR\": 1, \"R\": 2, \"P\": 3}\n\n                if isinstance(sessions, list):\n                    session_codes = [session_dict[x] for x in sessions]\n\n                if isinstance(sessions, str):\n                    session_codes = [session_dict[sessions]]\n\n                if int(game[\"gameType\"]) not in session_codes:\n                    continue\n\n            local_time = pytz.timezone(game[\"venueTimezone\"])\n\n            if \"Z\" in game[\"startTimeUTC\"]:\n                game[\"startTimeUTC\"] = game[\"startTimeUTC\"][:-1] + \"+00:00\"\n\n            start_time_utc_dt: dt = dt.fromisoformat(game[\"startTimeUTC\"])\n            game_date_dt: dt = start_time_utc_dt.astimezone(local_time)\n\n            start_time = game_date_dt.strftime(\"%H:%M\")\n            game_date = game_date_dt.strftime(\"%Y-%m-%d\")\n\n            game_info = {\n                \"season\": game[\"season\"],\n                \"session\": game[\"gameType\"],\n                \"game_id\": game[\"id\"],\n                \"game_date\": game_date,\n                \"start_time\": start_time,\n                \"game_state\": game[\"gameState\"],\n                \"home_team\": game[\"homeTeam\"][\"abbrev\"],\n                \"home_team_id\": game[\"homeTeam\"][\"id\"],\n                \"home_score\": game[\"homeTeam\"].get(\"score\", 0),\n                \"away_team\": game[\"awayTeam\"][\"abbrev\"],\n                \"away_team_id\": game[\"awayTeam\"][\"id\"],\n                \"away_score\": game[\"awayTeam\"].get(\"score\", 0),\n                \"venue\": game[\"venue\"][\"default\"].upper(),\n                \"venue_timezone\": game[\"venueTimezone\"],\n                \"neutral_site\": int(game[\"neutralSite\"]),\n                \"game_date_dt\": game_date_dt,\n                \"tv_broadcasts\": game[\"tvBroadcasts\"],\n                \"home_logo\": game[\"homeTeam\"].get(\"logo\"),\n                \"home_logo_dark\": game[\"homeTeam\"].get(\"darkLogo\"),\n                \"away_logo\": game[\"awayTeam\"].get(\"logo\"),\n                \"away_logo_dark\": game[\"awayTeam\"].get(\"darkLogo\"),\n            }\n\n            returned_games.append(ScheduleGame.model_validate(game_info).model_dump())\n\n        return returned_games\n\n    @staticmethod\n    def _finalize_schedule(games: list[dict]) -&gt; pd.DataFrame:\n        \"\"\"Method to finalize the schedule from NHL API endpoint into a Pandas DataFrame.\n\n        Nested within `schedule` method.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n        \"\"\"\n        df = pd.DataFrame(games)\n\n        return df\n\n    def schedule(\n        self,\n        team_schedule: str | None = \"all\",\n        sessions: list[str] | str | None = None,\n        disable_progress_bar: bool = False,\n    ) -&gt; pd.DataFrame:\n        \"\"\"Scrapes NHL schedule. Can return whole or season or subset of teams' schedules.\n\n        Parameters:\n            team_schedule (str | None):\n                Three-letter team's schedule to scrape, e.g., NSH\n            sessions: (list | None | str | int):\n                Whether to scrape regular season (2), playoffs (3), or pre-season (1), if left blank,\n                scrapes regular season and playoffs\n            disable_progress_bar (bool):\n                Whether to disable progress bar\n\n        Returns:\n            season (int):\n                8-digit season identifier, e.g., 20232024\n            session (int):\n                Type of game played - pre-season (1), regular season (2), or playoffs (3), e.g., 2\n            game_id (int):\n                Unique game ID assigned by the NHL, e.g., 2023020015\n            game_date (str):\n                Date the game is played, in local time, e.g., 2023-10-12\n            start_time (str):\n                Start time for the game in the home time zone, in military time, e.g., 19:00\n            game_state (str):\n                Status of the game, whether official or future, e.g., OFF\n            home_team (str):\n                Three-letter code for the home team, e.g., NSH\n            home_team_id (int):\n                Two-digit code assigned to the home franchise by the NHL, e.g., 18\n            home_score (int):\n                Number of goals scored by the home team, e.g., 3\n            away_team (str):\n                Three-letter code for the away team, e.g., SEA\n            away_team_id (int):\n                Two-digit code assigned to the away franchise by the NHL, e.g., 55\n            away_score (int):\n                Number of goals scored by the away team, e.g., 0\n            venue (str):\n                Name of the venue where game is / was played, e.g., BRIDGESTONE ARENA\n            venue_timezone (str):\n                Name of the venue timezone, e.g., US/Central\n            neutral_site (int):\n                Whether game is / was played at a neutral site location, e.g., 0\n            game_date_dt (dt.datetime):\n                Game date as datetime object, e.g., 2023-10-12 19:00:00-05:00\n            tv_broadcasts (list):\n                Where the game was broadcast, as a list of dictionaries, e.g., [{'id': 386, 'market': 'A',\n                'countryCode': 'US', 'network': 'ROOT-NW', 'sequenceNumber': 65}, {'id': 375, 'market': 'H',\n                'countryCode': 'US', 'network': 'BSSO', 'sequenceNumber': 70}]\n            home_logo (str):\n                URL for the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/NSH_light.svg\n            home_logo_dark (str):\n                URL for the dark version of the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/NSH_dark.svg\n            away_logo (str):\n                URL for the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/TBL_light.svg\n            away_logo_dark (str):\n                URL for the dark version of the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/TBL_dark.svg\n\n        Examples:\n            Scrape schedule for all teams\n            &gt;&gt;&gt; season = Season(2023)\n            &gt;&gt;&gt; schedule = season.schedule()\n\n            Get schedule for a single team\n            &gt;&gt;&gt; schedule = season.schedule(\"NSH\")\n\n        \"\"\"\n        if team_schedule not in self._scraped_schedule_teams:\n            self._scrape_schedule(\n                team_schedule=team_schedule, sessions=sessions, disable_progress_bar=disable_progress_bar\n            )\n\n        if team_schedule != \"all\":\n            return_list = [\n                x for x in self._schedule if x[\"home_team\"] == team_schedule or x[\"away_team\"] == team_schedule\n            ]\n\n            return_list = sorted(return_list, key=lambda x: (x[\"game_date_dt\"], x[\"game_id\"]))\n\n            return self._finalize_schedule(return_list)\n\n        else:\n            return self._finalize_schedule(self._schedule)\n\n    def _scrape_standings(self):\n        \"\"\"Scrape standings from NHL API endpoint.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Season object\n            &gt;&gt;&gt; season = Season(2023)\n\n            Before scraping the data, any of the storage objects are None\n            &gt;&gt;&gt; season._standings  # Returns an empty list\n\n            You can use the `_scrape_standings` method to get any data\n            &gt;&gt;&gt; season._scrape_standings()  # Scrapes all teams, all games available\n            &gt;&gt;&gt; season._standings  # Returns raw standings data\n\n            However, then need to manually clean the data\n            &gt;&gt;&gt; season._munge_standings()\n            &gt;&gt;&gt; season._standings  # Returns standings data\n        \"\"\"\n        url = \"https://api-web.nhle.com/v1/standings/now\"\n\n        with self._requests_session as s:\n            r = s.get(url).json()\n\n        self._standings = r[\"standings\"]\n\n    def _munge_standings(self):\n        \"\"\"Function to munge standings from NHL API endpoint.\n\n        For more information and usage, see\n        https://chickenstats.com/latest/contribute/contribute/\n\n        Examples:\n            First, instantiate the Season object\n            &gt;&gt;&gt; season = Season(2023)\n\n            Before scraping the data, any of the storage objects are None\n            &gt;&gt;&gt; season._standings  # Returns an empty list\n\n            You can use the `_scrape_standings` method to get any data\n            &gt;&gt;&gt; season._scrape_standings()  # Scrapes all teams, all games available\n            &gt;&gt;&gt; season._standings  # Returns raw standings data\n\n            However, then need to manually clean the data\n            &gt;&gt;&gt; season._munge_standings()\n            &gt;&gt;&gt; season._standings  # Returns standings data\n        \"\"\"\n        final_standings = []\n\n        for team in self._standings:\n            team_data = {\n                \"conference\": team[\"conferenceName\"],\n                \"date\": team[\"date\"],\n                \"division\": team[\"divisionName\"],\n                \"games_played\": team[\"gamesPlayed\"],\n                \"goal_differential\": team[\"goalDifferential\"],\n                \"goal_differential_pct\": team[\"goalDifferentialPctg\"],\n                \"goals_against\": team[\"goalAgainst\"],\n                \"goals_for\": team[\"goalFor\"],\n                \"goals_for_pct\": team[\"goalsForPctg\"],\n                \"home_games_played\": team[\"homeGamesPlayed\"],\n                \"home_goal_differential\": team[\"homeGoalDifferential\"],\n                \"home_goals_against\": team[\"homeGoalsAgainst\"],\n                \"home_goals_for\": team[\"homeGoalsFor\"],\n                \"home_losses\": team[\"homeLosses\"],\n                \"home_ot_losses\": team[\"homeOtLosses\"],\n                \"home_points\": team[\"homePoints\"],\n                \"home_wins\": team[\"homeWins\"],\n                \"home_regulation_wins\": team[\"homeRegulationWins\"],\n                \"home_ties\": team[\"homeTies\"],\n                \"l10_goal_differential\": team[\"l10GoalDifferential\"],\n                \"l10_goals_against\": team[\"l10GoalsAgainst\"],\n                \"l10_goals_for\": team[\"l10GoalsFor\"],\n                \"l10_losses\": team[\"l10Losses\"],\n                \"l10_ot_losses\": team[\"l10OtLosses\"],\n                \"l10_points\": team[\"l10Points\"],\n                \"l10_regulation_wins\": team[\"l10RegulationWins\"],\n                \"l10_ties\": team[\"l10Ties\"],\n                \"l10_wins\": team[\"l10Wins\"],\n                \"losses\": team[\"losses\"],\n                \"ot_losses\": team[\"otLosses\"],\n                \"points_pct\": team[\"pointPctg\"],\n                \"points\": team[\"points\"],\n                \"regulation_win_pct\": team[\"regulationWinPctg\"],\n                \"regulation_wins\": team[\"regulationWins\"],\n                \"road_games_played\": team[\"roadGamesPlayed\"],\n                \"road_goal_differential\": team[\"roadGoalDifferential\"],\n                \"road_goals_against\": team[\"roadGoalsAgainst\"],\n                \"road_goals_for\": team[\"roadGoalsFor\"],\n                \"road_losses\": team[\"roadLosses\"],\n                \"road_ot_losses\": team[\"roadOtLosses\"],\n                \"road_points\": team[\"roadPoints\"],\n                \"road_regulation_wins\": team[\"roadRegulationWins\"],\n                \"road_ties\": team[\"roadTies\"],\n                \"road_wins\": team[\"roadWins\"],\n                \"season\": team[\"seasonId\"],\n                \"shootoutLosses\": team[\"shootoutLosses\"],\n                \"shootout_wins\": team[\"shootoutWins\"],\n                \"streak_code\": team[\"streakCode\"],\n                \"streak_count\": team[\"streakCount\"],\n                \"team_name\": team[\"teamName\"][\"default\"],\n                \"team\": team[\"teamAbbrev\"][\"default\"],\n                \"team_logo\": team[\"teamLogo\"],\n                \"ties\": team[\"ties\"],\n                \"waivers_sequence\": team[\"waiversSequence\"],\n                \"wildcard_sequence\": team[\"wildcardSequence\"],\n                \"win_pct\": team[\"winPctg\"],\n                \"wins\": team[\"wins\"],\n            }\n\n            final_standings.append(StandingsTeam.model_validate(team_data).model_dump())\n\n        self._standings = final_standings\n\n    def _finalize_standings(self):\n        df = pd.DataFrame(self._standings)\n\n        return df\n\n    @property\n    def standings(self):\n        \"\"\"Pandas DataFrame of the standings from the NHL API.\n\n        Returns:\n            season (int):\n                8-digit season identifier, e.g., 20232024\n            date (str):\n                Date standings scraped, e.g., 2024-04-08\n            team (str):\n                Three-letter team code, e.g., NSH\n            team_name (str):\n                Full team name, e.g., Nashville Predators\n            conference (str):\n                Name of the conference in which the team plays, e.g., Western\n            division (str):\n                Name of the division in which the team plays, e.g., Central\n            games_played (int):\n                Number of games played, e.g., 78\n            points (int):\n                Number of points accumulated, e.g., 94\n            points_pct (float):\n                Points percentage, e.g., 0.602564\n            wins (int):\n                Number of wins, e.g., 45\n            regulation_wins (int):\n                Number of wins in regulation time, e.g., 36\n            shootout_wins (int):\n                Number of wins by shootout, e.g., 3\n            losses (int):\n                Number of losses, e.g., 29\n            ot_losses (int):\n                Number of losses in overtime play, e.g., 4\n            shootout_losses (int | np.nan):\n                Number of losses due during shootout, e.g., NaN\n            ties (int):\n                Number of ties, e.g., 0\n            win_pct (float):\n                Win percentage, e.g., 0.576923\n            regulation_win_pct (float):\n                Win percentage in regulation time, e.g., 0.461538\n            streak_code (str):\n                Whether streak is a winning or losing streak, e.g., W\n            streak_count (int):\n                Number of games won or lost, e.g., 1\n            goals_for (int):\n                Number of goals scored, e.g., 253\n            goals_against (int):\n                Number of goals against, e.g., 235\n            goals_for_pct (float):\n                Goals scored per game played, e.g., 3.24359\n            goal_differential (int):\n                Difference in goals scored and goals allowed, e.g., 18\n            goal_differential_pct (float):\n                Difference in goals scored and goals allowed as a percentage of...something, e.g., 0.230769\n            home_games_played (int):\n                Number of home games played, e.g., 39\n            home_points (int):\n                Number of home points accumulated, e.g., 45\n            home_goals_for (int):\n                Number of goals scored in home games, e.g., 126\n            home_goals_against (int):\n                Number of goals allowed in home games, e.g., 118\n            home_goal_differential (int):\n                Difference in home goals scored and home goals allowed, e.g., 8\n            home_wins (int):\n                Number of wins at home, e.g., 22\n            home_losses (int):\n                Number of losses at home, e.g., 16\n            home_ot_losses (int):\n                Number of home losses in overtime, e.g., 1\n            home_ties (int):\n                Number of ties at home, e.g., 0\n            home_regulation_wins (int):\n                Number of wins at home in regulation, e.g., 17\n            road_games_played (int):\n                Number of games played on the road, e.g., 39\n            road_points (int):\n                Number of points accumulated on the road, e.g., 49\n            road_goals_for (int):\n                Number of goals scored on the road, e.g., 127\n            road_goals_against (int):\n                Number of goals allowed on the road, e.g., 117\n            road_goal_differential (int):\n                Difference in goals scored and goals allowed on the road, e.g., 10\n            road_wins (int):\n                Number of wins on the road, e.g., 23\n            road_losses (int):\n                Number of losses on the road, e.g., 13\n            road_ot_losses (int):\n                Number of losses on the road in overtime, e.g., 3\n            road_ties (int):\n                Number of ties on the road, e.g., 0\n            road_regulation_wins (int):\n                Number of wins on the road in regulation, e.g., 19\n            l10_points (int):\n                Number of points accumulated in last ten games, e.g., 12\n            l10_goals_for (int):\n                Number of goals scored in last ten games, e.g., 34\n            l10_goals_against (int):\n                Number of goals allowed in last ten games, e.g., 31\n            l10_goal_differential (int):\n                Difference in goals scored and allowed in last ten games, e.g., 3\n            l10_wins (int):\n                Number of wins in last ten games, e.g., 6\n            l10_losses (int):\n                Number of losses in last ten games, e.g., 4\n            l10_ot_losses (int):\n                Number of losses in overtime in last ten games, e.g., 0\n            l10_ties (int):\n                Number of  ties in last ten games, e.g., 0\n            l10_regulation_wins (int):\n                Number of wins in regulation in last ten games, e.g., 4\n            team_logo (str):\n                URL for the team logo, e.g., https://assets.nhle.com/logos/nhl/svg/NSH_light.svg\n            wildcard_sequence (int):\n                Order for wildcard rankings, e.g., 1\n            waivers_sequence (int):\n                Order for waiver wire, e.g., 19\n\n        Examples:\n            &gt;&gt;&gt; season = Season(2023)\n            &gt;&gt;&gt; standings = season.standings\n\n        \"\"\"\n        if not self._standings:\n            self._scrape_standings()\n            self._munge_standings()\n\n        return self._finalize_standings()\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Season.standings","title":"standings  <code>property</code>","text":"<pre><code>standings\n</code></pre> <p>Pandas DataFrame of the standings from the NHL API.</p> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>8-digit season identifier, e.g., 20232024</p> <code>date</code> <code>str</code> <p>Date standings scraped, e.g., 2024-04-08</p> <code>team</code> <code>str</code> <p>Three-letter team code, e.g., NSH</p> <code>team_name</code> <code>str</code> <p>Full team name, e.g., Nashville Predators</p> <code>conference</code> <code>str</code> <p>Name of the conference in which the team plays, e.g., Western</p> <code>division</code> <code>str</code> <p>Name of the division in which the team plays, e.g., Central</p> <code>games_played</code> <code>int</code> <p>Number of games played, e.g., 78</p> <code>points</code> <code>int</code> <p>Number of points accumulated, e.g., 94</p> <code>points_pct</code> <code>float</code> <p>Points percentage, e.g., 0.602564</p> <code>wins</code> <code>int</code> <p>Number of wins, e.g., 45</p> <code>regulation_wins</code> <code>int</code> <p>Number of wins in regulation time, e.g., 36</p> <code>shootout_wins</code> <code>int</code> <p>Number of wins by shootout, e.g., 3</p> <code>losses</code> <code>int</code> <p>Number of losses, e.g., 29</p> <code>ot_losses</code> <code>int</code> <p>Number of losses in overtime play, e.g., 4</p> <code>shootout_losses</code> <code>int | nan</code> <p>Number of losses due during shootout, e.g., NaN</p> <code>ties</code> <code>int</code> <p>Number of ties, e.g., 0</p> <code>win_pct</code> <code>float</code> <p>Win percentage, e.g., 0.576923</p> <code>regulation_win_pct</code> <code>float</code> <p>Win percentage in regulation time, e.g., 0.461538</p> <code>streak_code</code> <code>str</code> <p>Whether streak is a winning or losing streak, e.g., W</p> <code>streak_count</code> <code>int</code> <p>Number of games won or lost, e.g., 1</p> <code>goals_for</code> <code>int</code> <p>Number of goals scored, e.g., 253</p> <code>goals_against</code> <code>int</code> <p>Number of goals against, e.g., 235</p> <code>goals_for_pct</code> <code>float</code> <p>Goals scored per game played, e.g., 3.24359</p> <code>goal_differential</code> <code>int</code> <p>Difference in goals scored and goals allowed, e.g., 18</p> <code>goal_differential_pct</code> <code>float</code> <p>Difference in goals scored and goals allowed as a percentage of...something, e.g., 0.230769</p> <code>home_games_played</code> <code>int</code> <p>Number of home games played, e.g., 39</p> <code>home_points</code> <code>int</code> <p>Number of home points accumulated, e.g., 45</p> <code>home_goals_for</code> <code>int</code> <p>Number of goals scored in home games, e.g., 126</p> <code>home_goals_against</code> <code>int</code> <p>Number of goals allowed in home games, e.g., 118</p> <code>home_goal_differential</code> <code>int</code> <p>Difference in home goals scored and home goals allowed, e.g., 8</p> <code>home_wins</code> <code>int</code> <p>Number of wins at home, e.g., 22</p> <code>home_losses</code> <code>int</code> <p>Number of losses at home, e.g., 16</p> <code>home_ot_losses</code> <code>int</code> <p>Number of home losses in overtime, e.g., 1</p> <code>home_ties</code> <code>int</code> <p>Number of ties at home, e.g., 0</p> <code>home_regulation_wins</code> <code>int</code> <p>Number of wins at home in regulation, e.g., 17</p> <code>road_games_played</code> <code>int</code> <p>Number of games played on the road, e.g., 39</p> <code>road_points</code> <code>int</code> <p>Number of points accumulated on the road, e.g., 49</p> <code>road_goals_for</code> <code>int</code> <p>Number of goals scored on the road, e.g., 127</p> <code>road_goals_against</code> <code>int</code> <p>Number of goals allowed on the road, e.g., 117</p> <code>road_goal_differential</code> <code>int</code> <p>Difference in goals scored and goals allowed on the road, e.g., 10</p> <code>road_wins</code> <code>int</code> <p>Number of wins on the road, e.g., 23</p> <code>road_losses</code> <code>int</code> <p>Number of losses on the road, e.g., 13</p> <code>road_ot_losses</code> <code>int</code> <p>Number of losses on the road in overtime, e.g., 3</p> <code>road_ties</code> <code>int</code> <p>Number of ties on the road, e.g., 0</p> <code>road_regulation_wins</code> <code>int</code> <p>Number of wins on the road in regulation, e.g., 19</p> <code>l10_points</code> <code>int</code> <p>Number of points accumulated in last ten games, e.g., 12</p> <code>l10_goals_for</code> <code>int</code> <p>Number of goals scored in last ten games, e.g., 34</p> <code>l10_goals_against</code> <code>int</code> <p>Number of goals allowed in last ten games, e.g., 31</p> <code>l10_goal_differential</code> <code>int</code> <p>Difference in goals scored and allowed in last ten games, e.g., 3</p> <code>l10_wins</code> <code>int</code> <p>Number of wins in last ten games, e.g., 6</p> <code>l10_losses</code> <code>int</code> <p>Number of losses in last ten games, e.g., 4</p> <code>l10_ot_losses</code> <code>int</code> <p>Number of losses in overtime in last ten games, e.g., 0</p> <code>l10_ties</code> <code>int</code> <p>Number of  ties in last ten games, e.g., 0</p> <code>l10_regulation_wins</code> <code>int</code> <p>Number of wins in regulation in last ten games, e.g., 4</p> <code>team_logo</code> <code>str</code> <p>URL for the team logo, e.g., https://assets.nhle.com/logos/nhl/svg/NSH_light.svg</p> <code>wildcard_sequence</code> <code>int</code> <p>Order for wildcard rankings, e.g., 1</p> <code>waivers_sequence</code> <code>int</code> <p>Order for waiver wire, e.g., 19</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; season = Season(2023)\n&gt;&gt;&gt; standings = season.standings\n</code></pre>"},{"location":"reference/chicken_nhl/scrape/#chicken_nhl.scrape.Season.schedule","title":"schedule","text":"<pre><code>schedule(\n    team_schedule=\"all\",\n    sessions=None,\n    disable_progress_bar=False,\n)\n</code></pre> <p>Scrapes NHL schedule. Can return whole or season or subset of teams' schedules.</p> <p>Parameters:</p> Name Type Description Default <code>team_schedule</code> <code>str | None</code> <p>Three-letter team's schedule to scrape, e.g., NSH</p> <code>'all'</code> <code>sessions</code> <code>list[str] | str | None</code> <p>(list | None | str | int): Whether to scrape regular season (2), playoffs (3), or pre-season (1), if left blank, scrapes regular season and playoffs</p> <code>None</code> <code>disable_progress_bar</code> <code>bool</code> <p>Whether to disable progress bar</p> <code>False</code> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>8-digit season identifier, e.g., 20232024</p> <code>session</code> <code>int</code> <p>Type of game played - pre-season (1), regular season (2), or playoffs (3), e.g., 2</p> <code>game_id</code> <code>int</code> <p>Unique game ID assigned by the NHL, e.g., 2023020015</p> <code>game_date</code> <code>str</code> <p>Date the game is played, in local time, e.g., 2023-10-12</p> <code>start_time</code> <code>str</code> <p>Start time for the game in the home time zone, in military time, e.g., 19:00</p> <code>game_state</code> <code>str</code> <p>Status of the game, whether official or future, e.g., OFF</p> <code>home_team</code> <code>str</code> <p>Three-letter code for the home team, e.g., NSH</p> <code>home_team_id</code> <code>int</code> <p>Two-digit code assigned to the home franchise by the NHL, e.g., 18</p> <code>home_score</code> <code>int</code> <p>Number of goals scored by the home team, e.g., 3</p> <code>away_team</code> <code>str</code> <p>Three-letter code for the away team, e.g., SEA</p> <code>away_team_id</code> <code>int</code> <p>Two-digit code assigned to the away franchise by the NHL, e.g., 55</p> <code>away_score</code> <code>int</code> <p>Number of goals scored by the away team, e.g., 0</p> <code>venue</code> <code>str</code> <p>Name of the venue where game is / was played, e.g., BRIDGESTONE ARENA</p> <code>venue_timezone</code> <code>str</code> <p>Name of the venue timezone, e.g., US/Central</p> <code>neutral_site</code> <code>int</code> <p>Whether game is / was played at a neutral site location, e.g., 0</p> <code>game_date_dt</code> <code>datetime</code> <p>Game date as datetime object, e.g., 2023-10-12 19:00:00-05:00</p> <code>tv_broadcasts</code> <code>list</code> <p>Where the game was broadcast, as a list of dictionaries, e.g., [{'id': 386, 'market': 'A', 'countryCode': 'US', 'network': 'ROOT-NW', 'sequenceNumber': 65}, {'id': 375, 'market': 'H', 'countryCode': 'US', 'network': 'BSSO', 'sequenceNumber': 70}]</p> <code>home_logo</code> <code>str</code> <p>URL for the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/NSH_light.svg</p> <code>home_logo_dark</code> <code>str</code> <p>URL for the dark version of the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/NSH_dark.svg</p> <code>away_logo</code> <code>str</code> <p>URL for the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/TBL_light.svg</p> <code>away_logo_dark</code> <code>str</code> <p>URL for the dark version of the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/TBL_dark.svg</p> <p>Examples:</p> <p>Scrape schedule for all teams</p> <pre><code>&gt;&gt;&gt; season = Season(2023)\n&gt;&gt;&gt; schedule = season.schedule()\n</code></pre> <p>Get schedule for a single team</p> <pre><code>&gt;&gt;&gt; schedule = season.schedule(\"NSH\")\n</code></pre> Source code in <code>src/chickenstats/chicken_nhl/scrape.py</code> <pre><code>def schedule(\n    self,\n    team_schedule: str | None = \"all\",\n    sessions: list[str] | str | None = None,\n    disable_progress_bar: bool = False,\n) -&gt; pd.DataFrame:\n    \"\"\"Scrapes NHL schedule. Can return whole or season or subset of teams' schedules.\n\n    Parameters:\n        team_schedule (str | None):\n            Three-letter team's schedule to scrape, e.g., NSH\n        sessions: (list | None | str | int):\n            Whether to scrape regular season (2), playoffs (3), or pre-season (1), if left blank,\n            scrapes regular season and playoffs\n        disable_progress_bar (bool):\n            Whether to disable progress bar\n\n    Returns:\n        season (int):\n            8-digit season identifier, e.g., 20232024\n        session (int):\n            Type of game played - pre-season (1), regular season (2), or playoffs (3), e.g., 2\n        game_id (int):\n            Unique game ID assigned by the NHL, e.g., 2023020015\n        game_date (str):\n            Date the game is played, in local time, e.g., 2023-10-12\n        start_time (str):\n            Start time for the game in the home time zone, in military time, e.g., 19:00\n        game_state (str):\n            Status of the game, whether official or future, e.g., OFF\n        home_team (str):\n            Three-letter code for the home team, e.g., NSH\n        home_team_id (int):\n            Two-digit code assigned to the home franchise by the NHL, e.g., 18\n        home_score (int):\n            Number of goals scored by the home team, e.g., 3\n        away_team (str):\n            Three-letter code for the away team, e.g., SEA\n        away_team_id (int):\n            Two-digit code assigned to the away franchise by the NHL, e.g., 55\n        away_score (int):\n            Number of goals scored by the away team, e.g., 0\n        venue (str):\n            Name of the venue where game is / was played, e.g., BRIDGESTONE ARENA\n        venue_timezone (str):\n            Name of the venue timezone, e.g., US/Central\n        neutral_site (int):\n            Whether game is / was played at a neutral site location, e.g., 0\n        game_date_dt (dt.datetime):\n            Game date as datetime object, e.g., 2023-10-12 19:00:00-05:00\n        tv_broadcasts (list):\n            Where the game was broadcast, as a list of dictionaries, e.g., [{'id': 386, 'market': 'A',\n            'countryCode': 'US', 'network': 'ROOT-NW', 'sequenceNumber': 65}, {'id': 375, 'market': 'H',\n            'countryCode': 'US', 'network': 'BSSO', 'sequenceNumber': 70}]\n        home_logo (str):\n            URL for the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/NSH_light.svg\n        home_logo_dark (str):\n            URL for the dark version of the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/NSH_dark.svg\n        away_logo (str):\n            URL for the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/TBL_light.svg\n        away_logo_dark (str):\n            URL for the dark version of the home logo, e.g., https://assets.nhle.com/logos/nhl/svg/TBL_dark.svg\n\n    Examples:\n        Scrape schedule for all teams\n        &gt;&gt;&gt; season = Season(2023)\n        &gt;&gt;&gt; schedule = season.schedule()\n\n        Get schedule for a single team\n        &gt;&gt;&gt; schedule = season.schedule(\"NSH\")\n\n    \"\"\"\n    if team_schedule not in self._scraped_schedule_teams:\n        self._scrape_schedule(\n            team_schedule=team_schedule, sessions=sessions, disable_progress_bar=disable_progress_bar\n        )\n\n    if team_schedule != \"all\":\n        return_list = [\n            x for x in self._schedule if x[\"home_team\"] == team_schedule or x[\"away_team\"] == team_schedule\n        ]\n\n        return_list = sorted(return_list, key=lambda x: (x[\"game_date_dt\"], x[\"game_id\"]))\n\n        return self._finalize_schedule(return_list)\n\n    else:\n        return self._finalize_schedule(self._schedule)\n</code></pre>"},{"location":"reference/evolving_hockey/stats/","title":"stats","text":"<p>Reference materials for <code>chickenstats.evolving_hockey.stats</code>.</p> <p>For more detailed walk-throughs or examples, please consult the  User Guide</p>"},{"location":"reference/evolving_hockey/stats/#evolving_hockey.stats.prep_pbp","title":"prep_pbp","text":"<pre><code>prep_pbp(\n    pbp, shifts, columns=\"full\", disable_progress_bar=False\n)\n</code></pre> <p>Prepares a play-by-play dataframe using EvolvingHockey data, but with additional stats and information.</p> <p>Columns keyword argument determines information returned. Used in later aggregation functions. Returns a DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>pbp</code> <code>DataFrame</code> <p>Pandas DataFrame of CSV file downloaded from play-by-play query tool at evolving-hockey.com</p> required <code>shifts</code> <code>DataFrame</code> <p>Pandas DataFrame of CSV file downloaded from shifts query tool at evolving-hockey.com</p> required <code>columns</code> <code>str</code> <p>Whether to return additional columns or more sparse play-by-play dataframe</p> <code>'full'</code> <code>disable_progress_bar</code> <code>bool</code> <p>Whether to disable progress bar</p> <code>False</code> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>8-digit season code, e.g., 20192020</p> <code>session</code> <code>str</code> <p>Regular season or playoffs, e.g., R</p> <code>game_id</code> <code>int</code> <p>10-digit game identifier, e.g., 2019020684</p> <code>game_date</code> <code>str</code> <p>Date of game in Eastern time-zone, e.g., 2020-01-09</p> <code>event_index</code> <code>int</code> <p>Unique index number of event, in chronological order, e.g.,</p> <code>game_period</code> <code>int</code> <p>Game period, e.g., 3</p> <code>game_seconds</code> <code>int</code> <p>Game time elapsed in seconds, e.g., 3578</p> <code>period_seconds</code> <code>int</code> <p>Period time elapsed in seconds, e.g., 1178</p> <code>clock_time</code> <code>str</code> <p>Time shown on clock, e.g., 0:22</p> <code>strength_state</code> <code>str</code> <p>Strength state from the perspective of the event team, e.g., 5vE</p> <code>score_state</code> <code>str</code> <p>Score state from the perspective of the event team, e.g., 5v2</p> <code>event_type</code> <code>str</code> <p>Name of the event, e.g., GOAL</p> <code>event_description</code> <code>str</code> <p>Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.</p> <code>event_detail</code> <code>str | None</code> <p>Additional information about the event, e.g., Wrist</p> <code>event_zone</code> <code>str | None</code> <p>Zone location of event, e.g., DEF</p> <code>event_team</code> <code>str | None</code> <p>3-letter abbreviation of the team for the event, e.g., NSH</p> <code>opp_team</code> <code>str | None</code> <p>3-letter abbreviation of the opposing team for the event, e.g., CHI</p> <code>is_home</code> <code>int | None</code> <p>Dummy variable to signify whether event team is home team, e.g., 0</p> <code>coords_x</code> <code>int | None</code> <p>X coordinates of event, e.g., -96</p> <code>coords_y</code> <code>int | None</code> <p>Y coordinates of event, e.g., 11</p> <code>event_player_1</code> <code>str</code> <p>Name of the first event player, e.g., PEKKA.RINNE</p> <code>event_player_1_id</code> <code>str</code> <p>Identifier that can be used to match with Evolving Hockey data, e.g., PEKKA.RINNE</p> <code>event_player_1_pos</code> <code>str</code> <p>Player's position for the game, may differ from primary position, e.g., G</p> <code>event_player_2</code> <code>str</code> <p>Name of the second event player</p> <code>event_player_2_id</code> <code>str</code> <p>Identifier that can be used to match with Evolving Hockey data</p> <code>event_player_2_pos</code> <code>str</code> <p>Player's position for the game, may differ from primary position</p> <code>event_player_3</code> <code>str</code> <p>Name of the third event player</p> <code>event_player_3_id</code> <code>str</code> <p>Identifier that can be used to match with Evolving Hockey data</p> <code>event_player_3_pos</code> <code>str</code> <p>Player's position for the game, may differ from primary position</p> <code>event_length</code> <code>int</code> <p>Length of time elapsed in seconds since previous event, e.g., 5</p> <code>high_danger</code> <code>int</code> <p>Whether shot event is from high-danger area, e.g., 0</p> <code>danger</code> <code>int</code> <p>Whether shot event is from danger area, exclusive of high-danger area, e.g., 0</p> <code>pbp_distance</code> <code>float</code> <p>Distance from opponent net, in feet, according to play-by-play description, e.g., 185.0</p> <code>event_distance</code> <code>float</code> <p>Distance from opponent net, in feet, e.g., 185.326738</p> <code>event_angle</code> <code>float</code> <p>Angle of opponent's net from puck, in degrees, e.g., 57.528808</p> <code>opp_strength_state</code> <code>str</code> <p>Strength state from the perspective of the opposing team, e.g., Ev5</p> <code>opp_score_state</code> <code>str</code> <p>Score state from the perspective of the opposing team, e.g., 2v5</p> <code>event_on_f</code> <code>str</code> <p>Names of the event team's forwards that are on the ice during the event, e.g., NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND</p> <code>event_on_f_id</code> <code>str</code> <p>EH IDs of the event team's forwards that are on the ice during the event, e.g., NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND</p> <code>event_on_d</code> <code>str</code> <p>Names of the event team's defensemen that are on the ice during the event, e.g., MATTIAS EKHOLM, ROMAN JOSI</p> <code>event_on_d_id</code> <code>str</code> <p>EH IDs of the event team's defensemen that are on the ice during the event, e.g., MATTIAS.EKHOLM, ROMAN.JOSI</p> <code>event_on_g</code> <code>str</code> <p>Name of the goalie for the event team, e.g., PEKKA RINNE</p> <code>event_on_g_id</code> <code>str</code> <p>Identifier for the event team goalie that can be used to match with Evolving Hockey data, e.g., PEKKA.RINNE</p> <code>event_on_1</code> <code>str</code> <p>Name of one the event team's players that are on the ice during the event, e.g., CALLE.JARNKROK</p> <code>event_on_1_id</code> <code>str</code> <p>EH ID of one the event team's players that are on the ice during the event, e.g., CALLE.JARNKROK</p> <code>event_on_1_pos</code> <code>str</code> <p>Position of one the event team's players that are on the ice during the event, e.g., C</p> <code>event_on_2</code> <code>str</code> <p>Name of one the event team's players that are on the ice during the event, e.g., MATTIAS.EKHOLM</p> <code>event_on_2_id</code> <code>str</code> <p>EH ID of one the event team's players that are on the ice during the event, e.g., MATTIAS.EKHOLM</p> <code>event_on_2_pos</code> <code>str</code> <p>Position of one the event team's players that are on the ice during the event, e.g., D</p> <code>event_on_3</code> <code>str</code> <p>Name of one the event team's players that are on the ice during the event, e.g., MIKAEL.GRANLUND</p> <code>event_on_3_id</code> <code>str</code> <p>EH ID of one the event team's players that are on the ice during the event, e.g., MIKAEL.GRANLUND</p> <code>event_on_3_pos</code> <code>str</code> <p>Position of one the event team's players that are on the ice during the event, e.g., C</p> <code>event_on_4</code> <code>str</code> <p>Name of one the event team's players that are on the ice during the event, e.g., NICK.BONINO</p> <code>event_on_4_id</code> <code>str</code> <p>EH ID of one the event team's players that are on the ice during the event, e.g., NICK.BONINO</p> <code>event_on_4_pos</code> <code>str</code> <p>Position of one the event team's players that are on the ice during the event, e.g., C</p> <code>event_on_5</code> <code>str</code> <p>Name of one the event team's players that are on the ice during the event, e.g., PEKKA.RINNE</p> <code>event_on_5_id</code> <code>str</code> <p>EH ID of one the event team's players that are on the ice during the event, e.g., PEKKA.RINNE</p> <code>event_on_5_pos</code> <code>str</code> <p>Position of one the event team's players that are on the ice during the event, e.g., G</p> <code>event_on_6</code> <code>str</code> <p>Name of one the event team's players that are on the ice during the event, e.g., ROMAN.JOSI</p> <code>event_on_6_id</code> <code>str</code> <p>EH ID of one the event team's players that are on the ice during the event, e.g., ROMAN.JOSI</p> <code>event_on_6_pos</code> <code>str</code> <p>Position of one the event team's players that are on the ice during the event, e.g., D</p> <code>event_on_7</code> <code>str</code> <p>Name of one the event team's players that are on the ice during the event, e.g., NaN</p> <code>event_on_7_id</code> <code>str</code> <p>EH ID of one the event team's players that are on the ice during the event, e.g., NaN</p> <code>event_on_7_pos</code> <code>str</code> <p>Position of one the event team's players that are on the ice during the event, e.g., NaN</p> <code>opp_on_f</code> <code>str</code> <p>Names of the opponent's forwards that are on the ice during the event, e.g., ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE</p> <code>opp_on_f_id</code> <code>str</code> <p>EH IDs of the event team's forwards that are on the ice during the event, e.g., ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE</p> <code>opp_on_d</code> <code>str</code> <p>Names of the opposing team's defensemen that are on the ice during the event, e.g., DUNCAN KEITH, ERIK GUSTAFSSON</p> <code>opp_on_d_id</code> <code>str</code> <p>EH IDs of the opposing team's defensemen that are on the ice during the event, e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2</p> <code>opp_on_g</code> <code>str</code> <p>Name of the opposing goalie for the event team, e.g., EMPTY NET</p> <code>opp_on_g_id</code> <code>str</code> <p>Identifier for the opposing goalie that can be used to match with Evolving Hockey data, e.g., EMPTY NET</p> <code>opp_on_1</code> <code>str</code> <p>Name of one the opposing team's players that are on the ice during the event, e.g., ALEX.DEBRINCAT</p> <code>opp_on_1_id</code> <code>str</code> <p>EH ID of one the opposing team's players that are on the ice during the event, e.g., ALEX.DEBRINCAT</p> <code>opp_on_1_pos</code> <code>str</code> <p>Position of one the opposing team's players that are on the ice during the event, e.g., R</p> <code>opp_on_2</code> <code>str</code> <p>Name of one the opposing team's players that are on the ice during the event, e.g., DUNCAN.KEITH</p> <code>opp_on_2_id</code> <code>str</code> <p>EH ID of one the opposing team's players that are on the ice during the event, e.g., DUNCAN.KEITH</p> <code>opp_on_2_pos</code> <code>str</code> <p>Position of one the opposing team's players that are on the ice during the event, e.g., D</p> <code>opp_on_3</code> <code>str</code> <p>Name of one the opposing team's players that are on the ice during the event, e.g., ERIK.GUSTAFSSON2</p> <code>opp_on_3_id</code> <code>str</code> <p>EH ID of one the opposing team's players that are on the ice during the event, e.g., ERIK.GUSTAFSSON2</p> <code>opp_on_3_pos</code> <code>str</code> <p>Position of one the opposing team's players that are on the ice during the event, e.g., D</p> <code>opp_on_4</code> <code>str</code> <p>Name of one the opposing team's players that are on the ice during the event, e.g., JONATHAN.TOEWS</p> <code>opp_on_4_id</code> <code>str</code> <p>EH ID of one the opposing team's players that are on the ice during the event, e.g., JONATHAN.TOEWS</p> <code>opp_on_4_pos</code> <code>str</code> <p>Position of one the opposing team's players that are on the ice during the event, e.g., C</p> <code>opp_on_5</code> <code>str</code> <p>Name of one the opposing team's players that are on the ice during the event, e.g., KIRBY.DACH</p> <code>opp_on_5_id</code> <code>str</code> <p>EH ID of one the opposing team's players that are on the ice during the event, e.g., KIRBY.DACH</p> <code>opp_on_5_pos</code> <code>str</code> <p>Position of one the opposing team's players that are on the ice during the event, e.g., C</p> <code>opp_on_6</code> <code>str</code> <p>Name of one the opposing team's players that are on the ice during the event, e.g., PATRICK.KANE</p> <code>opp_on_6_id</code> <code>str</code> <p>EH ID of one the opposing team's players that are on the ice during the event, e.g., PATRICK.KANE</p> <code>opp_on_6_pos</code> <code>str</code> <p>Position of one the opposing team's players that are on the ice during the event, e.g., R</p> <code>opp_on_7</code> <code>str</code> <p>Name of one the opposing team's players that are on the ice during the event, e.g., NaN</p> <code>opp_on_7_id</code> <code>str</code> <p>EH ID of one the opposing team's players that are on the ice during the event, e.g., NaN</p> <code>opp_on_7_pos</code> <code>str</code> <p>Position of one the opposing team's players that are on the ice during the event, e.g., NaN</p> <code>change</code> <code>int</code> <p>Dummy variable to indicate whether event is a change, e.g., 0</p> <code>zone_start</code> <code>str</code> <p>Zone where the changed, e.g., OFF or OTF</p> <code>num_on</code> <code>int | None</code> <p>Number of players entering the ice, e.g., 6</p> <code>num_off</code> <code>int | None</code> <p>Number of players exiting the ice, e.g., 0</p> <code>players_on</code> <code>str</code> <p>Names of players on, in jersey order, e.g., FILIP FORSBERG, ALEX CARRIER, ROMAN JOSI, MIKAEL GRANLUND, JUUSE SAROS, MATT DUCHENE</p> <code>players_on_id</code> <code>str</code> <p>Evolving Hockey IDs of players on, in jersey order, e.g., FILIP.FORSBERG, ALEX.CARRIER, ROMAN.JOSI, MIKAEL.GRANLUND, JUUSE.SAROS, MATT.DUCHENE</p> <code>players_on_pos</code> <code>str</code> <p>Positions of players on, in jersey order, e.g., L, D, D, C, G, C</p> <code>players_off</code> <code>str</code> <p>Names of players off, in jersey order</p> <code>players_off_id</code> <code>str</code> <p>Evolving Hockey IDs of players off, in jersey order</p> <code>players_off_pos</code> <code>str</code> <p>Positions of players off, in jersey order</p> <code>shot</code> <code>int</code> <p>Dummy variable to indicate whether event is a shot, e.g., 1</p> <code>shot_adj</code> <code>float</code> <p>Score and venue-adjusted shot value, e.g., 0</p> <code>goal</code> <code>int</code> <p>Dummy variable to indicate whether event is a goal, e.g., 1</p> <code>goal_adj</code> <code>float</code> <p>Score and venue-adjusted shot value, e.g., 0</p> <code>pred_goal</code> <code>float</code> <p>Predicted goal value (xG), e.g., 0.482589</p> <code>pred_goal_adj</code> <code>float</code> <p>Score and venue-adjusted predicted goal (xG) value, e.g., 0</p> <code>miss</code> <code>int</code> <p>Dummy variable to indicate whether event is a missed shot, e.g., 0</p> <code>block</code> <code>int</code> <p>Dummy variable to indicate whether event is a block, e.g., 0</p> <code>corsi</code> <code>int</code> <p>Dummy variable to indicate whether event is a corsi event, e.g., 1</p> <code>corsi_adj</code> <code>float</code> <p>Score and venue-adjusted corsi value, e.g., 0</p> <code>fenwick</code> <code>int</code> <p>Dummy variable to indicate whether event is a fenwick event, e.g., 1</p> <code>fenwick_adj</code> <code>float</code> <p>Score and venue-adjusted fenwick value, e.g., 0</p> <code>hd_shot</code> <code>int</code> <p>Dummy variable to indicate whether event is a high-danger shot event, e.g., 0</p> <code>hd_goal</code> <code>int</code> <p>Dummy variable to indicate whether event is a high-danger goal event, e.g., 0</p> <code>hd_miss</code> <code>int</code> <p>Dummy variable to indicate whether event is a high-danger miss event, e.g., 0</p> <code>hd_fenwick</code> <code>int</code> <p>Dummy variable to indicate whether event is a high-danger fenwick event, e.g., 0</p> <code>fac</code> <code>int</code> <p>Dummy variable to indicate whether event is a faceoff, e.g., 0</p> <code>hit</code> <code>int</code> <p>Dummy variable to indicate whether event is a hit, e.g., 0</p> <code>give</code> <code>int</code> <p>Dummy variable to indicate whether event is a giveaway, e.g., 0</p> <code>take</code> <code>int</code> <p>Dummy variable to indicate whether event is a takeaway, e.g., 0</p> <code>pen0</code> <code>int</code> <p>Dummy variable to indicate whether event is a penalty with no minutes, e.g., 0</p> <code>pen2</code> <code>int</code> <p>Dummy variable to indicate whether event is a two-minute penalty, e.g., 0</p> <code>pen4</code> <code>int</code> <p>Dummy variable to indicate whether event is a four-minute penalty, e.g., 0</p> <code>pen5</code> <code>int</code> <p>Dummy variable to indicate whether event is a five-minute penalty, e.g., 0</p> <code>pen10</code> <code>int</code> <p>Dummy variable to indicate whether event is a ten-minute penalty, e.g., 0</p> <code>stop</code> <code>int</code> <p>Dummy variable to indicate whether event is a stoppage, e.g., 0</p> <code>ozf</code> <code>int</code> <p>Dummy variable to indicate whether event is an offensive zone faceoff e.g., 0</p> <code>nzf</code> <code>int</code> <p>Dummy variable to indicate whether event is a neutral zone faceoff, e.g., 0</p> <code>dzf</code> <code>int</code> <p>Dummy variable to indicate whether event is a defensive zone faceoff, e.g., 0</p> <code>ozs</code> <code>int</code> <p>Dummy variable to indicate whether an event is an offensive zone change, e.g., 0</p> <code>nzs</code> <code>int</code> <p>Dummy variable to indicate whether an event is a neutral zone change, e.g., 0</p> <code>dzs</code> <code>int</code> <p>Dummy variable to indicate whether an event is an defensive zone change, e.g., 0</p> <code>otf</code> <code>int</code> <p>Dummy variable to indicate whether an event is an on-the-fly change, e.g., 0</p> <p>Examples:</p> <p>Play-by-play DataFrame</p> <pre><code>&gt;&gt;&gt; shifts_raw = pd.read_csv(\"./raw_shifts.csv\")\n&gt;&gt;&gt; pbp_raw = pd.read_csv(\"./raw_pbp.csv\")\n&gt;&gt;&gt; pbp = prep_pbp(pbp_raw, shifts_raw)\n</code></pre> Source code in <code>src/chickenstats/evolving_hockey/stats.py</code> <pre><code>def prep_pbp(\n    pbp: pd.DataFrame | list[pd.DataFrame],\n    shifts: pd.DataFrame | list[pd.DataFrame],\n    columns: Literal[\"light\", \"full\", \"all\"] = \"full\",\n    disable_progress_bar: bool = False,\n) -&gt; pd.DataFrame:\n    \"\"\"Prepares a play-by-play dataframe using EvolvingHockey data, but with additional stats and information.\n\n    Columns keyword argument determines information returned. Used in later aggregation\n    functions. Returns a DataFrame.\n\n    Parameters:\n        pbp (pd.DataFrame):\n            Pandas DataFrame of CSV file downloaded from play-by-play query tool at evolving-hockey.com\n        shifts (pd.DataFrame):\n            Pandas DataFrame of CSV file downloaded from shifts query tool at evolving-hockey.com\n        columns (str):\n            Whether to return additional columns or more sparse play-by-play dataframe\n        disable_progress_bar (bool):\n            Whether to disable progress bar\n\n    Returns:\n        season (int):\n            8-digit season code, e.g., 20192020\n        session (str):\n            Regular season or playoffs, e.g., R\n        game_id (int):\n            10-digit game identifier, e.g., 2019020684\n        game_date (str):\n            Date of game in Eastern time-zone, e.g., 2020-01-09\n        event_index (int):\n            Unique index number of event, in chronological order, e.g.,\n        game_period (int):\n            Game period, e.g., 3\n        game_seconds (int):\n            Game time elapsed in seconds, e.g., 3578\n        period_seconds (int):\n            Period time elapsed in seconds, e.g., 1178\n        clock_time (str):\n            Time shown on clock, e.g., 0:22\n        strength_state (str):\n            Strength state from the perspective of the event team, e.g., 5vE\n        score_state (str):\n            Score state from the perspective of the event team, e.g., 5v2\n        event_type (str):\n            Name of the event, e.g., GOAL\n        event_description (str):\n            Description of the event, e.g., NSH #35 RINNE(1), WRIST, DEF. ZONE, 185 FT.\n        event_detail (str | None):\n            Additional information about the event, e.g., Wrist\n        event_zone (str | None):\n            Zone location of event, e.g., DEF\n        event_team (str | None):\n            3-letter abbreviation of the team for the event, e.g., NSH\n        opp_team (str | None):\n            3-letter abbreviation of the opposing team for the event, e.g., CHI\n        is_home (int | None):\n            Dummy variable to signify whether event team is home team, e.g., 0\n        coords_x (int | None):\n            X coordinates of event, e.g., -96\n        coords_y (int | None):\n            Y coordinates of event, e.g., 11\n        event_player_1 (str):\n            Name of the first event player, e.g., PEKKA.RINNE\n        event_player_1_id (str):\n            Identifier that can be used to match with Evolving Hockey data, e.g., PEKKA.RINNE\n        event_player_1_pos (str):\n            Player's position for the game, may differ from primary position, e.g., G\n        event_player_2 (str):\n            Name of the second event player\n        event_player_2_id (str):\n            Identifier that can be used to match with Evolving Hockey data\n        event_player_2_pos (str):\n            Player's position for the game, may differ from primary position\n        event_player_3 (str):\n            Name of the third event player\n        event_player_3_id (str):\n            Identifier that can be used to match with Evolving Hockey data\n        event_player_3_pos (str):\n            Player's position for the game, may differ from primary position\n        event_length (int):\n            Length of time elapsed in seconds since previous event, e.g., 5\n        high_danger (int):\n            Whether shot event is from high-danger area, e.g., 0\n        danger (int):\n            Whether shot event is from danger area,\n            exclusive of high-danger area, e.g., 0\n        pbp_distance (float):\n            Distance from opponent net, in feet, according to play-by-play description, e.g., 185.0\n        event_distance (float):\n            Distance from opponent net, in feet, e.g., 185.326738\n        event_angle (float):\n            Angle of opponent's net from puck, in degrees, e.g., 57.528808\n        opp_strength_state (str):\n            Strength state from the perspective of the opposing team, e.g., Ev5\n        opp_score_state (str):\n            Score state from the perspective of the opposing team, e.g., 2v5\n        event_on_f (str):\n            Names of the event team's forwards that are on the ice during the event,\n            e.g., NICK BONINO, CALLE JARNKROK, MIKAEL GRANLUND\n        event_on_f_id (str):\n            EH IDs of the event team's forwards that are on the ice during the event,\n            e.g., NICK.BONINO, CALLE.JARNKROK, MIKAEL.GRANLUND\n        event_on_d (str):\n            Names of the event team's defensemen that are on the ice during the event,\n            e.g., MATTIAS EKHOLM, ROMAN JOSI\n        event_on_d_id (str):\n            EH IDs of the event team's defensemen that are on the ice during the event,\n            e.g., MATTIAS.EKHOLM, ROMAN.JOSI\n        event_on_g (str):\n            Name of the goalie for the event team, e.g., PEKKA RINNE\n        event_on_g_id (str):\n            Identifier for the event team goalie that can be used to match with Evolving Hockey data, e.g., PEKKA.RINNE\n        event_on_1 (str):\n            Name of one the event team's players that are on the ice during the event,\n            e.g., CALLE.JARNKROK\n        event_on_1_id (str):\n            EH ID of one the event team's players that are on the ice during the event,\n            e.g., CALLE.JARNKROK\n        event_on_1_pos (str):\n            Position of one the event team's players that are on the ice during the event,\n            e.g., C\n        event_on_2 (str):\n            Name of one the event team's players that are on the ice during the event,\n            e.g., MATTIAS.EKHOLM\n        event_on_2_id (str):\n            EH ID of one the event team's players that are on the ice during the event,\n            e.g., MATTIAS.EKHOLM\n        event_on_2_pos (str):\n            Position of one the event team's players that are on the ice during the event,\n            e.g., D\n        event_on_3 (str):\n            Name of one the event team's players that are on the ice during the event,\n            e.g., MIKAEL.GRANLUND\n        event_on_3_id (str):\n            EH ID of one the event team's players that are on the ice during the event,\n            e.g., MIKAEL.GRANLUND\n        event_on_3_pos (str):\n            Position of one the event team's players that are on the ice during the event,\n            e.g., C\n        event_on_4 (str):\n            Name of one the event team's players that are on the ice during the event,\n            e.g., NICK.BONINO\n        event_on_4_id (str):\n            EH ID of one the event team's players that are on the ice during the event,\n            e.g., NICK.BONINO\n        event_on_4_pos (str):\n            Position of one the event team's players that are on the ice during the event,\n            e.g., C\n        event_on_5 (str):\n            Name of one the event team's players that are on the ice during the event,\n            e.g., PEKKA.RINNE\n        event_on_5_id (str):\n            EH ID of one the event team's players that are on the ice during the event,\n            e.g., PEKKA.RINNE\n        event_on_5_pos (str):\n            Position of one the event team's players that are on the ice during the event,\n            e.g., G\n        event_on_6 (str):\n            Name of one the event team's players that are on the ice during the event,\n            e.g., ROMAN.JOSI\n        event_on_6_id (str):\n            EH ID of one the event team's players that are on the ice during the event,\n            e.g., ROMAN.JOSI\n        event_on_6_pos (str):\n            Position of one the event team's players that are on the ice during the event,\n            e.g., D\n        event_on_7 (str):\n            Name of one the event team's players that are on the ice during the event,\n            e.g., NaN\n        event_on_7_id (str):\n            EH ID of one the event team's players that are on the ice during the event,\n            e.g., NaN\n        event_on_7_pos (str):\n            Position of one the event team's players that are on the ice during the event,\n            e.g., NaN\n        opp_on_f (str):\n            Names of the opponent's forwards that are on the ice during the event,\n            e.g., ALEX DEBRINCAT, JONATHAN TOEWS, KIRBY DACH, PATRICK KANE\n        opp_on_f_id (str):\n            EH IDs of the event team's forwards that are on the ice during the event,\n            e.g., ALEX.DEBRINCAT, JONATHAN.TOEWS, KIRBY.DACH, PATRICK.KANE\n        opp_on_d (str):\n            Names of the opposing team's defensemen that are on the ice during the event,\n            e.g., DUNCAN KEITH, ERIK GUSTAFSSON\n        opp_on_d_id (str):\n            EH IDs of the opposing team's defensemen that are on the ice during the event,\n            e.g., DUNCAN.KEITH, ERIK.GUSTAFSSON2\n        opp_on_g (str):\n            Name of the opposing goalie for the event team, e.g., EMPTY NET\n        opp_on_g_id (str):\n            Identifier for the opposing goalie that can be used to match with Evolving Hockey data, e.g., EMPTY NET\n        opp_on_1 (str):\n            Name of one the opposing team's players that are on the ice during the event,\n            e.g., ALEX.DEBRINCAT\n        opp_on_1_id (str):\n            EH ID of one the opposing team's players that are on the ice during the event,\n            e.g., ALEX.DEBRINCAT\n        opp_on_1_pos (str):\n            Position of one the opposing team's players that are on the ice during the event,\n            e.g., R\n        opp_on_2 (str):\n            Name of one the opposing team's players that are on the ice during the event,\n            e.g., DUNCAN.KEITH\n        opp_on_2_id (str):\n            EH ID of one the opposing team's players that are on the ice during the event,\n            e.g., DUNCAN.KEITH\n        opp_on_2_pos (str):\n            Position of one the opposing team's players that are on the ice during the event,\n            e.g., D\n        opp_on_3 (str):\n            Name of one the opposing team's players that are on the ice during the event,\n            e.g., ERIK.GUSTAFSSON2\n        opp_on_3_id (str):\n            EH ID of one the opposing team's players that are on the ice during the event,\n            e.g., ERIK.GUSTAFSSON2\n        opp_on_3_pos (str):\n            Position of one the opposing team's players that are on the ice during the event,\n            e.g., D\n        opp_on_4 (str):\n            Name of one the opposing team's players that are on the ice during the event,\n            e.g., JONATHAN.TOEWS\n        opp_on_4_id (str):\n            EH ID of one the opposing team's players that are on the ice during the event,\n            e.g., JONATHAN.TOEWS\n        opp_on_4_pos (str):\n            Position of one the opposing team's players that are on the ice during the event,\n            e.g., C\n        opp_on_5 (str):\n            Name of one the opposing team's players that are on the ice during the event,\n            e.g., KIRBY.DACH\n        opp_on_5_id (str):\n            EH ID of one the opposing team's players that are on the ice during the event,\n            e.g., KIRBY.DACH\n        opp_on_5_pos (str):\n            Position of one the opposing team's players that are on the ice during the event,\n            e.g., C\n        opp_on_6 (str):\n            Name of one the opposing team's players that are on the ice during the event,\n            e.g., PATRICK.KANE\n        opp_on_6_id (str):\n            EH ID of one the opposing team's players that are on the ice during the event,\n            e.g., PATRICK.KANE\n        opp_on_6_pos (str):\n            Position of one the opposing team's players that are on the ice during the event,\n            e.g., R\n        opp_on_7 (str):\n            Name of one the opposing team's players that are on the ice during the event,\n            e.g., NaN\n        opp_on_7_id (str):\n            EH ID of one the opposing team's players that are on the ice during the event,\n            e.g., NaN\n        opp_on_7_pos (str):\n            Position of one the opposing team's players that are on the ice during the event,\n            e.g., NaN\n        change (int):\n            Dummy variable to indicate whether event is a change, e.g., 0\n        zone_start (str):\n            Zone where the changed, e.g., OFF or OTF\n        num_on (int | None):\n            Number of players entering the ice, e.g., 6\n        num_off (int | None):\n            Number of players exiting the ice, e.g., 0\n        players_on (str):\n            Names of players on, in jersey order,\n            e.g., FILIP FORSBERG, ALEX CARRIER, ROMAN JOSI, MIKAEL GRANLUND, JUUSE SAROS, MATT DUCHENE\n        players_on_id (str):\n            Evolving Hockey IDs of players on, in jersey order,\n            e.g., FILIP.FORSBERG, ALEX.CARRIER, ROMAN.JOSI, MIKAEL.GRANLUND, JUUSE.SAROS, MATT.DUCHENE\n        players_on_pos (str):\n            Positions of players on, in jersey order,\n            e.g., L, D, D, C, G, C\n        players_off (str):\n            Names of players off, in jersey order\n        players_off_id (str):\n            Evolving Hockey IDs of players off, in jersey order\n        players_off_pos (str):\n            Positions of players off, in jersey order\n        shot (int):\n            Dummy variable to indicate whether event is a shot, e.g., 1\n        shot_adj (float):\n            Score and venue-adjusted shot value, e.g., 0\n        goal (int):\n            Dummy variable to indicate whether event is a goal, e.g., 1\n        goal_adj (float):\n            Score and venue-adjusted shot value, e.g., 0\n        pred_goal (float):\n            Predicted goal value (xG), e.g., 0.482589\n        pred_goal_adj (float):\n            Score and venue-adjusted predicted goal (xG) value, e.g., 0\n        miss (int):\n            Dummy variable to indicate whether event is a missed shot, e.g., 0\n        block (int):\n            Dummy variable to indicate whether event is a block, e.g., 0\n        corsi (int):\n            Dummy variable to indicate whether event is a corsi event, e.g., 1\n        corsi_adj (float):\n            Score and venue-adjusted corsi value, e.g., 0\n        fenwick (int):\n            Dummy variable to indicate whether event is a fenwick event, e.g., 1\n        fenwick_adj (float):\n             Score and venue-adjusted fenwick value, e.g., 0\n        hd_shot (int):\n            Dummy variable to indicate whether event is a high-danger shot event, e.g., 0\n        hd_goal (int):\n            Dummy variable to indicate whether event is a high-danger goal event, e.g., 0\n        hd_miss (int):\n            Dummy variable to indicate whether event is a high-danger miss event, e.g., 0\n        hd_fenwick (int):\n            Dummy variable to indicate whether event is a high-danger fenwick event, e.g., 0\n        fac (int):\n            Dummy variable to indicate whether event is a faceoff, e.g., 0\n        hit (int):\n            Dummy variable to indicate whether event is a hit, e.g., 0\n        give (int):\n            Dummy variable to indicate whether event is a giveaway, e.g., 0\n        take (int):\n            Dummy variable to indicate whether event is a takeaway, e.g., 0\n        pen0 (int):\n            Dummy variable to indicate whether event is a penalty with no minutes, e.g., 0\n        pen2 (int):\n            Dummy variable to indicate whether event is a two-minute penalty, e.g., 0\n        pen4 (int):\n            Dummy variable to indicate whether event is a four-minute penalty, e.g., 0\n        pen5 (int):\n            Dummy variable to indicate whether event is a five-minute penalty, e.g., 0\n        pen10 (int):\n            Dummy variable to indicate whether event is a ten-minute penalty, e.g., 0\n        stop (int):\n            Dummy variable to indicate whether event is a stoppage, e.g., 0\n        ozf (int):\n            Dummy variable to indicate whether event is an offensive zone faceoff e.g., 0\n        nzf (int):\n            Dummy variable to indicate whether event is a neutral zone faceoff, e.g., 0\n        dzf (int):\n            Dummy variable to indicate whether event is a defensive zone faceoff, e.g., 0\n        ozs (int):\n            Dummy variable to indicate whether an event is an offensive zone change, e.g., 0\n        nzs (int):\n            Dummy variable to indicate whether an event is a neutral zone change, e.g., 0\n        dzs (int):\n            Dummy variable to indicate whether an event is an defensive zone change, e.g., 0\n        otf (int):\n            Dummy variable to indicate whether an event is an on-the-fly change, e.g., 0\n\n    Examples:\n        Play-by-play DataFrame\n        &gt;&gt;&gt; shifts_raw = pd.read_csv(\"./raw_shifts.csv\")\n        &gt;&gt;&gt; pbp_raw = pd.read_csv(\"./raw_pbp.csv\")\n        &gt;&gt;&gt; pbp = prep_pbp(pbp_raw, shifts_raw)\n\n    \"\"\"\n    with ChickenProgress(disable=disable_progress_bar) as progress:\n        if isinstance(pbp, pd.DataFrame):\n            progress_total = 1\n\n            pbp = [pbp]\n\n        elif isinstance(pbp, list):\n            progress_total = len(pbp)\n\n        if isinstance(shifts, pd.DataFrame):\n            shifts = [shifts]\n\n        if len(pbp) != len(shifts):\n            raise Exception(\"Number of play-by-play and shift CSV files does not match\")\n\n        pbar_message = \"Prepping play-by-play data...\"\n\n        csv_task = progress.add_task(pbar_message, total=progress_total)\n\n        pbp_concat = []\n\n        for idx, (pbp_raw, shifts_raw) in enumerate(zip(pbp, shifts, strict=False)):\n            rosters = munge_rosters(shifts_raw)\n\n            pbp_clean = munge_pbp(pbp_raw)\n\n            pbp_clean = add_positions(pbp_clean, rosters)\n\n            cols = [\n                \"id\",\n                \"season\",\n                \"session\",\n                \"game_id\",\n                \"game_date\",\n                \"event_index\",\n                \"game_period\",\n                \"game_seconds\",\n                \"period_seconds\",\n                \"clock_time\",\n                \"strength_state\",\n                \"score_state\",\n                \"event_type\",\n                \"event_description\",\n                \"event_detail\",\n                \"event_zone\",\n                \"event_team\",\n                \"opp_team\",\n                \"is_home\",\n                \"coords_x\",\n                \"coords_y\",\n                \"event_player_1\",\n                \"event_player_1_id\",\n                \"event_player_1_pos\",\n                \"event_player_2\",\n                \"event_player_2_id\",\n                \"event_player_2_pos\",\n                \"event_player_3\",\n                \"event_player_3_id\",\n                \"event_player_3_pos\",\n                \"event_length\",\n                \"high_danger\",\n                \"danger\",\n                \"pbp_distance\",\n                \"event_distance\",\n                \"event_angle\",\n                \"event_on_f\",\n                \"event_on_f_id\",\n                \"event_on_d\",\n                \"event_on_d_id\",\n                \"event_on_g\",\n                \"event_on_g_id\",\n                \"opp_on_f\",\n                \"opp_on_f_id\",\n                \"opp_on_d\",\n                \"opp_on_d_id\",\n                \"opp_on_g\",\n                \"opp_on_g_id\",\n                \"change\",\n                \"zone_start\",\n                \"num_on\",\n                \"num_off\",\n                \"players_on\",\n                \"players_on_id\",\n                \"players_on_pos\",\n                \"players_off\",\n                \"players_off_id\",\n                \"players_off_pos\",\n                \"shot\",\n                \"shot_adj\",\n                \"goal\",\n                \"goal_adj\",\n                \"pred_goal\",\n                \"pred_goal_adj\",\n                \"miss\",\n                \"block\",\n                \"corsi\",\n                \"corsi_adj\",\n                \"fenwick\",\n                \"fenwick_adj\",\n                \"hd_shot\",\n                \"hd_goal\",\n                \"hd_miss\",\n                \"hd_fenwick\",\n                \"fac\",\n                \"hit\",\n                \"give\",\n                \"take\",\n                \"pen0\",\n                \"pen2\",\n                \"pen4\",\n                \"pen5\",\n                \"pen10\",\n                \"stop\",\n                \"ozf\",\n                \"nzf\",\n                \"dzf\",\n                \"ozs\",\n                \"nzs\",\n                \"dzs\",\n                \"otf\",\n            ]\n\n            if columns in [\"full\", \"all\"]:\n                event_cols = [\n                    \"event_on_1\",\n                    \"event_on_1_id\",\n                    \"event_on_1_pos\",\n                    \"event_on_2\",\n                    \"event_on_2_id\",\n                    \"event_on_2_pos\",\n                    \"event_on_3\",\n                    \"event_on_3_id\",\n                    \"event_on_3_pos\",\n                    \"event_on_4\",\n                    \"event_on_4_id\",\n                    \"event_on_4_pos\",\n                    \"event_on_5\",\n                    \"event_on_5_id\",\n                    \"event_on_5_pos\",\n                    \"event_on_6\",\n                    \"event_on_6_id\",\n                    \"event_on_6_pos\",\n                    \"event_on_7\",\n                    \"event_on_7_id\",\n                    \"event_on_7_pos\",\n                ]\n\n                event_pos = cols.index(\"event_on_g_id\") + 1\n\n                cols[event_pos:event_pos] = event_cols\n\n                opp_cols = [\n                    \"opp_on_1\",\n                    \"opp_on_1_id\",\n                    \"opp_on_1_pos\",\n                    \"opp_on_2\",\n                    \"opp_on_2_id\",\n                    \"opp_on_2_pos\",\n                    \"opp_on_3\",\n                    \"opp_on_3_id\",\n                    \"opp_on_3_pos\",\n                    \"opp_on_4\",\n                    \"opp_on_4_id\",\n                    \"opp_on_4_pos\",\n                    \"opp_on_5\",\n                    \"opp_on_5_id\",\n                    \"opp_on_5_pos\",\n                    \"opp_on_6\",\n                    \"opp_on_6_id\",\n                    \"opp_on_6_pos\",\n                    \"opp_on_7\",\n                    \"opp_on_7_id\",\n                    \"opp_on_7_pos\",\n                ]\n\n                opp_pos = cols.index(\"opp_on_g_id\") + 1\n\n                cols[opp_pos:opp_pos] = opp_cols\n\n                other_cols = [\"opp_strength_state\", \"opp_score_state\"]\n\n                other_pos = cols.index(\"event_angle\") + 1\n\n                cols[other_pos:other_pos] = other_cols\n\n            if columns == \"all\":\n                more_cols = [\n                    \"home_zone\",\n                    \"home_team\",\n                    \"away_team\",\n                    \"home_goalie\",\n                    \"away_goalie\",\n                    \"home_skaters\",\n                    \"away_skaters\",\n                    \"home_score\",\n                    \"away_score\",\n                    \"home_zonestart\",\n                    \"face_index\",\n                    \"pen_index\",\n                    \"shift_index\",\n                    \"game_score_state\",\n                    \"game_strength_state\",\n                ]\n\n                pos = cols.index(\"is_home\") + 1\n\n                cols[pos:pos] = more_cols\n\n            cols = [x for x in cols if x in pbp_clean]\n\n            pbp_clean = pbp_clean[cols]\n\n            cols = [x for x in list(PBPSchema.dtypes.keys()) if x in pbp_clean.columns]\n\n            pbp_clean = PBPSchema.validate(pbp_clean[cols])\n\n            pbp_concat.append(pbp_clean)\n\n            if progress_total == 1 or idx + 1 == progress_total:\n                pbp_clean = pd.concat(pbp_concat, ignore_index=True)\n\n                pbar_message = \"Finished loading play-by-play data\"\n\n            progress.update(csv_task, description=pbar_message, advance=1, refresh=True)\n\n    return pbp_clean\n</code></pre>"},{"location":"reference/evolving_hockey/stats/#evolving_hockey.stats.prep_stats","title":"prep_stats","text":"<pre><code>prep_stats(\n    pbp,\n    level=\"game\",\n    score=False,\n    teammates=False,\n    opposition=False,\n    disable_progress_bar=False,\n)\n</code></pre> <p>Prepares an individual and on-ice stats dataframe using EvolvingHockey data.</p> <p>Aggregates to desired level. Capable of returning cuts that account for strength state, period, score state, teammates, and opposition.</p> <p>Returns a Pandas DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>pbp</code> <code>DataFrame</code> <p>Dataframe from the prep_pbp function with the default columns argument</p> required <code>level</code> <code>str</code> <p>Level to aggregate stats, e.g., 'game'</p> <code>'game'</code> <code>score</code> <code>bool</code> <p>Whether to aggregate to score state level</p> <code>False</code> <code>teammates</code> <code>bool</code> <p>Whether to account for teammates when aggregating</p> <code>False</code> <code>opposition</code> <code>bool</code> <p>Whether to account for opposition when aggregating</p> <code>False</code> <code>disable_progress_bar</code> <code>bool</code> <p>Whether to disable progress bar</p> <code>False</code> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>8-digit season code, e.g., 20232024</p> <code>session</code> <code>str</code> <p>Regular season or playoffs, e.g., R</p> <code>game_id</code> <code>int</code> <p>10-digit game identifier, e.g., 2023020015</p> <code>game_date</code> <code>str</code> <p>Date of game in Eastern time-zone, e.g., 2023-10-12</p> <code>player</code> <code>str</code> <p>Name of the player, e.g., FILIP.FORSBERG</p> <code>player_id</code> <code>str</code> <p>Player EH ID, e.g., FILIP.FORSBERG</p> <code>position</code> <code>str</code> <p>Player's position, e.g., L</p> <code>team</code> <code>str</code> <p>3-letter abbreviation of the player's team, e.g., NSH</p> <code>opp_team</code> <code>DataFrame</code> <p>object 3-letter abbreviation of the opposing team, e.g., SEA</p> <code>strength_state</code> <code>str</code> <p>Strength state from the perspective of the event team, e.g., 5v5</p> <code>score_state</code> <code>str</code> <p>Score state from the perspective of the event team, e.g., 0v0</p> <code>game_period</code> <code>int</code> <p>Game period, e.g., 1</p> <code>forwards</code> <code>str</code> <p>Names of the event team's forwards that are on the ice during the event, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY</p> <code>forwards_id</code> <code>str</code> <p>EH IDs of the event team's forwards that are on the ice during the event, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY</p> <code>defense</code> <code>str</code> <p>Names of the event team's defensemen that are on the ice during the event, e.g., ALEX.CARRIER, RYAN.MCDONAGH</p> <code>defense_id</code> <code>str</code> <p>EH IDs of the event team's defensemen that are on the ice during the event, e.g., ALEX.CARRIER, RYAN.MCDONAGH</p> <code>own_goalie</code> <code>str</code> <p>Name of the goalie for the event team, e.g., JUUSE.SAROS</p> <code>own_goalie_id</code> <code>str</code> <p>Identifier for the event team goalie that can be used to match with Evolving Hockey data, e.g., JUUSE.SAROS</p> <code>opp_forwards</code> <code>str</code> <p>Names of the opponent's forwards that are on the ice during the event, e.g., JARED.MCCANN, JORDAN.EBERLE, MATTY.BENIERS</p> <code>opp_forwards_id</code> <code>str</code> <p>EH IDs of the event team's forwards that are on the ice during the event, e.g., JARED.MCCANN, JORDAN.EBERLE, MATTY.BENIERS</p> <code>opp_defense</code> <code>str</code> <p>Names of the opposing team's defensemen that are on the ice during the event, e.g., JAMIE.OLEKSIAK, WILLIAM.BORGEN</p> <code>opp_defense_id</code> <code>str</code> <p>EH IDs of the opposing team's defensemen that are on the ice during the event, e.g., JAMIE.OLEKSIAK, WILLIAM.BORGEN</p> <code>opp_goalie</code> <code>str</code> <p>Name of the opposing goalie for the event team, e.g., PHILIPP.GRUBAUER</p> <code>opp_goalie_id</code> <code>str</code> <p>Identifier for the opposing goalie that can be used to match with Evolving Hockey data, e.g., PHILIPP.GRUBAUER</p> <code>toi</code> <code>float</code> <p>Time on-ice in minutes, e.g., 1.616667</p> <code>g</code> <code>float</code> <p>Number of individual goals scored, e.g, 0</p> <code>a1</code> <code>float</code> <p>Number of primary assists, e.g, 0</p> <code>a2</code> <code>float</code> <p>Number of secondary assists, e.g, 0</p> <code>isf</code> <code>float</code> <p>Number of indiviudal shots registered, e.g., 0</p> <code>iff</code> <code>float</code> <p>Number of indiviudal fenwick events registered, e.g., 0</p> <code>icf</code> <code>float</code> <p>Number of indiviudal corsi events registered, e.g., 0</p> <code>ixg</code> <code>float</code> <p>Sum value of individual predicted goals (xG), e.g., 0</p> <code>gax</code> <code>float</code> <p>Sum value of goals scored above expected, e.g., 0</p> <code>ihdg</code> <code>float</code> <p>Sum value of individual high-danger goals scored, e.g., 0</p> <code>ihdf</code> <code>float</code> <p>Sum value of individual high-danger fenwick events registered, e.g., 0</p> <code>ihdsf</code> <code>float</code> <p>Sum value of individual high-danger shots taken, e.g., 0</p> <code>ihdm</code> <code>float</code> <p>Sum value of individual high-danger shots missed, e.g., 0</p> <code>imsf</code> <code>float</code> <p>Sum value of individual missed shots, 0</p> <code>isb</code> <code>float</code> <p>Sum value of shots taken that were ultimately blocked, e.g., 0</p> <code>ibs</code> <code>float</code> <p>Sum value of opponent shots taken that the player ultimately blocked, e.g., 0</p> <code>igive</code> <code>float</code> <p>Sum of individual giveaways, e.g., 0</p> <code>itake</code> <code>float</code> <p>Sum of individual takeaways, e.g., 0</p> <code>ihf</code> <code>float</code> <p>Sum of individual hits for, e.g., 0</p> <code>iht</code> <code>float</code> <p>Sum of individual hits taken, e.g., 0</p> <code>ifow</code> <code>float</code> <p>Sum of individual faceoffs won, e.g., 0</p> <code>ifol</code> <code>float</code> <p>Sum of individual faceoffs lost, e.g., 0</p> <code>iozfw</code> <code>float</code> <p>Sum of individual faceoffs won in offensive zone, e.g., 0</p> <code>iozfl</code> <code>float</code> <p>Sum of individual faceoffs lost in offensive zone, e.g., 0</p> <code>inzfw</code> <code>float</code> <p>Sum of individual faceoffs won in neutral zone, e.g., 0</p> <code>inzfl</code> <code>float</code> <p>Sum of individual faceoffs lost in neutral zone, e.g., 0</p> <code>idzfw</code> <code>float</code> <p>Sum of individual faceoffs won in defensive zone, e.g., 0</p> <code>idzfl</code> <code>float</code> <p>Sum of individual faceoffs lost in defensive zone, e.g., 0</p> <code>a1_xg</code> <code>float</code> <p>Sum of xG from primary assists, e.g., 0</p> <code>a2_xg</code> <code>float</code> <p>Sum of xG from secondary assists, e.g., 0</p> <code>ipent0</code> <code>float</code> <p>Sum of individual 0-minute penalties taken, e.g., 0</p> <code>ipent2</code> <code>float</code> <p>Sum of individual 2-minute penalties taken, e.g., 0</p> <code>ipent4</code> <code>float</code> <p>Sum of individual 4-minute penalties taken, e.g., 0</p> <code>ipent5</code> <code>float</code> <p>Sum of individual 5-minute penalties taken, e.g., 0</p> <code>ipent10</code> <code>float</code> <p>Sum of individual 10-minute penalties taken, e.g., 0</p> <code>ipend0</code> <code>float</code> <p>Sum of individual 0-minute penalties drawn, e.g., 0</p> <code>ipend2</code> <code>float</code> <p>Sum of individual 2-minute penalties drawn, e.g., 0</p> <code>ipend4</code> <code>float</code> <p>Sum of individual 4-minute penalties drawn, e.g., 0</p> <code>ipend5</code> <code>float</code> <p>Sum of individual 5-minute penalties drawn, e.g., 0</p> <code>ipend10</code> <code>float</code> <p>Sum of individual 10-minute penalties drawn, e.g., 0</p> <code>ozs</code> <code>float</code> <p>Sum of changes with offensive zone starts, e.g., 0</p> <code>nzs</code> <code>float</code> <p>Sum of changes with neutral zone starts, e.g., 0</p> <code>dzs</code> <code>float</code> <p>Sum of changes with defensive zone starts, e.g., 1</p> <code>otf</code> <code>float</code> <p>Sum of changes on-the-fly, e.g., 0</p> <code>gf</code> <code>float</code> <p>Sum of goals scored while player is on-ice, e.g., 0</p> <code>gf_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted goals scored while player is on-ice, e.g., 0</p> <code>hdgf</code> <code>float</code> <p>Sum of high-danger goals scored while player is on-ice, e.g., 0</p> <code>ga</code> <code>float</code> <p>Sum of goals allowed while player is on-ice, e.g., 0</p> <code>ga_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted goals allowed while player is on-ice, e.g., 0</p> <code>hdga</code> <code>float</code> <p>Sum of high-danger goals allowed while player is on-ice, e.g., 0</p> <code>xgf</code> <code>float</code> <p>Sum of expected goals generated while player is on-ice, e.g., 0.017266</p> <code>xgf_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted expected goals generated while player is on-ice, e.g., 0.016472</p> <code>xga</code> <code>float</code> <p>Sum of expected goals allowed while player is on-ice, e.g., 0.123475</p> <code>xga_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted expected goals allowed while player is on-ice, e.g., 0.129772</p> <code>sf</code> <code>float</code> <p>Sum of shots taken while player is on-ice, e.g., 1</p> <code>sf_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted shots taken while player is on-ice, e.g., .972</p> <code>hdsf</code> <code>float</code> <p>Sum of high-danger shots taken while player is on-ice, e.g., 0</p> <code>sa</code> <code>float</code> <p>Sum of shots allowed while player is on-ice, e.g., 0</p> <code>sa_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted shots allowed while player is on-ice, e.g., 0</p> <code>hdsa</code> <code>float</code> <p>Sum of high-danger shots allowed while player is on-ice, e.g., 0</p> <code>ff</code> <code>float</code> <p>Sum of fenwick events generated while player is on-ice, e.g., 1</p> <code>ff_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted fenwick events generated while player is on-ice, e.g., 0.968</p> <code>hdff</code> <code>float</code> <p>Sum of high-danger fenwick events generated while player is on-ice, e.g., 0</p> <code>fa</code> <code>float</code> <p>Sum of fenwick events allowed while player is on-ice, e.g., 1</p> <code>fa_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted fenwick events allowed while player is on-ice, e.g., 1.034</p> <code>hdfa</code> <code>float</code> <p>Sum of high-danger fenwick events allowed while player is on-ice, e.g., 1</p> <code>cf</code> <code>float</code> <p>Sum of corsi events generated while player is on-ice, e.g., 1</p> <code>cf_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted corsi events generated while player is on-ice, e.g., 0.970</p> <code>ca</code> <code>float</code> <p>Sum of corsi events allowed while player is on-ice, e.g., 2</p> <code>ca_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted corsi events allowed while player is on-ice, e.g., 2.064</p> <code>bsf</code> <code>float</code> <p>Sum of shots taken that were ultimately blocked while player is on-ice, e.g., 0</p> <code>bsa</code> <code>float</code> <p>Sum of shots allowed that were ultimately blocked while player is on-ice, e.g., 1</p> <code>msf</code> <code>float</code> <p>Sum of shots taken that missed net while player is on-ice, e.g., 0</p> <code>hdmsf</code> <code>float</code> <p>Sum of high-danger shots taken that missed net while player is on-ice, e.g., 0</p> <code>msa</code> <code>float</code> <p>Sum of shots allowed that missed net while player is on-ice, e.g., 1</p> <code>hdmsa</code> <code>float</code> <p>Sum of high-danger shots allowed that missed net while player is on-ice, e.g., 1</p> <code>hf</code> <code>float</code> <p>Sum of hits dished out while player is on-ice, e.g., 0</p> <code>ht</code> <code>float</code> <p>Sum of hits taken while player is on-ice, e.g., 0</p> <code>ozf</code> <code>float</code> <p>Sum of offensive zone faceoffs that occur while player is on-ice, e.g., 0</p> <code>nzf</code> <code>float</code> <p>Sum of neutral zone faceoffs that occur while player is on-ice, e.g., 0</p> <code>dzf</code> <code>float</code> <p>Sum of defensive zone faceoffs that occur while player is on-ice, e.g., 1</p> <code>fow</code> <code>float</code> <p>Sum of faceoffs won while player is on-ice, e.g., 1</p> <code>fol</code> <code>float</code> <p>Sum of faceoffs lost while player is on-ice, e.g., 0</p> <code>ozfw</code> <code>float</code> <p>Sum of offensive zone faceoffs won while player is on-ice, e.g., 0</p> <code>ozfl</code> <code>float</code> <p>Sum of offensive zone faceoffs lost while player is on-ice, e.g., 1</p> <code>nzfw</code> <code>float</code> <p>Sum of neutral zone faceoffs won while player is on-ice, e.g., 0</p> <code>nzfl</code> <code>float</code> <p>Sum of neutral zone faceoffs lost while player is on-ice, e.g., 0</p> <code>dzfw</code> <code>float</code> <p>Sum of defensive zone faceoffs won while player is on-ice, e.g., 1</p> <code>dzfl</code> <code>float</code> <p>Sum of defensive zone faceoffs lost while player is on-ice, e.g., 0</p> <code>pent0</code> <code>float</code> <p>Sum of individual 0-minute penalties taken while player is on-ice, e.g., 0</p> <code>pent2</code> <code>float</code> <p>Sum of individual 2-minute penalties taken while player is on-ice, e.g., 0</p> <code>pent4</code> <code>float</code> <p>Sum of individual 4-minute penalties taken while player is on-ice, e.g., 0</p> <code>pent5</code> <code>float</code> <p>Sum of individual 5-minute penalties taken while player is on-ice, e.g., 0</p> <code>pent10</code> <code>float</code> <p>Sum of individual 10-minute penalties taken while player is on-ice, e.g., 0</p> <code>pend0</code> <code>float</code> <p>Sum of individual 0-minute penalties drawn while player is on-ice, e.g., 0</p> <code>pend2</code> <code>float</code> <p>Sum of individual 2-minute penalties drawn while player is on-ice, e.g., 0</p> <code>pend4</code> <code>float</code> <p>Sum of individual 4-minute penalties drawn while player is on-ice, e.g., 0</p> <code>pend5</code> <code>float</code> <p>Sum of individual 5-minute penalties drawn while player is on-ice, e.g., 0</p> <code>pend10</code> <code>float</code> <p>Sum of individual 10-minute penalties drawn while player is on-ice, e.g., 0</p> <p>Examples:</p> <p>Basic play-by-play DataFrame</p> <pre><code>&gt;&gt;&gt; shifts_raw = pd.read_csv(\"./raw_shifts.csv\")\n&gt;&gt;&gt; pbp_raw = pd.read_csv(\"./raw_pbp.csv\")\n&gt;&gt;&gt; pbp = prep_pbp(pbp_raw, shifts_raw)\n</code></pre> <p>Basic game-level stats, with no teammates or opposition</p> <pre><code>&gt;&gt;&gt; stats = prep_stats(pbp)\n</code></pre> <p>Period-level stats, grouped by teammates</p> <pre><code>&gt;&gt;&gt; stats = prep_stats(pbp, level=\"period\", teammates=True)\n</code></pre> <p>Session-level (e.g., regular seasion) stats, grouped by teammates and opposition</p> <pre><code>&gt;&gt;&gt; stats = prep_stats(pbp, level=\"session\", teammates=True, opposition=True)\n</code></pre> Source code in <code>src/chickenstats/evolving_hockey/stats.py</code> <pre><code>def prep_stats(\n    pbp: pd.DataFrame,\n    level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n    score: bool = False,\n    teammates: bool = False,\n    opposition: bool = False,\n    disable_progress_bar: bool = False,\n) -&gt; pd.DataFrame:\n    \"\"\"Prepares an individual and on-ice stats dataframe using EvolvingHockey data.\n\n    Aggregates to desired level. Capable of returning cuts that account for strength state,\n    period, score state, teammates, and opposition.\n\n    Returns a Pandas DataFrame.\n\n    Parameters:\n        pbp (pd.DataFrame):\n            Dataframe from the prep_pbp function with the default columns argument\n        level (str):\n            Level to aggregate stats, e.g., 'game'\n        score (bool):\n            Whether to aggregate to score state level\n        teammates (bool):\n            Whether to account for teammates when aggregating\n        opposition (bool):\n            Whether to account for opposition when aggregating\n        disable_progress_bar (bool):\n            Whether to disable progress bar\n\n    Returns:\n        season (int):\n            8-digit season code, e.g., 20232024\n        session (str):\n            Regular season or playoffs, e.g., R\n        game_id (int):\n            10-digit game identifier, e.g., 2023020015\n        game_date (str):\n            Date of game in Eastern time-zone, e.g., 2023-10-12\n        player (str):\n            Name of the player, e.g., FILIP.FORSBERG\n        player_id (str):\n            Player EH ID, e.g., FILIP.FORSBERG\n        position (str):\n            Player's position, e.g., L\n        team (str):\n            3-letter abbreviation of the player's team, e.g., NSH\n        opp_team: object\n            3-letter abbreviation of the opposing team, e.g., SEA\n        strength_state (str):\n            Strength state from the perspective of the event team, e.g., 5v5\n        score_state (str):\n            Score state from the perspective of the event team, e.g., 0v0\n        game_period (int):\n            Game period, e.g., 1\n        forwards (str):\n            Names of the event team's forwards that are on the ice during the event,\n            e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n        forwards_id (str):\n            EH IDs of the event team's forwards that are on the ice during the event,\n            e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n        defense (str):\n            Names of the event team's defensemen that are on the ice during the event,\n            e.g., ALEX.CARRIER, RYAN.MCDONAGH\n        defense_id (str):\n            EH IDs of the event team's defensemen that are on the ice during the event,\n            e.g., ALEX.CARRIER, RYAN.MCDONAGH\n        own_goalie (str):\n            Name of the goalie for the event team, e.g., JUUSE.SAROS\n        own_goalie_id (str):\n            Identifier for the event team goalie that can be used to match with Evolving Hockey data, e.g., JUUSE.SAROS\n        opp_forwards (str):\n            Names of the opponent's forwards that are on the ice during the event,\n            e.g., JARED.MCCANN, JORDAN.EBERLE, MATTY.BENIERS\n        opp_forwards_id (str):\n            EH IDs of the event team's forwards that are on the ice during the event,\n            e.g., JARED.MCCANN, JORDAN.EBERLE, MATTY.BENIERS\n        opp_defense(str):\n            Names of the opposing team's defensemen that are on the ice during the event,\n            e.g., JAMIE.OLEKSIAK, WILLIAM.BORGEN\n        opp_defense_id (str):\n            EH IDs of the opposing team's defensemen that are on the ice during the event,\n            e.g., JAMIE.OLEKSIAK, WILLIAM.BORGEN\n        opp_goalie (str):\n            Name of the opposing goalie for the event team, e.g., PHILIPP.GRUBAUER\n        opp_goalie_id (str):\n            Identifier for the opposing goalie that can be used to match with Evolving Hockey data,\n            e.g., PHILIPP.GRUBAUER\n        toi (float):\n            Time on-ice in minutes, e.g., 1.616667\n        g (float):\n            Number of individual goals scored, e.g, 0\n        a1 (float):\n            Number of primary assists, e.g, 0\n        a2 (float):\n            Number of secondary assists, e.g, 0\n        isf (float):\n            Number of indiviudal shots registered, e.g., 0\n        iff (float):\n            Number of indiviudal fenwick events registered, e.g., 0\n        icf (float):\n            Number of indiviudal corsi events registered, e.g., 0\n        ixg (float):\n            Sum value of individual predicted goals (xG), e.g., 0\n        gax (float):\n            Sum value of goals scored above expected, e.g., 0\n        ihdg (float):\n            Sum value of individual high-danger goals scored, e.g., 0\n        ihdf (float):\n            Sum value of individual high-danger fenwick events registered, e.g., 0\n        ihdsf (float):\n            Sum value of individual high-danger shots taken, e.g., 0\n        ihdm (float):\n            Sum value of individual high-danger shots missed, e.g., 0\n        imsf (float):\n            Sum value of individual missed shots, 0\n        isb (float):\n            Sum value of shots taken that were ultimately blocked, e.g., 0\n        ibs (float):\n            Sum value of opponent shots taken that the player ultimately blocked, e.g., 0\n        igive (float):\n            Sum of individual giveaways, e.g., 0\n        itake (float):\n            Sum of individual takeaways, e.g., 0\n        ihf (float):\n            Sum of individual hits for, e.g., 0\n        iht (float):\n            Sum of individual hits taken, e.g., 0\n        ifow (float):\n            Sum of individual faceoffs won, e.g., 0\n        ifol (float):\n            Sum of individual faceoffs lost, e.g., 0\n        iozfw (float):\n            Sum of individual faceoffs won in offensive zone, e.g., 0\n        iozfl (float):\n            Sum of individual faceoffs lost in offensive zone, e.g., 0\n        inzfw (float):\n            Sum of individual faceoffs won in neutral zone, e.g., 0\n        inzfl (float):\n            Sum of individual faceoffs lost in neutral zone, e.g., 0\n        idzfw (float):\n            Sum of individual faceoffs won in defensive zone, e.g., 0\n        idzfl (float):\n            Sum of individual faceoffs lost in defensive zone, e.g., 0\n        a1_xg (float):\n            Sum of xG from primary assists, e.g., 0\n        a2_xg (float):\n            Sum of xG from secondary assists, e.g., 0\n        ipent0 (float):\n            Sum of individual 0-minute penalties taken, e.g., 0\n        ipent2 (float):\n            Sum of individual 2-minute penalties taken, e.g., 0\n        ipent4 (float):\n            Sum of individual 4-minute penalties taken, e.g., 0\n        ipent5 (float):\n            Sum of individual 5-minute penalties taken, e.g., 0\n        ipent10 (float):\n            Sum of individual 10-minute penalties taken, e.g., 0\n        ipend0 (float):\n            Sum of individual 0-minute penalties drawn, e.g., 0\n        ipend2 (float):\n            Sum of individual 2-minute penalties drawn, e.g., 0\n        ipend4 (float):\n            Sum of individual 4-minute penalties drawn, e.g., 0\n        ipend5 (float):\n            Sum of individual 5-minute penalties drawn, e.g., 0\n        ipend10 (float):\n            Sum of individual 10-minute penalties drawn, e.g., 0\n        ozs (float):\n            Sum of changes with offensive zone starts, e.g., 0\n        nzs (float):\n            Sum of changes with neutral zone starts, e.g., 0\n        dzs (float):\n            Sum of changes with defensive zone starts, e.g., 1\n        otf (float):\n            Sum of changes on-the-fly, e.g., 0\n        gf (float):\n            Sum of goals scored while player is on-ice, e.g., 0\n        gf_adj (float):\n            Sum of venue- and score-adjusted goals scored while player is on-ice, e.g., 0\n        hdgf (float):\n            Sum of high-danger goals scored while player is on-ice, e.g., 0\n        ga (float):\n            Sum of goals allowed while player is on-ice, e.g., 0\n        ga_adj (float):\n            Sum of venue- and score-adjusted goals allowed while player is on-ice, e.g., 0\n        hdga (float):\n            Sum of high-danger goals allowed while player is on-ice, e.g., 0\n        xgf (float):\n            Sum of expected goals generated while player is on-ice, e.g., 0.017266\n        xgf_adj (float):\n            Sum of venue- and score-adjusted expected goals generated while player is on-ice, e.g., 0.016472\n        xga (float):\n            Sum of expected goals allowed while player is on-ice, e.g., 0.123475\n        xga_adj (float):\n            Sum of venue- and score-adjusted expected goals allowed while player is on-ice, e.g., 0.129772\n        sf (float):\n            Sum of shots taken while player is on-ice, e.g., 1\n        sf_adj (float):\n            Sum of venue- and score-adjusted shots taken while player is on-ice, e.g., .972\n        hdsf (float):\n            Sum of high-danger shots taken while player is on-ice, e.g., 0\n        sa (float):\n            Sum of shots allowed while player is on-ice, e.g., 0\n        sa_adj (float):\n            Sum of venue- and score-adjusted shots allowed while player is on-ice, e.g., 0\n        hdsa (float):\n            Sum of high-danger shots allowed while player is on-ice, e.g., 0\n        ff (float):\n            Sum of fenwick events generated while player is on-ice, e.g., 1\n        ff_adj (float):\n            Sum of venue- and score-adjusted fenwick events generated while player is on-ice, e.g., 0.968\n        hdff (float):\n            Sum of high-danger fenwick events generated while player is on-ice, e.g., 0\n        fa (float):\n            Sum of fenwick events allowed while player is on-ice, e.g., 1\n        fa_adj (float):\n            Sum of venue- and score-adjusted fenwick events allowed while player is on-ice, e.g., 1.034\n        hdfa (float):\n            Sum of high-danger fenwick events allowed while player is on-ice, e.g., 1\n        cf (float):\n            Sum of corsi events generated while player is on-ice, e.g., 1\n        cf_adj (float):\n            Sum of venue- and score-adjusted corsi events generated while player is on-ice, e.g., 0.970\n        ca (float):\n            Sum of corsi events allowed while player is on-ice, e.g., 2\n        ca_adj (float):\n            Sum of venue- and score-adjusted corsi events allowed while player is on-ice, e.g., 2.064\n        bsf (float):\n            Sum of shots taken that were ultimately blocked while player is on-ice, e.g., 0\n        bsa (float):\n            Sum of shots allowed that were ultimately blocked while player is on-ice, e.g., 1\n        msf (float):\n            Sum of shots taken that missed net while player is on-ice, e.g., 0\n        hdmsf (float):\n            Sum of high-danger shots taken that missed net while player is on-ice, e.g., 0\n        msa (float):\n            Sum of shots allowed that missed net while player is on-ice, e.g., 1\n        hdmsa (float):\n            Sum of high-danger shots allowed that missed net while player is on-ice, e.g., 1\n        hf (float):\n            Sum of hits dished out while player is on-ice, e.g., 0\n        ht (float):\n            Sum of hits taken while player is on-ice, e.g., 0\n        ozf (float):\n            Sum of offensive zone faceoffs that occur while player is on-ice, e.g., 0\n        nzf (float):\n            Sum of neutral zone faceoffs that occur while player is on-ice, e.g., 0\n        dzf (float):\n            Sum of defensive zone faceoffs that occur while player is on-ice, e.g., 1\n        fow (float):\n            Sum of faceoffs won while player is on-ice, e.g., 1\n        fol (float):\n            Sum of faceoffs lost while player is on-ice, e.g., 0\n        ozfw (float):\n            Sum of offensive zone faceoffs won while player is on-ice, e.g., 0\n        ozfl (float):\n            Sum of offensive zone faceoffs lost while player is on-ice, e.g., 1\n        nzfw (float):\n            Sum of neutral zone faceoffs won while player is on-ice, e.g., 0\n        nzfl (float):\n            Sum of neutral zone faceoffs lost while player is on-ice, e.g., 0\n        dzfw (float):\n            Sum of defensive zone faceoffs won while player is on-ice, e.g., 1\n        dzfl (float):\n            Sum of defensive zone faceoffs lost while player is on-ice, e.g., 0\n        pent0 (float):\n            Sum of individual 0-minute penalties taken while player is on-ice, e.g., 0\n        pent2 (float):\n            Sum of individual 2-minute penalties taken while player is on-ice, e.g., 0\n        pent4 (float):\n            Sum of individual 4-minute penalties taken while player is on-ice, e.g., 0\n        pent5 (float):\n            Sum of individual 5-minute penalties taken while player is on-ice, e.g., 0\n        pent10 (float):\n            Sum of individual 10-minute penalties taken while player is on-ice, e.g., 0\n        pend0 (float):\n            Sum of individual 0-minute penalties drawn while player is on-ice, e.g., 0\n        pend2 (float):\n            Sum of individual 2-minute penalties drawn while player is on-ice, e.g., 0\n        pend4 (float):\n            Sum of individual 4-minute penalties drawn while player is on-ice, e.g., 0\n        pend5 (float):\n            Sum of individual 5-minute penalties drawn while player is on-ice, e.g., 0\n        pend10 (float):\n            Sum of individual 10-minute penalties drawn while player is on-ice, e.g., 0\n\n    Examples:\n        Basic play-by-play DataFrame\n        &gt;&gt;&gt; shifts_raw = pd.read_csv(\"./raw_shifts.csv\")\n        &gt;&gt;&gt; pbp_raw = pd.read_csv(\"./raw_pbp.csv\")\n        &gt;&gt;&gt; pbp = prep_pbp(pbp_raw, shifts_raw)\n\n        Basic game-level stats, with no teammates or opposition\n        &gt;&gt;&gt; stats = prep_stats(pbp)\n\n        Period-level stats, grouped by teammates\n        &gt;&gt;&gt; stats = prep_stats(pbp, level=\"period\", teammates=True)\n\n        Session-level (e.g., regular seasion) stats, grouped by teammates and opposition\n        &gt;&gt;&gt; stats = prep_stats(pbp, level=\"session\", teammates=True, opposition=True)\n\n    \"\"\"\n    with ChickenProgress(disable=disable_progress_bar) as progress:\n        pbar_message = \"Prepping stats data...\"\n\n        stats_task = progress.add_task(pbar_message, total=1)\n\n        ind = prep_ind(pbp, level, score, teammates, opposition)\n\n        oi = prep_oi(pbp, level, score, teammates, opposition)\n\n        zones = prep_zones(pbp, level, score, teammates, opposition)\n\n        merge_cols = [\n            \"season\",\n            \"session\",\n            \"game_id\",\n            \"game_date\",\n            \"player\",\n            \"player_id\",\n            \"position\",\n            \"team\",\n            \"opp_team\",\n            \"strength_state\",\n            \"score_state\",\n            \"game_period\",\n            \"forwards\",\n            \"forwards_id\",\n            \"defense\",\n            \"defense_id\",\n            \"own_goalie\",\n            \"own_goalie_id\",\n            \"opp_forwards\",\n            \"opp_forwards_id\",\n            \"opp_defense\",\n            \"opp_defense_id\",\n            \"opp_goalie\",\n            \"opp_goalie_id\",\n        ]\n\n        merge_cols = [x for x in merge_cols if x in ind.columns and x in oi.columns and x in zones.columns]\n\n        stats = oi.merge(ind, how=\"left\", left_on=merge_cols, right_on=merge_cols).fillna(0)\n\n        stats = stats.merge(zones, how=\"left\", left_on=merge_cols, right_on=merge_cols).fillna(0)\n\n        stats = stats.loc[stats.toi &gt; 0].reset_index(drop=True).copy()\n\n        columns = [x for x in StatSchema.dtypes if x in stats.columns]\n\n        stats = StatSchema.validate(stats[columns])\n\n        pbar_message = \"Finished prepping stats data\"\n\n        progress.update(stats_task, description=pbar_message, advance=1, refresh=True)\n\n    return stats\n</code></pre>"},{"location":"reference/evolving_hockey/stats/#evolving_hockey.stats.prep_lines","title":"prep_lines","text":"<pre><code>prep_lines(\n    pbp,\n    position=\"f\",\n    level=\"game\",\n    score=False,\n    teammates=False,\n    opposition=False,\n    disable_progress_bar=False,\n)\n</code></pre> <p>Prepares a line stats dataframe using EvolvingHockey data.</p> <p>Aggregates to desired level. Capable of returning cuts that account for strength state, period, score state, teammates, and opposition.</p> <p>Returns a Pandas DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>pbp</code> <code>DataFrame</code> <p>Dataframe from the prep_pbp function with the default columns argument</p> required <code>position</code> <code>str</code> <p>Position to aggregate, forwards or defense, e.g., 'f'</p> <code>'f'</code> <code>level</code> <code>str</code> <p>Level to aggregate stats, e.g., 'game'</p> <code>'game'</code> <code>score</code> <code>bool</code> <p>Whether to aggregate to score state level</p> <code>False</code> <code>teammates</code> <code>bool</code> <p>Whether to account for teammates when aggregating</p> <code>False</code> <code>opposition</code> <code>bool</code> <p>Whether to account for opposition when aggregating</p> <code>False</code> <code>disable_progress_bar</code> <code>bool</code> <p>Whether to disable progress bar</p> <code>False</code> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>8-digit season code, e.g., 20232024</p> <code>session</code> <code>str</code> <p>Regular season or playoffs, e.g., R</p> <code>game_id</code> <code>int</code> <p>10-digit game identifier, e.g., 2023020015</p> <code>game_date</code> <code>str</code> <p>Date of game in Eastern time-zone, e.g., 2023-10-12</p> <code>team</code> <code>str</code> <p>3-letter abbreviation of the line's team, e.g., NSH</p> <code>opp_team</code> <code>str</code> <p>3-letter abbreviation of the opposing team, e.g., SEA</p> <code>strength_state</code> <code>str</code> <p>Strength state from the perspective of the event team, e.g., 5v5</p> <code>score_state</code> <code>str</code> <p>Score state from the perspective of the event team, e.g., 0v0</p> <code>game_period</code> <code>int</code> <p>Game period, e.g., 1</p> <code>forwards</code> <code>str</code> <p>Names of the event team's forwards that are on the ice during the event, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY</p> <code>forwards_id</code> <code>str</code> <p>EH IDs of the event team's forwards that are on the ice during the event, e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY</p> <code>defense</code> <code>str</code> <p>Names of the event team's defensemen that are on the ice during the event, e.g., ALEX.CARRIER, RYAN.MCDONAGH</p> <code>defense_id</code> <code>str</code> <p>EH IDs of the event team's defensemen that are on the ice during the event, e.g., ALEX.CARRIER, RYAN.MCDONAGH</p> <code>own_goalie</code> <code>str</code> <p>Name of the goalie for the event team, e.g., JUUSE.SAROS</p> <code>own_goalie_id</code> <code>str</code> <p>Identifier for the event team goalie that can be used to match with Evolving Hockey data, e.g., JUUSE.SAROS</p> <code>opp_forwards</code> <code>str</code> <p>Names of the opponent's forwards that are on the ice during the event, e.g., JARED.MCCANN, JORDAN.EBERLE, MATTY.BENIERS</p> <code>opp_forwards_id</code> <code>str</code> <p>EH IDs of the event team's forwards that are on the ice during the event, e.g., JARED.MCCANN, JORDAN.EBERLE, MATTY.BENIERS</p> <code>opp_defense</code> <code>str</code> <p>Names of the opposing team's defensemen that are on the ice during the event, e.g., JAMIE.OLEKSIAK, WILLIAM.BORGEN</p> <code>opp_defense_id</code> <code>str</code> <p>EH IDs of the opposing team's defensemen that are on the ice during the event, e.g., JAMIE.OLEKSIAK, WILLIAM.BORGEN</p> <code>opp_goalie</code> <code>str</code> <p>Name of the opposing goalie for the event team, e.g., PHILIPP.GRUBAUER</p> <code>opp_goalie_id</code> <code>str</code> <p>Identifier for the opposing goalie that can be used to match with Evolving Hockey data, e.g., PHILIPP.GRUBAUER</p> <code>toi</code> <code>float</code> <p>Time on-ice in minutes, e.g., 1.616667</p> <code>gf</code> <code>float</code> <p>Sum of goals scored while line is on-ice, e.g., 0</p> <code>gf_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted goals scored while line is on-ice, e.g., 0</p> <code>hdgf</code> <code>float</code> <p>Sum of high-danger goals scored while line is on-ice, e.g., 0</p> <code>ga</code> <code>float</code> <p>Sum of goals allowed while line is on-ice, e.g., 0</p> <code>ga_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted goals allowed while line is on-ice, e.g., 0</p> <code>hdga</code> <code>float</code> <p>Sum of high-danger goals allowed while line is on-ice, e.g., 0</p> <code>xgf</code> <code>float</code> <p>Sum of expected goals generated while line is on-ice, e.g., 0.017266</p> <code>xgf_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted expected goals generated while line is on-ice, e.g., 0.016472</p> <code>xga</code> <code>float</code> <p>Sum of expected goals allowed while line is on-ice, e.g., 0.123475</p> <code>xga_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted expected goals allowed while line is on-ice, e.g., 0.129772</p> <code>sf</code> <code>float</code> <p>Sum of shots taken while line is on-ice, e.g., 1</p> <code>sf_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted shots taken while line is on-ice, e.g., .972</p> <code>hdsf</code> <code>float</code> <p>Sum of high-danger shots taken while line is on-ice, e.g., 0</p> <code>sa</code> <code>float</code> <p>Sum of shots allowed while line is on-ice, e.g., 0</p> <code>sa_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted shots allowed while line is on-ice, e.g., 0</p> <code>hdsa</code> <code>float</code> <p>Sum of high-danger shots allowed while line is on-ice, e.g., 0</p> <code>ff</code> <code>float</code> <p>Sum of fenwick events generated while line is on-ice, e.g., 1</p> <code>ff_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted fenwick events generated while line is on-ice, e.g., 0.968</p> <code>hdff</code> <code>float</code> <p>Sum of high-danger fenwick events generated while line is on-ice, e.g., 0</p> <code>fa</code> <code>float</code> <p>Sum of fenwick events allowed while line is on-ice, e.g., 1</p> <code>fa_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted fenwick events allowed while line is on-ice, e.g., 1.034</p> <code>hdfa</code> <code>float</code> <p>Sum of high-danger fenwick events allowed while line is on-ice, e.g., 1</p> <code>cf</code> <code>float</code> <p>Sum of corsi events generated while line is on-ice, e.g., 1</p> <code>cf_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted corsi events generated while line is on-ice, e.g., 0.970</p> <code>ca</code> <code>float</code> <p>Sum of corsi events allowed while line is on-ice, e.g., 2</p> <code>ca_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted corsi events allowed while line is on-ice, e.g., 2.064</p> <code>bsf</code> <code>float</code> <p>Sum of shots taken that were ultimately blocked while line is on-ice, e.g., 0</p> <code>bsa</code> <code>float</code> <p>Sum of shots allowed that were ultimately blocked while line is on-ice, e.g., 1</p> <code>msf</code> <code>float</code> <p>Sum of shots taken that missed net while line is on-ice, e.g., 0</p> <code>hdmsf</code> <code>float</code> <p>Sum of high-danger shots taken that missed net while line is on-ice, e.g., 0</p> <code>msa</code> <code>float</code> <p>Sum of shots allowed that missed net while line is on-ice, e.g., 1</p> <code>hdmsa</code> <code>float</code> <p>Sum of high-danger shots allowed that missed net while line is on-ice, e.g., 1</p> <code>hf</code> <code>float</code> <p>Sum of hits dished out while line is on-ice, e.g., 0</p> <code>ht</code> <code>float</code> <p>Sum of hits taken while line is on-ice, e.g., 0</p> <code>ozf</code> <code>float</code> <p>Sum of offensive zone faceoffs that occur while line is on-ice, e.g., 0</p> <code>nzf</code> <code>float</code> <p>Sum of neutral zone faceoffs that occur while line is on-ice, e.g., 0</p> <code>dzf</code> <code>float</code> <p>Sum of defensive zone faceoffs that occur while line is on-ice, e.g., 1</p> <code>fow</code> <code>float</code> <p>Sum of faceoffs won while line is on-ice, e.g., 1</p> <code>fol</code> <code>float</code> <p>Sum of faceoffs lost while line is on-ice, e.g., 0</p> <code>ozfw</code> <code>float</code> <p>Sum of offensive zone faceoffs won while line is on-ice, e.g., 0</p> <code>ozfl</code> <code>float</code> <p>Sum of offensive zone faceoffs lost while line is on-ice, e.g., 1</p> <code>nzfw</code> <code>float</code> <p>Sum of neutral zone faceoffs won while line is on-ice, e.g., 0</p> <code>nzfl</code> <code>float</code> <p>Sum of neutral zone faceoffs lost while line is on-ice, e.g., 0</p> <code>dzfw</code> <code>float</code> <p>Sum of defensive zone faceoffs won while line is on-ice, e.g., 1</p> <code>dzfl</code> <code>float</code> <p>Sum of defensive zone faceoffs lost while line is on-ice, e.g., 0</p> <code>pent0</code> <code>float</code> <p>Sum of individual 0-minute penalties taken while line is on-ice, e.g., 0</p> <code>pent2</code> <code>float</code> <p>Sum of individual 2-minute penalties taken while line is on-ice, e.g., 0</p> <code>pent4</code> <code>float</code> <p>Sum of individual 4-minute penalties taken while line is on-ice, e.g., 0</p> <code>pent5</code> <code>float</code> <p>Sum of individual 5-minute penalties taken while line is on-ice, e.g., 0</p> <code>pent10</code> <code>float</code> <p>Sum of individual 10-minute penalties taken while line is on-ice, e.g., 0</p> <code>pend0</code> <code>float</code> <p>Sum of individual 0-minute penalties drawn while line is on-ice, e.g., 0</p> <code>pend2</code> <code>float</code> <p>Sum of individual 2-minute penalties drawn while line is on-ice, e.g., 0</p> <code>pend4</code> <code>float</code> <p>Sum of individual 4-minute penalties drawn while line is on-ice, e.g., 0</p> <code>pend5</code> <code>float</code> <p>Sum of individual 5-minute penalties drawn while line is on-ice, e.g., 0</p> <code>pend10</code> <code>float</code> <p>Sum of individual 10-minute penalties drawn while line is on-ice, e.g., 0</p> <p>Examples:</p> <p>Basic play-by-play DataFrame</p> <pre><code>&gt;&gt;&gt; shifts_raw = pd.read_csv(\"./raw_shifts.csv\")\n&gt;&gt;&gt; pbp_raw = pd.read_csv(\"./raw_pbp.csv\")\n&gt;&gt;&gt; pbp = prep_pbp(pbp_raw, shifts_raw)\n</code></pre> <p>Basic game-level stats for forwards, with no teammates or opposition</p> <pre><code>&gt;&gt;&gt; lines = prep_lines(pbp, position=\"f\")\n</code></pre> <p>Period-level stats for defense, grouped by teammates</p> <pre><code>&gt;&gt;&gt; lines = prep_lines(pbp, position=\"d\", level=\"period\", teammates=True)\n</code></pre> <p>Session-level (e.g., regular seasion) stats, grouped by teammates and opposition</p> <pre><code>&gt;&gt;&gt; lines = prep_lines(pbp, position=\"f\", level=\"session\", teammates=True, opposition=True)\n</code></pre> Source code in <code>src/chickenstats/evolving_hockey/stats.py</code> <pre><code>def prep_lines(\n    pbp: pd.DataFrame,\n    position: Literal[\"f\", \"d\"] = \"f\",\n    level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n    score: bool = False,\n    teammates: bool = False,\n    opposition: bool = False,\n    disable_progress_bar: bool = False,\n):\n    \"\"\"Prepares a line stats dataframe using EvolvingHockey data.\n\n    Aggregates to desired level. Capable of returning cuts that account for strength state,\n    period, score state, teammates, and opposition.\n\n    Returns a Pandas DataFrame.\n\n    Parameters:\n        pbp (pd.DataFrame):\n            Dataframe from the prep_pbp function with the default columns argument\n        position (str):\n            Position to aggregate, forwards or defense, e.g., 'f'\n        level (str):\n            Level to aggregate stats, e.g., 'game'\n        score (bool):\n            Whether to aggregate to score state level\n        teammates (bool):\n            Whether to account for teammates when aggregating\n        opposition (bool):\n            Whether to account for opposition when aggregating\n        disable_progress_bar (bool):\n            Whether to disable progress bar\n\n    Returns:\n        season (int):\n            8-digit season code, e.g., 20232024\n        session (str):\n            Regular season or playoffs, e.g., R\n        game_id (int):\n            10-digit game identifier, e.g., 2023020015\n        game_date (str):\n            Date of game in Eastern time-zone, e.g., 2023-10-12\n        team (str):\n            3-letter abbreviation of the line's team, e.g., NSH\n        opp_team (str):\n            3-letter abbreviation of the opposing team, e.g., SEA\n        strength_state (str):\n            Strength state from the perspective of the event team, e.g., 5v5\n        score_state (str):\n            Score state from the perspective of the event team, e.g., 0v0\n        game_period (int):\n            Game period, e.g., 1\n        forwards (str):\n            Names of the event team's forwards that are on the ice during the event,\n            e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n        forwards_id (str):\n            EH IDs of the event team's forwards that are on the ice during the event,\n            e.g., FILIP.FORSBERG, JUUSO.PARSSINEN, RYAN.O'REILLY\n        defense (str):\n            Names of the event team's defensemen that are on the ice during the event,\n            e.g., ALEX.CARRIER, RYAN.MCDONAGH\n        defense_id (str):\n            EH IDs of the event team's defensemen that are on the ice during the event,\n            e.g., ALEX.CARRIER, RYAN.MCDONAGH\n        own_goalie (str):\n            Name of the goalie for the event team, e.g., JUUSE.SAROS\n        own_goalie_id (str):\n            Identifier for the event team goalie that can be used to match with Evolving Hockey data, e.g., JUUSE.SAROS\n        opp_forwards (str):\n            Names of the opponent's forwards that are on the ice during the event,\n            e.g., JARED.MCCANN, JORDAN.EBERLE, MATTY.BENIERS\n        opp_forwards_id (str):\n            EH IDs of the event team's forwards that are on the ice during the event,\n            e.g., JARED.MCCANN, JORDAN.EBERLE, MATTY.BENIERS\n        opp_defense (str):\n            Names of the opposing team's defensemen that are on the ice during the event,\n            e.g., JAMIE.OLEKSIAK, WILLIAM.BORGEN\n        opp_defense_id (str):\n            EH IDs of the opposing team's defensemen that are on the ice during the event,\n            e.g., JAMIE.OLEKSIAK, WILLIAM.BORGEN\n        opp_goalie (str):\n            Name of the opposing goalie for the event team, e.g., PHILIPP.GRUBAUER\n        opp_goalie_id (str):\n            Identifier for the opposing goalie that can be used to match with Evolving Hockey data,\n            e.g., PHILIPP.GRUBAUER\n        toi (float):\n            Time on-ice in minutes, e.g., 1.616667\n        gf (float):\n            Sum of goals scored while line is on-ice, e.g., 0\n        gf_adj (float):\n            Sum of venue- and score-adjusted goals scored while line is on-ice, e.g., 0\n        hdgf (float):\n            Sum of high-danger goals scored while line is on-ice, e.g., 0\n        ga (float):\n            Sum of goals allowed while line is on-ice, e.g., 0\n        ga_adj (float):\n            Sum of venue- and score-adjusted goals allowed while line is on-ice, e.g., 0\n        hdga (float):\n            Sum of high-danger goals allowed while line is on-ice, e.g., 0\n        xgf (float):\n            Sum of expected goals generated while line is on-ice, e.g., 0.017266\n        xgf_adj (float):\n            Sum of venue- and score-adjusted expected goals generated while line is on-ice, e.g., 0.016472\n        xga (float):\n            Sum of expected goals allowed while line is on-ice, e.g., 0.123475\n        xga_adj (float):\n            Sum of venue- and score-adjusted expected goals allowed while line is on-ice, e.g., 0.129772\n        sf (float):\n            Sum of shots taken while line is on-ice, e.g., 1\n        sf_adj (float):\n            Sum of venue- and score-adjusted shots taken while line is on-ice, e.g., .972\n        hdsf (float):\n            Sum of high-danger shots taken while line is on-ice, e.g., 0\n        sa (float):\n            Sum of shots allowed while line is on-ice, e.g., 0\n        sa_adj (float):\n            Sum of venue- and score-adjusted shots allowed while line is on-ice, e.g., 0\n        hdsa (float):\n            Sum of high-danger shots allowed while line is on-ice, e.g., 0\n        ff (float):\n            Sum of fenwick events generated while line is on-ice, e.g., 1\n        ff_adj (float):\n            Sum of venue- and score-adjusted fenwick events generated while line is on-ice, e.g., 0.968\n        hdff (float):\n            Sum of high-danger fenwick events generated while line is on-ice, e.g., 0\n        fa (float):\n            Sum of fenwick events allowed while line is on-ice, e.g., 1\n        fa_adj (float):\n            Sum of venue- and score-adjusted fenwick events allowed while line is on-ice, e.g., 1.034\n        hdfa (float):\n            Sum of high-danger fenwick events allowed while line is on-ice, e.g., 1\n        cf (float):\n            Sum of corsi events generated while line is on-ice, e.g., 1\n        cf_adj (float):\n            Sum of venue- and score-adjusted corsi events generated while line is on-ice, e.g., 0.970\n        ca (float):\n            Sum of corsi events allowed while line is on-ice, e.g., 2\n        ca_adj (float):\n            Sum of venue- and score-adjusted corsi events allowed while line is on-ice, e.g., 2.064\n        bsf (float):\n            Sum of shots taken that were ultimately blocked while line is on-ice, e.g., 0\n        bsa (float):\n            Sum of shots allowed that were ultimately blocked while line is on-ice, e.g., 1\n        msf (float):\n            Sum of shots taken that missed net while line is on-ice, e.g., 0\n        hdmsf (float):\n            Sum of high-danger shots taken that missed net while line is on-ice, e.g., 0\n        msa (float):\n            Sum of shots allowed that missed net while line is on-ice, e.g., 1\n        hdmsa (float):\n            Sum of high-danger shots allowed that missed net while line is on-ice, e.g., 1\n        hf (float):\n            Sum of hits dished out while line is on-ice, e.g., 0\n        ht (float):\n            Sum of hits taken while line is on-ice, e.g., 0\n        ozf (float):\n            Sum of offensive zone faceoffs that occur while line is on-ice, e.g., 0\n        nzf (float):\n            Sum of neutral zone faceoffs that occur while line is on-ice, e.g., 0\n        dzf (float):\n            Sum of defensive zone faceoffs that occur while line is on-ice, e.g., 1\n        fow (float):\n            Sum of faceoffs won while line is on-ice, e.g., 1\n        fol (float):\n            Sum of faceoffs lost while line is on-ice, e.g., 0\n        ozfw (float):\n            Sum of offensive zone faceoffs won while line is on-ice, e.g., 0\n        ozfl (float):\n            Sum of offensive zone faceoffs lost while line is on-ice, e.g., 1\n        nzfw (float):\n            Sum of neutral zone faceoffs won while line is on-ice, e.g., 0\n        nzfl (float):\n            Sum of neutral zone faceoffs lost while line is on-ice, e.g., 0\n        dzfw (float):\n            Sum of defensive zone faceoffs won while line is on-ice, e.g., 1\n        dzfl (float):\n            Sum of defensive zone faceoffs lost while line is on-ice, e.g., 0\n        pent0 (float):\n            Sum of individual 0-minute penalties taken while line is on-ice, e.g., 0\n        pent2 (float):\n            Sum of individual 2-minute penalties taken while line is on-ice, e.g., 0\n        pent4 (float):\n            Sum of individual 4-minute penalties taken while line is on-ice, e.g., 0\n        pent5 (float):\n            Sum of individual 5-minute penalties taken while line is on-ice, e.g., 0\n        pent10 (float):\n            Sum of individual 10-minute penalties taken while line is on-ice, e.g., 0\n        pend0 (float):\n            Sum of individual 0-minute penalties drawn while line is on-ice, e.g., 0\n        pend2 (float):\n            Sum of individual 2-minute penalties drawn while line is on-ice, e.g., 0\n        pend4 (float):\n            Sum of individual 4-minute penalties drawn while line is on-ice, e.g., 0\n        pend5 (float):\n            Sum of individual 5-minute penalties drawn while line is on-ice, e.g., 0\n        pend10 (float):\n            Sum of individual 10-minute penalties drawn while line is on-ice, e.g., 0\n\n    Examples:\n        Basic play-by-play DataFrame\n        &gt;&gt;&gt; shifts_raw = pd.read_csv(\"./raw_shifts.csv\")\n        &gt;&gt;&gt; pbp_raw = pd.read_csv(\"./raw_pbp.csv\")\n        &gt;&gt;&gt; pbp = prep_pbp(pbp_raw, shifts_raw)\n\n        Basic game-level stats for forwards, with no teammates or opposition\n        &gt;&gt;&gt; lines = prep_lines(pbp, position=\"f\")\n\n        Period-level stats for defense, grouped by teammates\n        &gt;&gt;&gt; lines = prep_lines(pbp, position=\"d\", level=\"period\", teammates=True)\n\n        Session-level (e.g., regular seasion) stats, grouped by teammates and opposition\n        &gt;&gt;&gt; lines = prep_lines(pbp, position=\"f\", level=\"session\", teammates=True, opposition=True)\n\n    \"\"\"\n    with ChickenProgress(disable=disable_progress_bar) as progress:\n        pbar_message = \"Prepping lines data...\"\n\n        lines_task = progress.add_task(pbar_message, total=1)\n\n        # Creating the \"for\" dataframe\n\n        # Accounting for desired level of aggregation\n\n        if level == \"session\" or level == \"season\":\n            group_base = [\"season\", \"session\", \"event_team\", \"strength_state\"]\n\n        if level == \"game\":\n            group_base = [\"season\", \"game_id\", \"game_date\", \"session\", \"event_team\", \"opp_team\", \"strength_state\"]\n\n        if level == \"period\":\n            group_base = [\n                \"season\",\n                \"game_id\",\n                \"game_date\",\n                \"session\",\n                \"event_team\",\n                \"opp_team\",\n                \"game_period\",\n                \"strength_state\",\n            ]\n\n        # Accounting for score state\n\n        if score is True:\n            group_base = group_base + [\"score_state\"]\n\n        # Accounting for desired position\n\n        group_list = group_base + [f\"event_on_{position}\", f\"event_on_{position}_id\"]\n\n        # Accounting for teammates\n\n        if teammates is True:\n            if position == \"f\":\n                group_list = group_list + [\"event_on_d\", \"event_on_d_id\", \"event_on_g\", \"event_on_g_id\"]\n\n            if position == \"d\":\n                group_list = group_list + [\"event_on_f\", \"event_on_f_id\", \"event_on_g\", \"event_on_g_id\"]\n\n        # Accounting for opposition\n\n        if opposition is True:\n            group_list = group_list + [\"opp_on_f\", \"opp_on_f_id\", \"opp_on_d\", \"opp_on_d_id\", \"opp_on_g\", \"opp_on_g_id\"]\n\n            if \"opp_team\" not in group_list:\n                group_list.append(\"opp_team\")\n\n        # Creating dictionary of statistics for the groupby function\n\n        stats = [\n            \"pred_goal\",\n            \"pred_goal_adj\",\n            \"corsi\",\n            \"corsi_adj\",\n            \"fenwick\",\n            \"fenwick_adj\",\n            \"goal\",\n            \"goal_adj\",\n            \"miss\",\n            \"block\",\n            \"shot\",\n            \"shot_adj\",\n            \"hd_goal\",\n            \"hd_shot\",\n            \"hd_fenwick\",\n            \"hd_miss\",\n            \"event_length\",\n            \"fac\",\n            \"ozf\",\n            \"nzf\",\n            \"dzf\",\n            \"hit\",\n            \"give\",\n            \"take\",\n            \"pen0\",\n            \"pen2\",\n            \"pen4\",\n            \"pen5\",\n            \"pen10\",\n        ]\n\n        agg_stats = {x: \"sum\" for x in stats if x in pbp.columns}\n\n        # Aggregating the \"for\" dataframe\n\n        lines_f = pbp.groupby(group_list, as_index=False, dropna=False).agg(agg_stats)\n\n        # Creating the dictionary to change column names\n\n        columns = [\n            \"xgf\",\n            \"xgf_adj\",\n            \"cf\",\n            \"cf_adj\",\n            \"ff\",\n            \"ff_adj\",\n            \"gf\",\n            \"gf_adj\",\n            \"msf\",\n            \"bsf\",\n            \"sf\",\n            \"sf_adj\",\n            \"hdgf\",\n            \"hdsf\",\n            \"hdff\",\n            \"hdmsf\",\n            \"toi\",\n            \"fow\",\n            \"ozfw\",\n            \"nzfw\",\n            \"dzfw\",\n            \"hf\",\n            \"give\",\n            \"take\",\n            \"pent0\",\n            \"pent2\",\n            \"pent4\",\n            \"pent5\",\n            \"pent10\",\n        ]\n\n        columns = dict(zip(stats, columns, strict=False))\n\n        # Accounting for positions\n\n        columns.update(\n            {\n                \"event_on_f\": \"forwards\",\n                \"event_on_f_id\": \"forwards_id\",\n                \"event_team\": \"team\",\n                \"event_on_d\": \"defense\",\n                \"event_on_d_id\": \"defense_id\",\n                \"event_on_g\": \"own_goalie\",\n                \"event_on_g_id\": \"own_goalie_id\",\n                \"opp_on_f\": \"opp_forwards\",\n                \"opp_on_f_id\": \"opp_forwards_id\",\n                \"opp_on_d\": \"opp_defense\",\n                \"opp_on_d_id\": \"opp_defense_id\",\n                \"opp_on_g\": \"opp_goalie\",\n                \"opp_on_g_id\": \"opp_goalie_id\",\n            }\n        )\n\n        # columns = {k: v for k, v in columns.items() if k in lines_f.columns}\n\n        lines_f = lines_f.rename(columns=columns)\n\n        cols = [\n            \"forwards\",\n            \"forwards_id\",\n            \"defense\",\n            \"defense_id\",\n            \"own_goalie\",\n            \"own_goalie_id\",\n            \"opp_forwards\",\n            \"opp_forwards_id\",\n            \"opp_defense\",\n            \"opp_defense_id\",\n            \"opp_goalie\",\n            \"opp_goalie_id\",\n        ]\n\n        cols = [x for x in cols if x in lines_f]\n\n        for col in cols:\n            lines_f[col] = lines_f[col].fillna(\"EMPTY\")\n\n        # Creating the against dataframe\n\n        # Accounting for desired level of aggregation\n\n        if level == \"session\" or level == \"season\":\n            group_base = [\"season\", \"session\", \"opp_team\", \"opp_strength_state\"]\n\n        if level == \"game\":\n            group_base = [\"season\", \"game_id\", \"game_date\", \"session\", \"event_team\", \"opp_team\", \"opp_strength_state\"]\n\n        if level == \"period\":\n            group_base = [\n                \"season\",\n                \"game_id\",\n                \"game_date\",\n                \"session\",\n                \"event_team\",\n                \"opp_team\",\n                \"game_period\",\n                \"opp_strength_state\",\n            ]\n\n        # Accounting for score state\n\n        if score is True:\n            group_base = group_base + [\"opp_score_state\"]\n\n        # Accounting for desired position\n\n        group_list = group_base + [f\"opp_on_{position}\", f\"opp_on_{position}_id\"]\n\n        # Accounting for teammates\n\n        if teammates is True:\n            if position == \"f\":\n                group_list = group_list + [\"opp_on_d\", \"opp_on_d_id\", \"opp_on_g\", \"opp_on_g_id\"]\n\n            if position == \"d\":\n                group_list = group_list + [\"opp_on_f\", \"opp_on_f_id\", \"opp_on_g\", \"opp_on_g_id\"]\n\n        # Accounting for opposition\n\n        if opposition is True:\n            group_list = group_list + [\n                \"event_on_f\",\n                \"event_on_f_id\",\n                \"event_on_d\",\n                \"event_on_d_id\",\n                \"event_on_g\",\n                \"event_on_g_id\",\n            ]\n\n            if \"event_team\" not in group_list:\n                group_list.append(\"event_team\")\n\n        # Creating dictionary of statistics for the groupby function\n\n        stats = [\n            \"pred_goal\",\n            \"pred_goal_adj\",\n            \"corsi\",\n            \"corsi_adj\",\n            \"fenwick\",\n            \"fenwick_adj\",\n            \"goal\",\n            \"goal_adj\",\n            \"miss\",\n            \"block\",\n            \"shot\",\n            \"shot_adj\",\n            \"hd_goal\",\n            \"hd_shot\",\n            \"hd_fenwick\",\n            \"hd_miss\",\n            \"event_length\",\n            \"fac\",\n            \"ozf\",\n            \"nzf\",\n            \"dzf\",\n            \"hit\",\n            \"pen0\",\n            \"pen2\",\n            \"pen4\",\n            \"pen5\",\n            \"pen10\",\n        ]\n\n        agg_stats = {x: \"sum\" for x in stats if x in pbp.columns}\n\n        # Aggregating \"against\" dataframe\n\n        lines_a = pbp.groupby(group_list, as_index=False, dropna=False).agg(agg_stats)\n\n        # Creating the dictionary to change column names\n\n        columns = [\n            \"xga\",\n            \"xga_adj\",\n            \"ca\",\n            \"ca_adj\",\n            \"fa\",\n            \"fa_adj\",\n            \"ga\",\n            \"ga_adj\",\n            \"msa\",\n            \"bsa\",\n            \"sa\",\n            \"sa_adj\",\n            \"hdga\",\n            \"hdsa\",\n            \"hdfa\",\n            \"hdmsa\",\n            \"toi\",\n            \"fol\",\n            \"ozfl\",\n            \"nzfl\",\n            \"dzfl\",\n            \"ht\",\n            \"pend0\",\n            \"pend2\",\n            \"pend4\",\n            \"pend5\",\n            \"pend10\",\n        ]\n\n        columns = dict(zip(stats, columns, strict=False))\n\n        # Accounting for positions\n\n        columns.update(\n            {\n                \"opp_team\": \"team\",\n                \"event_team\": \"opp_team\",\n                \"opp_on_f\": \"forwards\",\n                \"opp_on_f_id\": \"forwards_id\",\n                \"opp_strength_state\": \"strength_state\",\n                \"opp_on_d\": \"defense\",\n                \"opp_on_d_id\": \"defense_id\",\n                \"event_on_f\": \"opp_forwards\",\n                \"event_on_f_id\": \"opp_forwards_id\",\n                \"event_on_d\": \"opp_defense\",\n                \"event_on_d_id\": \"opp_defense_id\",\n                \"opp_score_state\": \"score_state\",\n                \"event_on_g\": \"opp_goalie\",\n                \"event_on_g_id\": \"opp_goalie_id\",\n                \"opp_on_g\": \"own_goalie\",\n                \"opp_on_g_id\": \"own_goalie_id\",\n            }\n        )\n\n        # columns = {k: v for k, v in columns.items() if k in lines_a.columns}\n\n        lines_a = lines_a.rename(columns=columns)\n\n        cols = [\n            \"forwards\",\n            \"forwards_id\",\n            \"defense\",\n            \"defense_id\",\n            \"own_goalie\",\n            \"own_goalie_id\",\n            \"opp_forwards\",\n            \"opp_forwards_id\",\n            \"opp_defense\",\n            \"opp_defense_id\",\n            \"opp_goalie\",\n            \"opp_goalie_id\",\n        ]\n\n        cols = [x for x in cols if x in lines_a]\n\n        for col in cols:\n            lines_a[col] = lines_a[col].fillna(\"EMPTY\")\n\n        # Merging the \"for\" and \"against\" dataframes\n\n        if level == \"session\" or level == \"season\":\n            if position == \"f\":\n                merge_list = [\"season\", \"session\", \"team\", \"strength_state\", \"forwards\", \"forwards_id\"]\n\n            if position == \"d\":\n                merge_list = [\"season\", \"session\", \"team\", \"strength_state\", \"defense\", \"defense_id\"]\n\n        if level == \"game\":\n            if position == \"f\":\n                merge_list = [\n                    \"season\",\n                    \"game_id\",\n                    \"game_date\",\n                    \"session\",\n                    \"team\",\n                    \"opp_team\",\n                    \"strength_state\",\n                    \"forwards\",\n                    \"forwards_id\",\n                ]\n\n            if position == \"d\":\n                merge_list = [\n                    \"season\",\n                    \"game_id\",\n                    \"game_date\",\n                    \"session\",\n                    \"team\",\n                    \"opp_team\",\n                    \"strength_state\",\n                    \"defense\",\n                    \"defense_id\",\n                ]\n\n        if level == \"period\":\n            if position == \"f\":\n                merge_list = [\n                    \"season\",\n                    \"game_id\",\n                    \"game_date\",\n                    \"session\",\n                    \"team\",\n                    \"opp_team\",\n                    \"strength_state\",\n                    \"forwards\",\n                    \"forwards_id\",\n                    \"game_period\",\n                ]\n\n            if position == \"d\":\n                merge_list = [\n                    \"season\",\n                    \"game_id\",\n                    \"game_date\",\n                    \"session\",\n                    \"team\",\n                    \"opp_team\",\n                    \"strength_state\",\n                    \"defense\",\n                    \"defense_id\",\n                    \"game_period\",\n                ]\n\n        if score is True:\n            merge_list.append(\"score_state\")\n\n        if teammates is True:\n            if position == \"f\":\n                merge_list = merge_list + [\"defense\", \"defense_id\", \"own_goalie\", \"own_goalie_id\"]\n\n            if position == \"d\":\n                merge_list = merge_list + [\"forwards\", \"forwards_id\", \"own_goalie\", \"own_goalie_id\"]\n\n        if opposition is True:\n            merge_list = merge_list + [\n                \"opp_forwards\",\n                \"opp_forwards_id\",\n                \"opp_defense\",\n                \"opp_defense_id\",\n                \"opp_goalie\",\n                \"opp_goalie_id\",\n            ]\n\n            if \"opp_team\" not in merge_list:\n                merge_list.insert(3, \"opp_team\")\n\n        lines = lines_f.merge(lines_a, how=\"outer\", on=merge_list, suffixes=(\"_x\", \"\")).fillna(0)\n\n        lines.toi = (lines.toi_x + lines.toi) / 60\n\n        lines = lines.drop(columns=\"toi_x\")\n\n        lines[\"ozf\"] = lines.ozfw + lines.ozfl\n\n        lines[\"nzf\"] = lines.nzfw + lines.nzfl\n\n        lines[\"dzf\"] = lines.dzfw + lines.dzfl\n\n        cols = [x for x in LineSchema.dtypes if x in lines.columns]\n\n        lines = lines[cols]\n\n        lines = lines.loc[lines.toi &gt; 0].reset_index(drop=True).copy()\n\n        lines = LineSchema.validate(lines)\n\n        pbar_message = \"Finished prepping lines data\"\n\n        progress.update(lines_task, description=pbar_message, advance=1, refresh=True)\n\n    return lines\n</code></pre>"},{"location":"reference/evolving_hockey/stats/#evolving_hockey.stats.prep_team","title":"prep_team","text":"<pre><code>prep_team(\n    pbp,\n    level=\"game\",\n    strengths=True,\n    score=False,\n    disable_progress_bar=False,\n)\n</code></pre> <p>Prepares a team stats dataframe using Evolving Hockey data.</p> <p>Aggregates to desired level. Capable of returning cuts that account for strength state, period, and score state. Returns a Pandas DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>pbp</code> <code>DataFrame</code> <p>Dataframe from the prep_pbp function with the default columns argument</p> required <code>level</code> <code>str</code> <p>Level to aggregate stats, e.g., 'game'</p> <code>'game'</code> <code>strengths</code> <code>bool</code> <p>Whether to aggregate to strength state level, e.g., True</p> <code>True</code> <code>score</code> <code>bool</code> <p>Whether to aggregate to score state level</p> <code>False</code> <code>disable_progress_bar</code> <code>bool</code> <p>Whether to disable progress bar</p> <code>False</code> <p>Returns:</p> Name Type Description <code>season</code> <code>int</code> <p>8-digit season code, e.g., 20232024</p> <code>session</code> <code>str</code> <p>Regular season or playoffs, e.g., R</p> <code>game_id</code> <code>int</code> <p>10-digit game identifier, e.g., 2023020044</p> <code>game_date</code> <code>str</code> <p>Date of game in Eastern time-zone, e.g., 2023-10-17</p> <code>team</code> <code>str</code> <p>3-letter abbreviation of the team, e.g., NSH</p> <code>opp_team</code> <code>str</code> <p>3-letter abbreviation of the opposing team, e.g., EDM</p> <code>strength_state</code> <code>str</code> <p>Strength state from the perspective of the event team, e.g., 5v5</p> <code>score_state</code> <code>str</code> <p>Score state from the perspective of the event team, e.g., 1v6</p> <code>game_period</code> <code>int</code> <p>Game period, e.g., 3</p> <code>toi</code> <code>float</code> <p>Time on-ice in minutes, e.g., 18</p> <code>gf</code> <code>float</code> <p>Sum of goals scored, e.g., 0</p> <code>gf_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted goals scored, e.g., 0</p> <code>hdgf</code> <code>float</code> <p>Sum of high-danger goals scored, e.g., 0</p> <code>ga</code> <code>float</code> <p>Sum of goals allowed, e.g., 0</p> <code>ga_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted goals allowed, e.g., 0</p> <code>hdga</code> <code>float</code> <p>Sum of high-danger goals allowed, e.g., 0</p> <code>xgf</code> <code>float</code> <p>Sum of expected goals generated, e.g., 0.957070</p> <code>xgf_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted expected goals generated, e.g., 0.883376</p> <code>xga</code> <code>float</code> <p>Sum of expected goals allowed, e.g., 0.535971</p> <code>xga_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted expected goals allowed, e.g., 0.584744</p> <code>sf</code> <code>float</code> <p>Sum of shots taken, e.g., 10</p> <code>sf_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted shots taken, e.g., 8.620</p> <code>hdsf</code> <code>float</code> <p>Sum of high-danger shots taken, e.g., 2</p> <code>sa</code> <code>float</code> <p>Sum of shots allowed, e.g., 4</p> <code>sa_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted shots allowed, e.g., 4.764</p> <code>hdsa</code> <code>float</code> <p>Sum of high-danger shots allowed, e.g., 0</p> <code>ff</code> <code>float</code> <p>Sum of fenwick events generated, e.g., 14</p> <code>ff_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted fenwick events generated, e.g., 12.026</p> <code>hdff</code> <code>float</code> <p>Sum of high-danger fenwick events generated, e.g., 2</p> <code>fa</code> <code>float</code> <p>Sum of fenwick events allowed, e.g., 8</p> <code>fa_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted fenwick events allowed, e.g., 9.576</p> <code>hdfa</code> <code>float</code> <p>Sum of high-danger fenwick events allowed, e.g., 1</p> <code>cf</code> <code>float</code> <p>Sum of corsi events generated, e.g., 16</p> <code>cf_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted corsi events generated, e.g., 13.488</p> <code>ca</code> <code>float</code> <p>Sum of corsi events allowed, e.g., 12.0</p> <code>ca_adj</code> <code>float</code> <p>Sum of venue- and score-adjusted corsi events allowed, e.g., 14.760</p> <code>bsf</code> <code>float</code> <p>Sum of shots taken that were ultimately blocked, e.g., 4</p> <code>bsa</code> <code>float</code> <p>Sum of shots allowed that were ultimately blocked, e.g., 2</p> <code>msf</code> <code>float</code> <p>Sum of shots taken that missed net, e.g., 4</p> <code>hdmsf</code> <code>float</code> <p>Sum of high-danger shots taken that missed net, e.g., 0</p> <code>msa</code> <code>float</code> <p>Sum of shots allowed that missed net, e.g., 4</p> <code>hdmsa</code> <code>float</code> <p>Sum of high-danger shots allowed that missed net, e.g., 1</p> <code>ozf</code> <code>float</code> <p>Sum of offensive zone faceoffs that occur, e.g., 6</p> <code>nzf</code> <code>float</code> <p>Sum of neutral zone faceoffs that occur, e.g., 4</p> <code>dzf</code> <code>float</code> <p>Sum of defensive zone faceoffs that occur, e.g., 6</p> <code>fow</code> <code>float</code> <p>Sum of faceoffs won, e.g., 8</p> <code>fol</code> <code>float</code> <p>Sum of faceoffs lost, e.g., 11</p> <code>ozfw</code> <code>float</code> <p>Sum of offensive zone faceoffs won, e.g., 3</p> <code>ozfl</code> <code>float</code> <p>Sum of offensive zone faceoffs lost, e.g., 1</p> <code>nzfw</code> <code>float</code> <p>Sum of neutral zone faceoffs won, e.g., 2</p> <code>nzfl</code> <code>float</code> <p>Sum of neutral zone faceoffs lost, e.g., 3</p> <code>dzfw</code> <code>float</code> <p>Sum of defensive zone faceoffs won, e.g., 3</p> <code>dzfl</code> <code>float</code> <p>Sum of defensive zone faceoffs lost, e.g., 7</p> <code>hf</code> <code>float</code> <p>Sum of hits dished out, e.g., 7</p> <code>ht</code> <code>float</code> <p>Sum of hits taken, e.g., 5</p> <code>give</code> <code>float</code> <p>Sum of giveaways, e.g., 5</p> <code>take</code> <code>float</code> <p>Sum of takeaways, e.g., 1</p> <code>pent0</code> <code>float</code> <p>Sum of individual 0-minute penalties taken, e.g., 0</p> <code>pent2</code> <code>float</code> <p>Sum of individual 2-minute penalties taken, e.g., 0</p> <code>pent4</code> <code>float</code> <p>Sum of individual 4-minute penalties taken, e.g., 0</p> <code>pent5</code> <code>float</code> <p>Sum of individual 5-minute penalties taken, e.g., 0</p> <code>pent10</code> <code>float</code> <p>Sum of individual 10-minute penalties taken, e.g., 0</p> <code>pend0</code> <code>float</code> <p>Sum of individual 0-minute penalties drawn, e.g., 0</p> <code>pend2</code> <code>float</code> <p>Sum of individual 2-minute penalties drawn, e.g., 0</p> <code>pend4</code> <code>float</code> <p>Sum of individual 4-minute penalties drawn, e.g., 0</p> <code>pend5</code> <code>float</code> <p>Sum of individual 5-minute penalties drawn, e.g., 0</p> <code>pend10</code> <code>float</code> <p>Sum of individual 10-minute penalties drawn, e.g., 0</p> <p>Examples:</p> <p>Basic play-by-play DataFrame</p> <pre><code>&gt;&gt;&gt; shifts_raw = pd.read_csv(\"./raw_shifts.csv\")\n&gt;&gt;&gt; pbp_raw = pd.read_csv(\"./raw_pbp.csv\")\n&gt;&gt;&gt; pbp = prep_pbp(pbp_raw, shifts_raw)\n</code></pre> <p>Basic game-level stats for teams</p> <pre><code>&gt;&gt;&gt; team = prep_team(pbp)\n</code></pre> <p>Period-level team stats, grouped by score state</p> <pre><code>&gt;&gt;&gt; team = prep_team(pbp, level=\"period\", score=True)\n</code></pre> Source code in <code>src/chickenstats/evolving_hockey/stats.py</code> <pre><code>def prep_team(\n    pbp: pd.DataFrame,\n    level: Literal[\"period\", \"game\", \"session\", \"season\"] = \"game\",\n    strengths: bool = True,\n    score: bool = False,\n    disable_progress_bar: bool = False,\n) -&gt; pd.DataFrame:\n    \"\"\"Prepares a team stats dataframe using Evolving Hockey data.\n\n    Aggregates to desired level. Capable of returning cuts that account for strength state,\n    period, and score state. Returns a Pandas DataFrame.\n\n    Parameters:\n        pbp (pd.DataFrame):\n            Dataframe from the prep_pbp function with the default columns argument\n        level (str):\n            Level to aggregate stats, e.g., 'game'\n        strengths (bool):\n            Whether to aggregate to strength state level, e.g., True\n        score (bool):\n            Whether to aggregate to score state level\n        disable_progress_bar (bool):\n            Whether to disable progress bar\n\n    Returns:\n        season (int):\n            8-digit season code, e.g., 20232024\n        session (str):\n            Regular season or playoffs, e.g., R\n        game_id (int):\n            10-digit game identifier, e.g., 2023020044\n        game_date (str):\n            Date of game in Eastern time-zone, e.g., 2023-10-17\n        team (str):\n            3-letter abbreviation of the team, e.g., NSH\n        opp_team (str):\n            3-letter abbreviation of the opposing team, e.g., EDM\n        strength_state (str):\n            Strength state from the perspective of the event team, e.g., 5v5\n        score_state (str):\n            Score state from the perspective of the event team, e.g., 1v6\n        game_period (int):\n            Game period, e.g., 3\n        toi (float):\n            Time on-ice in minutes, e.g., 18\n        gf (float):\n            Sum of goals scored, e.g., 0\n        gf_adj (float):\n            Sum of venue- and score-adjusted goals scored, e.g., 0\n        hdgf (float):\n            Sum of high-danger goals scored, e.g., 0\n        ga (float):\n            Sum of goals allowed, e.g., 0\n        ga_adj (float):\n            Sum of venue- and score-adjusted goals allowed, e.g., 0\n        hdga (float):\n            Sum of high-danger goals allowed, e.g., 0\n        xgf (float):\n            Sum of expected goals generated, e.g., 0.957070\n        xgf_adj (float):\n            Sum of venue- and score-adjusted expected goals generated, e.g., 0.883376\n        xga (float):\n            Sum of expected goals allowed, e.g., 0.535971\n        xga_adj (float):\n            Sum of venue- and score-adjusted expected goals allowed, e.g., 0.584744\n        sf (float):\n            Sum of shots taken, e.g., 10\n        sf_adj (float):\n            Sum of venue- and score-adjusted shots taken, e.g., 8.620\n        hdsf (float):\n            Sum of high-danger shots taken, e.g., 2\n        sa (float):\n            Sum of shots allowed, e.g., 4\n        sa_adj (float):\n            Sum of venue- and score-adjusted shots allowed, e.g., 4.764\n        hdsa (float):\n            Sum of high-danger shots allowed, e.g., 0\n        ff (float):\n            Sum of fenwick events generated, e.g., 14\n        ff_adj (float):\n            Sum of venue- and score-adjusted fenwick events generated, e.g., 12.026\n        hdff (float):\n            Sum of high-danger fenwick events generated, e.g., 2\n        fa (float):\n            Sum of fenwick events allowed, e.g., 8\n        fa_adj (float):\n            Sum of venue- and score-adjusted fenwick events allowed, e.g., 9.576\n        hdfa (float):\n            Sum of high-danger fenwick events allowed, e.g., 1\n        cf (float):\n            Sum of corsi events generated, e.g., 16\n        cf_adj (float):\n            Sum of venue- and score-adjusted corsi events generated, e.g., 13.488\n        ca (float):\n            Sum of corsi events allowed, e.g., 12.0\n        ca_adj (float):\n            Sum of venue- and score-adjusted corsi events allowed, e.g., 14.760\n        bsf (float):\n            Sum of shots taken that were ultimately blocked, e.g., 4\n        bsa (float):\n            Sum of shots allowed that were ultimately blocked, e.g., 2\n        msf (float):\n            Sum of shots taken that missed net, e.g., 4\n        hdmsf (float):\n            Sum of high-danger shots taken that missed net, e.g., 0\n        msa (float):\n            Sum of shots allowed that missed net, e.g., 4\n        hdmsa (float):\n            Sum of high-danger shots allowed that missed net, e.g., 1\n        ozf (float):\n            Sum of offensive zone faceoffs that occur, e.g., 6\n        nzf (float):\n            Sum of neutral zone faceoffs that occur, e.g., 4\n        dzf (float):\n            Sum of defensive zone faceoffs that occur, e.g., 6\n        fow (float):\n            Sum of faceoffs won, e.g., 8\n        fol (float):\n            Sum of faceoffs lost, e.g., 11\n        ozfw (float):\n            Sum of offensive zone faceoffs won, e.g., 3\n        ozfl (float):\n            Sum of offensive zone faceoffs lost, e.g., 1\n        nzfw (float):\n            Sum of neutral zone faceoffs won, e.g., 2\n        nzfl (float):\n            Sum of neutral zone faceoffs lost, e.g., 3\n        dzfw (float):\n            Sum of defensive zone faceoffs won, e.g., 3\n        dzfl (float):\n            Sum of defensive zone faceoffs lost, e.g., 7\n        hf (float):\n            Sum of hits dished out, e.g., 7\n        ht (float):\n            Sum of hits taken, e.g., 5\n        give (float):\n            Sum of giveaways, e.g., 5\n        take (float):\n            Sum of takeaways, e.g., 1\n        pent0 (float):\n            Sum of individual 0-minute penalties taken, e.g., 0\n        pent2 (float):\n            Sum of individual 2-minute penalties taken, e.g., 0\n        pent4 (float):\n            Sum of individual 4-minute penalties taken, e.g., 0\n        pent5 (float):\n            Sum of individual 5-minute penalties taken, e.g., 0\n        pent10 (float):\n            Sum of individual 10-minute penalties taken, e.g., 0\n        pend0 (float):\n            Sum of individual 0-minute penalties drawn, e.g., 0\n        pend2 (float):\n            Sum of individual 2-minute penalties drawn, e.g., 0\n        pend4 (float):\n            Sum of individual 4-minute penalties drawn, e.g., 0\n        pend5 (float):\n            Sum of individual 5-minute penalties drawn, e.g., 0\n        pend10 (float):\n            Sum of individual 10-minute penalties drawn, e.g., 0\n\n    Examples:\n        Basic play-by-play DataFrame\n        &gt;&gt;&gt; shifts_raw = pd.read_csv(\"./raw_shifts.csv\")\n        &gt;&gt;&gt; pbp_raw = pd.read_csv(\"./raw_pbp.csv\")\n        &gt;&gt;&gt; pbp = prep_pbp(pbp_raw, shifts_raw)\n\n        Basic game-level stats for teams\n        &gt;&gt;&gt; team = prep_team(pbp)\n\n        Period-level team stats, grouped by score state\n        &gt;&gt;&gt; team = prep_team(pbp, level=\"period\", score=True)\n    \"\"\"\n    with ChickenProgress(disable=disable_progress_bar) as progress:\n        pbar_message = \"Prepping team data...\"\n\n        team_task = progress.add_task(pbar_message, total=1)\n\n        # Getting the \"for\" stats\n\n        group_list = [\"season\", \"session\", \"event_team\"]\n\n        if strengths is True:\n            group_list.append(\"strength_state\")\n\n        if level == \"game\" or level == \"period\":\n            group_list.insert(3, \"opp_team\")\n\n            group_list[2:2] = [\"game_id\", \"game_date\"]\n\n        if level == \"period\":\n            group_list.append(\"game_period\")\n\n        if score is True:\n            group_list.append(\"score_state\")\n\n        agg_stats = [\n            \"pred_goal\",\n            \"pred_goal_adj\",\n            \"shot\",\n            \"shot_adj\",\n            \"miss\",\n            \"block\",\n            \"corsi\",\n            \"corsi_adj\",\n            \"fenwick\",\n            \"fenwick_adj\",\n            \"goal\",\n            \"goal_adj\",\n            \"give\",\n            \"take\",\n            \"hd_goal\",\n            \"hd_shot\",\n            \"hd_fenwick\",\n            \"hd_miss\",\n            \"hit\",\n            \"pen0\",\n            \"pen2\",\n            \"pen4\",\n            \"pen5\",\n            \"pen10\",\n            \"fac\",\n            \"ozf\",\n            \"nzf\",\n            \"dzf\",\n            \"event_length\",\n        ]\n\n        agg_dict = {x: \"sum\" for x in agg_stats if x in pbp.columns}\n\n        new_cols = [\n            \"xgf\",\n            \"xgf_adj\",\n            \"sf\",\n            \"sf_adj\",\n            \"msf\",\n            \"bsa\",\n            \"cf\",\n            \"cf_adj\",\n            \"ff\",\n            \"ff_adj\",\n            \"gf\",\n            \"gf_adj\",\n            \"give\",\n            \"take\",\n            \"hdgf\",\n            \"hdsf\",\n            \"hdff\",\n            \"hdmsf\",\n            \"hf\",\n            \"pent0\",\n            \"pent2\",\n            \"pent4\",\n            \"pent5\",\n            \"pent10\",\n            \"fow\",\n            \"ozfw\",\n            \"nzfw\",\n            \"dzfw\",\n            \"toi\",\n        ]\n\n        new_cols = dict(zip(agg_stats, new_cols, strict=False))\n\n        new_cols.update({\"event_team\": \"team\"})\n\n        stats_for = pbp.groupby(group_list, as_index=False).agg(agg_dict).rename(columns=new_cols)\n\n        # Getting the \"against\" stats\n\n        group_list = [\"season\", \"session\", \"opp_team\"]\n\n        if strengths is True:\n            group_list.append(\"opp_strength_state\")\n\n        if level == \"game\" or level == \"period\":\n            group_list.insert(3, \"event_team\")\n\n            group_list[2:2] = [\"game_id\", \"game_date\"]\n\n        if level == \"period\":\n            group_list.append(\"game_period\")\n\n        if score is True:\n            group_list.append(\"opp_score_state\")\n\n        agg_stats = [\n            \"pred_goal\",\n            \"pred_goal_adj\",\n            \"shot\",\n            \"shot_adj\",\n            \"miss\",\n            \"block\",\n            \"corsi\",\n            \"corsi_adj\",\n            \"fenwick\",\n            \"fenwick_adj\",\n            \"goal\",\n            \"goal_adj\",\n            \"hd_goal\",\n            \"hd_shot\",\n            \"hd_fenwick\",\n            \"hd_miss\",\n            \"hit\",\n            \"pen0\",\n            \"pen2\",\n            \"pen4\",\n            \"pen5\",\n            \"pen10\",\n            \"fac\",\n            \"ozf\",\n            \"nzf\",\n            \"dzf\",\n            \"event_length\",\n        ]\n\n        agg_dict = {x: \"sum\" for x in agg_stats if x in pbp.columns}\n\n        new_cols = [\n            \"xga\",\n            \"xga_adj\",\n            \"sa\",\n            \"sa_adj\",\n            \"msa\",\n            \"bsf\",\n            \"ca\",\n            \"ca_adj\",\n            \"fa\",\n            \"fa_adj\",\n            \"ga\",\n            \"ga_adj\",\n            \"hdga\",\n            \"hdsa\",\n            \"hdfa\",\n            \"hdmsa\",\n            \"ht\",\n            \"pend0\",\n            \"pend2\",\n            \"pend4\",\n            \"pend5\",\n            \"pend10\",\n            \"fol\",\n            \"ozfl\",\n            \"nzfl\",\n            \"dzfl\",\n            \"toi\",\n        ]\n\n        new_cols = dict(zip(agg_stats, new_cols, strict=False))\n\n        new_cols.update(\n            {\n                \"opp_team\": \"team\",\n                \"opp_score_state\": \"score_state\",\n                \"opp_strength_state\": \"strength_state\",\n                \"event_team\": \"opp_team\",\n            }\n        )\n\n        stats_against = pbp.groupby(group_list, as_index=False).agg(agg_dict).rename(columns=new_cols)\n\n        merge_list = [\n            \"season\",\n            \"session\",\n            \"game_id\",\n            \"game_date\",\n            \"team\",\n            \"opp_team\",\n            \"strength_state\",\n            \"score_state\",\n            \"game_period\",\n        ]\n\n        merge_list = [x for x in merge_list if x in stats_for.columns and x in stats_against.columns]\n\n        team_stats = stats_for.merge(stats_against, on=merge_list, how=\"outer\")\n\n        team_stats[\"toi\"] = (team_stats.toi_x + team_stats.toi_y) / 60\n\n        team_stats = team_stats.drop([\"toi_x\", \"toi_y\"], axis=1)\n\n        fos = [\"ozf\", \"nzf\", \"dzf\"]\n\n        for fo in fos:\n            team_stats[fo] = team_stats[f\"{fo}w\"] + team_stats[f\"{fo}w\"]\n\n        team_stats = team_stats.dropna(subset=\"toi\").reset_index(drop=True)\n\n        cols = [x for x in TeamStatSchema.dtypes if x in team_stats.columns]\n\n        team_stats = TeamStatSchema.validate(team_stats[cols])\n\n        pbar_message = \"Finished prepping team data\"\n\n        progress.update(team_task, description=pbar_message, advance=1, refresh=True)\n\n    return team_stats\n</code></pre>"},{"location":"reference/fancy_stats/high_danger/","title":"Danger and high-danger chances","text":""},{"location":"reference/fancy_stats/score_adjustments/","title":"Score and venue adjustments","text":"<p>One of the more interesting parts about hockey is that the losing team gets the puck more frequently - a team with a lead plays more defensively, while teams who are trailing will press more offensively, generating an outsize number of changes.<sup>1</sup> The dynamic differs whether the team is at home or on the road, with the home team generating chances at a higher rate whether leading or trailing.<sup>2</sup> <sup>3</sup> The methodology for the score and venue adjustments included with <code>chickenstats</code> is employed by both  Evolving-Hockey and HockeyViz, which is itself an improvement on an earlier methodology  proposed by Eric Tulsky, who is now the GM of the Carolina Hurricanes.</p>"},{"location":"reference/fancy_stats/score_adjustments/#score-and-venue-impacts-offense","title":"Score and venue impacts offense","text":""},{"location":"reference/fancy_stats/score_adjustments/#methodology-for-adjustments","title":"Methodology for adjustments","text":""},{"location":"reference/fancy_stats/score_adjustments/#adjustment-coefficients","title":"Adjustment coefficients","text":"<ol> <li> <p>See, e.g., Evolving-Hockey (glossary on score / venue effects / adjustments), Hockey Viz (more on Micah's methodology below), Yahoo Sports. It's possible that the chances generated by the losing team, although higher volume, are of generally lower quality, but that requires further research\u00a0\u21a9</p> </li> <li> <p>Again, see, e.g., Evolving-Hockey (glossary on score / venue effects / adjustments), HockeyViz (more on Micah's methodology below), Yahoo Sports.\u00a0\u21a9</p> </li> <li> <p>I vividly remember the twins at EH writing that teams' scorekeepers generally overstate scoring chance  quality when at home (i.e., chart the puck closer to the net, on average), however I can't find this on the site anywhere. It would be very tempting to recreate the research...\u00a0\u21a9</p> </li> </ol>"},{"location":"xg_model/overview/","title":"Coming soon","text":"<p>In production</p>"},{"location":"xg_model/xg_model/","title":"xG Model","text":"<p><code>chickenstats.chicken_nhl</code> includes an Expected Goals (xG) model, which is based off of the prior work of Josh &amp; Luke Younggren of Evolving-Hockey.</p> <p>The model is an XGBoost classifier, with 38 fields, including distance from net, time since last event, shot angle, number of players on ice, and whether the shot event comes from a high danger scoring area.</p>"},{"location":"xg_model/xg_model/#usage","title":"Usage","text":"<p>The xg model is available out-of-the-box with <code>chickenstats.chicken_nhl.Scraper</code> and <code>chickenstats.chicken_nhl.Game</code>. xG values are accessed with the pred_goal column in the play-by-play data, or the ixg, xgf, and xga columns in the individual, on-ice, line, and team stats data.</p> <pre><code>from chickenstats.chicken_nhl import Scraper\n\ngame_id = 2023020001\n\nscraper = Scraper(game_id)\nplay_by_play = scraper.play_by_play\n\npbp_xg_values = play_by_play.pred_goal\nindividual_xg = scraper.stats.ixg\n</code></pre>"},{"location":"xg_model/xg_model/#model-performance","title":"Model performance","text":"<p>Information on performance metrics, including AUC-ROC, log-loss, precision, recall, etc</p>"},{"location":"xg_model/xg_model/#features-and-feature-performance","title":"Features and feature performance","text":"<p>Information on model features (e.g., high-danger, distance from net, angle) and contribution to  model / model performance</p>"},{"location":"xg_model/xg_model/#data-and-data-preparation","title":"Data and data preparation","text":"<p>Information on how the model was constructed, including code snippets</p>"},{"location":"blog/archive/2024/","title":"2024","text":""}]}